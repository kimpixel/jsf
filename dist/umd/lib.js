
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var Foo = (function (exports, React, ReactDOM) {
    'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
    var React__namespace = /*#__PURE__*/_interopNamespace(React);
    var ReactDOM__namespace = /*#__PURE__*/_interopNamespace(ReactDOM);
    var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    /** Detect free variable `global` from Node.js. */

    var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    var _freeGlobal = freeGlobal$1;

    var freeGlobal = _freeGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root$d = freeGlobal || freeSelf || Function('return this')();

    var _root = root$d;

    var root$c = _root;

    /** Built-in value references. */
    var Symbol$7 = root$c.Symbol;

    var _Symbol = Symbol$7;

    var Symbol$6 = _Symbol;

    /** Used for built-in method references. */
    var objectProto$j = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$i = objectProto$j.hasOwnProperty;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString$1 = objectProto$j.toString;

    /** Built-in value references. */
    var symToStringTag$1 = Symbol$6 ? Symbol$6.toStringTag : undefined;

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag$1(value) {
      var isOwn = hasOwnProperty$i.call(value, symToStringTag$1),
          tag = value[symToStringTag$1];

      try {
        value[symToStringTag$1] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString$1.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag$1] = tag;
        } else {
          delete value[symToStringTag$1];
        }
      }
      return result;
    }

    var _getRawTag = getRawTag$1;

    /** Used for built-in method references. */

    var objectProto$i = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto$i.toString;

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString$1(value) {
      return nativeObjectToString.call(value);
    }

    var _objectToString = objectToString$1;

    var Symbol$5 = _Symbol,
        getRawTag = _getRawTag,
        objectToString = _objectToString;

    /** `Object#toString` result references. */
    var nullTag = '[object Null]',
        undefinedTag = '[object Undefined]';

    /** Built-in value references. */
    var symToStringTag = Symbol$5 ? Symbol$5.toStringTag : undefined;

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag$8(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    var _baseGetTag = baseGetTag$8;

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */

    function isObjectLike$d(value) {
      return value != null && typeof value == 'object';
    }

    var isObjectLike_1 = isObjectLike$d;

    var baseGetTag$7 = _baseGetTag,
        isObjectLike$c = isObjectLike_1;

    /** `Object#toString` result references. */
    var symbolTag$3 = '[object Symbol]';

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol$6(value) {
      return typeof value == 'symbol' ||
        (isObjectLike$c(value) && baseGetTag$7(value) == symbolTag$3);
    }

    var isSymbol_1 = isSymbol$6;

    var isSymbol$5 = isSymbol_1;

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum$1(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol$5(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    var _baseExtremum = baseExtremum$1;

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */

    function baseGt$1(value, other) {
      return value > other;
    }

    var _baseGt = baseGt$1;

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */

    function listCacheClear$1() {
      this.__data__ = [];
      this.size = 0;
    }

    var _listCacheClear = listCacheClear$1;

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */

    function eq$5(value, other) {
      return value === other || (value !== value && other !== other);
    }

    var eq_1 = eq$5;

    var eq$4 = eq_1;

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf$4(array, key) {
      var length = array.length;
      while (length--) {
        if (eq$4(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    var _assocIndexOf = assocIndexOf$4;

    var assocIndexOf$3 = _assocIndexOf;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype;

    /** Built-in value references. */
    var splice = arrayProto.splice;

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete$1(key) {
      var data = this.__data__,
          index = assocIndexOf$3(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    var _listCacheDelete = listCacheDelete$1;

    var assocIndexOf$2 = _assocIndexOf;

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet$1(key) {
      var data = this.__data__,
          index = assocIndexOf$2(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    var _listCacheGet = listCacheGet$1;

    var assocIndexOf$1 = _assocIndexOf;

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas$1(key) {
      return assocIndexOf$1(this.__data__, key) > -1;
    }

    var _listCacheHas = listCacheHas$1;

    var assocIndexOf = _assocIndexOf;

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet$1(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    var _listCacheSet = listCacheSet$1;

    var listCacheClear = _listCacheClear,
        listCacheDelete = _listCacheDelete,
        listCacheGet = _listCacheGet,
        listCacheHas = _listCacheHas,
        listCacheSet = _listCacheSet;

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache$4(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `ListCache`.
    ListCache$4.prototype.clear = listCacheClear;
    ListCache$4.prototype['delete'] = listCacheDelete;
    ListCache$4.prototype.get = listCacheGet;
    ListCache$4.prototype.has = listCacheHas;
    ListCache$4.prototype.set = listCacheSet;

    var _ListCache = ListCache$4;

    var ListCache$3 = _ListCache;

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear$1() {
      this.__data__ = new ListCache$3;
      this.size = 0;
    }

    var _stackClear = stackClear$1;

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

    function stackDelete$1(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    var _stackDelete = stackDelete$1;

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */

    function stackGet$1(key) {
      return this.__data__.get(key);
    }

    var _stackGet = stackGet$1;

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

    function stackHas$1(key) {
      return this.__data__.has(key);
    }

    var _stackHas = stackHas$1;

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */

    function isObject$d(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    var isObject_1 = isObject$d;

    var baseGetTag$6 = _baseGetTag,
        isObject$c = isObject_1;

    /** `Object#toString` result references. */
    var asyncTag = '[object AsyncFunction]',
        funcTag$2 = '[object Function]',
        genTag$1 = '[object GeneratorFunction]',
        proxyTag = '[object Proxy]';

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction$3(value) {
      if (!isObject$c(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag$6(value);
      return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
    }

    var isFunction_1 = isFunction$3;

    var root$b = _root;

    /** Used to detect overreaching core-js shims. */
    var coreJsData$1 = root$b['__core-js_shared__'];

    var _coreJsData = coreJsData$1;

    var coreJsData = _coreJsData;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked$1(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    var _isMasked = isMasked$1;

    /** Used for built-in method references. */

    var funcProto$2 = Function.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString$2 = funcProto$2.toString;

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource$2(func) {
      if (func != null) {
        try {
          return funcToString$2.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    var _toSource = toSource$2;

    var isFunction$2 = isFunction_1,
        isMasked = _isMasked,
        isObject$b = isObject_1,
        toSource$1 = _toSource;

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used for built-in method references. */
    var funcProto$1 = Function.prototype,
        objectProto$h = Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString$1 = funcProto$1.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty$h = objectProto$h.hasOwnProperty;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString$1.call(hasOwnProperty$h).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative$1(value) {
      if (!isObject$b(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource$1(value));
    }

    var _baseIsNative = baseIsNative$1;

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */

    function getValue$2(object, key) {
      return object == null ? undefined : object[key];
    }

    var _getValue = getValue$2;

    var baseIsNative = _baseIsNative,
        getValue$1 = _getValue;

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative$7(object, key) {
      var value = getValue$1(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    var _getNative = getNative$7;

    var getNative$6 = _getNative,
        root$a = _root;

    /* Built-in method references that are verified to be native. */
    var Map$4 = getNative$6(root$a, 'Map');

    var _Map = Map$4;

    var getNative$5 = _getNative;

    /* Built-in method references that are verified to be native. */
    var nativeCreate$4 = getNative$5(Object, 'create');

    var _nativeCreate = nativeCreate$4;

    var nativeCreate$3 = _nativeCreate;

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear$1() {
      this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
      this.size = 0;
    }

    var _hashClear = hashClear$1;

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

    function hashDelete$1(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    var _hashDelete = hashDelete$1;

    var nativeCreate$2 = _nativeCreate;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

    /** Used for built-in method references. */
    var objectProto$g = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$g = objectProto$g.hasOwnProperty;

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet$1(key) {
      var data = this.__data__;
      if (nativeCreate$2) {
        var result = data[key];
        return result === HASH_UNDEFINED$2 ? undefined : result;
      }
      return hasOwnProperty$g.call(data, key) ? data[key] : undefined;
    }

    var _hashGet = hashGet$1;

    var nativeCreate$1 = _nativeCreate;

    /** Used for built-in method references. */
    var objectProto$f = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$f = objectProto$f.hasOwnProperty;

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas$1(key) {
      var data = this.__data__;
      return nativeCreate$1 ? (data[key] !== undefined) : hasOwnProperty$f.call(data, key);
    }

    var _hashHas = hashHas$1;

    var nativeCreate = _nativeCreate;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet$1(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
      return this;
    }

    var _hashSet = hashSet$1;

    var hashClear = _hashClear,
        hashDelete = _hashDelete,
        hashGet = _hashGet,
        hashHas = _hashHas,
        hashSet = _hashSet;

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash$1(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `Hash`.
    Hash$1.prototype.clear = hashClear;
    Hash$1.prototype['delete'] = hashDelete;
    Hash$1.prototype.get = hashGet;
    Hash$1.prototype.has = hashHas;
    Hash$1.prototype.set = hashSet;

    var _Hash = Hash$1;

    var Hash = _Hash,
        ListCache$2 = _ListCache,
        Map$3 = _Map;

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear$1() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map$3 || ListCache$2),
        'string': new Hash
      };
    }

    var _mapCacheClear = mapCacheClear$1;

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */

    function isKeyable$1(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    var _isKeyable = isKeyable$1;

    var isKeyable = _isKeyable;

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData$4(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    var _getMapData = getMapData$4;

    var getMapData$3 = _getMapData;

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete$1(key) {
      var result = getMapData$3(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    var _mapCacheDelete = mapCacheDelete$1;

    var getMapData$2 = _getMapData;

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet$1(key) {
      return getMapData$2(this, key).get(key);
    }

    var _mapCacheGet = mapCacheGet$1;

    var getMapData$1 = _getMapData;

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas$1(key) {
      return getMapData$1(this, key).has(key);
    }

    var _mapCacheHas = mapCacheHas$1;

    var getMapData = _getMapData;

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet$1(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    var _mapCacheSet = mapCacheSet$1;

    var mapCacheClear = _mapCacheClear,
        mapCacheDelete = _mapCacheDelete,
        mapCacheGet = _mapCacheGet,
        mapCacheHas = _mapCacheHas,
        mapCacheSet = _mapCacheSet;

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache$3(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `MapCache`.
    MapCache$3.prototype.clear = mapCacheClear;
    MapCache$3.prototype['delete'] = mapCacheDelete;
    MapCache$3.prototype.get = mapCacheGet;
    MapCache$3.prototype.has = mapCacheHas;
    MapCache$3.prototype.set = mapCacheSet;

    var _MapCache = MapCache$3;

    var ListCache$1 = _ListCache,
        Map$2 = _Map,
        MapCache$2 = _MapCache;

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE$1 = 200;

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet$1(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache$1) {
        var pairs = data.__data__;
        if (!Map$2 || (pairs.length < LARGE_ARRAY_SIZE$1 - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache$2(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    var _stackSet = stackSet$1;

    var ListCache = _ListCache,
        stackClear = _stackClear,
        stackDelete = _stackDelete,
        stackGet = _stackGet,
        stackHas = _stackHas,
        stackSet = _stackSet;

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack$4(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    // Add methods to `Stack`.
    Stack$4.prototype.clear = stackClear;
    Stack$4.prototype['delete'] = stackDelete;
    Stack$4.prototype.get = stackGet;
    Stack$4.prototype.has = stackHas;
    Stack$4.prototype.set = stackSet;

    var _Stack = Stack$4;

    /** Used to stand-in for `undefined` hash values. */

    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd$1(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    var _setCacheAdd = setCacheAdd$1;

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */

    function setCacheHas$1(value) {
      return this.__data__.has(value);
    }

    var _setCacheHas = setCacheHas$1;

    var MapCache$1 = _MapCache,
        setCacheAdd = _setCacheAdd,
        setCacheHas = _setCacheHas;

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache$2(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache$1;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    // Add methods to `SetCache`.
    SetCache$2.prototype.add = SetCache$2.prototype.push = setCacheAdd;
    SetCache$2.prototype.has = setCacheHas;

    var _SetCache = SetCache$2;

    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */

    function arraySome$1(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    var _arraySome = arraySome$1;

    /**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

    function cacheHas$2(cache, key) {
      return cache.has(key);
    }

    var _cacheHas = cacheHas$2;

    var SetCache$1 = _SetCache,
        arraySome = _arraySome,
        cacheHas$1 = _cacheHas;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$5 = 1,
        COMPARE_UNORDERED_FLAG$3 = 2;

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG$3) ? new SetCache$1 : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas$1(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    var _equalArrays = equalArrays$2;

    var root$9 = _root;

    /** Built-in value references. */
    var Uint8Array$2 = root$9.Uint8Array;

    var _Uint8Array = Uint8Array$2;

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */

    function mapToArray$2(map) {
      var index = -1,
          result = Array(map.size);

      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    var _mapToArray = mapToArray$2;

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */

    function setToArray$3(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }

    var _setToArray = setToArray$3;

    var Symbol$4 = _Symbol,
        Uint8Array$1 = _Uint8Array,
        eq$3 = eq_1,
        equalArrays$1 = _equalArrays,
        mapToArray$1 = _mapToArray,
        setToArray$2 = _setToArray;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$4 = 1,
        COMPARE_UNORDERED_FLAG$2 = 2;

    /** `Object#toString` result references. */
    var boolTag$3 = '[object Boolean]',
        dateTag$3 = '[object Date]',
        errorTag$3 = '[object Error]',
        mapTag$7 = '[object Map]',
        numberTag$3 = '[object Number]',
        regexpTag$3 = '[object RegExp]',
        setTag$7 = '[object Set]',
        stringTag$4 = '[object String]',
        symbolTag$2 = '[object Symbol]';

    var arrayBufferTag$3 = '[object ArrayBuffer]',
        dataViewTag$4 = '[object DataView]';

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$2 = Symbol$4 ? Symbol$4.prototype : undefined,
        symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag$4:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag$3:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {
            return false;
          }
          return true;

        case boolTag$3:
        case dateTag$3:
        case numberTag$3:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq$3(+object, +other);

        case errorTag$3:
          return object.name == other.name && object.message == other.message;

        case regexpTag$3:
        case stringTag$4:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag$7:
          var convert = mapToArray$1;

        case setTag$7:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
          convert || (convert = setToArray$2);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG$2;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag$2:
          if (symbolValueOf$1) {
            return symbolValueOf$1.call(object) == symbolValueOf$1.call(other);
          }
      }
      return false;
    }

    var _equalByTag = equalByTag$1;

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */

    function arrayPush$3(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    var _arrayPush = arrayPush$3;

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */

    var isArray$i = Array.isArray;

    var isArray_1 = isArray$i;

    var arrayPush$2 = _arrayPush,
        isArray$h = isArray_1;

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray$h(object) ? result : arrayPush$2(result, symbolsFunc(object));
    }

    var _baseGetAllKeys = baseGetAllKeys$2;

    /**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */

    function arrayFilter$2(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    var _arrayFilter = arrayFilter$2;

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */

    function stubArray$2() {
      return [];
    }

    var stubArray_1 = stubArray$2;

    var arrayFilter$1 = _arrayFilter,
        stubArray$1 = stubArray_1;

    /** Used for built-in method references. */
    var objectProto$e = Object.prototype;

    /** Built-in value references. */
    var propertyIsEnumerable$1 = objectProto$e.propertyIsEnumerable;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter$1(nativeGetSymbols$1(object), function(symbol) {
        return propertyIsEnumerable$1.call(object, symbol);
      });
    };

    var _getSymbols = getSymbols$3;

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */

    function baseTimes$1(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }

    var _baseTimes = baseTimes$1;

    var baseGetTag$5 = _baseGetTag,
        isObjectLike$b = isObjectLike_1;

    /** `Object#toString` result references. */
    var argsTag$3 = '[object Arguments]';

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments$1(value) {
      return isObjectLike$b(value) && baseGetTag$5(value) == argsTag$3;
    }

    var _baseIsArguments = baseIsArguments$1;

    var baseIsArguments = _baseIsArguments,
        isObjectLike$a = isObjectLike_1;

    /** Used for built-in method references. */
    var objectProto$d = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$e = objectProto$d.hasOwnProperty;

    /** Built-in value references. */
    var propertyIsEnumerable = objectProto$d.propertyIsEnumerable;

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments$5 = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike$a(value) && hasOwnProperty$e.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    var isArguments_1 = isArguments$5;

    var isBuffer$5 = {exports: {}};

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */

    function stubFalse() {
      return false;
    }

    var stubFalse_1 = stubFalse;

    (function (module, exports) {
    var root = _root,
        stubFalse = stubFalse_1;

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Built-in value references. */
    var Buffer = moduleExports ? root.Buffer : undefined;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    module.exports = isBuffer;
    }(isBuffer$5, isBuffer$5.exports));

    /** Used as references for various `Number` constants. */

    var MAX_SAFE_INTEGER$1 = 9007199254740991;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex$5(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER$1 : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    var _isIndex = isIndex$5;

    /** Used as references for various `Number` constants. */

    var MAX_SAFE_INTEGER = 9007199254740991;

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength$3(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    var isLength_1 = isLength$3;

    var baseGetTag$4 = _baseGetTag,
        isLength$2 = isLength_1,
        isObjectLike$9 = isObjectLike_1;

    /** `Object#toString` result references. */
    var argsTag$2 = '[object Arguments]',
        arrayTag$2 = '[object Array]',
        boolTag$2 = '[object Boolean]',
        dateTag$2 = '[object Date]',
        errorTag$2 = '[object Error]',
        funcTag$1 = '[object Function]',
        mapTag$6 = '[object Map]',
        numberTag$2 = '[object Number]',
        objectTag$4 = '[object Object]',
        regexpTag$2 = '[object RegExp]',
        setTag$6 = '[object Set]',
        stringTag$3 = '[object String]',
        weakMapTag$3 = '[object WeakMap]';

    var arrayBufferTag$2 = '[object ArrayBuffer]',
        dataViewTag$3 = '[object DataView]',
        float32Tag$2 = '[object Float32Array]',
        float64Tag$2 = '[object Float64Array]',
        int8Tag$2 = '[object Int8Array]',
        int16Tag$2 = '[object Int16Array]',
        int32Tag$2 = '[object Int32Array]',
        uint8Tag$2 = '[object Uint8Array]',
        uint8ClampedTag$2 = '[object Uint8ClampedArray]',
        uint16Tag$2 = '[object Uint16Array]',
        uint32Tag$2 = '[object Uint32Array]';

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] =
    typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] =
    typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] =
    typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] =
    typedArrayTags[uint32Tag$2] = true;
    typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] =
    typedArrayTags[arrayBufferTag$2] = typedArrayTags[boolTag$2] =
    typedArrayTags[dataViewTag$3] = typedArrayTags[dateTag$2] =
    typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] =
    typedArrayTags[mapTag$6] = typedArrayTags[numberTag$2] =
    typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$2] =
    typedArrayTags[setTag$6] = typedArrayTags[stringTag$3] =
    typedArrayTags[weakMapTag$3] = false;

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray$1(value) {
      return isObjectLike$9(value) &&
        isLength$2(value.length) && !!typedArrayTags[baseGetTag$4(value)];
    }

    var _baseIsTypedArray = baseIsTypedArray$1;

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */

    function baseUnary$3(func) {
      return function(value) {
        return func(value);
      };
    }

    var _baseUnary = baseUnary$3;

    var _nodeUtil = {exports: {}};

    (function (module, exports) {
    var freeGlobal = _freeGlobal;

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports && freeGlobal.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function() {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        }

        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }());

    module.exports = nodeUtil;
    }(_nodeUtil, _nodeUtil.exports));

    var baseIsTypedArray = _baseIsTypedArray,
        baseUnary$2 = _baseUnary,
        nodeUtil$2 = _nodeUtil.exports;

    /* Node.js helper references. */
    var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray$4 = nodeIsTypedArray ? baseUnary$2(nodeIsTypedArray) : baseIsTypedArray;

    var isTypedArray_1 = isTypedArray$4;

    var baseTimes = _baseTimes,
        isArguments$4 = isArguments_1,
        isArray$g = isArray_1,
        isBuffer$4 = isBuffer$5.exports,
        isIndex$4 = _isIndex,
        isTypedArray$3 = isTypedArray_1;

    /** Used for built-in method references. */
    var objectProto$c = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$d = objectProto$c.hasOwnProperty;

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys$2(value, inherited) {
      var isArr = isArray$g(value),
          isArg = !isArr && isArguments$4(value),
          isBuff = !isArr && !isArg && isBuffer$4(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray$3(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty$d.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex$4(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    var _arrayLikeKeys = arrayLikeKeys$2;

    /** Used for built-in method references. */

    var objectProto$b = Object.prototype;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype$4(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$b;

      return value === proto;
    }

    var _isPrototype = isPrototype$4;

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */

    function overArg$2(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }

    var _overArg = overArg$2;

    var overArg$1 = _overArg;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeKeys$1 = overArg$1(Object.keys, Object);

    var _nativeKeys = nativeKeys$1;

    var isPrototype$3 = _isPrototype,
        nativeKeys = _nativeKeys;

    /** Used for built-in method references. */
    var objectProto$a = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$c = objectProto$a.hasOwnProperty;

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys$2(object) {
      if (!isPrototype$3(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty$c.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    var _baseKeys = baseKeys$2;

    var isFunction$1 = isFunction_1,
        isLength$1 = isLength_1;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike$9(value) {
      return value != null && isLength$1(value.length) && !isFunction$1(value);
    }

    var isArrayLike_1 = isArrayLike$9;

    var arrayLikeKeys$1 = _arrayLikeKeys,
        baseKeys$1 = _baseKeys,
        isArrayLike$8 = isArrayLike_1;

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys$8(object) {
      return isArrayLike$8(object) ? arrayLikeKeys$1(object) : baseKeys$1(object);
    }

    var keys_1 = keys$8;

    var baseGetAllKeys$1 = _baseGetAllKeys,
        getSymbols$2 = _getSymbols,
        keys$7 = keys_1;

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys$2(object) {
      return baseGetAllKeys$1(object, keys$7, getSymbols$2);
    }

    var _getAllKeys = getAllKeys$2;

    var getAllKeys$1 = _getAllKeys;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$3 = 1;

    /** Used for built-in method references. */
    var objectProto$9 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$b = objectProto$9.hasOwnProperty;

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
          objProps = getAllKeys$1(object),
          objLength = objProps.length,
          othProps = getAllKeys$1(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty$b.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    var _equalObjects = equalObjects$1;

    var getNative$4 = _getNative,
        root$8 = _root;

    /* Built-in method references that are verified to be native. */
    var DataView$1 = getNative$4(root$8, 'DataView');

    var _DataView = DataView$1;

    var getNative$3 = _getNative,
        root$7 = _root;

    /* Built-in method references that are verified to be native. */
    var Promise$2 = getNative$3(root$7, 'Promise');

    var _Promise = Promise$2;

    var getNative$2 = _getNative,
        root$6 = _root;

    /* Built-in method references that are verified to be native. */
    var Set$3 = getNative$2(root$6, 'Set');

    var _Set = Set$3;

    var getNative$1 = _getNative,
        root$5 = _root;

    /* Built-in method references that are verified to be native. */
    var WeakMap$3 = getNative$1(root$5, 'WeakMap');

    var _WeakMap = WeakMap$3;

    var DataView = _DataView,
        Map$1 = _Map,
        Promise$1 = _Promise,
        Set$2 = _Set,
        WeakMap$2 = _WeakMap,
        baseGetTag$3 = _baseGetTag,
        toSource = _toSource;

    /** `Object#toString` result references. */
    var mapTag$5 = '[object Map]',
        objectTag$3 = '[object Object]',
        promiseTag = '[object Promise]',
        setTag$5 = '[object Set]',
        weakMapTag$2 = '[object WeakMap]';

    var dataViewTag$2 = '[object DataView]';

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map$1),
        promiseCtorString = toSource(Promise$1),
        setCtorString = toSource(Set$2),
        weakMapCtorString = toSource(WeakMap$2);

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag$7 = baseGetTag$3;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag$7(new DataView(new ArrayBuffer(1))) != dataViewTag$2) ||
        (Map$1 && getTag$7(new Map$1) != mapTag$5) ||
        (Promise$1 && getTag$7(Promise$1.resolve()) != promiseTag) ||
        (Set$2 && getTag$7(new Set$2) != setTag$5) ||
        (WeakMap$2 && getTag$7(new WeakMap$2) != weakMapTag$2)) {
      getTag$7 = function(value) {
        var result = baseGetTag$3(value),
            Ctor = result == objectTag$3 ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag$2;
            case mapCtorString: return mapTag$5;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag$5;
            case weakMapCtorString: return weakMapTag$2;
          }
        }
        return result;
      };
    }

    var _getTag = getTag$7;

    var Stack$3 = _Stack,
        equalArrays = _equalArrays,
        equalByTag = _equalByTag,
        equalObjects = _equalObjects,
        getTag$6 = _getTag,
        isArray$f = isArray_1,
        isBuffer$3 = isBuffer$5.exports,
        isTypedArray$2 = isTypedArray_1;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$2 = 1;

    /** `Object#toString` result references. */
    var argsTag$1 = '[object Arguments]',
        arrayTag$1 = '[object Array]',
        objectTag$2 = '[object Object]';

    /** Used for built-in method references. */
    var objectProto$8 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$a = objectProto$8.hasOwnProperty;

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray$f(object),
          othIsArr = isArray$f(other),
          objTag = objIsArr ? arrayTag$1 : getTag$6(object),
          othTag = othIsArr ? arrayTag$1 : getTag$6(other);

      objTag = objTag == argsTag$1 ? objectTag$2 : objTag;
      othTag = othTag == argsTag$1 ? objectTag$2 : othTag;

      var objIsObj = objTag == objectTag$2,
          othIsObj = othTag == objectTag$2,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer$3(object)) {
        if (!isBuffer$3(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack$3);
        return (objIsArr || isTypedArray$2(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
        var objIsWrapped = objIsObj && hasOwnProperty$a.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty$a.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack$3);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack$3);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    var _baseIsEqualDeep = baseIsEqualDeep$1;

    var baseIsEqualDeep = _baseIsEqualDeep,
        isObjectLike$8 = isObjectLike_1;

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual$3(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike$8(value) && !isObjectLike$8(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$3, stack);
    }

    var _baseIsEqual = baseIsEqual$3;

    var Stack$2 = _Stack,
        baseIsEqual$2 = _baseIsEqual;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$1 = 1,
        COMPARE_UNORDERED_FLAG$1 = 2;

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch$1(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack$2;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual$2(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    var _baseIsMatch = baseIsMatch$1;

    var isObject$a = isObject_1;

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable$2(value) {
      return value === value && !isObject$a(value);
    }

    var _isStrictComparable = isStrictComparable$2;

    var isStrictComparable$1 = _isStrictComparable,
        keys$6 = keys_1;

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData$1(object) {
      var result = keys$6(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable$1(value)];
      }
      return result;
    }

    var _getMatchData = getMatchData$1;

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */

    function matchesStrictComparable$2(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    var _matchesStrictComparable = matchesStrictComparable$2;

    var baseIsMatch = _baseIsMatch,
        getMatchData = _getMatchData,
        matchesStrictComparable$1 = _matchesStrictComparable;

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches$1(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    var _baseMatches = baseMatches$1;

    var isArray$e = isArray_1,
        isSymbol$4 = isSymbol_1;

    /** Used to match property names within property paths. */
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/;

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey$3(value, object) {
      if (isArray$e(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol$4(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    var _isKey = isKey$3;

    var MapCache = _MapCache;

    /** Error message constants. */
    var FUNC_ERROR_TEXT$2 = 'Expected a function';

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize$3(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT$2);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize$3.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize$3.Cache = MapCache;

    var memoize_1 = memoize$3;

    var memoize$2 = memoize_1;

    /** Used as the maximum memoize cache size. */
    var MAX_MEMOIZE_SIZE = 500;

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped$1(func) {
      var result = memoize$2(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    var _memoizeCapped = memoizeCapped$1;

    var memoizeCapped = _memoizeCapped;

    /** Used to match property names within property paths. */
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    /** Used to match backslashes in property paths. */
    var reEscapeChar = /\\(\\)?/g;

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath$2 = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    var _stringToPath = stringToPath$2;

    /**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */

    function arrayMap$6(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    var _arrayMap = arrayMap$6;

    var Symbol$3 = _Symbol,
        arrayMap$5 = _arrayMap,
        isArray$d = isArray_1,
        isSymbol$3 = isSymbol_1;

    /** Used as references for various `Number` constants. */
    var INFINITY$3 = 1 / 0;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$1 = Symbol$3 ? Symbol$3.prototype : undefined,
        symbolToString = symbolProto$1 ? symbolProto$1.toString : undefined;

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString$1(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray$d(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap$5(value, baseToString$1) + '';
      }
      if (isSymbol$3(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY$3) ? '-0' : result;
    }

    var _baseToString = baseToString$1;

    var baseToString = _baseToString;

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString$5(value) {
      return value == null ? '' : baseToString(value);
    }

    var toString_1 = toString$5;

    var isArray$c = isArray_1,
        isKey$2 = _isKey,
        stringToPath$1 = _stringToPath,
        toString$4 = toString_1;

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath$5(value, object) {
      if (isArray$c(value)) {
        return value;
      }
      return isKey$2(value, object) ? [value] : stringToPath$1(toString$4(value));
    }

    var _castPath = castPath$5;

    var isSymbol$2 = isSymbol_1;

    /** Used as references for various `Number` constants. */
    var INFINITY$2 = 1 / 0;

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey$7(value) {
      if (typeof value == 'string' || isSymbol$2(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY$2) ? '-0' : result;
    }

    var _toKey = toKey$7;

    var castPath$4 = _castPath,
        toKey$6 = _toKey;

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet$3(object, path) {
      path = castPath$4(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey$6(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    var _baseGet = baseGet$3;

    var baseGet$2 = _baseGet;

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get$1(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet$2(object, path);
      return result === undefined ? defaultValue : result;
    }

    var get_1 = get$1;

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */

    function baseHasIn$1(object, key) {
      return object != null && key in Object(object);
    }

    var _baseHasIn = baseHasIn$1;

    var castPath$3 = _castPath,
        isArguments$3 = isArguments_1,
        isArray$b = isArray_1,
        isIndex$3 = _isIndex,
        isLength = isLength_1,
        toKey$5 = _toKey;

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath$2(object, path, hasFunc) {
      path = castPath$3(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey$5(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex$3(key, length) &&
        (isArray$b(object) || isArguments$3(object));
    }

    var _hasPath = hasPath$2;

    var baseHasIn = _baseHasIn,
        hasPath$1 = _hasPath;

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn$1(object, path) {
      return object != null && hasPath$1(object, path, baseHasIn);
    }

    var hasIn_1 = hasIn$1;

    var baseIsEqual$1 = _baseIsEqual,
        get = get_1,
        hasIn = hasIn_1,
        isKey$1 = _isKey,
        isStrictComparable = _isStrictComparable,
        matchesStrictComparable = _matchesStrictComparable,
        toKey$4 = _toKey;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty$1(path, srcValue) {
      if (isKey$1(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey$4(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    var _baseMatchesProperty = baseMatchesProperty$1;

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */

    function identity$4(value) {
      return value;
    }

    var identity_1 = identity$4;

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */

    function baseProperty$1(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    var _baseProperty = baseProperty$1;

    var baseGet$1 = _baseGet;

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep$1(path) {
      return function(object) {
        return baseGet$1(object, path);
      };
    }

    var _basePropertyDeep = basePropertyDeep$1;

    var baseProperty = _baseProperty,
        basePropertyDeep = _basePropertyDeep,
        isKey = _isKey,
        toKey$3 = _toKey;

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property$1(path) {
      return isKey(path) ? baseProperty(toKey$3(path)) : basePropertyDeep(path);
    }

    var property_1 = property$1;

    var baseMatches = _baseMatches,
        baseMatchesProperty = _baseMatchesProperty,
        identity$3 = identity_1,
        isArray$a = isArray_1,
        property = property_1;

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee$7(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity$3;
      }
      if (typeof value == 'object') {
        return isArray$a(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    var _baseIteratee = baseIteratee$7;

    var baseExtremum = _baseExtremum,
        baseGt = _baseGt,
        baseIteratee$6 = _baseIteratee;

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, baseIteratee$6(iteratee), baseGt)
        : undefined;
    }

    var maxBy_1 = maxBy;

    var baseKeys = _baseKeys,
        getTag$5 = _getTag,
        isArguments$2 = isArguments_1,
        isArray$9 = isArray_1,
        isArrayLike$7 = isArrayLike_1,
        isBuffer$2 = isBuffer$5.exports,
        isPrototype$2 = _isPrototype,
        isTypedArray$1 = isTypedArray_1;

    /** `Object#toString` result references. */
    var mapTag$4 = '[object Map]',
        setTag$4 = '[object Set]';

    /** Used for built-in method references. */
    var objectProto$7 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$9 = objectProto$7.hasOwnProperty;

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty$5(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike$7(value) &&
          (isArray$9(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer$2(value) || isTypedArray$1(value) || isArguments$2(value))) {
        return !value.length;
      }
      var tag = getTag$5(value);
      if (tag == mapTag$4 || tag == setTag$4) {
        return !value.size;
      }
      if (isPrototype$2(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty$9.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    var isEmpty_1 = isEmpty$5;

    /**
     * A specialized version of `_.reduce` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the first element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */

    function arrayReduce$2(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    var _arrayReduce = arrayReduce$2;

    /**
     * The base implementation of `_.propertyOf` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     */

    function basePropertyOf$1(object) {
      return function(key) {
        return object == null ? undefined : object[key];
      };
    }

    var _basePropertyOf = basePropertyOf$1;

    var basePropertyOf = _basePropertyOf;

    /** Used to map Latin Unicode letters to basic Latin letters. */
    var deburredLetters = {
      // Latin-1 Supplement block.
      '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
      '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
      '\xc7': 'C',  '\xe7': 'c',
      '\xd0': 'D',  '\xf0': 'd',
      '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
      '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
      '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
      '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
      '\xd1': 'N',  '\xf1': 'n',
      '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
      '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
      '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
      '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
      '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
      '\xc6': 'Ae', '\xe6': 'ae',
      '\xde': 'Th', '\xfe': 'th',
      '\xdf': 'ss',
      // Latin Extended-A block.
      '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
      '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
      '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
      '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
      '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
      '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
      '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
      '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
      '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
      '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
      '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
      '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
      '\u0134': 'J',  '\u0135': 'j',
      '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
      '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
      '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
      '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
      '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
      '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
      '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
      '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
      '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
      '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
      '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
      '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
      '\u0163': 't',  '\u0165': 't', '\u0167': 't',
      '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
      '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
      '\u0174': 'W',  '\u0175': 'w',
      '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
      '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
      '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
      '\u0132': 'IJ', '\u0133': 'ij',
      '\u0152': 'Oe', '\u0153': 'oe',
      '\u0149': "'n", '\u017f': 's'
    };

    /**
     * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
     * letters to basic Latin letters.
     *
     * @private
     * @param {string} letter The matched letter to deburr.
     * @returns {string} Returns the deburred letter.
     */
    var deburrLetter$1 = basePropertyOf(deburredLetters);

    var _deburrLetter = deburrLetter$1;

    var deburrLetter = _deburrLetter,
        toString$3 = toString_1;

    /** Used to match Latin Unicode letters (excluding mathematical operators). */
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

    /** Used to compose unicode character classes. */
    var rsComboMarksRange$3 = '\\u0300-\\u036f',
        reComboHalfMarksRange$3 = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange$3 = '\\u20d0-\\u20ff',
        rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3;

    /** Used to compose unicode capture groups. */
    var rsCombo$2 = '[' + rsComboRange$3 + ']';

    /**
     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
     */
    var reComboMark = RegExp(rsCombo$2, 'g');

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr$1(string) {
      string = toString$3(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    var deburr_1 = deburr$1;

    /** Used to match words composed of alphanumeric characters. */

    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

    /**
     * Splits an ASCII `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function asciiWords$1(string) {
      return string.match(reAsciiWord) || [];
    }

    var _asciiWords = asciiWords$1;

    /** Used to detect strings that need a more robust regexp to match words. */

    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

    /**
     * Checks if `string` contains a word composed of Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a word is found, else `false`.
     */
    function hasUnicodeWord$1(string) {
      return reHasUnicodeWord.test(string);
    }

    var _hasUnicodeWord = hasUnicodeWord$1;

    /** Used to compose unicode character classes. */

    var rsAstralRange$2 = '\\ud800-\\udfff',
        rsComboMarksRange$2 = '\\u0300-\\u036f',
        reComboHalfMarksRange$2 = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange$2 = '\\u20d0-\\u20ff',
        rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2,
        rsDingbatRange = '\\u2700-\\u27bf',
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = '\\u2000-\\u206f',
        rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange$2 = '\\ufe0e\\ufe0f',
        rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

    /** Used to compose unicode capture groups. */
    var rsApos$1 = "['\u2019]",
        rsBreak = '[' + rsBreakRange + ']',
        rsCombo$1 = '[' + rsComboRange$2 + ']',
        rsDigits = '\\d+',
        rsDingbat = '[' + rsDingbatRange + ']',
        rsLower = '[' + rsLowerRange + ']',
        rsMisc = '[^' + rsAstralRange$2 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
        rsFitz$1 = '\\ud83c[\\udffb-\\udfff]',
        rsModifier$1 = '(?:' + rsCombo$1 + '|' + rsFitz$1 + ')',
        rsNonAstral$1 = '[^' + rsAstralRange$2 + ']',
        rsRegional$1 = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair$1 = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsUpper = '[' + rsUpperRange + ']',
        rsZWJ$2 = '\\u200d';

    /** Used to compose unicode regexes. */
    var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
        rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
        rsOptContrLower = '(?:' + rsApos$1 + '(?:d|ll|m|re|s|t|ve))?',
        rsOptContrUpper = '(?:' + rsApos$1 + '(?:D|LL|M|RE|S|T|VE))?',
        reOptMod$1 = rsModifier$1 + '?',
        rsOptVar$1 = '[' + rsVarRange$2 + ']?',
        rsOptJoin$1 = '(?:' + rsZWJ$2 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
        rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
        rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
        rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
        rsEmoji = '(?:' + [rsDingbat, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsSeq$1;

    /** Used to match complex or compound words. */
    var reUnicodeWord = RegExp([
      rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
      rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
      rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
      rsUpper + '+' + rsOptContrUpper,
      rsOrdUpper,
      rsOrdLower,
      rsDigits,
      rsEmoji
    ].join('|'), 'g');

    /**
     * Splits a Unicode `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function unicodeWords$1(string) {
      return string.match(reUnicodeWord) || [];
    }

    var _unicodeWords = unicodeWords$1;

    var asciiWords = _asciiWords,
        hasUnicodeWord = _hasUnicodeWord,
        toString$2 = toString_1,
        unicodeWords = _unicodeWords;

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words$1(string, pattern, guard) {
      string = toString$2(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    var words_1 = words$1;

    var arrayReduce$1 = _arrayReduce,
        deburr = deburr_1,
        words = words_1;

    /** Used to compose unicode capture groups. */
    var rsApos = "['\u2019]";

    /** Used to match apostrophes. */
    var reApos = RegExp(rsApos, 'g');

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder$1(callback) {
      return function(string) {
        return arrayReduce$1(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    var _createCompounder = createCompounder$1;

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */

    function baseSlice$2(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    var _baseSlice = baseSlice$2;

    var baseSlice$1 = _baseSlice;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice$1(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice$1(array, start, end);
    }

    var _castSlice = castSlice$1;

    /** Used to compose unicode character classes. */

    var rsAstralRange$1 = '\\ud800-\\udfff',
        rsComboMarksRange$1 = '\\u0300-\\u036f',
        reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange$1 = '\\u20d0-\\u20ff',
        rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
        rsVarRange$1 = '\\ufe0e\\ufe0f';

    /** Used to compose unicode capture groups. */
    var rsZWJ$1 = '\\u200d';

    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
    var reHasUnicode = RegExp('[' + rsZWJ$1 + rsAstralRange$1  + rsComboRange$1 + rsVarRange$1 + ']');

    /**
     * Checks if `string` contains Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a symbol is found, else `false`.
     */
    function hasUnicode$2(string) {
      return reHasUnicode.test(string);
    }

    var _hasUnicode = hasUnicode$2;

    /**
     * Converts an ASCII `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */

    function asciiToArray$1(string) {
      return string.split('');
    }

    var _asciiToArray = asciiToArray$1;

    /** Used to compose unicode character classes. */

    var rsAstralRange = '\\ud800-\\udfff',
        rsComboMarksRange = '\\u0300-\\u036f',
        reComboHalfMarksRange = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange = '\\u20d0-\\u20ff',
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsVarRange = '\\ufe0e\\ufe0f';

    /** Used to compose unicode capture groups. */
    var rsAstral = '[' + rsAstralRange + ']',
        rsCombo = '[' + rsComboRange + ']',
        rsFitz = '\\ud83c[\\udffb-\\udfff]',
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsZWJ = '\\u200d';

    /** Used to compose unicode regexes. */
    var reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

    /**
     * Converts a Unicode `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function unicodeToArray$1(string) {
      return string.match(reUnicode) || [];
    }

    var _unicodeToArray = unicodeToArray$1;

    var asciiToArray = _asciiToArray,
        hasUnicode$1 = _hasUnicode,
        unicodeToArray = _unicodeToArray;

    /**
     * Converts `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function stringToArray$1(string) {
      return hasUnicode$1(string)
        ? unicodeToArray(string)
        : asciiToArray(string);
    }

    var _stringToArray = stringToArray$1;

    var castSlice = _castSlice,
        hasUnicode = _hasUnicode,
        stringToArray = _stringToArray,
        toString$1 = toString_1;

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst$1(methodName) {
      return function(string) {
        string = toString$1(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    var _createCaseFirst = createCaseFirst$1;

    var createCaseFirst = _createCaseFirst;

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst$1 = createCaseFirst('toUpperCase');

    var upperFirst_1 = upperFirst$1;

    var createCompounder = _createCompounder,
        upperFirst = upperFirst_1;

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    var startCase_1 = startCase;

    var Symbol$2 = _Symbol,
        isArguments$1 = isArguments_1,
        isArray$8 = isArray_1;

    /** Built-in value references. */
    var spreadableSymbol = Symbol$2 ? Symbol$2.isConcatSpreadable : undefined;

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable$1(value) {
      return isArray$8(value) || isArguments$1(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    var _isFlattenable = isFlattenable$1;

    var arrayPush$1 = _arrayPush,
        isFlattenable = _isFlattenable;

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten$2(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten$2(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush$1(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    var _baseFlatten = baseFlatten$2;

    /**
     * A faster alternative to `Function#apply`, this function invokes `func`
     * with the `this` binding of `thisArg` and the arguments of `args`.
     *
     * @private
     * @param {Function} func The function to invoke.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} args The arguments to invoke `func` with.
     * @returns {*} Returns the result of `func`.
     */

    function apply$3(func, thisArg, args) {
      switch (args.length) {
        case 0: return func.call(thisArg);
        case 1: return func.call(thisArg, args[0]);
        case 2: return func.call(thisArg, args[0], args[1]);
        case 3: return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }

    var _apply = apply$3;

    var apply$2 = _apply;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$7 = Math.max;

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest$2(func, start, transform) {
      start = nativeMax$7(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax$7(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply$2(func, this, otherArgs);
      };
    }

    var _overRest = overRest$2;

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */

    function constant$1(value) {
      return function() {
        return value;
      };
    }

    var constant_1 = constant$1;

    var getNative = _getNative;

    var defineProperty$2 = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    var _defineProperty = defineProperty$2;

    var constant = constant_1,
        defineProperty$1 = _defineProperty,
        identity$2 = identity_1;

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString$1 = !defineProperty$1 ? identity$2 : function(func, string) {
      return defineProperty$1(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    var _baseSetToString = baseSetToString$1;

    /** Used to detect hot functions by number of calls within a span of milliseconds. */

    var HOT_COUNT = 800,
        HOT_SPAN = 16;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeNow = Date.now;

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut$2(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    var _shortOut = shortOut$2;

    var baseSetToString = _baseSetToString,
        shortOut$1 = _shortOut;

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString$3 = shortOut$1(baseSetToString);

    var _setToString = setToString$3;

    var identity$1 = identity_1,
        overRest$1 = _overRest,
        setToString$2 = _setToString;

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest$2(func, start) {
      return setToString$2(overRest$1(func, start, identity$1), func + '');
    }

    var _baseRest = baseRest$2;

    /**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */

    function baseFindIndex$2(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while ((fromRight ? index-- : ++index < length)) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    var _baseFindIndex = baseFindIndex$2;

    /**
     * The base implementation of `_.isNaN` without support for number objects.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     */

    function baseIsNaN$1(value) {
      return value !== value;
    }

    var _baseIsNaN = baseIsNaN$1;

    /**
     * A specialized version of `_.indexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */

    function strictIndexOf$1(array, value, fromIndex) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    var _strictIndexOf = strictIndexOf$1;

    var baseFindIndex$1 = _baseFindIndex,
        baseIsNaN = _baseIsNaN,
        strictIndexOf = _strictIndexOf;

    /**
     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOf$2(array, value, fromIndex) {
      return value === value
        ? strictIndexOf(array, value, fromIndex)
        : baseFindIndex$1(array, baseIsNaN, fromIndex);
    }

    var _baseIndexOf = baseIndexOf$2;

    var baseIndexOf$1 = _baseIndexOf;

    /**
     * A specialized version of `_.includes` for arrays without support for
     * specifying an index to search from.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludes$3(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf$1(array, value, 0) > -1;
    }

    var _arrayIncludes = arrayIncludes$3;

    /**
     * This function is like `arrayIncludes` except that it accepts a comparator.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */

    function arrayIncludesWith$1(array, value, comparator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }

    var _arrayIncludesWith = arrayIncludesWith$1;

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */

    function noop$6() {
      // No operation performed.
    }

    var noop_1 = noop$6;

    var Set$1 = _Set,
        noop$5 = noop_1,
        setToArray$1 = _setToArray;

    /** Used as references for various `Number` constants. */
    var INFINITY$1 = 1 / 0;

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet$1 = !(Set$1 && (1 / setToArray$1(new Set$1([,-0]))[1]) == INFINITY$1) ? noop$5 : function(values) {
      return new Set$1(values);
    };

    var _createSet = createSet$1;

    var SetCache = _SetCache,
        arrayIncludes$2 = _arrayIncludes,
        arrayIncludesWith = _arrayIncludesWith,
        cacheHas = _cacheHas,
        createSet = _createSet,
        setToArray = _setToArray;

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq$1(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes$2,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    var _baseUniq = baseUniq$1;

    var isArrayLike$6 = isArrayLike_1,
        isObjectLike$7 = isObjectLike_1;

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject$2(value) {
      return isObjectLike$7(value) && isArrayLike$6(value);
    }

    var isArrayLikeObject_1 = isArrayLikeObject$2;

    var baseFlatten$1 = _baseFlatten,
        baseRest$1 = _baseRest,
        baseUniq = _baseUniq,
        isArrayLikeObject$1 = isArrayLikeObject_1;

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest$1(function(arrays) {
      return baseUniq(baseFlatten$1(arrays, 1, isArrayLikeObject$1, true));
    });

    var union_1 = union;

    var defineProperty = _defineProperty;

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue$3(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    var _baseAssignValue = baseAssignValue$3;

    var baseAssignValue$2 = _baseAssignValue,
        eq$2 = eq_1;

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue$2(object, key, value) {
      if ((value !== undefined && !eq$2(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue$2(object, key, value);
      }
    }

    var _assignMergeValue = assignMergeValue$2;

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */

    function createBaseFor$1(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    var _createBaseFor = createBaseFor$1;

    var createBaseFor = _createBaseFor;

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor$2 = createBaseFor();

    var _baseFor = baseFor$2;

    var _cloneBuffer = {exports: {}};

    (function (module, exports) {
    var root = _root;

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Built-in value references. */
    var Buffer = moduleExports ? root.Buffer : undefined,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    module.exports = cloneBuffer;
    }(_cloneBuffer, _cloneBuffer.exports));

    var Uint8Array = _Uint8Array;

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer$3(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    var _cloneArrayBuffer = cloneArrayBuffer$3;

    var cloneArrayBuffer$2 = _cloneArrayBuffer;

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray$2(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer$2(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    var _cloneTypedArray = cloneTypedArray$2;

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */

    function copyArray$5(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    var _copyArray = copyArray$5;

    var isObject$9 = isObject_1;

    /** Built-in value references. */
    var objectCreate = Object.create;

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate$4 = (function() {
      function object() {}
      return function(proto) {
        if (!isObject$9(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    var _baseCreate = baseCreate$4;

    var overArg = _overArg;

    /** Built-in value references. */
    var getPrototype$3 = overArg(Object.getPrototypeOf, Object);

    var _getPrototype = getPrototype$3;

    var baseCreate$3 = _baseCreate,
        getPrototype$2 = _getPrototype,
        isPrototype$1 = _isPrototype;

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject$2(object) {
      return (typeof object.constructor == 'function' && !isPrototype$1(object))
        ? baseCreate$3(getPrototype$2(object))
        : {};
    }

    var _initCloneObject = initCloneObject$2;

    var baseGetTag$2 = _baseGetTag,
        getPrototype$1 = _getPrototype,
        isObjectLike$6 = isObjectLike_1;

    /** `Object#toString` result references. */
    var objectTag$1 = '[object Object]';

    /** Used for built-in method references. */
    var funcProto = Function.prototype,
        objectProto$6 = Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty$8 = objectProto$6.hasOwnProperty;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject$4(value) {
      if (!isObjectLike$6(value) || baseGetTag$2(value) != objectTag$1) {
        return false;
      }
      var proto = getPrototype$1(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty$8.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    var isPlainObject_1 = isPlainObject$4;

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */

    function safeGet$2(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    var _safeGet = safeGet$2;

    var baseAssignValue$1 = _baseAssignValue,
        eq$1 = eq_1;

    /** Used for built-in method references. */
    var objectProto$5 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$7 = objectProto$5.hasOwnProperty;

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue$3(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty$7.call(object, key) && eq$1(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue$1(object, key, value);
      }
    }

    var _assignValue = assignValue$3;

    var assignValue$2 = _assignValue,
        baseAssignValue = _baseAssignValue;

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject$6(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue$2(object, key, newValue);
        }
      }
      return object;
    }

    var _copyObject = copyObject$6;

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */

    function nativeKeysIn$1(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    var _nativeKeysIn = nativeKeysIn$1;

    var isObject$8 = isObject_1,
        isPrototype = _isPrototype,
        nativeKeysIn = _nativeKeysIn;

    /** Used for built-in method references. */
    var objectProto$4 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$6 = objectProto$4.hasOwnProperty;

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn$1(object) {
      if (!isObject$8(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty$6.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    var _baseKeysIn = baseKeysIn$1;

    var arrayLikeKeys = _arrayLikeKeys,
        baseKeysIn = _baseKeysIn,
        isArrayLike$5 = isArrayLike_1;

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn$5(object) {
      return isArrayLike$5(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    var keysIn_1 = keysIn$5;

    var copyObject$5 = _copyObject,
        keysIn$4 = keysIn_1;

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject$1(value) {
      return copyObject$5(value, keysIn$4(value));
    }

    var toPlainObject_1 = toPlainObject$1;

    var assignMergeValue$1 = _assignMergeValue,
        cloneBuffer$1 = _cloneBuffer.exports,
        cloneTypedArray$1 = _cloneTypedArray,
        copyArray$4 = _copyArray,
        initCloneObject$1 = _initCloneObject,
        isArguments = isArguments_1,
        isArray$7 = isArray_1,
        isArrayLikeObject = isArrayLikeObject_1,
        isBuffer$1 = isBuffer$5.exports,
        isFunction = isFunction_1,
        isObject$7 = isObject_1,
        isPlainObject$3 = isPlainObject_1,
        isTypedArray = isTypedArray_1,
        safeGet$1 = _safeGet,
        toPlainObject = toPlainObject_1;

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep$1(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet$1(object, key),
          srcValue = safeGet$1(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue$1(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray$7(srcValue),
            isBuff = !isArr && isBuffer$1(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray$7(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray$4(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer$1(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray$1(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject$3(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject$7(objValue) || isFunction(objValue)) {
            newValue = initCloneObject$1(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue$1(object, key, newValue);
    }

    var _baseMergeDeep = baseMergeDeep$1;

    var Stack$1 = _Stack,
        assignMergeValue = _assignMergeValue,
        baseFor$1 = _baseFor,
        baseMergeDeep = _baseMergeDeep,
        isObject$6 = isObject_1,
        keysIn$3 = keysIn_1,
        safeGet = _safeGet;

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge$1(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor$1(source, function(srcValue, key) {
        stack || (stack = new Stack$1);
        if (isObject$6(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge$1, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn$3);
    }

    var _baseMerge = baseMerge$1;

    var eq = eq_1,
        isArrayLike$4 = isArrayLike_1,
        isIndex$2 = _isIndex,
        isObject$5 = isObject_1;

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall$2(value, index, object) {
      if (!isObject$5(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike$4(object) && isIndex$2(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    var _isIterateeCall = isIterateeCall$2;

    var baseRest = _baseRest,
        isIterateeCall$1 = _isIterateeCall;

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner$1(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall$1(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    var _createAssigner = createAssigner$1;

    var baseMerge = _baseMerge,
        createAssigner = _createAssigner;

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge$2 = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    var merge_1 = merge$2;

    /**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */

    function arrayEach$2(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    var _arrayEach = arrayEach$2;

    var copyObject$4 = _copyObject,
        keys$5 = keys_1;

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign$1(object, source) {
      return object && copyObject$4(source, keys$5(source), object);
    }

    var _baseAssign = baseAssign$1;

    var copyObject$3 = _copyObject,
        keysIn$2 = keysIn_1;

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn$1(object, source) {
      return object && copyObject$3(source, keysIn$2(source), object);
    }

    var _baseAssignIn = baseAssignIn$1;

    var copyObject$2 = _copyObject,
        getSymbols$1 = _getSymbols;

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols$1(source, object) {
      return copyObject$2(source, getSymbols$1(source), object);
    }

    var _copySymbols = copySymbols$1;

    var arrayPush = _arrayPush,
        getPrototype = _getPrototype,
        getSymbols = _getSymbols,
        stubArray = stubArray_1;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols = Object.getOwnPropertySymbols;

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    var _getSymbolsIn = getSymbolsIn$2;

    var copyObject$1 = _copyObject,
        getSymbolsIn$1 = _getSymbolsIn;

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn$1(source, object) {
      return copyObject$1(source, getSymbolsIn$1(source), object);
    }

    var _copySymbolsIn = copySymbolsIn$1;

    var baseGetAllKeys = _baseGetAllKeys,
        getSymbolsIn = _getSymbolsIn,
        keysIn$1 = keysIn_1;

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn$2(object) {
      return baseGetAllKeys(object, keysIn$1, getSymbolsIn);
    }

    var _getAllKeysIn = getAllKeysIn$2;

    /** Used for built-in method references. */

    var objectProto$3 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$5 = objectProto$3.hasOwnProperty;

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray$1(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty$5.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    var _initCloneArray = initCloneArray$1;

    var cloneArrayBuffer$1 = _cloneArrayBuffer;

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView$1(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer$1(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    var _cloneDataView = cloneDataView$1;

    /** Used to match `RegExp` flags from their coerced string values. */

    var reFlags = /\w*$/;

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp$1(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    var _cloneRegExp = cloneRegExp$1;

    var Symbol$1 = _Symbol;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol$1(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    var _cloneSymbol = cloneSymbol$1;

    var cloneArrayBuffer = _cloneArrayBuffer,
        cloneDataView = _cloneDataView,
        cloneRegExp = _cloneRegExp,
        cloneSymbol = _cloneSymbol,
        cloneTypedArray = _cloneTypedArray;

    /** `Object#toString` result references. */
    var boolTag$1 = '[object Boolean]',
        dateTag$1 = '[object Date]',
        mapTag$3 = '[object Map]',
        numberTag$1 = '[object Number]',
        regexpTag$1 = '[object RegExp]',
        setTag$3 = '[object Set]',
        stringTag$2 = '[object String]',
        symbolTag$1 = '[object Symbol]';

    var arrayBufferTag$1 = '[object ArrayBuffer]',
        dataViewTag$1 = '[object DataView]',
        float32Tag$1 = '[object Float32Array]',
        float64Tag$1 = '[object Float64Array]',
        int8Tag$1 = '[object Int8Array]',
        int16Tag$1 = '[object Int16Array]',
        int32Tag$1 = '[object Int32Array]',
        uint8Tag$1 = '[object Uint8Array]',
        uint8ClampedTag$1 = '[object Uint8ClampedArray]',
        uint16Tag$1 = '[object Uint16Array]',
        uint32Tag$1 = '[object Uint32Array]';

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag$1(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag$1:
          return cloneArrayBuffer(object);

        case boolTag$1:
        case dateTag$1:
          return new Ctor(+object);

        case dataViewTag$1:
          return cloneDataView(object, isDeep);

        case float32Tag$1: case float64Tag$1:
        case int8Tag$1: case int16Tag$1: case int32Tag$1:
        case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
          return cloneTypedArray(object, isDeep);

        case mapTag$3:
          return new Ctor;

        case numberTag$1:
        case stringTag$2:
          return new Ctor(object);

        case regexpTag$1:
          return cloneRegExp(object);

        case setTag$3:
          return new Ctor;

        case symbolTag$1:
          return cloneSymbol(object);
      }
    }

    var _initCloneByTag = initCloneByTag$1;

    var getTag$4 = _getTag,
        isObjectLike$5 = isObjectLike_1;

    /** `Object#toString` result references. */
    var mapTag$2 = '[object Map]';

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap$1(value) {
      return isObjectLike$5(value) && getTag$4(value) == mapTag$2;
    }

    var _baseIsMap = baseIsMap$1;

    var baseIsMap = _baseIsMap,
        baseUnary$1 = _baseUnary,
        nodeUtil$1 = _nodeUtil.exports;

    /* Node.js helper references. */
    var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap$1 = nodeIsMap ? baseUnary$1(nodeIsMap) : baseIsMap;

    var isMap_1 = isMap$1;

    var getTag$3 = _getTag,
        isObjectLike$4 = isObjectLike_1;

    /** `Object#toString` result references. */
    var setTag$2 = '[object Set]';

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet$1(value) {
      return isObjectLike$4(value) && getTag$3(value) == setTag$2;
    }

    var _baseIsSet = baseIsSet$1;

    var baseIsSet = _baseIsSet,
        baseUnary = _baseUnary,
        nodeUtil = _nodeUtil.exports;

    /* Node.js helper references. */
    var nodeIsSet = nodeUtil && nodeUtil.isSet;

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet$1 = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    var isSet_1 = isSet$1;

    var Stack = _Stack,
        arrayEach$1 = _arrayEach,
        assignValue$1 = _assignValue,
        baseAssign = _baseAssign,
        baseAssignIn = _baseAssignIn,
        cloneBuffer = _cloneBuffer.exports,
        copyArray$3 = _copyArray,
        copySymbols = _copySymbols,
        copySymbolsIn = _copySymbolsIn,
        getAllKeys = _getAllKeys,
        getAllKeysIn$1 = _getAllKeysIn,
        getTag$2 = _getTag,
        initCloneArray = _initCloneArray,
        initCloneByTag = _initCloneByTag,
        initCloneObject = _initCloneObject,
        isArray$6 = isArray_1,
        isBuffer = isBuffer$5.exports,
        isMap = isMap_1,
        isObject$4 = isObject_1,
        isSet = isSet_1,
        keys$4 = keys_1,
        keysIn = keysIn_1;

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$3 = 1,
        CLONE_FLAT_FLAG$1 = 2,
        CLONE_SYMBOLS_FLAG$3 = 4;

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag$1 = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag$1 = '[object Map]',
        numberTag = '[object Number]',
        objectTag = '[object Object]',
        regexpTag = '[object RegExp]',
        setTag$1 = '[object Set]',
        stringTag$1 = '[object String]',
        symbolTag = '[object Symbol]',
        weakMapTag$1 = '[object WeakMap]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to identify `toStringTag` values supported by `_.clone`. */
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] =
    cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
    cloneableTags[boolTag] = cloneableTags[dateTag] =
    cloneableTags[float32Tag] = cloneableTags[float64Tag] =
    cloneableTags[int8Tag] = cloneableTags[int16Tag] =
    cloneableTags[int32Tag] = cloneableTags[mapTag$1] =
    cloneableTags[numberTag] = cloneableTags[objectTag] =
    cloneableTags[regexpTag] = cloneableTags[setTag$1] =
    cloneableTags[stringTag$1] = cloneableTags[symbolTag] =
    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
    cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag$1] = cloneableTags[funcTag] =
    cloneableTags[weakMapTag$1] = false;

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone$4(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG$3,
          isFlat = bitmask & CLONE_FLAT_FLAG$1,
          isFull = bitmask & CLONE_SYMBOLS_FLAG$3;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject$4(value)) {
        return value;
      }
      var isArr = isArray$6(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray$3(value, result);
        }
      } else {
        var tag = getTag$2(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone$4(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone$4(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn$1 : getAllKeys)
        : (isFlat ? keysIn : keys$4);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach$1(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue$1(result, key, baseClone$4(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    var _baseClone = baseClone$4;

    var baseClone$3 = _baseClone;

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$2 = 1,
        CLONE_SYMBOLS_FLAG$2 = 4;

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone$3(value, CLONE_DEEP_FLAG$2 | CLONE_SYMBOLS_FLAG$2);
    }

    var cloneDeep_1 = cloneDeep;

    var _mapping = {};

    /** Used to map aliases to their real names. */

    (function (exports) {
    exports.aliasToReal = {

      // Lodash aliases.
      'each': 'forEach',
      'eachRight': 'forEachRight',
      'entries': 'toPairs',
      'entriesIn': 'toPairsIn',
      'extend': 'assignIn',
      'extendAll': 'assignInAll',
      'extendAllWith': 'assignInAllWith',
      'extendWith': 'assignInWith',
      'first': 'head',

      // Methods that are curried variants of others.
      'conforms': 'conformsTo',
      'matches': 'isMatch',
      'property': 'get',

      // Ramda aliases.
      '__': 'placeholder',
      'F': 'stubFalse',
      'T': 'stubTrue',
      'all': 'every',
      'allPass': 'overEvery',
      'always': 'constant',
      'any': 'some',
      'anyPass': 'overSome',
      'apply': 'spread',
      'assoc': 'set',
      'assocPath': 'set',
      'complement': 'negate',
      'compose': 'flowRight',
      'contains': 'includes',
      'dissoc': 'unset',
      'dissocPath': 'unset',
      'dropLast': 'dropRight',
      'dropLastWhile': 'dropRightWhile',
      'equals': 'isEqual',
      'identical': 'eq',
      'indexBy': 'keyBy',
      'init': 'initial',
      'invertObj': 'invert',
      'juxt': 'over',
      'omitAll': 'omit',
      'nAry': 'ary',
      'path': 'get',
      'pathEq': 'matchesProperty',
      'pathOr': 'getOr',
      'paths': 'at',
      'pickAll': 'pick',
      'pipe': 'flow',
      'pluck': 'map',
      'prop': 'get',
      'propEq': 'matchesProperty',
      'propOr': 'getOr',
      'props': 'at',
      'symmetricDifference': 'xor',
      'symmetricDifferenceBy': 'xorBy',
      'symmetricDifferenceWith': 'xorWith',
      'takeLast': 'takeRight',
      'takeLastWhile': 'takeRightWhile',
      'unapply': 'rest',
      'unnest': 'flatten',
      'useWith': 'overArgs',
      'where': 'conformsTo',
      'whereEq': 'isMatch',
      'zipObj': 'zipObject'
    };

    /** Used to map ary to method names. */
    exports.aryMethod = {
      '1': [
        'assignAll', 'assignInAll', 'attempt', 'castArray', 'ceil', 'create',
        'curry', 'curryRight', 'defaultsAll', 'defaultsDeepAll', 'floor', 'flow',
        'flowRight', 'fromPairs', 'invert', 'iteratee', 'memoize', 'method', 'mergeAll',
        'methodOf', 'mixin', 'nthArg', 'over', 'overEvery', 'overSome','rest', 'reverse',
        'round', 'runInContext', 'spread', 'template', 'trim', 'trimEnd', 'trimStart',
        'uniqueId', 'words', 'zipAll'
      ],
      '2': [
        'add', 'after', 'ary', 'assign', 'assignAllWith', 'assignIn', 'assignInAllWith',
        'at', 'before', 'bind', 'bindAll', 'bindKey', 'chunk', 'cloneDeepWith',
        'cloneWith', 'concat', 'conformsTo', 'countBy', 'curryN', 'curryRightN',
        'debounce', 'defaults', 'defaultsDeep', 'defaultTo', 'delay', 'difference',
        'divide', 'drop', 'dropRight', 'dropRightWhile', 'dropWhile', 'endsWith', 'eq',
        'every', 'filter', 'find', 'findIndex', 'findKey', 'findLast', 'findLastIndex',
        'findLastKey', 'flatMap', 'flatMapDeep', 'flattenDepth', 'forEach',
        'forEachRight', 'forIn', 'forInRight', 'forOwn', 'forOwnRight', 'get',
        'groupBy', 'gt', 'gte', 'has', 'hasIn', 'includes', 'indexOf', 'intersection',
        'invertBy', 'invoke', 'invokeMap', 'isEqual', 'isMatch', 'join', 'keyBy',
        'lastIndexOf', 'lt', 'lte', 'map', 'mapKeys', 'mapValues', 'matchesProperty',
        'maxBy', 'meanBy', 'merge', 'mergeAllWith', 'minBy', 'multiply', 'nth', 'omit',
        'omitBy', 'overArgs', 'pad', 'padEnd', 'padStart', 'parseInt', 'partial',
        'partialRight', 'partition', 'pick', 'pickBy', 'propertyOf', 'pull', 'pullAll',
        'pullAt', 'random', 'range', 'rangeRight', 'rearg', 'reject', 'remove',
        'repeat', 'restFrom', 'result', 'sampleSize', 'some', 'sortBy', 'sortedIndex',
        'sortedIndexOf', 'sortedLastIndex', 'sortedLastIndexOf', 'sortedUniqBy',
        'split', 'spreadFrom', 'startsWith', 'subtract', 'sumBy', 'take', 'takeRight',
        'takeRightWhile', 'takeWhile', 'tap', 'throttle', 'thru', 'times', 'trimChars',
        'trimCharsEnd', 'trimCharsStart', 'truncate', 'union', 'uniqBy', 'uniqWith',
        'unset', 'unzipWith', 'without', 'wrap', 'xor', 'zip', 'zipObject',
        'zipObjectDeep'
      ],
      '3': [
        'assignInWith', 'assignWith', 'clamp', 'differenceBy', 'differenceWith',
        'findFrom', 'findIndexFrom', 'findLastFrom', 'findLastIndexFrom', 'getOr',
        'includesFrom', 'indexOfFrom', 'inRange', 'intersectionBy', 'intersectionWith',
        'invokeArgs', 'invokeArgsMap', 'isEqualWith', 'isMatchWith', 'flatMapDepth',
        'lastIndexOfFrom', 'mergeWith', 'orderBy', 'padChars', 'padCharsEnd',
        'padCharsStart', 'pullAllBy', 'pullAllWith', 'rangeStep', 'rangeStepRight',
        'reduce', 'reduceRight', 'replace', 'set', 'slice', 'sortedIndexBy',
        'sortedLastIndexBy', 'transform', 'unionBy', 'unionWith', 'update', 'xorBy',
        'xorWith', 'zipWith'
      ],
      '4': [
        'fill', 'setWith', 'updateWith'
      ]
    };

    /** Used to map ary to rearg configs. */
    exports.aryRearg = {
      '2': [1, 0],
      '3': [2, 0, 1],
      '4': [3, 2, 0, 1]
    };

    /** Used to map method names to their iteratee ary. */
    exports.iterateeAry = {
      'dropRightWhile': 1,
      'dropWhile': 1,
      'every': 1,
      'filter': 1,
      'find': 1,
      'findFrom': 1,
      'findIndex': 1,
      'findIndexFrom': 1,
      'findKey': 1,
      'findLast': 1,
      'findLastFrom': 1,
      'findLastIndex': 1,
      'findLastIndexFrom': 1,
      'findLastKey': 1,
      'flatMap': 1,
      'flatMapDeep': 1,
      'flatMapDepth': 1,
      'forEach': 1,
      'forEachRight': 1,
      'forIn': 1,
      'forInRight': 1,
      'forOwn': 1,
      'forOwnRight': 1,
      'map': 1,
      'mapKeys': 1,
      'mapValues': 1,
      'partition': 1,
      'reduce': 2,
      'reduceRight': 2,
      'reject': 1,
      'remove': 1,
      'some': 1,
      'takeRightWhile': 1,
      'takeWhile': 1,
      'times': 1,
      'transform': 2
    };

    /** Used to map method names to iteratee rearg configs. */
    exports.iterateeRearg = {
      'mapKeys': [1],
      'reduceRight': [1, 0]
    };

    /** Used to map method names to rearg configs. */
    exports.methodRearg = {
      'assignInAllWith': [1, 0],
      'assignInWith': [1, 2, 0],
      'assignAllWith': [1, 0],
      'assignWith': [1, 2, 0],
      'differenceBy': [1, 2, 0],
      'differenceWith': [1, 2, 0],
      'getOr': [2, 1, 0],
      'intersectionBy': [1, 2, 0],
      'intersectionWith': [1, 2, 0],
      'isEqualWith': [1, 2, 0],
      'isMatchWith': [2, 1, 0],
      'mergeAllWith': [1, 0],
      'mergeWith': [1, 2, 0],
      'padChars': [2, 1, 0],
      'padCharsEnd': [2, 1, 0],
      'padCharsStart': [2, 1, 0],
      'pullAllBy': [2, 1, 0],
      'pullAllWith': [2, 1, 0],
      'rangeStep': [1, 2, 0],
      'rangeStepRight': [1, 2, 0],
      'setWith': [3, 1, 2, 0],
      'sortedIndexBy': [2, 1, 0],
      'sortedLastIndexBy': [2, 1, 0],
      'unionBy': [1, 2, 0],
      'unionWith': [1, 2, 0],
      'updateWith': [3, 1, 2, 0],
      'xorBy': [1, 2, 0],
      'xorWith': [1, 2, 0],
      'zipWith': [1, 2, 0]
    };

    /** Used to map method names to spread configs. */
    exports.methodSpread = {
      'assignAll': { 'start': 0 },
      'assignAllWith': { 'start': 0 },
      'assignInAll': { 'start': 0 },
      'assignInAllWith': { 'start': 0 },
      'defaultsAll': { 'start': 0 },
      'defaultsDeepAll': { 'start': 0 },
      'invokeArgs': { 'start': 2 },
      'invokeArgsMap': { 'start': 2 },
      'mergeAll': { 'start': 0 },
      'mergeAllWith': { 'start': 0 },
      'partial': { 'start': 1 },
      'partialRight': { 'start': 1 },
      'without': { 'start': 1 },
      'zipAll': { 'start': 0 }
    };

    /** Used to identify methods which mutate arrays or objects. */
    exports.mutate = {
      'array': {
        'fill': true,
        'pull': true,
        'pullAll': true,
        'pullAllBy': true,
        'pullAllWith': true,
        'pullAt': true,
        'remove': true,
        'reverse': true
      },
      'object': {
        'assign': true,
        'assignAll': true,
        'assignAllWith': true,
        'assignIn': true,
        'assignInAll': true,
        'assignInAllWith': true,
        'assignInWith': true,
        'assignWith': true,
        'defaults': true,
        'defaultsAll': true,
        'defaultsDeep': true,
        'defaultsDeepAll': true,
        'merge': true,
        'mergeAll': true,
        'mergeAllWith': true,
        'mergeWith': true,
      },
      'set': {
        'set': true,
        'setWith': true,
        'unset': true,
        'update': true,
        'updateWith': true
      }
    };

    /** Used to map real names to their aliases. */
    exports.realToAlias = (function() {
      var hasOwnProperty = Object.prototype.hasOwnProperty,
          object = exports.aliasToReal,
          result = {};

      for (var key in object) {
        var value = object[key];
        if (hasOwnProperty.call(result, value)) {
          result[value].push(key);
        } else {
          result[value] = [key];
        }
      }
      return result;
    }());

    /** Used to map method names to other names. */
    exports.remap = {
      'assignAll': 'assign',
      'assignAllWith': 'assignWith',
      'assignInAll': 'assignIn',
      'assignInAllWith': 'assignInWith',
      'curryN': 'curry',
      'curryRightN': 'curryRight',
      'defaultsAll': 'defaults',
      'defaultsDeepAll': 'defaultsDeep',
      'findFrom': 'find',
      'findIndexFrom': 'findIndex',
      'findLastFrom': 'findLast',
      'findLastIndexFrom': 'findLastIndex',
      'getOr': 'get',
      'includesFrom': 'includes',
      'indexOfFrom': 'indexOf',
      'invokeArgs': 'invoke',
      'invokeArgsMap': 'invokeMap',
      'lastIndexOfFrom': 'lastIndexOf',
      'mergeAll': 'merge',
      'mergeAllWith': 'mergeWith',
      'padChars': 'pad',
      'padCharsEnd': 'padEnd',
      'padCharsStart': 'padStart',
      'propertyOf': 'get',
      'rangeStep': 'range',
      'rangeStepRight': 'rangeRight',
      'restFrom': 'rest',
      'spreadFrom': 'spread',
      'trimChars': 'trim',
      'trimCharsEnd': 'trimEnd',
      'trimCharsStart': 'trimStart',
      'zipAll': 'zip'
    };

    /** Used to track methods that skip fixing their arity. */
    exports.skipFixed = {
      'castArray': true,
      'flow': true,
      'flowRight': true,
      'iteratee': true,
      'mixin': true,
      'rearg': true,
      'runInContext': true
    };

    /** Used to track methods that skip rearranging arguments. */
    exports.skipRearg = {
      'add': true,
      'assign': true,
      'assignIn': true,
      'bind': true,
      'bindKey': true,
      'concat': true,
      'difference': true,
      'divide': true,
      'eq': true,
      'gt': true,
      'gte': true,
      'isEqual': true,
      'lt': true,
      'lte': true,
      'matchesProperty': true,
      'merge': true,
      'multiply': true,
      'overArgs': true,
      'partial': true,
      'partialRight': true,
      'propertyOf': true,
      'random': true,
      'range': true,
      'rangeRight': true,
      'subtract': true,
      'zip': true,
      'zipObject': true,
      'zipObjectDeep': true
    };
    }(_mapping));

    /**
     * The default argument placeholder value for methods.
     *
     * @type {Object}
     */

    var placeholder = {};

    var mapping = _mapping,
        fallbackHolder = placeholder;

    /** Built-in value reference. */
    var push = Array.prototype.push;

    /**
     * Creates a function, with an arity of `n`, that invokes `func` with the
     * arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} n The arity of the new function.
     * @returns {Function} Returns the new function.
     */
    function baseArity(func, n) {
      return n == 2
        ? function(a, b) { return func.apply(undefined, arguments); }
        : function(a) { return func.apply(undefined, arguments); };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments, ignoring
     * any additional arguments.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @param {number} n The arity cap.
     * @returns {Function} Returns the new function.
     */
    function baseAry(func, n) {
      return n == 2
        ? function(a, b) { return func(a, b); }
        : function(a) { return func(a); };
    }

    /**
     * Creates a clone of `array`.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the cloned array.
     */
    function cloneArray(array) {
      var length = array ? array.length : 0,
          result = Array(length);

      while (length--) {
        result[length] = array[length];
      }
      return result;
    }

    /**
     * Creates a function that clones a given object using the assignment `func`.
     *
     * @private
     * @param {Function} func The assignment function.
     * @returns {Function} Returns the new cloner function.
     */
    function createCloner(func) {
      return function(object) {
        return func({}, object);
      };
    }

    /**
     * A specialized version of `_.spread` which flattens the spread array into
     * the arguments of the invoked `func`.
     *
     * @private
     * @param {Function} func The function to spread arguments over.
     * @param {number} start The start position of the spread.
     * @returns {Function} Returns the new function.
     */
    function flatSpread(func, start) {
      return function() {
        var length = arguments.length,
            lastIndex = length - 1,
            args = Array(length);

        while (length--) {
          args[length] = arguments[length];
        }
        var array = args[start],
            otherArgs = args.slice(0, start);

        if (array) {
          push.apply(otherArgs, array);
        }
        if (start != lastIndex) {
          push.apply(otherArgs, args.slice(start + 1));
        }
        return func.apply(this, otherArgs);
      };
    }

    /**
     * Creates a function that wraps `func` and uses `cloner` to clone the first
     * argument it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} cloner The function to clone arguments.
     * @returns {Function} Returns the new immutable function.
     */
    function wrapImmutable(func, cloner) {
      return function() {
        var length = arguments.length;
        if (!length) {
          return;
        }
        var args = Array(length);
        while (length--) {
          args[length] = arguments[length];
        }
        var result = args[0] = cloner.apply(undefined, args);
        func.apply(undefined, args);
        return result;
      };
    }

    /**
     * The base implementation of `convert` which accepts a `util` object of methods
     * required to perform conversions.
     *
     * @param {Object} util The util object.
     * @param {string} name The name of the function to convert.
     * @param {Function} func The function to convert.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.cap=true] Specify capping iteratee arguments.
     * @param {boolean} [options.curry=true] Specify currying.
     * @param {boolean} [options.fixed=true] Specify fixed arity.
     * @param {boolean} [options.immutable=true] Specify immutable operations.
     * @param {boolean} [options.rearg=true] Specify rearranging arguments.
     * @returns {Function|Object} Returns the converted function or object.
     */
    function baseConvert$1(util, name, func, options) {
      var isLib = typeof name == 'function',
          isObj = name === Object(name);

      if (isObj) {
        options = func;
        func = name;
        name = undefined;
      }
      if (func == null) {
        throw new TypeError;
      }
      options || (options = {});

      var config = {
        'cap': 'cap' in options ? options.cap : true,
        'curry': 'curry' in options ? options.curry : true,
        'fixed': 'fixed' in options ? options.fixed : true,
        'immutable': 'immutable' in options ? options.immutable : true,
        'rearg': 'rearg' in options ? options.rearg : true
      };

      var defaultHolder = isLib ? func : fallbackHolder,
          forceCurry = ('curry' in options) && options.curry,
          forceFixed = ('fixed' in options) && options.fixed,
          forceRearg = ('rearg' in options) && options.rearg,
          pristine = isLib ? func.runInContext() : undefined;

      var helpers = isLib ? func : {
        'ary': util.ary,
        'assign': util.assign,
        'clone': util.clone,
        'curry': util.curry,
        'forEach': util.forEach,
        'isArray': util.isArray,
        'isError': util.isError,
        'isFunction': util.isFunction,
        'isWeakMap': util.isWeakMap,
        'iteratee': util.iteratee,
        'keys': util.keys,
        'rearg': util.rearg,
        'toInteger': util.toInteger,
        'toPath': util.toPath
      };

      var ary = helpers.ary,
          assign = helpers.assign,
          clone = helpers.clone,
          curry = helpers.curry,
          each = helpers.forEach,
          isArray = helpers.isArray,
          isError = helpers.isError,
          isFunction = helpers.isFunction,
          isWeakMap = helpers.isWeakMap,
          keys = helpers.keys,
          rearg = helpers.rearg,
          toInteger = helpers.toInteger,
          toPath = helpers.toPath;

      var aryMethodKeys = keys(mapping.aryMethod);

      var wrappers = {
        'castArray': function(castArray) {
          return function() {
            var value = arguments[0];
            return isArray(value)
              ? castArray(cloneArray(value))
              : castArray.apply(undefined, arguments);
          };
        },
        'iteratee': function(iteratee) {
          return function() {
            var func = arguments[0],
                arity = arguments[1],
                result = iteratee(func, arity),
                length = result.length;

            if (config.cap && typeof arity == 'number') {
              arity = arity > 2 ? (arity - 2) : 1;
              return (length && length <= arity) ? result : baseAry(result, arity);
            }
            return result;
          };
        },
        'mixin': function(mixin) {
          return function(source) {
            var func = this;
            if (!isFunction(func)) {
              return mixin(func, Object(source));
            }
            var pairs = [];
            each(keys(source), function(key) {
              if (isFunction(source[key])) {
                pairs.push([key, func.prototype[key]]);
              }
            });

            mixin(func, Object(source));

            each(pairs, function(pair) {
              var value = pair[1];
              if (isFunction(value)) {
                func.prototype[pair[0]] = value;
              } else {
                delete func.prototype[pair[0]];
              }
            });
            return func;
          };
        },
        'nthArg': function(nthArg) {
          return function(n) {
            var arity = n < 0 ? 1 : (toInteger(n) + 1);
            return curry(nthArg(n), arity);
          };
        },
        'rearg': function(rearg) {
          return function(func, indexes) {
            var arity = indexes ? indexes.length : 0;
            return curry(rearg(func, indexes), arity);
          };
        },
        'runInContext': function(runInContext) {
          return function(context) {
            return baseConvert$1(util, runInContext(context), options);
          };
        }
      };

      /*--------------------------------------------------------------------------*/

      /**
       * Casts `func` to a function with an arity capped iteratee if needed.
       *
       * @private
       * @param {string} name The name of the function to inspect.
       * @param {Function} func The function to inspect.
       * @returns {Function} Returns the cast function.
       */
      function castCap(name, func) {
        if (config.cap) {
          var indexes = mapping.iterateeRearg[name];
          if (indexes) {
            return iterateeRearg(func, indexes);
          }
          var n = !isLib && mapping.iterateeAry[name];
          if (n) {
            return iterateeAry(func, n);
          }
        }
        return func;
      }

      /**
       * Casts `func` to a curried function if needed.
       *
       * @private
       * @param {string} name The name of the function to inspect.
       * @param {Function} func The function to inspect.
       * @param {number} n The arity of `func`.
       * @returns {Function} Returns the cast function.
       */
      function castCurry(name, func, n) {
        return (forceCurry || (config.curry && n > 1))
          ? curry(func, n)
          : func;
      }

      /**
       * Casts `func` to a fixed arity function if needed.
       *
       * @private
       * @param {string} name The name of the function to inspect.
       * @param {Function} func The function to inspect.
       * @param {number} n The arity cap.
       * @returns {Function} Returns the cast function.
       */
      function castFixed(name, func, n) {
        if (config.fixed && (forceFixed || !mapping.skipFixed[name])) {
          var data = mapping.methodSpread[name],
              start = data && data.start;

          return start  === undefined ? ary(func, n) : flatSpread(func, start);
        }
        return func;
      }

      /**
       * Casts `func` to an rearged function if needed.
       *
       * @private
       * @param {string} name The name of the function to inspect.
       * @param {Function} func The function to inspect.
       * @param {number} n The arity of `func`.
       * @returns {Function} Returns the cast function.
       */
      function castRearg(name, func, n) {
        return (config.rearg && n > 1 && (forceRearg || !mapping.skipRearg[name]))
          ? rearg(func, mapping.methodRearg[name] || mapping.aryRearg[n])
          : func;
      }

      /**
       * Creates a clone of `object` by `path`.
       *
       * @private
       * @param {Object} object The object to clone.
       * @param {Array|string} path The path to clone by.
       * @returns {Object} Returns the cloned object.
       */
      function cloneByPath(object, path) {
        path = toPath(path);

        var index = -1,
            length = path.length,
            lastIndex = length - 1,
            result = clone(Object(object)),
            nested = result;

        while (nested != null && ++index < length) {
          var key = path[index],
              value = nested[key];

          if (value != null &&
              !(isFunction(value) || isError(value) || isWeakMap(value))) {
            nested[key] = clone(index == lastIndex ? value : Object(value));
          }
          nested = nested[key];
        }
        return result;
      }

      /**
       * Converts `lodash` to an immutable auto-curried iteratee-first data-last
       * version with conversion `options` applied.
       *
       * @param {Object} [options] The options object. See `baseConvert` for more details.
       * @returns {Function} Returns the converted `lodash`.
       */
      function convertLib(options) {
        return _.runInContext.convert(options)(undefined);
      }

      /**
       * Create a converter function for `func` of `name`.
       *
       * @param {string} name The name of the function to convert.
       * @param {Function} func The function to convert.
       * @returns {Function} Returns the new converter function.
       */
      function createConverter(name, func) {
        var realName = mapping.aliasToReal[name] || name,
            methodName = mapping.remap[realName] || realName,
            oldOptions = options;

        return function(options) {
          var newUtil = isLib ? pristine : helpers,
              newFunc = isLib ? pristine[methodName] : func,
              newOptions = assign(assign({}, oldOptions), options);

          return baseConvert$1(newUtil, realName, newFunc, newOptions);
        };
      }

      /**
       * Creates a function that wraps `func` to invoke its iteratee, with up to `n`
       * arguments, ignoring any additional arguments.
       *
       * @private
       * @param {Function} func The function to cap iteratee arguments for.
       * @param {number} n The arity cap.
       * @returns {Function} Returns the new function.
       */
      function iterateeAry(func, n) {
        return overArg(func, function(func) {
          return typeof func == 'function' ? baseAry(func, n) : func;
        });
      }

      /**
       * Creates a function that wraps `func` to invoke its iteratee with arguments
       * arranged according to the specified `indexes` where the argument value at
       * the first index is provided as the first argument, the argument value at
       * the second index is provided as the second argument, and so on.
       *
       * @private
       * @param {Function} func The function to rearrange iteratee arguments for.
       * @param {number[]} indexes The arranged argument indexes.
       * @returns {Function} Returns the new function.
       */
      function iterateeRearg(func, indexes) {
        return overArg(func, function(func) {
          var n = indexes.length;
          return baseArity(rearg(baseAry(func, n), indexes), n);
        });
      }

      /**
       * Creates a function that invokes `func` with its first argument transformed.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {Function} transform The argument transform.
       * @returns {Function} Returns the new function.
       */
      function overArg(func, transform) {
        return function() {
          var length = arguments.length;
          if (!length) {
            return func();
          }
          var args = Array(length);
          while (length--) {
            args[length] = arguments[length];
          }
          var index = config.rearg ? 0 : (length - 1);
          args[index] = transform(args[index]);
          return func.apply(undefined, args);
        };
      }

      /**
       * Creates a function that wraps `func` and applys the conversions
       * rules by `name`.
       *
       * @private
       * @param {string} name The name of the function to wrap.
       * @param {Function} func The function to wrap.
       * @returns {Function} Returns the converted function.
       */
      function wrap(name, func, placeholder) {
        var result,
            realName = mapping.aliasToReal[name] || name,
            wrapped = func,
            wrapper = wrappers[realName];

        if (wrapper) {
          wrapped = wrapper(func);
        }
        else if (config.immutable) {
          if (mapping.mutate.array[realName]) {
            wrapped = wrapImmutable(func, cloneArray);
          }
          else if (mapping.mutate.object[realName]) {
            wrapped = wrapImmutable(func, createCloner(func));
          }
          else if (mapping.mutate.set[realName]) {
            wrapped = wrapImmutable(func, cloneByPath);
          }
        }
        each(aryMethodKeys, function(aryKey) {
          each(mapping.aryMethod[aryKey], function(otherName) {
            if (realName == otherName) {
              var data = mapping.methodSpread[realName],
                  afterRearg = data && data.afterRearg;

              result = afterRearg
                ? castFixed(realName, castRearg(realName, wrapped, aryKey), aryKey)
                : castRearg(realName, castFixed(realName, wrapped, aryKey), aryKey);

              result = castCap(realName, result);
              result = castCurry(realName, result, aryKey);
              return false;
            }
          });
          return !result;
        });

        result || (result = wrapped);
        if (result == func) {
          result = forceCurry ? curry(result, 1) : function() {
            return func.apply(this, arguments);
          };
        }
        result.convert = createConverter(realName, func);
        result.placeholder = func.placeholder = placeholder;

        return result;
      }

      /*--------------------------------------------------------------------------*/

      if (!isObj) {
        return wrap(name, func, defaultHolder);
      }
      var _ = func;

      // Convert methods by ary cap.
      var pairs = [];
      each(aryMethodKeys, function(aryKey) {
        each(mapping.aryMethod[aryKey], function(key) {
          var func = _[mapping.remap[key] || key];
          if (func) {
            pairs.push([key, wrap(key, func, _)]);
          }
        });
      });

      // Convert remaining methods.
      each(keys(_), function(key) {
        var func = _[key];
        if (typeof func == 'function') {
          var length = pairs.length;
          while (length--) {
            if (pairs[length][0] == key) {
              return;
            }
          }
          func.convert = createConverter(key, func);
          pairs.push([key, func]);
        }
      });

      // Assign to `_` leaving `_.prototype` unchanged to allow chaining.
      each(pairs, function(pair) {
        _[pair[0]] = pair[1];
      });

      _.convert = convertLib;
      _.placeholder = _;

      // Assign aliases.
      each(keys(_), function(key) {
        each(mapping.realToAlias[key] || [], function(alias) {
          _[alias] = _[key];
        });
      });

      return _;
    }

    var _baseConvert = baseConvert$1;

    var WeakMap$1 = _WeakMap;

    /** Used to store function metadata. */
    var metaMap$2 = WeakMap$1 && new WeakMap$1;

    var _metaMap = metaMap$2;

    var identity = identity_1,
        metaMap$1 = _metaMap;

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData$2 = !metaMap$1 ? identity : function(func, data) {
      metaMap$1.set(func, data);
      return func;
    };

    var _baseSetData = baseSetData$2;

    var baseCreate$2 = _baseCreate,
        isObject$3 = isObject_1;

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor$4(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate$2(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject$3(result) ? result : thisBinding;
      };
    }

    var _createCtor = createCtor$4;

    var createCtor$3 = _createCtor,
        root$4 = _root;

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$6 = 1;

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind$1(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG$6,
          Ctor = createCtor$3(func);

      function wrapper() {
        var fn = (this && this !== root$4 && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    var _createBind = createBind$1;

    /* Built-in method references for those with the same name as other `lodash` methods. */

    var nativeMax$6 = Math.max;

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs$2(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax$6(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    var _composeArgs = composeArgs$2;

    /* Built-in method references for those with the same name as other `lodash` methods. */

    var nativeMax$5 = Math.max;

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight$2(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax$5(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    var _composeArgsRight = composeArgsRight$2;

    /**
     * Gets the number of `placeholder` occurrences in `array`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} placeholder The placeholder to search for.
     * @returns {number} Returns the placeholder count.
     */

    function countHolders$1(array, placeholder) {
      var length = array.length,
          result = 0;

      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }
      return result;
    }

    var _countHolders = countHolders$1;

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */

    function baseLodash$3() {
      // No operation performed.
    }

    var _baseLodash = baseLodash$3;

    var baseCreate$1 = _baseCreate,
        baseLodash$2 = _baseLodash;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = 4294967295;

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper$3(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper$3.prototype = baseCreate$1(baseLodash$2.prototype);
    LazyWrapper$3.prototype.constructor = LazyWrapper$3;

    var _LazyWrapper = LazyWrapper$3;

    var metaMap = _metaMap,
        noop$4 = noop_1;

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData$6 = !metaMap ? noop$4 : function(func) {
      return metaMap.get(func);
    };

    var _getData = getData$6;

    /** Used to lookup unminified function names. */

    var realNames$1 = {};

    var _realNames = realNames$1;

    var realNames = _realNames;

    /** Used for built-in method references. */
    var objectProto$2 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$4 = objectProto$2.hasOwnProperty;

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName$1(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty$4.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    var _getFuncName = getFuncName$1;

    var baseCreate = _baseCreate,
        baseLodash$1 = _baseLodash;

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper$2(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    LodashWrapper$2.prototype = baseCreate(baseLodash$1.prototype);
    LodashWrapper$2.prototype.constructor = LodashWrapper$2;

    var _LodashWrapper = LodashWrapper$2;

    var LazyWrapper$2 = _LazyWrapper,
        LodashWrapper$1 = _LodashWrapper,
        copyArray$2 = _copyArray;

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone$1(wrapper) {
      if (wrapper instanceof LazyWrapper$2) {
        return wrapper.clone();
      }
      var result = new LodashWrapper$1(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray$2(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    var _wrapperClone = wrapperClone$1;

    var LazyWrapper$1 = _LazyWrapper,
        LodashWrapper = _LodashWrapper,
        baseLodash = _baseLodash,
        isArray$5 = isArray_1,
        isObjectLike$3 = isObjectLike_1,
        wrapperClone = _wrapperClone;

    /** Used for built-in method references. */
    var objectProto$1 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$3 = objectProto$1.hasOwnProperty;

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash$1(value) {
      if (isObjectLike$3(value) && !isArray$5(value) && !(value instanceof LazyWrapper$1)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty$3.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    // Ensure wrappers are instances of `baseLodash`.
    lodash$1.prototype = baseLodash.prototype;
    lodash$1.prototype.constructor = lodash$1;

    var wrapperLodash = lodash$1;

    var LazyWrapper = _LazyWrapper,
        getData$5 = _getData,
        getFuncName = _getFuncName,
        lodash = wrapperLodash;

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable$1(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData$5(other);
      return !!data && func === data[0];
    }

    var _isLaziable = isLaziable$1;

    var baseSetData$1 = _baseSetData,
        shortOut = _shortOut;

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData$2 = shortOut(baseSetData$1);

    var _setData = setData$2;

    /** Used to match wrap detail comments. */

    var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
        reSplitDetails = /,? & /;

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails$1(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    var _getWrapDetails = getWrapDetails$1;

    /** Used to match wrap detail comments. */

    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails$1(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    var _insertWrapDetails = insertWrapDetails$1;

    var arrayEach = _arrayEach,
        arrayIncludes$1 = _arrayIncludes;

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$5 = 1,
        WRAP_BIND_KEY_FLAG$4 = 2,
        WRAP_CURRY_FLAG$5 = 8,
        WRAP_CURRY_RIGHT_FLAG$2 = 16,
        WRAP_PARTIAL_FLAG$2 = 32,
        WRAP_PARTIAL_RIGHT_FLAG$2 = 64,
        WRAP_ARY_FLAG$3 = 128,
        WRAP_REARG_FLAG$2 = 256,
        WRAP_FLIP_FLAG$1 = 512;

    /** Used to associate wrap methods with their bit flags. */
    var wrapFlags = [
      ['ary', WRAP_ARY_FLAG$3],
      ['bind', WRAP_BIND_FLAG$5],
      ['bindKey', WRAP_BIND_KEY_FLAG$4],
      ['curry', WRAP_CURRY_FLAG$5],
      ['curryRight', WRAP_CURRY_RIGHT_FLAG$2],
      ['flip', WRAP_FLIP_FLAG$1],
      ['partial', WRAP_PARTIAL_FLAG$2],
      ['partialRight', WRAP_PARTIAL_RIGHT_FLAG$2],
      ['rearg', WRAP_REARG_FLAG$2]
    ];

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails$1(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes$1(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    var _updateWrapDetails = updateWrapDetails$1;

    var getWrapDetails = _getWrapDetails,
        insertWrapDetails = _insertWrapDetails,
        setToString$1 = _setToString,
        updateWrapDetails = _updateWrapDetails;

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString$2(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString$1(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    var _setWrapToString = setWrapToString$2;

    var isLaziable = _isLaziable,
        setData$1 = _setData,
        setWrapToString$1 = _setWrapToString;

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$4 = 1,
        WRAP_BIND_KEY_FLAG$3 = 2,
        WRAP_CURRY_BOUND_FLAG$1 = 4,
        WRAP_CURRY_FLAG$4 = 8,
        WRAP_PARTIAL_FLAG$1 = 32,
        WRAP_PARTIAL_RIGHT_FLAG$1 = 64;

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry$2(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG$4,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG$1 : WRAP_PARTIAL_RIGHT_FLAG$1);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG$1 : WRAP_PARTIAL_FLAG$1);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG$1)) {
        bitmask &= ~(WRAP_BIND_FLAG$4 | WRAP_BIND_KEY_FLAG$3);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData$1(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString$1(result, func, bitmask);
    }

    var _createRecurry = createRecurry$2;

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */

    function getHolder$2(func) {
      var object = func;
      return object.placeholder;
    }

    var _getHolder = getHolder$2;

    var copyArray$1 = _copyArray,
        isIndex$1 = _isIndex;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMin$2 = Math.min;

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder$1(array, indexes) {
      var arrLength = array.length,
          length = nativeMin$2(indexes.length, arrLength),
          oldArray = copyArray$1(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex$1(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    var _reorder = reorder$1;

    /** Used as the internal argument placeholder. */

    var PLACEHOLDER$1 = '__lodash_placeholder__';

    /**
     * Replaces all `placeholder` elements in `array` with an internal placeholder
     * and returns an array of their indexes.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {*} placeholder The placeholder to replace.
     * @returns {Array} Returns the new array of placeholder indexes.
     */
    function replaceHolders$3(array, placeholder) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value === placeholder || value === PLACEHOLDER$1) {
          array[index] = PLACEHOLDER$1;
          result[resIndex++] = index;
        }
      }
      return result;
    }

    var _replaceHolders = replaceHolders$3;

    var composeArgs$1 = _composeArgs,
        composeArgsRight$1 = _composeArgsRight,
        countHolders = _countHolders,
        createCtor$2 = _createCtor,
        createRecurry$1 = _createRecurry,
        getHolder$1 = _getHolder,
        reorder = _reorder,
        replaceHolders$2 = _replaceHolders,
        root$3 = _root;

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$3 = 1,
        WRAP_BIND_KEY_FLAG$2 = 2,
        WRAP_CURRY_FLAG$3 = 8,
        WRAP_CURRY_RIGHT_FLAG$1 = 16,
        WRAP_ARY_FLAG$2 = 128,
        WRAP_FLIP_FLAG = 512;

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid$2(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG$2,
          isBind = bitmask & WRAP_BIND_FLAG$3,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG$2,
          isCurried = bitmask & (WRAP_CURRY_FLAG$3 | WRAP_CURRY_RIGHT_FLAG$1),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor$2(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder$1(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs$1(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight$1(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders$2(args, placeholder);
          return createRecurry$1(
            func, bitmask, createHybrid$2, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root$3 && this instanceof wrapper) {
          fn = Ctor || createCtor$2(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    var _createHybrid = createHybrid$2;

    var apply$1 = _apply,
        createCtor$1 = _createCtor,
        createHybrid$1 = _createHybrid,
        createRecurry = _createRecurry,
        getHolder = _getHolder,
        replaceHolders$1 = _replaceHolders,
        root$2 = _root;

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry$1(func, bitmask, arity) {
      var Ctor = createCtor$1(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders$1(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid$1, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root$2 && this instanceof wrapper) ? Ctor : func;
        return apply$1(fn, this, args);
      }
      return wrapper;
    }

    var _createCurry = createCurry$1;

    var apply = _apply,
        createCtor = _createCtor,
        root$1 = _root;

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$2 = 1;

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial$1(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG$2,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root$1 && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    var _createPartial = createPartial$1;

    var composeArgs = _composeArgs,
        composeArgsRight = _composeArgsRight,
        replaceHolders = _replaceHolders;

    /** Used as the internal argument placeholder. */
    var PLACEHOLDER = '__lodash_placeholder__';

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$1 = 1,
        WRAP_BIND_KEY_FLAG$1 = 2,
        WRAP_CURRY_BOUND_FLAG = 4,
        WRAP_CURRY_FLAG$2 = 8,
        WRAP_ARY_FLAG$1 = 128,
        WRAP_REARG_FLAG$1 = 256;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMin$1 = Math.min;

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData$1(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG$1 | WRAP_BIND_KEY_FLAG$1 | WRAP_ARY_FLAG$1);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG$1) && (bitmask == WRAP_CURRY_FLAG$2)) ||
        ((srcBitmask == WRAP_ARY_FLAG$1) && (bitmask == WRAP_REARG_FLAG$1) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG$1 | WRAP_REARG_FLAG$1)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG$2));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG$1) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG$1 ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG$1) {
        data[8] = data[8] == null ? source[8] : nativeMin$1(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    var _mergeData = mergeData$1;

    /** Used to match a single whitespace character. */

    var reWhitespace = /\s/;

    /**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
     * character of `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the index of the last non-whitespace character.
     */
    function trimmedEndIndex$1(string) {
      var index = string.length;

      while (index-- && reWhitespace.test(string.charAt(index))) {}
      return index;
    }

    var _trimmedEndIndex = trimmedEndIndex$1;

    var trimmedEndIndex = _trimmedEndIndex;

    /** Used to match leading whitespace. */
    var reTrimStart = /^\s+/;

    /**
     * The base implementation of `_.trim`.
     *
     * @private
     * @param {string} string The string to trim.
     * @returns {string} Returns the trimmed string.
     */
    function baseTrim$1(string) {
      return string
        ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
        : string;
    }

    var _baseTrim = baseTrim$1;

    var baseTrim = _baseTrim,
        isObject$2 = isObject_1,
        isSymbol$1 = isSymbol_1;

    /** Used as references for various `Number` constants. */
    var NAN = 0 / 0;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;

    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;

    /** Built-in method references without a dependency on `root`. */
    var freeParseInt = parseInt;

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber$4(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol$1(value)) {
        return NAN;
      }
      if (isObject$2(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject$2(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    var toNumber_1 = toNumber$4;

    var toNumber$3 = toNumber_1;

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0,
        MAX_INTEGER = 1.7976931348623157e+308;

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite$2(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber$3(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    var toFinite_1 = toFinite$2;

    var toFinite$1 = toFinite_1;

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger$3(value) {
      var result = toFinite$1(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    var toInteger_1 = toInteger$3;

    var baseSetData = _baseSetData,
        createBind = _createBind,
        createCurry = _createCurry,
        createHybrid = _createHybrid,
        createPartial = _createPartial,
        getData$4 = _getData,
        mergeData = _mergeData,
        setData = _setData,
        setWrapToString = _setWrapToString,
        toInteger$2 = toInteger_1;

    /** Error message constants. */
    var FUNC_ERROR_TEXT$1 = 'Expected a function';

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG = 1,
        WRAP_BIND_KEY_FLAG = 2,
        WRAP_CURRY_FLAG$1 = 8,
        WRAP_CURRY_RIGHT_FLAG = 16,
        WRAP_PARTIAL_FLAG = 32,
        WRAP_PARTIAL_RIGHT_FLAG = 64;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$4 = Math.max;

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap$3(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$1);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax$4(toInteger$2(ary), 0);
      arity = arity === undefined ? arity : toInteger$2(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData$4(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax$4(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG$1 | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG$1 | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG$1 || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    var _createWrap = createWrap$3;

    var createWrap$2 = _createWrap;

    /** Used to compose bitmasks for function metadata. */
    var WRAP_ARY_FLAG = 128;

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap$2(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    var ary_1 = ary;

    var baseClone$2 = _baseClone;

    /** Used to compose bitmasks for cloning. */
    var CLONE_SYMBOLS_FLAG$1 = 4;

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone$2(value, CLONE_SYMBOLS_FLAG$1);
    }

    var clone_1 = clone;

    var createWrap$1 = _createWrap;

    /** Used to compose bitmasks for function metadata. */
    var WRAP_CURRY_FLAG = 8;

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap$1(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    // Assign default placeholders.
    curry.placeholder = {};

    var curry_1 = curry;

    var baseGetTag$1 = _baseGetTag,
        isObjectLike$2 = isObjectLike_1,
        isPlainObject$2 = isPlainObject_1;

    /** `Object#toString` result references. */
    var domExcTag = '[object DOMException]',
        errorTag = '[object Error]';

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike$2(value)) {
        return false;
      }
      var tag = baseGetTag$1(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject$2(value));
    }

    var isError_1 = isError;

    var getTag$1 = _getTag,
        isObjectLike$1 = isObjectLike_1;

    /** `Object#toString` result references. */
    var weakMapTag = '[object WeakMap]';

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike$1(value) && getTag$1(value) == weakMapTag;
    }

    var isWeakMap_1 = isWeakMap;

    var baseClone$1 = _baseClone,
        baseIteratee$5 = _baseIteratee;

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$1 = 1;

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee$5(typeof func == 'function' ? func : baseClone$1(func, CLONE_DEEP_FLAG$1));
    }

    var iteratee_1 = iteratee;

    var baseFlatten = _baseFlatten;

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten$1(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    var flatten_1 = flatten$1;

    var flatten = flatten_1,
        overRest = _overRest,
        setToString = _setToString;

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest$2(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    var _flatRest = flatRest$2;

    var createWrap = _createWrap,
        flatRest$1 = _flatRest;

    /** Used to compose bitmasks for function metadata. */
    var WRAP_REARG_FLAG = 256;

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest$1(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    var rearg_1 = rearg;

    var arrayMap$4 = _arrayMap,
        copyArray = _copyArray,
        isArray$4 = isArray_1,
        isSymbol = isSymbol_1,
        stringToPath = _stringToPath,
        toKey$2 = _toKey,
        toString = toString_1;

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray$4(value)) {
        return arrayMap$4(value, toKey$2);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    var toPath_1 = toPath;

    var _util = {
      'ary': ary_1,
      'assign': _baseAssign,
      'clone': clone_1,
      'curry': curry_1,
      'forEach': _arrayEach,
      'isArray': isArray_1,
      'isError': isError_1,
      'isFunction': isFunction_1,
      'isWeakMap': isWeakMap_1,
      'iteratee': iteratee_1,
      'keys': _baseKeys,
      'rearg': rearg_1,
      'toInteger': toInteger_1,
      'toPath': toPath_1
    };

    var baseConvert = _baseConvert,
        util$2 = _util;

    /**
     * Converts `func` of `name` to an immutable auto-curried iteratee-first data-last
     * version with conversion `options` applied. If `name` is an object its methods
     * will be converted.
     *
     * @param {string} name The name of the function to wrap.
     * @param {Function} [func] The function to wrap.
     * @param {Object} [options] The options object. See `baseConvert` for more details.
     * @returns {Function|Object} Returns the converted function or object.
     */
    function convert$1(name, func, options) {
      return baseConvert(util$2, name, func, options);
    }

    var convert_1 = convert$1;

    var assignValue = _assignValue,
        castPath$2 = _castPath,
        isIndex = _isIndex,
        isObject$1 = isObject_1,
        toKey$1 = _toKey;

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet$1(object, path, value, customizer) {
      if (!isObject$1(object)) {
        return object;
      }
      path = castPath$2(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey$1(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject$1(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    var _baseSet = baseSet$1;

    var baseSet = _baseSet;

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set$1(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    var set_1 = set$1;

    var convert = convert_1,
        func = convert('set', set_1);

    func.placeholder = placeholder;
    var set = func;

    var baseFor = _baseFor,
        keys$3 = keys_1;

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn$1(object, iteratee) {
      return object && baseFor(object, iteratee, keys$3);
    }

    var _baseForOwn = baseForOwn$1;

    var isArrayLike$3 = isArrayLike_1;

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach$1(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike$3(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    var _createBaseEach = createBaseEach$1;

    var baseForOwn = _baseForOwn,
        createBaseEach = _createBaseEach;

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach$3 = createBaseEach(baseForOwn);

    var _baseEach = baseEach$3;

    var baseEach$2 = _baseEach;

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter$1(collection, predicate) {
      var result = [];
      baseEach$2(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    var _baseFilter = baseFilter$1;

    var arrayFilter = _arrayFilter,
        baseFilter = _baseFilter,
        baseIteratee$4 = _baseIteratee,
        isArray$3 = isArray_1;

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray$3(collection) ? arrayFilter : baseFilter;
      return func(collection, baseIteratee$4(predicate));
    }

    var filter_1 = filter;

    var baseIsEqual = _baseIsEqual;

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    var isEqual_1 = isEqual;

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */

    function last$1(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    var last_1 = last$1;

    var baseGet = _baseGet,
        baseSlice = _baseSlice;

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent$1(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    var _parent = parent$1;

    var castPath$1 = _castPath,
        last = last_1,
        parent = _parent,
        toKey = _toKey;

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset$1(object, path) {
      path = castPath$1(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    var _baseUnset = baseUnset$1;

    /**
     * The base implementation of `_.reduce` and `_.reduceRight`, without support
     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initAccum Specify using the first or last element of
     *  `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */

    function baseReduce$1(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initAccum
          ? (initAccum = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    var _baseReduce = baseReduce$1;

    var arrayReduce = _arrayReduce,
        baseEach$1 = _baseEach,
        baseIteratee$3 = _baseIteratee,
        baseReduce = _baseReduce,
        isArray$2 = isArray_1;

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray$2(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, baseIteratee$3(iteratee), accumulator, initAccum, baseEach$1);
    }

    var reduce_1 = reduce;

    var arrayMap$3 = _arrayMap;

    /**
     * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
     * of key-value pairs for `object` corresponding to the property names of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the key-value pairs.
     */
    function baseToPairs$1(object, props) {
      return arrayMap$3(props, function(key) {
        return [key, object[key]];
      });
    }

    var _baseToPairs = baseToPairs$1;

    /**
     * Converts `set` to its value-value pairs.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the value-value pairs.
     */

    function setToPairs$1(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = [value, value];
      });
      return result;
    }

    var _setToPairs = setToPairs$1;

    var baseToPairs = _baseToPairs,
        getTag = _getTag,
        mapToArray = _mapToArray,
        setToPairs = _setToPairs;

    /** `Object#toString` result references. */
    var mapTag = '[object Map]',
        setTag = '[object Set]';

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs$1(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    var _createToPairs = createToPairs$1;

    var createToPairs = _createToPairs,
        keys$2 = keys_1;

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys$2);

    var toPairs_1 = toPairs;

    var baseGetTag = _baseGetTag,
        isArray$1 = isArray_1,
        isObjectLike = isObjectLike_1;

    /** `Object#toString` result references. */
    var stringTag = '[object String]';

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString$1(value) {
      return typeof value == 'string' ||
        (!isArray$1(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    var isString_1 = isString$1;

    var arrayMap$2 = _arrayMap;

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues$1(object, props) {
      return arrayMap$2(props, function(key) {
        return object[key];
      });
    }

    var _baseValues = baseValues$1;

    var baseValues = _baseValues,
        keys$1 = keys_1;

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values$3(object) {
      return object == null ? [] : baseValues(object, keys$1(object));
    }

    var values_1 = values$3;

    var baseIndexOf = _baseIndexOf,
        isArrayLike$2 = isArrayLike_1,
        isString = isString_1,
        toInteger$1 = toInteger_1,
        values$2 = values_1;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$3 = Math.max;

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike$2(collection) ? collection : values$2(collection);
      fromIndex = (fromIndex && !guard) ? toInteger$1(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax$3(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    var includes_1 = includes;

    var baseIteratee$2 = _baseIteratee,
        isArrayLike$1 = isArrayLike_1,
        keys = keys_1;

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind$1(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike$1(collection)) {
          var iteratee = baseIteratee$2(predicate);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    var _createFind = createFind$1;

    var baseFindIndex = _baseFindIndex,
        baseIteratee$1 = _baseIteratee,
        toInteger = toInteger_1;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$2 = Math.max;

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex$2(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax$2(length + index, 0);
      }
      return baseFindIndex(array, baseIteratee$1(predicate), index);
    }

    var findIndex_1 = findIndex$2;

    var createFind = _createFind,
        findIndex$1 = findIndex_1;

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex$1);

    var find_1 = find;

    /* Built-in method references for those with the same name as other `lodash` methods. */

    var nativeCeil = Math.ceil,
        nativeMax$1 = Math.max;

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange$1(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax$1(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    var _baseRange = baseRange$1;

    var baseRange = _baseRange,
        isIterateeCall = _isIterateeCall,
        toFinite = toFinite_1;

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange$1(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    var _createRange = createRange$1;

    var createRange = _createRange;

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    var range_1 = range;

    /** Used for built-in method references. */

    var objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$2 = objectProto.hasOwnProperty;

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas$1(object, key) {
      return object != null && hasOwnProperty$2.call(object, key);
    }

    var _baseHas = baseHas$1;

    var baseHas = _baseHas,
        hasPath = _hasPath;

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has$3(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    var has_1 = has$3;

    var ajv$1 = {exports: {}};

    var core$5 = {};

    var validate$2 = {};

    var boolSchema$1 = {};

    var errors$1 = {};

    var codegen$1 = {};

    var code$3 = {};

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.regexpCode = exports.getEsmExportName = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;
    class _CodeOrName {
    }
    exports._CodeOrName = _CodeOrName;
    exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
    class Name extends _CodeOrName {
        constructor(s) {
            super();
            if (!exports.IDENTIFIER.test(s))
                throw new Error("CodeGen: name must be a valid identifier");
            this.str = s;
        }
        toString() {
            return this.str;
        }
        emptyStr() {
            return false;
        }
        get names() {
            return { [this.str]: 1 };
        }
    }
    exports.Name = Name;
    class _Code extends _CodeOrName {
        constructor(code) {
            super();
            this._items = typeof code === "string" ? [code] : code;
        }
        toString() {
            return this.str;
        }
        emptyStr() {
            if (this._items.length > 1)
                return false;
            const item = this._items[0];
            return item === "" || item === '""';
        }
        get str() {
            var _a;
            return ((_a = this._str) !== null && _a !== void 0 ? _a : (this._str = this._items.reduce((s, c) => `${s}${c}`, "")));
        }
        get names() {
            var _a;
            return ((_a = this._names) !== null && _a !== void 0 ? _a : (this._names = this._items.reduce((names, c) => {
                if (c instanceof Name)
                    names[c.str] = (names[c.str] || 0) + 1;
                return names;
            }, {})));
        }
    }
    exports._Code = _Code;
    exports.nil = new _Code("");
    function _(strs, ...args) {
        const code = [strs[0]];
        let i = 0;
        while (i < args.length) {
            addCodeArg(code, args[i]);
            code.push(strs[++i]);
        }
        return new _Code(code);
    }
    exports._ = _;
    const plus = new _Code("+");
    function str(strs, ...args) {
        const expr = [safeStringify(strs[0])];
        let i = 0;
        while (i < args.length) {
            expr.push(plus);
            addCodeArg(expr, args[i]);
            expr.push(plus, safeStringify(strs[++i]));
        }
        optimize(expr);
        return new _Code(expr);
    }
    exports.str = str;
    function addCodeArg(code, arg) {
        if (arg instanceof _Code)
            code.push(...arg._items);
        else if (arg instanceof Name)
            code.push(arg);
        else
            code.push(interpolate(arg));
    }
    exports.addCodeArg = addCodeArg;
    function optimize(expr) {
        let i = 1;
        while (i < expr.length - 1) {
            if (expr[i] === plus) {
                const res = mergeExprItems(expr[i - 1], expr[i + 1]);
                if (res !== undefined) {
                    expr.splice(i - 1, 3, res);
                    continue;
                }
                expr[i++] = "+";
            }
            i++;
        }
    }
    function mergeExprItems(a, b) {
        if (b === '""')
            return a;
        if (a === '""')
            return b;
        if (typeof a == "string") {
            if (b instanceof Name || a[a.length - 1] !== '"')
                return;
            if (typeof b != "string")
                return `${a.slice(0, -1)}${b}"`;
            if (b[0] === '"')
                return a.slice(0, -1) + b.slice(1);
            return;
        }
        if (typeof b == "string" && b[0] === '"' && !(a instanceof Name))
            return `"${a}${b.slice(1)}`;
        return;
    }
    function strConcat(c1, c2) {
        return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str `${c1}${c2}`;
    }
    exports.strConcat = strConcat;
    // TODO do not allow arrays here
    function interpolate(x) {
        return typeof x == "number" || typeof x == "boolean" || x === null
            ? x
            : safeStringify(Array.isArray(x) ? x.join(",") : x);
    }
    function stringify(x) {
        return new _Code(safeStringify(x));
    }
    exports.stringify = stringify;
    function safeStringify(x) {
        return JSON.stringify(x)
            .replace(/\u2028/g, "\\u2028")
            .replace(/\u2029/g, "\\u2029");
    }
    exports.safeStringify = safeStringify;
    function getProperty(key) {
        return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _ `[${key}]`;
    }
    exports.getProperty = getProperty;
    //Does best effort to format the name properly
    function getEsmExportName(key) {
        if (typeof key == "string" && exports.IDENTIFIER.test(key)) {
            return new _Code(`${key}`);
        }
        throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`);
    }
    exports.getEsmExportName = getEsmExportName;
    function regexpCode(rx) {
        return new _Code(rx.toString());
    }
    exports.regexpCode = regexpCode;

    }(code$3));

    var scope$1 = {};

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;
    const code_1 = code$3;
    class ValueError extends Error {
        constructor(name) {
            super(`CodeGen: "code" for ${name} not defined`);
            this.value = name.value;
        }
    }
    var UsedValueState;
    (function (UsedValueState) {
        UsedValueState[UsedValueState["Started"] = 0] = "Started";
        UsedValueState[UsedValueState["Completed"] = 1] = "Completed";
    })(UsedValueState = exports.UsedValueState || (exports.UsedValueState = {}));
    exports.varKinds = {
        const: new code_1.Name("const"),
        let: new code_1.Name("let"),
        var: new code_1.Name("var"),
    };
    class Scope {
        constructor({ prefixes, parent } = {}) {
            this._names = {};
            this._prefixes = prefixes;
            this._parent = parent;
        }
        toName(nameOrPrefix) {
            return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
        }
        name(prefix) {
            return new code_1.Name(this._newName(prefix));
        }
        _newName(prefix) {
            const ng = this._names[prefix] || this._nameGroup(prefix);
            return `${prefix}${ng.index++}`;
        }
        _nameGroup(prefix) {
            var _a, _b;
            if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || (this._prefixes && !this._prefixes.has(prefix))) {
                throw new Error(`CodeGen: prefix "${prefix}" is not allowed in this scope`);
            }
            return (this._names[prefix] = { prefix, index: 0 });
        }
    }
    exports.Scope = Scope;
    class ValueScopeName extends code_1.Name {
        constructor(prefix, nameStr) {
            super(nameStr);
            this.prefix = prefix;
        }
        setValue(value, { property, itemIndex }) {
            this.value = value;
            this.scopePath = (0, code_1._) `.${new code_1.Name(property)}[${itemIndex}]`;
        }
    }
    exports.ValueScopeName = ValueScopeName;
    const line = (0, code_1._) `\n`;
    class ValueScope extends Scope {
        constructor(opts) {
            super(opts);
            this._values = {};
            this._scope = opts.scope;
            this.opts = { ...opts, _n: opts.lines ? line : code_1.nil };
        }
        get() {
            return this._scope;
        }
        name(prefix) {
            return new ValueScopeName(prefix, this._newName(prefix));
        }
        value(nameOrPrefix, value) {
            var _a;
            if (value.ref === undefined)
                throw new Error("CodeGen: ref must be passed in value");
            const name = this.toName(nameOrPrefix);
            const { prefix } = name;
            const valueKey = (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;
            let vs = this._values[prefix];
            if (vs) {
                const _name = vs.get(valueKey);
                if (_name)
                    return _name;
            }
            else {
                vs = this._values[prefix] = new Map();
            }
            vs.set(valueKey, name);
            const s = this._scope[prefix] || (this._scope[prefix] = []);
            const itemIndex = s.length;
            s[itemIndex] = value.ref;
            name.setValue(value, { property: prefix, itemIndex });
            return name;
        }
        getValue(prefix, keyOrRef) {
            const vs = this._values[prefix];
            if (!vs)
                return;
            return vs.get(keyOrRef);
        }
        scopeRefs(scopeName, values = this._values) {
            return this._reduceValues(values, (name) => {
                if (name.scopePath === undefined)
                    throw new Error(`CodeGen: name "${name}" has no value`);
                return (0, code_1._) `${scopeName}${name.scopePath}`;
            });
        }
        scopeCode(values = this._values, usedValues, getCode) {
            return this._reduceValues(values, (name) => {
                if (name.value === undefined)
                    throw new Error(`CodeGen: name "${name}" has no value`);
                return name.value.code;
            }, usedValues, getCode);
        }
        _reduceValues(values, valueCode, usedValues = {}, getCode) {
            let code = code_1.nil;
            for (const prefix in values) {
                const vs = values[prefix];
                if (!vs)
                    continue;
                const nameSet = (usedValues[prefix] = usedValues[prefix] || new Map());
                vs.forEach((name) => {
                    if (nameSet.has(name))
                        return;
                    nameSet.set(name, UsedValueState.Started);
                    let c = valueCode(name);
                    if (c) {
                        const def = this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;
                        code = (0, code_1._) `${code}${def} ${name} = ${c};${this.opts._n}`;
                    }
                    else if ((c = getCode === null || getCode === void 0 ? void 0 : getCode(name))) {
                        code = (0, code_1._) `${code}${c}${this.opts._n}`;
                    }
                    else {
                        throw new ValueError(name);
                    }
                    nameSet.set(name, UsedValueState.Completed);
                });
            }
            return code;
        }
    }
    exports.ValueScope = ValueScope;

    }(scope$1));

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;
    const code_1 = code$3;
    const scope_1 = scope$1;
    var code_2 = code$3;
    Object.defineProperty(exports, "_", { enumerable: true, get: function () { return code_2._; } });
    Object.defineProperty(exports, "str", { enumerable: true, get: function () { return code_2.str; } });
    Object.defineProperty(exports, "strConcat", { enumerable: true, get: function () { return code_2.strConcat; } });
    Object.defineProperty(exports, "nil", { enumerable: true, get: function () { return code_2.nil; } });
    Object.defineProperty(exports, "getProperty", { enumerable: true, get: function () { return code_2.getProperty; } });
    Object.defineProperty(exports, "stringify", { enumerable: true, get: function () { return code_2.stringify; } });
    Object.defineProperty(exports, "regexpCode", { enumerable: true, get: function () { return code_2.regexpCode; } });
    Object.defineProperty(exports, "Name", { enumerable: true, get: function () { return code_2.Name; } });
    var scope_2 = scope$1;
    Object.defineProperty(exports, "Scope", { enumerable: true, get: function () { return scope_2.Scope; } });
    Object.defineProperty(exports, "ValueScope", { enumerable: true, get: function () { return scope_2.ValueScope; } });
    Object.defineProperty(exports, "ValueScopeName", { enumerable: true, get: function () { return scope_2.ValueScopeName; } });
    Object.defineProperty(exports, "varKinds", { enumerable: true, get: function () { return scope_2.varKinds; } });
    exports.operators = {
        GT: new code_1._Code(">"),
        GTE: new code_1._Code(">="),
        LT: new code_1._Code("<"),
        LTE: new code_1._Code("<="),
        EQ: new code_1._Code("==="),
        NEQ: new code_1._Code("!=="),
        NOT: new code_1._Code("!"),
        OR: new code_1._Code("||"),
        AND: new code_1._Code("&&"),
        ADD: new code_1._Code("+"),
    };
    class Node {
        optimizeNodes() {
            return this;
        }
        optimizeNames(_names, _constants) {
            return this;
        }
    }
    class Def extends Node {
        constructor(varKind, name, rhs) {
            super();
            this.varKind = varKind;
            this.name = name;
            this.rhs = rhs;
        }
        render({ es5, _n }) {
            const varKind = es5 ? scope_1.varKinds.var : this.varKind;
            const rhs = this.rhs === undefined ? "" : ` = ${this.rhs}`;
            return `${varKind} ${this.name}${rhs};` + _n;
        }
        optimizeNames(names, constants) {
            if (!names[this.name.str])
                return;
            if (this.rhs)
                this.rhs = optimizeExpr(this.rhs, names, constants);
            return this;
        }
        get names() {
            return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
        }
    }
    class Assign extends Node {
        constructor(lhs, rhs, sideEffects) {
            super();
            this.lhs = lhs;
            this.rhs = rhs;
            this.sideEffects = sideEffects;
        }
        render({ _n }) {
            return `${this.lhs} = ${this.rhs};` + _n;
        }
        optimizeNames(names, constants) {
            if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects)
                return;
            this.rhs = optimizeExpr(this.rhs, names, constants);
            return this;
        }
        get names() {
            const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };
            return addExprNames(names, this.rhs);
        }
    }
    class AssignOp extends Assign {
        constructor(lhs, op, rhs, sideEffects) {
            super(lhs, rhs, sideEffects);
            this.op = op;
        }
        render({ _n }) {
            return `${this.lhs} ${this.op}= ${this.rhs};` + _n;
        }
    }
    class Label extends Node {
        constructor(label) {
            super();
            this.label = label;
            this.names = {};
        }
        render({ _n }) {
            return `${this.label}:` + _n;
        }
    }
    class Break extends Node {
        constructor(label) {
            super();
            this.label = label;
            this.names = {};
        }
        render({ _n }) {
            const label = this.label ? ` ${this.label}` : "";
            return `break${label};` + _n;
        }
    }
    class Throw extends Node {
        constructor(error) {
            super();
            this.error = error;
        }
        render({ _n }) {
            return `throw ${this.error};` + _n;
        }
        get names() {
            return this.error.names;
        }
    }
    class AnyCode extends Node {
        constructor(code) {
            super();
            this.code = code;
        }
        render({ _n }) {
            return `${this.code};` + _n;
        }
        optimizeNodes() {
            return `${this.code}` ? this : undefined;
        }
        optimizeNames(names, constants) {
            this.code = optimizeExpr(this.code, names, constants);
            return this;
        }
        get names() {
            return this.code instanceof code_1._CodeOrName ? this.code.names : {};
        }
    }
    class ParentNode extends Node {
        constructor(nodes = []) {
            super();
            this.nodes = nodes;
        }
        render(opts) {
            return this.nodes.reduce((code, n) => code + n.render(opts), "");
        }
        optimizeNodes() {
            const { nodes } = this;
            let i = nodes.length;
            while (i--) {
                const n = nodes[i].optimizeNodes();
                if (Array.isArray(n))
                    nodes.splice(i, 1, ...n);
                else if (n)
                    nodes[i] = n;
                else
                    nodes.splice(i, 1);
            }
            return nodes.length > 0 ? this : undefined;
        }
        optimizeNames(names, constants) {
            const { nodes } = this;
            let i = nodes.length;
            while (i--) {
                // iterating backwards improves 1-pass optimization
                const n = nodes[i];
                if (n.optimizeNames(names, constants))
                    continue;
                subtractNames(names, n.names);
                nodes.splice(i, 1);
            }
            return nodes.length > 0 ? this : undefined;
        }
        get names() {
            return this.nodes.reduce((names, n) => addNames(names, n.names), {});
        }
    }
    class BlockNode extends ParentNode {
        render(opts) {
            return "{" + opts._n + super.render(opts) + "}" + opts._n;
        }
    }
    class Root extends ParentNode {
    }
    class Else extends BlockNode {
    }
    Else.kind = "else";
    class If extends BlockNode {
        constructor(condition, nodes) {
            super(nodes);
            this.condition = condition;
        }
        render(opts) {
            let code = `if(${this.condition})` + super.render(opts);
            if (this.else)
                code += "else " + this.else.render(opts);
            return code;
        }
        optimizeNodes() {
            super.optimizeNodes();
            const cond = this.condition;
            if (cond === true)
                return this.nodes; // else is ignored here
            let e = this.else;
            if (e) {
                const ns = e.optimizeNodes();
                e = this.else = Array.isArray(ns) ? new Else(ns) : ns;
            }
            if (e) {
                if (cond === false)
                    return e instanceof If ? e : e.nodes;
                if (this.nodes.length)
                    return this;
                return new If(not(cond), e instanceof If ? [e] : e.nodes);
            }
            if (cond === false || !this.nodes.length)
                return undefined;
            return this;
        }
        optimizeNames(names, constants) {
            var _a;
            this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
            if (!(super.optimizeNames(names, constants) || this.else))
                return;
            this.condition = optimizeExpr(this.condition, names, constants);
            return this;
        }
        get names() {
            const names = super.names;
            addExprNames(names, this.condition);
            if (this.else)
                addNames(names, this.else.names);
            return names;
        }
    }
    If.kind = "if";
    class For extends BlockNode {
    }
    For.kind = "for";
    class ForLoop extends For {
        constructor(iteration) {
            super();
            this.iteration = iteration;
        }
        render(opts) {
            return `for(${this.iteration})` + super.render(opts);
        }
        optimizeNames(names, constants) {
            if (!super.optimizeNames(names, constants))
                return;
            this.iteration = optimizeExpr(this.iteration, names, constants);
            return this;
        }
        get names() {
            return addNames(super.names, this.iteration.names);
        }
    }
    class ForRange extends For {
        constructor(varKind, name, from, to) {
            super();
            this.varKind = varKind;
            this.name = name;
            this.from = from;
            this.to = to;
        }
        render(opts) {
            const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
            const { name, from, to } = this;
            return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);
        }
        get names() {
            const names = addExprNames(super.names, this.from);
            return addExprNames(names, this.to);
        }
    }
    class ForIter extends For {
        constructor(loop, varKind, name, iterable) {
            super();
            this.loop = loop;
            this.varKind = varKind;
            this.name = name;
            this.iterable = iterable;
        }
        render(opts) {
            return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);
        }
        optimizeNames(names, constants) {
            if (!super.optimizeNames(names, constants))
                return;
            this.iterable = optimizeExpr(this.iterable, names, constants);
            return this;
        }
        get names() {
            return addNames(super.names, this.iterable.names);
        }
    }
    class Func extends BlockNode {
        constructor(name, args, async) {
            super();
            this.name = name;
            this.args = args;
            this.async = async;
        }
        render(opts) {
            const _async = this.async ? "async " : "";
            return `${_async}function ${this.name}(${this.args})` + super.render(opts);
        }
    }
    Func.kind = "func";
    class Return extends ParentNode {
        render(opts) {
            return "return " + super.render(opts);
        }
    }
    Return.kind = "return";
    class Try extends BlockNode {
        render(opts) {
            let code = "try" + super.render(opts);
            if (this.catch)
                code += this.catch.render(opts);
            if (this.finally)
                code += this.finally.render(opts);
            return code;
        }
        optimizeNodes() {
            var _a, _b;
            super.optimizeNodes();
            (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();
            (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();
            return this;
        }
        optimizeNames(names, constants) {
            var _a, _b;
            super.optimizeNames(names, constants);
            (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
            (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);
            return this;
        }
        get names() {
            const names = super.names;
            if (this.catch)
                addNames(names, this.catch.names);
            if (this.finally)
                addNames(names, this.finally.names);
            return names;
        }
    }
    class Catch extends BlockNode {
        constructor(error) {
            super();
            this.error = error;
        }
        render(opts) {
            return `catch(${this.error})` + super.render(opts);
        }
    }
    Catch.kind = "catch";
    class Finally extends BlockNode {
        render(opts) {
            return "finally" + super.render(opts);
        }
    }
    Finally.kind = "finally";
    class CodeGen {
        constructor(extScope, opts = {}) {
            this._values = {};
            this._blockStarts = [];
            this._constants = {};
            this.opts = { ...opts, _n: opts.lines ? "\n" : "" };
            this._extScope = extScope;
            this._scope = new scope_1.Scope({ parent: extScope });
            this._nodes = [new Root()];
        }
        toString() {
            return this._root.render(this.opts);
        }
        // returns unique name in the internal scope
        name(prefix) {
            return this._scope.name(prefix);
        }
        // reserves unique name in the external scope
        scopeName(prefix) {
            return this._extScope.name(prefix);
        }
        // reserves unique name in the external scope and assigns value to it
        scopeValue(prefixOrName, value) {
            const name = this._extScope.value(prefixOrName, value);
            const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());
            vs.add(name);
            return name;
        }
        getScopeValue(prefix, keyOrRef) {
            return this._extScope.getValue(prefix, keyOrRef);
        }
        // return code that assigns values in the external scope to the names that are used internally
        // (same names that were returned by gen.scopeName or gen.scopeValue)
        scopeRefs(scopeName) {
            return this._extScope.scopeRefs(scopeName, this._values);
        }
        scopeCode() {
            return this._extScope.scopeCode(this._values);
        }
        _def(varKind, nameOrPrefix, rhs, constant) {
            const name = this._scope.toName(nameOrPrefix);
            if (rhs !== undefined && constant)
                this._constants[name.str] = rhs;
            this._leafNode(new Def(varKind, name, rhs));
            return name;
        }
        // `const` declaration (`var` in es5 mode)
        const(nameOrPrefix, rhs, _constant) {
            return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
        }
        // `let` declaration with optional assignment (`var` in es5 mode)
        let(nameOrPrefix, rhs, _constant) {
            return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
        }
        // `var` declaration with optional assignment
        var(nameOrPrefix, rhs, _constant) {
            return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
        }
        // assignment code
        assign(lhs, rhs, sideEffects) {
            return this._leafNode(new Assign(lhs, rhs, sideEffects));
        }
        // `+=` code
        add(lhs, rhs) {
            return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));
        }
        // appends passed SafeExpr to code or executes Block
        code(c) {
            if (typeof c == "function")
                c();
            else if (c !== code_1.nil)
                this._leafNode(new AnyCode(c));
            return this;
        }
        // returns code for object literal for the passed argument list of key-value pairs
        object(...keyValues) {
            const code = ["{"];
            for (const [key, value] of keyValues) {
                if (code.length > 1)
                    code.push(",");
                code.push(key);
                if (key !== value || this.opts.es5) {
                    code.push(":");
                    (0, code_1.addCodeArg)(code, value);
                }
            }
            code.push("}");
            return new code_1._Code(code);
        }
        // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)
        if(condition, thenBody, elseBody) {
            this._blockNode(new If(condition));
            if (thenBody && elseBody) {
                this.code(thenBody).else().code(elseBody).endIf();
            }
            else if (thenBody) {
                this.code(thenBody).endIf();
            }
            else if (elseBody) {
                throw new Error('CodeGen: "else" body without "then" body');
            }
            return this;
        }
        // `else if` clause - invalid without `if` or after `else` clauses
        elseIf(condition) {
            return this._elseNode(new If(condition));
        }
        // `else` clause - only valid after `if` or `else if` clauses
        else() {
            return this._elseNode(new Else());
        }
        // end `if` statement (needed if gen.if was used only with condition)
        endIf() {
            return this._endBlockNode(If, Else);
        }
        _for(node, forBody) {
            this._blockNode(node);
            if (forBody)
                this.code(forBody).endFor();
            return this;
        }
        // a generic `for` clause (or statement if `forBody` is passed)
        for(iteration, forBody) {
            return this._for(new ForLoop(iteration), forBody);
        }
        // `for` statement for a range of values
        forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {
            const name = this._scope.toName(nameOrPrefix);
            return this._for(new ForRange(varKind, name, from, to), () => forBody(name));
        }
        // `for-of` statement (in es5 mode replace with a normal for loop)
        forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {
            const name = this._scope.toName(nameOrPrefix);
            if (this.opts.es5) {
                const arr = iterable instanceof code_1.Name ? iterable : this.var("_arr", iterable);
                return this.forRange("_i", 0, (0, code_1._) `${arr}.length`, (i) => {
                    this.var(name, (0, code_1._) `${arr}[${i}]`);
                    forBody(name);
                });
            }
            return this._for(new ForIter("of", varKind, name, iterable), () => forBody(name));
        }
        // `for-in` statement.
        // With option `ownProperties` replaced with a `for-of` loop for object keys
        forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {
            if (this.opts.ownProperties) {
                return this.forOf(nameOrPrefix, (0, code_1._) `Object.keys(${obj})`, forBody);
            }
            const name = this._scope.toName(nameOrPrefix);
            return this._for(new ForIter("in", varKind, name, obj), () => forBody(name));
        }
        // end `for` loop
        endFor() {
            return this._endBlockNode(For);
        }
        // `label` statement
        label(label) {
            return this._leafNode(new Label(label));
        }
        // `break` statement
        break(label) {
            return this._leafNode(new Break(label));
        }
        // `return` statement
        return(value) {
            const node = new Return();
            this._blockNode(node);
            this.code(value);
            if (node.nodes.length !== 1)
                throw new Error('CodeGen: "return" should have one node');
            return this._endBlockNode(Return);
        }
        // `try` statement
        try(tryBody, catchCode, finallyCode) {
            if (!catchCode && !finallyCode)
                throw new Error('CodeGen: "try" without "catch" and "finally"');
            const node = new Try();
            this._blockNode(node);
            this.code(tryBody);
            if (catchCode) {
                const error = this.name("e");
                this._currNode = node.catch = new Catch(error);
                catchCode(error);
            }
            if (finallyCode) {
                this._currNode = node.finally = new Finally();
                this.code(finallyCode);
            }
            return this._endBlockNode(Catch, Finally);
        }
        // `throw` statement
        throw(error) {
            return this._leafNode(new Throw(error));
        }
        // start self-balancing block
        block(body, nodeCount) {
            this._blockStarts.push(this._nodes.length);
            if (body)
                this.code(body).endBlock(nodeCount);
            return this;
        }
        // end the current self-balancing block
        endBlock(nodeCount) {
            const len = this._blockStarts.pop();
            if (len === undefined)
                throw new Error("CodeGen: not in self-balancing block");
            const toClose = this._nodes.length - len;
            if (toClose < 0 || (nodeCount !== undefined && toClose !== nodeCount)) {
                throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);
            }
            this._nodes.length = len;
            return this;
        }
        // `function` heading (or definition if funcBody is passed)
        func(name, args = code_1.nil, async, funcBody) {
            this._blockNode(new Func(name, args, async));
            if (funcBody)
                this.code(funcBody).endFunc();
            return this;
        }
        // end function definition
        endFunc() {
            return this._endBlockNode(Func);
        }
        optimize(n = 1) {
            while (n-- > 0) {
                this._root.optimizeNodes();
                this._root.optimizeNames(this._root.names, this._constants);
            }
        }
        _leafNode(node) {
            this._currNode.nodes.push(node);
            return this;
        }
        _blockNode(node) {
            this._currNode.nodes.push(node);
            this._nodes.push(node);
        }
        _endBlockNode(N1, N2) {
            const n = this._currNode;
            if (n instanceof N1 || (N2 && n instanceof N2)) {
                this._nodes.pop();
                return this;
            }
            throw new Error(`CodeGen: not in block "${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}"`);
        }
        _elseNode(node) {
            const n = this._currNode;
            if (!(n instanceof If)) {
                throw new Error('CodeGen: "else" without "if"');
            }
            this._currNode = n.else = node;
            return this;
        }
        get _root() {
            return this._nodes[0];
        }
        get _currNode() {
            const ns = this._nodes;
            return ns[ns.length - 1];
        }
        set _currNode(node) {
            const ns = this._nodes;
            ns[ns.length - 1] = node;
        }
    }
    exports.CodeGen = CodeGen;
    function addNames(names, from) {
        for (const n in from)
            names[n] = (names[n] || 0) + (from[n] || 0);
        return names;
    }
    function addExprNames(names, from) {
        return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;
    }
    function optimizeExpr(expr, names, constants) {
        if (expr instanceof code_1.Name)
            return replaceName(expr);
        if (!canOptimize(expr))
            return expr;
        return new code_1._Code(expr._items.reduce((items, c) => {
            if (c instanceof code_1.Name)
                c = replaceName(c);
            if (c instanceof code_1._Code)
                items.push(...c._items);
            else
                items.push(c);
            return items;
        }, []));
        function replaceName(n) {
            const c = constants[n.str];
            if (c === undefined || names[n.str] !== 1)
                return n;
            delete names[n.str];
            return c;
        }
        function canOptimize(e) {
            return (e instanceof code_1._Code &&
                e._items.some((c) => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined));
        }
    }
    function subtractNames(names, from) {
        for (const n in from)
            names[n] = (names[n] || 0) - (from[n] || 0);
    }
    function not(x) {
        return typeof x == "boolean" || typeof x == "number" || x === null ? !x : (0, code_1._) `!${par(x)}`;
    }
    exports.not = not;
    const andCode = mappend(exports.operators.AND);
    // boolean AND (&&) expression with the passed arguments
    function and(...args) {
        return args.reduce(andCode);
    }
    exports.and = and;
    const orCode = mappend(exports.operators.OR);
    // boolean OR (||) expression with the passed arguments
    function or(...args) {
        return args.reduce(orCode);
    }
    exports.or = or;
    function mappend(op) {
        return (x, y) => (x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._) `${par(x)} ${op} ${par(y)}`);
    }
    function par(x) {
        return x instanceof code_1.Name ? x : (0, code_1._) `(${x})`;
    }

    }(codegen$1));

    var util$1 = {};

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkStrictMode = exports.getErrorPath = exports.Type = exports.useFunc = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;
    const codegen_1 = codegen$1;
    const code_1 = code$3;
    // TODO refactor to use Set
    function toHash(arr) {
        const hash = {};
        for (const item of arr)
            hash[item] = true;
        return hash;
    }
    exports.toHash = toHash;
    function alwaysValidSchema(it, schema) {
        if (typeof schema == "boolean")
            return schema;
        if (Object.keys(schema).length === 0)
            return true;
        checkUnknownRules(it, schema);
        return !schemaHasRules(schema, it.self.RULES.all);
    }
    exports.alwaysValidSchema = alwaysValidSchema;
    function checkUnknownRules(it, schema = it.schema) {
        const { opts, self } = it;
        if (!opts.strictSchema)
            return;
        if (typeof schema === "boolean")
            return;
        const rules = self.RULES.keywords;
        for (const key in schema) {
            if (!rules[key])
                checkStrictMode(it, `unknown keyword: "${key}"`);
        }
    }
    exports.checkUnknownRules = checkUnknownRules;
    function schemaHasRules(schema, rules) {
        if (typeof schema == "boolean")
            return !schema;
        for (const key in schema)
            if (rules[key])
                return true;
        return false;
    }
    exports.schemaHasRules = schemaHasRules;
    function schemaHasRulesButRef(schema, RULES) {
        if (typeof schema == "boolean")
            return !schema;
        for (const key in schema)
            if (key !== "$ref" && RULES.all[key])
                return true;
        return false;
    }
    exports.schemaHasRulesButRef = schemaHasRulesButRef;
    function schemaRefOrVal({ topSchemaRef, schemaPath }, schema, keyword, $data) {
        if (!$data) {
            if (typeof schema == "number" || typeof schema == "boolean")
                return schema;
            if (typeof schema == "string")
                return (0, codegen_1._) `${schema}`;
        }
        return (0, codegen_1._) `${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;
    }
    exports.schemaRefOrVal = schemaRefOrVal;
    function unescapeFragment(str) {
        return unescapeJsonPointer(decodeURIComponent(str));
    }
    exports.unescapeFragment = unescapeFragment;
    function escapeFragment(str) {
        return encodeURIComponent(escapeJsonPointer(str));
    }
    exports.escapeFragment = escapeFragment;
    function escapeJsonPointer(str) {
        if (typeof str == "number")
            return `${str}`;
        return str.replace(/~/g, "~0").replace(/\//g, "~1");
    }
    exports.escapeJsonPointer = escapeJsonPointer;
    function unescapeJsonPointer(str) {
        return str.replace(/~1/g, "/").replace(/~0/g, "~");
    }
    exports.unescapeJsonPointer = unescapeJsonPointer;
    function eachItem(xs, f) {
        if (Array.isArray(xs)) {
            for (const x of xs)
                f(x);
        }
        else {
            f(xs);
        }
    }
    exports.eachItem = eachItem;
    function makeMergeEvaluated({ mergeNames, mergeToName, mergeValues, resultToName, }) {
        return (gen, from, to, toName) => {
            const res = to === undefined
                ? from
                : to instanceof codegen_1.Name
                    ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to)
                    : from instanceof codegen_1.Name
                        ? (mergeToName(gen, to, from), from)
                        : mergeValues(from, to);
            return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;
        };
    }
    exports.mergeEvaluated = {
        props: makeMergeEvaluated({
            mergeNames: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true && ${from} !== undefined`, () => {
                gen.if((0, codegen_1._) `${from} === true`, () => gen.assign(to, true), () => gen.assign(to, (0, codegen_1._) `${to} || {}`).code((0, codegen_1._) `Object.assign(${to}, ${from})`));
            }),
            mergeToName: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true`, () => {
                if (from === true) {
                    gen.assign(to, true);
                }
                else {
                    gen.assign(to, (0, codegen_1._) `${to} || {}`);
                    setEvaluated(gen, to, from);
                }
            }),
            mergeValues: (from, to) => (from === true ? true : { ...from, ...to }),
            resultToName: evaluatedPropsToName,
        }),
        items: makeMergeEvaluated({
            mergeNames: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true && ${from} !== undefined`, () => gen.assign(to, (0, codegen_1._) `${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)),
            mergeToName: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true`, () => gen.assign(to, from === true ? true : (0, codegen_1._) `${to} > ${from} ? ${to} : ${from}`)),
            mergeValues: (from, to) => (from === true ? true : Math.max(from, to)),
            resultToName: (gen, items) => gen.var("items", items),
        }),
    };
    function evaluatedPropsToName(gen, ps) {
        if (ps === true)
            return gen.var("props", true);
        const props = gen.var("props", (0, codegen_1._) `{}`);
        if (ps !== undefined)
            setEvaluated(gen, props, ps);
        return props;
    }
    exports.evaluatedPropsToName = evaluatedPropsToName;
    function setEvaluated(gen, props, ps) {
        Object.keys(ps).forEach((p) => gen.assign((0, codegen_1._) `${props}${(0, codegen_1.getProperty)(p)}`, true));
    }
    exports.setEvaluated = setEvaluated;
    const snippets = {};
    function useFunc(gen, f) {
        return gen.scopeValue("func", {
            ref: f,
            code: snippets[f.code] || (snippets[f.code] = new code_1._Code(f.code)),
        });
    }
    exports.useFunc = useFunc;
    var Type;
    (function (Type) {
        Type[Type["Num"] = 0] = "Num";
        Type[Type["Str"] = 1] = "Str";
    })(Type = exports.Type || (exports.Type = {}));
    function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
        // let path
        if (dataProp instanceof codegen_1.Name) {
            const isNumber = dataPropType === Type.Num;
            return jsPropertySyntax
                ? isNumber
                    ? (0, codegen_1._) `"[" + ${dataProp} + "]"`
                    : (0, codegen_1._) `"['" + ${dataProp} + "']"`
                : isNumber
                    ? (0, codegen_1._) `"/" + ${dataProp}`
                    : (0, codegen_1._) `"/" + ${dataProp}.replace(/~/g, "~0").replace(/\\//g, "~1")`; // TODO maybe use global escapePointer
        }
        return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : "/" + escapeJsonPointer(dataProp);
    }
    exports.getErrorPath = getErrorPath;
    function checkStrictMode(it, msg, mode = it.opts.strictSchema) {
        if (!mode)
            return;
        msg = `strict mode: ${msg}`;
        if (mode === true)
            throw new Error(msg);
        it.self.logger.warn(msg);
    }
    exports.checkStrictMode = checkStrictMode;

    }(util$1));

    var names$3 = {};

    Object.defineProperty(names$3, "__esModule", { value: true });
    const codegen_1$X = codegen$1;
    const names$2 = {
        // validation function arguments
        data: new codegen_1$X.Name("data"),
        // args passed from referencing schema
        valCxt: new codegen_1$X.Name("valCxt"),
        instancePath: new codegen_1$X.Name("instancePath"),
        parentData: new codegen_1$X.Name("parentData"),
        parentDataProperty: new codegen_1$X.Name("parentDataProperty"),
        rootData: new codegen_1$X.Name("rootData"),
        dynamicAnchors: new codegen_1$X.Name("dynamicAnchors"),
        // function scoped variables
        vErrors: new codegen_1$X.Name("vErrors"),
        errors: new codegen_1$X.Name("errors"),
        this: new codegen_1$X.Name("this"),
        // "globals"
        self: new codegen_1$X.Name("self"),
        scope: new codegen_1$X.Name("scope"),
        // JTD serialize/parse name for JSON string and position
        json: new codegen_1$X.Name("json"),
        jsonPos: new codegen_1$X.Name("jsonPos"),
        jsonLen: new codegen_1$X.Name("jsonLen"),
        jsonPart: new codegen_1$X.Name("jsonPart"),
    };
    names$3.default = names$2;

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;
    const codegen_1 = codegen$1;
    const util_1 = util$1;
    const names_1 = names$3;
    exports.keywordError = {
        message: ({ keyword }) => (0, codegen_1.str) `must pass "${keyword}" keyword validation`,
    };
    exports.keyword$DataError = {
        message: ({ keyword, schemaType }) => schemaType
            ? (0, codegen_1.str) `"${keyword}" keyword must be ${schemaType} ($data)`
            : (0, codegen_1.str) `"${keyword}" keyword is invalid ($data)`,
    };
    function reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {
        const { it } = cxt;
        const { gen, compositeRule, allErrors } = it;
        const errObj = errorObjectCode(cxt, error, errorPaths);
        if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : (compositeRule || allErrors)) {
            addError(gen, errObj);
        }
        else {
            returnErrors(it, (0, codegen_1._) `[${errObj}]`);
        }
    }
    exports.reportError = reportError;
    function reportExtraError(cxt, error = exports.keywordError, errorPaths) {
        const { it } = cxt;
        const { gen, compositeRule, allErrors } = it;
        const errObj = errorObjectCode(cxt, error, errorPaths);
        addError(gen, errObj);
        if (!(compositeRule || allErrors)) {
            returnErrors(it, names_1.default.vErrors);
        }
    }
    exports.reportExtraError = reportExtraError;
    function resetErrorsCount(gen, errsCount) {
        gen.assign(names_1.default.errors, errsCount);
        gen.if((0, codegen_1._) `${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign((0, codegen_1._) `${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));
    }
    exports.resetErrorsCount = resetErrorsCount;
    function extendErrors({ gen, keyword, schemaValue, data, errsCount, it, }) {
        /* istanbul ignore if */
        if (errsCount === undefined)
            throw new Error("ajv implementation error");
        const err = gen.name("err");
        gen.forRange("i", errsCount, names_1.default.errors, (i) => {
            gen.const(err, (0, codegen_1._) `${names_1.default.vErrors}[${i}]`);
            gen.if((0, codegen_1._) `${err}.instancePath === undefined`, () => gen.assign((0, codegen_1._) `${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));
            gen.assign((0, codegen_1._) `${err}.schemaPath`, (0, codegen_1.str) `${it.errSchemaPath}/${keyword}`);
            if (it.opts.verbose) {
                gen.assign((0, codegen_1._) `${err}.schema`, schemaValue);
                gen.assign((0, codegen_1._) `${err}.data`, data);
            }
        });
    }
    exports.extendErrors = extendErrors;
    function addError(gen, errObj) {
        const err = gen.const("err", errObj);
        gen.if((0, codegen_1._) `${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, (0, codegen_1._) `[${err}]`), (0, codegen_1._) `${names_1.default.vErrors}.push(${err})`);
        gen.code((0, codegen_1._) `${names_1.default.errors}++`);
    }
    function returnErrors(it, errs) {
        const { gen, validateName, schemaEnv } = it;
        if (schemaEnv.$async) {
            gen.throw((0, codegen_1._) `new ${it.ValidationError}(${errs})`);
        }
        else {
            gen.assign((0, codegen_1._) `${validateName}.errors`, errs);
            gen.return(false);
        }
    }
    const E = {
        keyword: new codegen_1.Name("keyword"),
        schemaPath: new codegen_1.Name("schemaPath"),
        params: new codegen_1.Name("params"),
        propertyName: new codegen_1.Name("propertyName"),
        message: new codegen_1.Name("message"),
        schema: new codegen_1.Name("schema"),
        parentSchema: new codegen_1.Name("parentSchema"),
    };
    function errorObjectCode(cxt, error, errorPaths) {
        const { createErrors } = cxt.it;
        if (createErrors === false)
            return (0, codegen_1._) `{}`;
        return errorObject(cxt, error, errorPaths);
    }
    function errorObject(cxt, error, errorPaths = {}) {
        const { gen, it } = cxt;
        const keyValues = [
            errorInstancePath(it, errorPaths),
            errorSchemaPath(cxt, errorPaths),
        ];
        extraErrorProps(cxt, error, keyValues);
        return gen.object(...keyValues);
    }
    function errorInstancePath({ errorPath }, { instancePath }) {
        const instPath = instancePath
            ? (0, codegen_1.str) `${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}`
            : errorPath;
        return [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)];
    }
    function errorSchemaPath({ keyword, it: { errSchemaPath } }, { schemaPath, parentSchema }) {
        let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str) `${errSchemaPath}/${keyword}`;
        if (schemaPath) {
            schPath = (0, codegen_1.str) `${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;
        }
        return [E.schemaPath, schPath];
    }
    function extraErrorProps(cxt, { params, message }, keyValues) {
        const { keyword, data, schemaValue, it } = cxt;
        const { opts, propertyName, topSchemaRef, schemaPath } = it;
        keyValues.push([E.keyword, keyword], [E.params, typeof params == "function" ? params(cxt) : params || (0, codegen_1._) `{}`]);
        if (opts.messages) {
            keyValues.push([E.message, typeof message == "function" ? message(cxt) : message]);
        }
        if (opts.verbose) {
            keyValues.push([E.schema, schemaValue], [E.parentSchema, (0, codegen_1._) `${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);
        }
        if (propertyName)
            keyValues.push([E.propertyName, propertyName]);
    }

    }(errors$1));

    Object.defineProperty(boolSchema$1, "__esModule", { value: true });
    boolSchema$1.boolOrEmptySchema = boolSchema$1.topBoolOrEmptySchema = void 0;
    const errors_1$5 = errors$1;
    const codegen_1$W = codegen$1;
    const names_1$d = names$3;
    const boolError$1 = {
        message: "boolean schema is false",
    };
    function topBoolOrEmptySchema$1(it) {
        const { gen, schema, validateName } = it;
        if (schema === false) {
            falseSchemaError$1(it, false);
        }
        else if (typeof schema == "object" && schema.$async === true) {
            gen.return(names_1$d.default.data);
        }
        else {
            gen.assign((0, codegen_1$W._) `${validateName}.errors`, null);
            gen.return(true);
        }
    }
    boolSchema$1.topBoolOrEmptySchema = topBoolOrEmptySchema$1;
    function boolOrEmptySchema$1(it, valid) {
        const { gen, schema } = it;
        if (schema === false) {
            gen.var(valid, false); // TODO var
            falseSchemaError$1(it);
        }
        else {
            gen.var(valid, true); // TODO var
        }
    }
    boolSchema$1.boolOrEmptySchema = boolOrEmptySchema$1;
    function falseSchemaError$1(it, overrideAllErrors) {
        const { gen, data } = it;
        // TODO maybe some other interface should be used for non-keyword validation errors...
        const cxt = {
            gen,
            keyword: "false schema",
            data,
            schema: false,
            schemaCode: false,
            schemaValue: false,
            params: {},
            it,
        };
        (0, errors_1$5.reportError)(cxt, boolError$1, undefined, overrideAllErrors);
    }

    var dataType$1 = {};

    var rules$1 = {};

    Object.defineProperty(rules$1, "__esModule", { value: true });
    rules$1.getRules = rules$1.isJSONType = void 0;
    const _jsonTypes$1 = ["string", "number", "integer", "boolean", "null", "object", "array"];
    const jsonTypes$1 = new Set(_jsonTypes$1);
    function isJSONType$1(x) {
        return typeof x == "string" && jsonTypes$1.has(x);
    }
    rules$1.isJSONType = isJSONType$1;
    function getRules$2() {
        const groups = {
            number: { type: "number", rules: [] },
            string: { type: "string", rules: [] },
            array: { type: "array", rules: [] },
            object: { type: "object", rules: [] },
        };
        return {
            types: { ...groups, integer: true, boolean: true, null: true },
            rules: [{ rules: [] }, groups.number, groups.string, groups.array, groups.object],
            post: { rules: [] },
            all: {},
            keywords: {},
        };
    }
    rules$1.getRules = getRules$2;

    var applicability$1 = {};

    Object.defineProperty(applicability$1, "__esModule", { value: true });
    applicability$1.shouldUseRule = applicability$1.shouldUseGroup = applicability$1.schemaHasRulesForType = void 0;
    function schemaHasRulesForType$1({ schema, self }, type) {
        const group = self.RULES.types[type];
        return group && group !== true && shouldUseGroup$1(schema, group);
    }
    applicability$1.schemaHasRulesForType = schemaHasRulesForType$1;
    function shouldUseGroup$1(schema, group) {
        return group.rules.some((rule) => shouldUseRule$1(schema, rule));
    }
    applicability$1.shouldUseGroup = shouldUseGroup$1;
    function shouldUseRule$1(schema, rule) {
        var _a;
        return (schema[rule.keyword] !== undefined ||
            ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some((kwd) => schema[kwd] !== undefined)));
    }
    applicability$1.shouldUseRule = shouldUseRule$1;

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;
    const rules_1 = rules$1;
    const applicability_1 = applicability$1;
    const errors_1 = errors$1;
    const codegen_1 = codegen$1;
    const util_1 = util$1;
    var DataType;
    (function (DataType) {
        DataType[DataType["Correct"] = 0] = "Correct";
        DataType[DataType["Wrong"] = 1] = "Wrong";
    })(DataType = exports.DataType || (exports.DataType = {}));
    function getSchemaTypes(schema) {
        const types = getJSONTypes(schema.type);
        const hasNull = types.includes("null");
        if (hasNull) {
            if (schema.nullable === false)
                throw new Error("type: null contradicts nullable: false");
        }
        else {
            if (!types.length && schema.nullable !== undefined) {
                throw new Error('"nullable" cannot be used without "type"');
            }
            if (schema.nullable === true)
                types.push("null");
        }
        return types;
    }
    exports.getSchemaTypes = getSchemaTypes;
    function getJSONTypes(ts) {
        const types = Array.isArray(ts) ? ts : ts ? [ts] : [];
        if (types.every(rules_1.isJSONType))
            return types;
        throw new Error("type must be JSONType or JSONType[]: " + types.join(","));
    }
    exports.getJSONTypes = getJSONTypes;
    function coerceAndCheckDataType(it, types) {
        const { gen, data, opts } = it;
        const coerceTo = coerceToTypes(types, opts.coerceTypes);
        const checkTypes = types.length > 0 &&
            !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));
        if (checkTypes) {
            const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);
            gen.if(wrongType, () => {
                if (coerceTo.length)
                    coerceData(it, types, coerceTo);
                else
                    reportTypeError(it);
            });
        }
        return checkTypes;
    }
    exports.coerceAndCheckDataType = coerceAndCheckDataType;
    const COERCIBLE = new Set(["string", "number", "integer", "boolean", "null"]);
    function coerceToTypes(types, coerceTypes) {
        return coerceTypes
            ? types.filter((t) => COERCIBLE.has(t) || (coerceTypes === "array" && t === "array"))
            : [];
    }
    function coerceData(it, types, coerceTo) {
        const { gen, data, opts } = it;
        const dataType = gen.let("dataType", (0, codegen_1._) `typeof ${data}`);
        const coerced = gen.let("coerced", (0, codegen_1._) `undefined`);
        if (opts.coerceTypes === "array") {
            gen.if((0, codegen_1._) `${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen
                .assign(data, (0, codegen_1._) `${data}[0]`)
                .assign(dataType, (0, codegen_1._) `typeof ${data}`)
                .if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));
        }
        gen.if((0, codegen_1._) `${coerced} !== undefined`);
        for (const t of coerceTo) {
            if (COERCIBLE.has(t) || (t === "array" && opts.coerceTypes === "array")) {
                coerceSpecificType(t);
            }
        }
        gen.else();
        reportTypeError(it);
        gen.endIf();
        gen.if((0, codegen_1._) `${coerced} !== undefined`, () => {
            gen.assign(data, coerced);
            assignParentData(it, coerced);
        });
        function coerceSpecificType(t) {
            switch (t) {
                case "string":
                    gen
                        .elseIf((0, codegen_1._) `${dataType} == "number" || ${dataType} == "boolean"`)
                        .assign(coerced, (0, codegen_1._) `"" + ${data}`)
                        .elseIf((0, codegen_1._) `${data} === null`)
                        .assign(coerced, (0, codegen_1._) `""`);
                    return;
                case "number":
                    gen
                        .elseIf((0, codegen_1._) `${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`)
                        .assign(coerced, (0, codegen_1._) `+${data}`);
                    return;
                case "integer":
                    gen
                        .elseIf((0, codegen_1._) `${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`)
                        .assign(coerced, (0, codegen_1._) `+${data}`);
                    return;
                case "boolean":
                    gen
                        .elseIf((0, codegen_1._) `${data} === "false" || ${data} === 0 || ${data} === null`)
                        .assign(coerced, false)
                        .elseIf((0, codegen_1._) `${data} === "true" || ${data} === 1`)
                        .assign(coerced, true);
                    return;
                case "null":
                    gen.elseIf((0, codegen_1._) `${data} === "" || ${data} === 0 || ${data} === false`);
                    gen.assign(coerced, null);
                    return;
                case "array":
                    gen
                        .elseIf((0, codegen_1._) `${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`)
                        .assign(coerced, (0, codegen_1._) `[${data}]`);
            }
        }
    }
    function assignParentData({ gen, parentData, parentDataProperty }, expr) {
        // TODO use gen.property
        gen.if((0, codegen_1._) `${parentData} !== undefined`, () => gen.assign((0, codegen_1._) `${parentData}[${parentDataProperty}]`, expr));
    }
    function checkDataType(dataType, data, strictNums, correct = DataType.Correct) {
        const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;
        let cond;
        switch (dataType) {
            case "null":
                return (0, codegen_1._) `${data} ${EQ} null`;
            case "array":
                cond = (0, codegen_1._) `Array.isArray(${data})`;
                break;
            case "object":
                cond = (0, codegen_1._) `${data} && typeof ${data} == "object" && !Array.isArray(${data})`;
                break;
            case "integer":
                cond = numCond((0, codegen_1._) `!(${data} % 1) && !isNaN(${data})`);
                break;
            case "number":
                cond = numCond();
                break;
            default:
                return (0, codegen_1._) `typeof ${data} ${EQ} ${dataType}`;
        }
        return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);
        function numCond(_cond = codegen_1.nil) {
            return (0, codegen_1.and)((0, codegen_1._) `typeof ${data} == "number"`, _cond, strictNums ? (0, codegen_1._) `isFinite(${data})` : codegen_1.nil);
        }
    }
    exports.checkDataType = checkDataType;
    function checkDataTypes(dataTypes, data, strictNums, correct) {
        if (dataTypes.length === 1) {
            return checkDataType(dataTypes[0], data, strictNums, correct);
        }
        let cond;
        const types = (0, util_1.toHash)(dataTypes);
        if (types.array && types.object) {
            const notObj = (0, codegen_1._) `typeof ${data} != "object"`;
            cond = types.null ? notObj : (0, codegen_1._) `!${data} || ${notObj}`;
            delete types.null;
            delete types.array;
            delete types.object;
        }
        else {
            cond = codegen_1.nil;
        }
        if (types.number)
            delete types.integer;
        for (const t in types)
            cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));
        return cond;
    }
    exports.checkDataTypes = checkDataTypes;
    const typeError = {
        message: ({ schema }) => `must be ${schema}`,
        params: ({ schema, schemaValue }) => typeof schema == "string" ? (0, codegen_1._) `{type: ${schema}}` : (0, codegen_1._) `{type: ${schemaValue}}`,
    };
    function reportTypeError(it) {
        const cxt = getTypeErrorContext(it);
        (0, errors_1.reportError)(cxt, typeError);
    }
    exports.reportTypeError = reportTypeError;
    function getTypeErrorContext(it) {
        const { gen, data, schema } = it;
        const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, "type");
        return {
            gen,
            keyword: "type",
            data,
            schema: schema.type,
            schemaCode,
            schemaValue: schemaCode,
            parentSchema: schema,
            params: {},
            it,
        };
    }

    }(dataType$1));

    var defaults$1 = {};

    Object.defineProperty(defaults$1, "__esModule", { value: true });
    defaults$1.assignDefaults = void 0;
    const codegen_1$V = codegen$1;
    const util_1$P = util$1;
    function assignDefaults$1(it, ty) {
        const { properties, items } = it.schema;
        if (ty === "object" && properties) {
            for (const key in properties) {
                assignDefault$1(it, key, properties[key].default);
            }
        }
        else if (ty === "array" && Array.isArray(items)) {
            items.forEach((sch, i) => assignDefault$1(it, i, sch.default));
        }
    }
    defaults$1.assignDefaults = assignDefaults$1;
    function assignDefault$1(it, prop, defaultValue) {
        const { gen, compositeRule, data, opts } = it;
        if (defaultValue === undefined)
            return;
        const childData = (0, codegen_1$V._) `${data}${(0, codegen_1$V.getProperty)(prop)}`;
        if (compositeRule) {
            (0, util_1$P.checkStrictMode)(it, `default is ignored for: ${childData}`);
            return;
        }
        let condition = (0, codegen_1$V._) `${childData} === undefined`;
        if (opts.useDefaults === "empty") {
            condition = (0, codegen_1$V._) `${condition} || ${childData} === null || ${childData} === ""`;
        }
        // `${childData} === undefined` +
        // (opts.useDefaults === "empty" ? ` || ${childData} === null || ${childData} === ""` : "")
        gen.if(condition, (0, codegen_1$V._) `${childData} = ${(0, codegen_1$V.stringify)(defaultValue)}`);
    }

    var keyword$1 = {};

    var code$2 = {};

    Object.defineProperty(code$2, "__esModule", { value: true });
    code$2.validateUnion = code$2.validateArray = code$2.usePattern = code$2.callValidateCode = code$2.schemaProperties = code$2.allSchemaProperties = code$2.noPropertyInData = code$2.propertyInData = code$2.isOwnProperty = code$2.hasPropFunc = code$2.reportMissingProp = code$2.checkMissingProp = code$2.checkReportMissingProp = void 0;
    const codegen_1$U = codegen$1;
    const util_1$O = util$1;
    const names_1$c = names$3;
    const util_2$3 = util$1;
    function checkReportMissingProp$1(cxt, prop) {
        const { gen, data, it } = cxt;
        gen.if(noPropertyInData$1(gen, data, prop, it.opts.ownProperties), () => {
            cxt.setParams({ missingProperty: (0, codegen_1$U._) `${prop}` }, true);
            cxt.error();
        });
    }
    code$2.checkReportMissingProp = checkReportMissingProp$1;
    function checkMissingProp$1({ gen, data, it: { opts } }, properties, missing) {
        return (0, codegen_1$U.or)(...properties.map((prop) => (0, codegen_1$U.and)(noPropertyInData$1(gen, data, prop, opts.ownProperties), (0, codegen_1$U._) `${missing} = ${prop}`)));
    }
    code$2.checkMissingProp = checkMissingProp$1;
    function reportMissingProp$1(cxt, missing) {
        cxt.setParams({ missingProperty: missing }, true);
        cxt.error();
    }
    code$2.reportMissingProp = reportMissingProp$1;
    function hasPropFunc$1(gen) {
        return gen.scopeValue("func", {
            // eslint-disable-next-line @typescript-eslint/unbound-method
            ref: Object.prototype.hasOwnProperty,
            code: (0, codegen_1$U._) `Object.prototype.hasOwnProperty`,
        });
    }
    code$2.hasPropFunc = hasPropFunc$1;
    function isOwnProperty$1(gen, data, property) {
        return (0, codegen_1$U._) `${hasPropFunc$1(gen)}.call(${data}, ${property})`;
    }
    code$2.isOwnProperty = isOwnProperty$1;
    function propertyInData$1(gen, data, property, ownProperties) {
        const cond = (0, codegen_1$U._) `${data}${(0, codegen_1$U.getProperty)(property)} !== undefined`;
        return ownProperties ? (0, codegen_1$U._) `${cond} && ${isOwnProperty$1(gen, data, property)}` : cond;
    }
    code$2.propertyInData = propertyInData$1;
    function noPropertyInData$1(gen, data, property, ownProperties) {
        const cond = (0, codegen_1$U._) `${data}${(0, codegen_1$U.getProperty)(property)} === undefined`;
        return ownProperties ? (0, codegen_1$U.or)(cond, (0, codegen_1$U.not)(isOwnProperty$1(gen, data, property))) : cond;
    }
    code$2.noPropertyInData = noPropertyInData$1;
    function allSchemaProperties$1(schemaMap) {
        return schemaMap ? Object.keys(schemaMap).filter((p) => p !== "__proto__") : [];
    }
    code$2.allSchemaProperties = allSchemaProperties$1;
    function schemaProperties$1(it, schemaMap) {
        return allSchemaProperties$1(schemaMap).filter((p) => !(0, util_1$O.alwaysValidSchema)(it, schemaMap[p]));
    }
    code$2.schemaProperties = schemaProperties$1;
    function callValidateCode$1({ schemaCode, data, it: { gen, topSchemaRef, schemaPath, errorPath }, it }, func, context, passSchema) {
        const dataAndSchema = passSchema ? (0, codegen_1$U._) `${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;
        const valCxt = [
            [names_1$c.default.instancePath, (0, codegen_1$U.strConcat)(names_1$c.default.instancePath, errorPath)],
            [names_1$c.default.parentData, it.parentData],
            [names_1$c.default.parentDataProperty, it.parentDataProperty],
            [names_1$c.default.rootData, names_1$c.default.rootData],
        ];
        if (it.opts.dynamicRef)
            valCxt.push([names_1$c.default.dynamicAnchors, names_1$c.default.dynamicAnchors]);
        const args = (0, codegen_1$U._) `${dataAndSchema}, ${gen.object(...valCxt)}`;
        return context !== codegen_1$U.nil ? (0, codegen_1$U._) `${func}.call(${context}, ${args})` : (0, codegen_1$U._) `${func}(${args})`;
    }
    code$2.callValidateCode = callValidateCode$1;
    const newRegExp$1 = (0, codegen_1$U._) `new RegExp`;
    function usePattern$1({ gen, it: { opts } }, pattern) {
        const u = opts.unicodeRegExp ? "u" : "";
        const { regExp } = opts.code;
        const rx = regExp(pattern, u);
        return gen.scopeValue("pattern", {
            key: rx.toString(),
            ref: rx,
            code: (0, codegen_1$U._) `${regExp.code === "new RegExp" ? newRegExp$1 : (0, util_2$3.useFunc)(gen, regExp)}(${pattern}, ${u})`,
        });
    }
    code$2.usePattern = usePattern$1;
    function validateArray$1(cxt) {
        const { gen, data, keyword, it } = cxt;
        const valid = gen.name("valid");
        if (it.allErrors) {
            const validArr = gen.let("valid", true);
            validateItems(() => gen.assign(validArr, false));
            return validArr;
        }
        gen.var(valid, true);
        validateItems(() => gen.break());
        return valid;
        function validateItems(notValid) {
            const len = gen.const("len", (0, codegen_1$U._) `${data}.length`);
            gen.forRange("i", 0, len, (i) => {
                cxt.subschema({
                    keyword,
                    dataProp: i,
                    dataPropType: util_1$O.Type.Num,
                }, valid);
                gen.if((0, codegen_1$U.not)(valid), notValid);
            });
        }
    }
    code$2.validateArray = validateArray$1;
    function validateUnion$1(cxt) {
        const { gen, schema, keyword, it } = cxt;
        /* istanbul ignore if */
        if (!Array.isArray(schema))
            throw new Error("ajv implementation error");
        const alwaysValid = schema.some((sch) => (0, util_1$O.alwaysValidSchema)(it, sch));
        if (alwaysValid && !it.opts.unevaluated)
            return;
        const valid = gen.let("valid", false);
        const schValid = gen.name("_valid");
        gen.block(() => schema.forEach((_sch, i) => {
            const schCxt = cxt.subschema({
                keyword,
                schemaProp: i,
                compositeRule: true,
            }, schValid);
            gen.assign(valid, (0, codegen_1$U._) `${valid} || ${schValid}`);
            const merged = cxt.mergeValidEvaluated(schCxt, schValid);
            // can short-circuit if `unevaluatedProperties/Items` not supported (opts.unevaluated !== true)
            // or if all properties and items were evaluated (it.props === true && it.items === true)
            if (!merged)
                gen.if((0, codegen_1$U.not)(valid));
        }));
        cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
    }
    code$2.validateUnion = validateUnion$1;

    Object.defineProperty(keyword$1, "__esModule", { value: true });
    keyword$1.validateKeywordUsage = keyword$1.validSchemaType = keyword$1.funcKeywordCode = keyword$1.macroKeywordCode = void 0;
    const codegen_1$T = codegen$1;
    const names_1$b = names$3;
    const code_1$j = code$2;
    const errors_1$4 = errors$1;
    function macroKeywordCode$1(cxt, def) {
        const { gen, keyword, schema, parentSchema, it } = cxt;
        const macroSchema = def.macro.call(it.self, schema, parentSchema, it);
        const schemaRef = useKeyword$1(gen, keyword, macroSchema);
        if (it.opts.validateSchema !== false)
            it.self.validateSchema(macroSchema, true);
        const valid = gen.name("valid");
        cxt.subschema({
            schema: macroSchema,
            schemaPath: codegen_1$T.nil,
            errSchemaPath: `${it.errSchemaPath}/${keyword}`,
            topSchemaRef: schemaRef,
            compositeRule: true,
        }, valid);
        cxt.pass(valid, () => cxt.error(true));
    }
    keyword$1.macroKeywordCode = macroKeywordCode$1;
    function funcKeywordCode$1(cxt, def) {
        var _a;
        const { gen, keyword, schema, parentSchema, $data, it } = cxt;
        checkAsyncKeyword$1(it, def);
        const validate = !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate;
        const validateRef = useKeyword$1(gen, keyword, validate);
        const valid = gen.let("valid");
        cxt.block$data(valid, validateKeyword);
        cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid);
        function validateKeyword() {
            if (def.errors === false) {
                assignValid();
                if (def.modifying)
                    modifyData$1(cxt);
                reportErrs(() => cxt.error());
            }
            else {
                const ruleErrs = def.async ? validateAsync() : validateSync();
                if (def.modifying)
                    modifyData$1(cxt);
                reportErrs(() => addErrs$1(cxt, ruleErrs));
            }
        }
        function validateAsync() {
            const ruleErrs = gen.let("ruleErrs", null);
            gen.try(() => assignValid((0, codegen_1$T._) `await `), (e) => gen.assign(valid, false).if((0, codegen_1$T._) `${e} instanceof ${it.ValidationError}`, () => gen.assign(ruleErrs, (0, codegen_1$T._) `${e}.errors`), () => gen.throw(e)));
            return ruleErrs;
        }
        function validateSync() {
            const validateErrs = (0, codegen_1$T._) `${validateRef}.errors`;
            gen.assign(validateErrs, null);
            assignValid(codegen_1$T.nil);
            return validateErrs;
        }
        function assignValid(_await = def.async ? (0, codegen_1$T._) `await ` : codegen_1$T.nil) {
            const passCxt = it.opts.passContext ? names_1$b.default.this : names_1$b.default.self;
            const passSchema = !(("compile" in def && !$data) || def.schema === false);
            gen.assign(valid, (0, codegen_1$T._) `${_await}${(0, code_1$j.callValidateCode)(cxt, validateRef, passCxt, passSchema)}`, def.modifying);
        }
        function reportErrs(errors) {
            var _a;
            gen.if((0, codegen_1$T.not)((_a = def.valid) !== null && _a !== void 0 ? _a : valid), errors);
        }
    }
    keyword$1.funcKeywordCode = funcKeywordCode$1;
    function modifyData$1(cxt) {
        const { gen, data, it } = cxt;
        gen.if(it.parentData, () => gen.assign(data, (0, codegen_1$T._) `${it.parentData}[${it.parentDataProperty}]`));
    }
    function addErrs$1(cxt, errs) {
        const { gen } = cxt;
        gen.if((0, codegen_1$T._) `Array.isArray(${errs})`, () => {
            gen
                .assign(names_1$b.default.vErrors, (0, codegen_1$T._) `${names_1$b.default.vErrors} === null ? ${errs} : ${names_1$b.default.vErrors}.concat(${errs})`)
                .assign(names_1$b.default.errors, (0, codegen_1$T._) `${names_1$b.default.vErrors}.length`);
            (0, errors_1$4.extendErrors)(cxt);
        }, () => cxt.error());
    }
    function checkAsyncKeyword$1({ schemaEnv }, def) {
        if (def.async && !schemaEnv.$async)
            throw new Error("async keyword in sync schema");
    }
    function useKeyword$1(gen, keyword, result) {
        if (result === undefined)
            throw new Error(`keyword "${keyword}" failed to compile`);
        return gen.scopeValue("keyword", typeof result == "function" ? { ref: result } : { ref: result, code: (0, codegen_1$T.stringify)(result) });
    }
    function validSchemaType$1(schema, schemaType, allowUndefined = false) {
        // TODO add tests
        return (!schemaType.length ||
            schemaType.some((st) => st === "array"
                ? Array.isArray(schema)
                : st === "object"
                    ? schema && typeof schema == "object" && !Array.isArray(schema)
                    : typeof schema == st || (allowUndefined && typeof schema == "undefined")));
    }
    keyword$1.validSchemaType = validSchemaType$1;
    function validateKeywordUsage$1({ schema, opts, self, errSchemaPath }, def, keyword) {
        /* istanbul ignore if */
        if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {
            throw new Error("ajv implementation error");
        }
        const deps = def.dependencies;
        if (deps === null || deps === void 0 ? void 0 : deps.some((kwd) => !Object.prototype.hasOwnProperty.call(schema, kwd))) {
            throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(",")}`);
        }
        if (def.validateSchema) {
            const valid = def.validateSchema(schema[keyword]);
            if (!valid) {
                const msg = `keyword "${keyword}" value is invalid at path "${errSchemaPath}": ` +
                    self.errorsText(def.validateSchema.errors);
                if (opts.validateSchema === "log")
                    self.logger.error(msg);
                else
                    throw new Error(msg);
            }
        }
    }
    keyword$1.validateKeywordUsage = validateKeywordUsage$1;

    var subschema$1 = {};

    Object.defineProperty(subschema$1, "__esModule", { value: true });
    subschema$1.extendSubschemaMode = subschema$1.extendSubschemaData = subschema$1.getSubschema = void 0;
    const codegen_1$S = codegen$1;
    const util_1$N = util$1;
    function getSubschema$1(it, { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }) {
        if (keyword !== undefined && schema !== undefined) {
            throw new Error('both "keyword" and "schema" passed, only one allowed');
        }
        if (keyword !== undefined) {
            const sch = it.schema[keyword];
            return schemaProp === undefined
                ? {
                    schema: sch,
                    schemaPath: (0, codegen_1$S._) `${it.schemaPath}${(0, codegen_1$S.getProperty)(keyword)}`,
                    errSchemaPath: `${it.errSchemaPath}/${keyword}`,
                }
                : {
                    schema: sch[schemaProp],
                    schemaPath: (0, codegen_1$S._) `${it.schemaPath}${(0, codegen_1$S.getProperty)(keyword)}${(0, codegen_1$S.getProperty)(schemaProp)}`,
                    errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1$N.escapeFragment)(schemaProp)}`,
                };
        }
        if (schema !== undefined) {
            if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {
                throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
            }
            return {
                schema,
                schemaPath,
                topSchemaRef,
                errSchemaPath,
            };
        }
        throw new Error('either "keyword" or "schema" must be passed');
    }
    subschema$1.getSubschema = getSubschema$1;
    function extendSubschemaData$1(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {
        if (data !== undefined && dataProp !== undefined) {
            throw new Error('both "data" and "dataProp" passed, only one allowed');
        }
        const { gen } = it;
        if (dataProp !== undefined) {
            const { errorPath, dataPathArr, opts } = it;
            const nextData = gen.let("data", (0, codegen_1$S._) `${it.data}${(0, codegen_1$S.getProperty)(dataProp)}`, true);
            dataContextProps(nextData);
            subschema.errorPath = (0, codegen_1$S.str) `${errorPath}${(0, util_1$N.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;
            subschema.parentDataProperty = (0, codegen_1$S._) `${dataProp}`;
            subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];
        }
        if (data !== undefined) {
            const nextData = data instanceof codegen_1$S.Name ? data : gen.let("data", data, true); // replaceable if used once?
            dataContextProps(nextData);
            if (propertyName !== undefined)
                subschema.propertyName = propertyName;
            // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr
        }
        if (dataTypes)
            subschema.dataTypes = dataTypes;
        function dataContextProps(_nextData) {
            subschema.data = _nextData;
            subschema.dataLevel = it.dataLevel + 1;
            subschema.dataTypes = [];
            it.definedProperties = new Set();
            subschema.parentData = it.data;
            subschema.dataNames = [...it.dataNames, _nextData];
        }
    }
    subschema$1.extendSubschemaData = extendSubschemaData$1;
    function extendSubschemaMode$1(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {
        if (compositeRule !== undefined)
            subschema.compositeRule = compositeRule;
        if (createErrors !== undefined)
            subschema.createErrors = createErrors;
        if (allErrors !== undefined)
            subschema.allErrors = allErrors;
        subschema.jtdDiscriminator = jtdDiscriminator; // not inherited
        subschema.jtdMetadata = jtdMetadata; // not inherited
    }
    subschema$1.extendSubschemaMode = extendSubschemaMode$1;

    var resolve$3 = {};

    // do not edit .js files directly - edit src/index.jst



    var fastDeepEqual = function equal(a, b) {
      if (a === b) return true;

      if (a && b && typeof a == 'object' && typeof b == 'object') {
        if (a.constructor !== b.constructor) return false;

        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0;)
            if (!equal(a[i], b[i])) return false;
          return true;
        }



        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();

        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;

        for (i = length; i-- !== 0;)
          if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

        for (i = length; i-- !== 0;) {
          var key = keys[i];

          if (!equal(a[key], b[key])) return false;
        }

        return true;
      }

      // true if both NaN, false otherwise
      return a!==a && b!==b;
    };

    var jsonSchemaTraverse$1 = {exports: {}};

    var traverse$4 = jsonSchemaTraverse$1.exports = function (schema, opts, cb) {
      // Legacy support for v0.3.1 and earlier.
      if (typeof opts == 'function') {
        cb = opts;
        opts = {};
      }

      cb = opts.cb || cb;
      var pre = (typeof cb == 'function') ? cb : cb.pre || function() {};
      var post = cb.post || function() {};

      _traverse$1(opts, pre, post, schema, '', schema);
    };


    traverse$4.keywords = {
      additionalItems: true,
      items: true,
      contains: true,
      additionalProperties: true,
      propertyNames: true,
      not: true,
      if: true,
      then: true,
      else: true
    };

    traverse$4.arrayKeywords = {
      items: true,
      allOf: true,
      anyOf: true,
      oneOf: true
    };

    traverse$4.propsKeywords = {
      $defs: true,
      definitions: true,
      properties: true,
      patternProperties: true,
      dependencies: true
    };

    traverse$4.skipKeywords = {
      default: true,
      enum: true,
      const: true,
      required: true,
      maximum: true,
      minimum: true,
      exclusiveMaximum: true,
      exclusiveMinimum: true,
      multipleOf: true,
      maxLength: true,
      minLength: true,
      pattern: true,
      format: true,
      maxItems: true,
      minItems: true,
      uniqueItems: true,
      maxProperties: true,
      minProperties: true
    };


    function _traverse$1(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
      if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
        pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
        for (var key in schema) {
          var sch = schema[key];
          if (Array.isArray(sch)) {
            if (key in traverse$4.arrayKeywords) {
              for (var i=0; i<sch.length; i++)
                _traverse$1(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
            }
          } else if (key in traverse$4.propsKeywords) {
            if (sch && typeof sch == 'object') {
              for (var prop in sch)
                _traverse$1(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr$1(prop), rootSchema, jsonPtr, key, schema, prop);
            }
          } else if (key in traverse$4.keywords || (opts.allKeys && !(key in traverse$4.skipKeywords))) {
            _traverse$1(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
          }
        }
        post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
      }
    }


    function escapeJsonPtr$1(str) {
      return str.replace(/~/g, '~0').replace(/\//g, '~1');
    }

    Object.defineProperty(resolve$3, "__esModule", { value: true });
    resolve$3.getSchemaRefs = resolve$3.resolveUrl = resolve$3.normalizeId = resolve$3._getFullPath = resolve$3.getFullPath = resolve$3.inlineRef = void 0;
    const util_1$M = util$1;
    const equal$5 = fastDeepEqual;
    const traverse$3 = jsonSchemaTraverse$1.exports;
    // TODO refactor to use keyword definitions
    const SIMPLE_INLINED$1 = new Set([
        "type",
        "format",
        "pattern",
        "maxLength",
        "minLength",
        "maxProperties",
        "minProperties",
        "maxItems",
        "minItems",
        "maximum",
        "minimum",
        "uniqueItems",
        "multipleOf",
        "required",
        "enum",
        "const",
    ]);
    function inlineRef$1(schema, limit = true) {
        if (typeof schema == "boolean")
            return true;
        if (limit === true)
            return !hasRef$1(schema);
        if (!limit)
            return false;
        return countKeys$1(schema) <= limit;
    }
    resolve$3.inlineRef = inlineRef$1;
    const REF_KEYWORDS$1 = new Set([
        "$ref",
        "$recursiveRef",
        "$recursiveAnchor",
        "$dynamicRef",
        "$dynamicAnchor",
    ]);
    function hasRef$1(schema) {
        for (const key in schema) {
            if (REF_KEYWORDS$1.has(key))
                return true;
            const sch = schema[key];
            if (Array.isArray(sch) && sch.some(hasRef$1))
                return true;
            if (typeof sch == "object" && hasRef$1(sch))
                return true;
        }
        return false;
    }
    function countKeys$1(schema) {
        let count = 0;
        for (const key in schema) {
            if (key === "$ref")
                return Infinity;
            count++;
            if (SIMPLE_INLINED$1.has(key))
                continue;
            if (typeof schema[key] == "object") {
                (0, util_1$M.eachItem)(schema[key], (sch) => (count += countKeys$1(sch)));
            }
            if (count === Infinity)
                return Infinity;
        }
        return count;
    }
    function getFullPath$1(resolver, id = "", normalize) {
        if (normalize !== false)
            id = normalizeId$1(id);
        const p = resolver.parse(id);
        return _getFullPath$1(resolver, p);
    }
    resolve$3.getFullPath = getFullPath$1;
    function _getFullPath$1(resolver, p) {
        const serialized = resolver.serialize(p);
        return serialized.split("#")[0] + "#";
    }
    resolve$3._getFullPath = _getFullPath$1;
    const TRAILING_SLASH_HASH$1 = /#\/?$/;
    function normalizeId$1(id) {
        return id ? id.replace(TRAILING_SLASH_HASH$1, "") : "";
    }
    resolve$3.normalizeId = normalizeId$1;
    function resolveUrl$1(resolver, baseId, id) {
        id = normalizeId$1(id);
        return resolver.resolve(baseId, id);
    }
    resolve$3.resolveUrl = resolveUrl$1;
    const ANCHOR$1 = /^[a-z_][-a-z0-9._]*$/i;
    function getSchemaRefs$1(schema, baseId) {
        if (typeof schema == "boolean")
            return {};
        const { schemaId, uriResolver } = this.opts;
        const schId = normalizeId$1(schema[schemaId] || baseId);
        const baseIds = { "": schId };
        const pathPrefix = getFullPath$1(uriResolver, schId, false);
        const localRefs = {};
        const schemaRefs = new Set();
        traverse$3(schema, { allKeys: true }, (sch, jsonPtr, _, parentJsonPtr) => {
            if (parentJsonPtr === undefined)
                return;
            const fullPath = pathPrefix + jsonPtr;
            let baseId = baseIds[parentJsonPtr];
            if (typeof sch[schemaId] == "string")
                baseId = addRef.call(this, sch[schemaId]);
            addAnchor.call(this, sch.$anchor);
            addAnchor.call(this, sch.$dynamicAnchor);
            baseIds[jsonPtr] = baseId;
            function addRef(ref) {
                // eslint-disable-next-line @typescript-eslint/unbound-method
                const _resolve = this.opts.uriResolver.resolve;
                ref = normalizeId$1(baseId ? _resolve(baseId, ref) : ref);
                if (schemaRefs.has(ref))
                    throw ambiguos(ref);
                schemaRefs.add(ref);
                let schOrRef = this.refs[ref];
                if (typeof schOrRef == "string")
                    schOrRef = this.refs[schOrRef];
                if (typeof schOrRef == "object") {
                    checkAmbiguosRef(sch, schOrRef.schema, ref);
                }
                else if (ref !== normalizeId$1(fullPath)) {
                    if (ref[0] === "#") {
                        checkAmbiguosRef(sch, localRefs[ref], ref);
                        localRefs[ref] = sch;
                    }
                    else {
                        this.refs[ref] = fullPath;
                    }
                }
                return ref;
            }
            function addAnchor(anchor) {
                if (typeof anchor == "string") {
                    if (!ANCHOR$1.test(anchor))
                        throw new Error(`invalid anchor "${anchor}"`);
                    addRef.call(this, `#${anchor}`);
                }
            }
        });
        return localRefs;
        function checkAmbiguosRef(sch1, sch2, ref) {
            if (sch2 !== undefined && !equal$5(sch1, sch2))
                throw ambiguos(ref);
        }
        function ambiguos(ref) {
            return new Error(`reference "${ref}" resolves to more than one schema`);
        }
    }
    resolve$3.getSchemaRefs = getSchemaRefs$1;

    Object.defineProperty(validate$2, "__esModule", { value: true });
    validate$2.getData = validate$2.KeywordCxt = validate$2.validateFunctionCode = void 0;
    const boolSchema_1$1 = boolSchema$1;
    const dataType_1$3 = dataType$1;
    const applicability_1$1 = applicability$1;
    const dataType_2$1 = dataType$1;
    const defaults_1$1 = defaults$1;
    const keyword_1$1 = keyword$1;
    const subschema_1$1 = subschema$1;
    const codegen_1$R = codegen$1;
    const names_1$a = names$3;
    const resolve_1$5 = resolve$3;
    const util_1$L = util$1;
    const errors_1$3 = errors$1;
    // schema compilation - generates validation function, subschemaCode (below) is used for subschemas
    function validateFunctionCode$1(it) {
        if (isSchemaObj$1(it)) {
            checkKeywords$1(it);
            if (schemaCxtHasRules$1(it)) {
                topSchemaObjCode$1(it);
                return;
            }
        }
        validateFunction$1(it, () => (0, boolSchema_1$1.topBoolOrEmptySchema)(it));
    }
    validate$2.validateFunctionCode = validateFunctionCode$1;
    function validateFunction$1({ gen, validateName, schema, schemaEnv, opts }, body) {
        if (opts.code.es5) {
            gen.func(validateName, (0, codegen_1$R._) `${names_1$a.default.data}, ${names_1$a.default.valCxt}`, schemaEnv.$async, () => {
                gen.code((0, codegen_1$R._) `"use strict"; ${funcSourceUrl$1(schema, opts)}`);
                destructureValCxtES5$1(gen, opts);
                gen.code(body);
            });
        }
        else {
            gen.func(validateName, (0, codegen_1$R._) `${names_1$a.default.data}, ${destructureValCxt$1(opts)}`, schemaEnv.$async, () => gen.code(funcSourceUrl$1(schema, opts)).code(body));
        }
    }
    function destructureValCxt$1(opts) {
        return (0, codegen_1$R._) `{${names_1$a.default.instancePath}="", ${names_1$a.default.parentData}, ${names_1$a.default.parentDataProperty}, ${names_1$a.default.rootData}=${names_1$a.default.data}${opts.dynamicRef ? (0, codegen_1$R._) `, ${names_1$a.default.dynamicAnchors}={}` : codegen_1$R.nil}}={}`;
    }
    function destructureValCxtES5$1(gen, opts) {
        gen.if(names_1$a.default.valCxt, () => {
            gen.var(names_1$a.default.instancePath, (0, codegen_1$R._) `${names_1$a.default.valCxt}.${names_1$a.default.instancePath}`);
            gen.var(names_1$a.default.parentData, (0, codegen_1$R._) `${names_1$a.default.valCxt}.${names_1$a.default.parentData}`);
            gen.var(names_1$a.default.parentDataProperty, (0, codegen_1$R._) `${names_1$a.default.valCxt}.${names_1$a.default.parentDataProperty}`);
            gen.var(names_1$a.default.rootData, (0, codegen_1$R._) `${names_1$a.default.valCxt}.${names_1$a.default.rootData}`);
            if (opts.dynamicRef)
                gen.var(names_1$a.default.dynamicAnchors, (0, codegen_1$R._) `${names_1$a.default.valCxt}.${names_1$a.default.dynamicAnchors}`);
        }, () => {
            gen.var(names_1$a.default.instancePath, (0, codegen_1$R._) `""`);
            gen.var(names_1$a.default.parentData, (0, codegen_1$R._) `undefined`);
            gen.var(names_1$a.default.parentDataProperty, (0, codegen_1$R._) `undefined`);
            gen.var(names_1$a.default.rootData, names_1$a.default.data);
            if (opts.dynamicRef)
                gen.var(names_1$a.default.dynamicAnchors, (0, codegen_1$R._) `{}`);
        });
    }
    function topSchemaObjCode$1(it) {
        const { schema, opts, gen } = it;
        validateFunction$1(it, () => {
            if (opts.$comment && schema.$comment)
                commentKeyword$1(it);
            checkNoDefault$1(it);
            gen.let(names_1$a.default.vErrors, null);
            gen.let(names_1$a.default.errors, 0);
            if (opts.unevaluated)
                resetEvaluated$1(it);
            typeAndKeywords$1(it);
            returnResults$1(it);
        });
        return;
    }
    function resetEvaluated$1(it) {
        // TODO maybe some hook to execute it in the end to check whether props/items are Name, as in assignEvaluated
        const { gen, validateName } = it;
        it.evaluated = gen.const("evaluated", (0, codegen_1$R._) `${validateName}.evaluated`);
        gen.if((0, codegen_1$R._) `${it.evaluated}.dynamicProps`, () => gen.assign((0, codegen_1$R._) `${it.evaluated}.props`, (0, codegen_1$R._) `undefined`));
        gen.if((0, codegen_1$R._) `${it.evaluated}.dynamicItems`, () => gen.assign((0, codegen_1$R._) `${it.evaluated}.items`, (0, codegen_1$R._) `undefined`));
    }
    function funcSourceUrl$1(schema, opts) {
        const schId = typeof schema == "object" && schema[opts.schemaId];
        return schId && (opts.code.source || opts.code.process) ? (0, codegen_1$R._) `/*# sourceURL=${schId} */` : codegen_1$R.nil;
    }
    // schema compilation - this function is used recursively to generate code for sub-schemas
    function subschemaCode$1(it, valid) {
        if (isSchemaObj$1(it)) {
            checkKeywords$1(it);
            if (schemaCxtHasRules$1(it)) {
                subSchemaObjCode$1(it, valid);
                return;
            }
        }
        (0, boolSchema_1$1.boolOrEmptySchema)(it, valid);
    }
    function schemaCxtHasRules$1({ schema, self }) {
        if (typeof schema == "boolean")
            return !schema;
        for (const key in schema)
            if (self.RULES.all[key])
                return true;
        return false;
    }
    function isSchemaObj$1(it) {
        return typeof it.schema != "boolean";
    }
    function subSchemaObjCode$1(it, valid) {
        const { schema, gen, opts } = it;
        if (opts.$comment && schema.$comment)
            commentKeyword$1(it);
        updateContext$1(it);
        checkAsyncSchema$1(it);
        const errsCount = gen.const("_errs", names_1$a.default.errors);
        typeAndKeywords$1(it, errsCount);
        // TODO var
        gen.var(valid, (0, codegen_1$R._) `${errsCount} === ${names_1$a.default.errors}`);
    }
    function checkKeywords$1(it) {
        (0, util_1$L.checkUnknownRules)(it);
        checkRefsAndKeywords$1(it);
    }
    function typeAndKeywords$1(it, errsCount) {
        if (it.opts.jtd)
            return schemaKeywords$1(it, [], false, errsCount);
        const types = (0, dataType_1$3.getSchemaTypes)(it.schema);
        const checkedTypes = (0, dataType_1$3.coerceAndCheckDataType)(it, types);
        schemaKeywords$1(it, types, !checkedTypes, errsCount);
    }
    function checkRefsAndKeywords$1(it) {
        const { schema, errSchemaPath, opts, self } = it;
        if (schema.$ref && opts.ignoreKeywordsWithRef && (0, util_1$L.schemaHasRulesButRef)(schema, self.RULES)) {
            self.logger.warn(`$ref: keywords ignored in schema at path "${errSchemaPath}"`);
        }
    }
    function checkNoDefault$1(it) {
        const { schema, opts } = it;
        if (schema.default !== undefined && opts.useDefaults && opts.strictSchema) {
            (0, util_1$L.checkStrictMode)(it, "default is ignored in the schema root");
        }
    }
    function updateContext$1(it) {
        const schId = it.schema[it.opts.schemaId];
        if (schId)
            it.baseId = (0, resolve_1$5.resolveUrl)(it.opts.uriResolver, it.baseId, schId);
    }
    function checkAsyncSchema$1(it) {
        if (it.schema.$async && !it.schemaEnv.$async)
            throw new Error("async schema in sync schema");
    }
    function commentKeyword$1({ gen, schemaEnv, schema, errSchemaPath, opts }) {
        const msg = schema.$comment;
        if (opts.$comment === true) {
            gen.code((0, codegen_1$R._) `${names_1$a.default.self}.logger.log(${msg})`);
        }
        else if (typeof opts.$comment == "function") {
            const schemaPath = (0, codegen_1$R.str) `${errSchemaPath}/$comment`;
            const rootName = gen.scopeValue("root", { ref: schemaEnv.root });
            gen.code((0, codegen_1$R._) `${names_1$a.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);
        }
    }
    function returnResults$1(it) {
        const { gen, schemaEnv, validateName, ValidationError, opts } = it;
        if (schemaEnv.$async) {
            // TODO assign unevaluated
            gen.if((0, codegen_1$R._) `${names_1$a.default.errors} === 0`, () => gen.return(names_1$a.default.data), () => gen.throw((0, codegen_1$R._) `new ${ValidationError}(${names_1$a.default.vErrors})`));
        }
        else {
            gen.assign((0, codegen_1$R._) `${validateName}.errors`, names_1$a.default.vErrors);
            if (opts.unevaluated)
                assignEvaluated$1(it);
            gen.return((0, codegen_1$R._) `${names_1$a.default.errors} === 0`);
        }
    }
    function assignEvaluated$1({ gen, evaluated, props, items }) {
        if (props instanceof codegen_1$R.Name)
            gen.assign((0, codegen_1$R._) `${evaluated}.props`, props);
        if (items instanceof codegen_1$R.Name)
            gen.assign((0, codegen_1$R._) `${evaluated}.items`, items);
    }
    function schemaKeywords$1(it, types, typeErrors, errsCount) {
        const { gen, schema, data, allErrors, opts, self } = it;
        const { RULES } = self;
        if (schema.$ref && (opts.ignoreKeywordsWithRef || !(0, util_1$L.schemaHasRulesButRef)(schema, RULES))) {
            gen.block(() => keywordCode$1(it, "$ref", RULES.all.$ref.definition)); // TODO typecast
            return;
        }
        if (!opts.jtd)
            checkStrictTypes$1(it, types);
        gen.block(() => {
            for (const group of RULES.rules)
                groupKeywords(group);
            groupKeywords(RULES.post);
        });
        function groupKeywords(group) {
            if (!(0, applicability_1$1.shouldUseGroup)(schema, group))
                return;
            if (group.type) {
                gen.if((0, dataType_2$1.checkDataType)(group.type, data, opts.strictNumbers));
                iterateKeywords$1(it, group);
                if (types.length === 1 && types[0] === group.type && typeErrors) {
                    gen.else();
                    (0, dataType_2$1.reportTypeError)(it);
                }
                gen.endIf();
            }
            else {
                iterateKeywords$1(it, group);
            }
            // TODO make it "ok" call?
            if (!allErrors)
                gen.if((0, codegen_1$R._) `${names_1$a.default.errors} === ${errsCount || 0}`);
        }
    }
    function iterateKeywords$1(it, group) {
        const { gen, schema, opts: { useDefaults }, } = it;
        if (useDefaults)
            (0, defaults_1$1.assignDefaults)(it, group.type);
        gen.block(() => {
            for (const rule of group.rules) {
                if ((0, applicability_1$1.shouldUseRule)(schema, rule)) {
                    keywordCode$1(it, rule.keyword, rule.definition, group.type);
                }
            }
        });
    }
    function checkStrictTypes$1(it, types) {
        if (it.schemaEnv.meta || !it.opts.strictTypes)
            return;
        checkContextTypes$1(it, types);
        if (!it.opts.allowUnionTypes)
            checkMultipleTypes$1(it, types);
        checkKeywordTypes$1(it, it.dataTypes);
    }
    function checkContextTypes$1(it, types) {
        if (!types.length)
            return;
        if (!it.dataTypes.length) {
            it.dataTypes = types;
            return;
        }
        types.forEach((t) => {
            if (!includesType$1(it.dataTypes, t)) {
                strictTypesError$1(it, `type "${t}" not allowed by context "${it.dataTypes.join(",")}"`);
            }
        });
        narrowSchemaTypes$1(it, types);
    }
    function checkMultipleTypes$1(it, ts) {
        if (ts.length > 1 && !(ts.length === 2 && ts.includes("null"))) {
            strictTypesError$1(it, "use allowUnionTypes to allow union type keyword");
        }
    }
    function checkKeywordTypes$1(it, ts) {
        const rules = it.self.RULES.all;
        for (const keyword in rules) {
            const rule = rules[keyword];
            if (typeof rule == "object" && (0, applicability_1$1.shouldUseRule)(it.schema, rule)) {
                const { type } = rule.definition;
                if (type.length && !type.some((t) => hasApplicableType$1(ts, t))) {
                    strictTypesError$1(it, `missing type "${type.join(",")}" for keyword "${keyword}"`);
                }
            }
        }
    }
    function hasApplicableType$1(schTs, kwdT) {
        return schTs.includes(kwdT) || (kwdT === "number" && schTs.includes("integer"));
    }
    function includesType$1(ts, t) {
        return ts.includes(t) || (t === "integer" && ts.includes("number"));
    }
    function narrowSchemaTypes$1(it, withTypes) {
        const ts = [];
        for (const t of it.dataTypes) {
            if (includesType$1(withTypes, t))
                ts.push(t);
            else if (withTypes.includes("integer") && t === "number")
                ts.push("integer");
        }
        it.dataTypes = ts;
    }
    function strictTypesError$1(it, msg) {
        const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
        msg += ` at "${schemaPath}" (strictTypes)`;
        (0, util_1$L.checkStrictMode)(it, msg, it.opts.strictTypes);
    }
    class KeywordCxt$1 {
        constructor(it, def, keyword) {
            (0, keyword_1$1.validateKeywordUsage)(it, def, keyword);
            this.gen = it.gen;
            this.allErrors = it.allErrors;
            this.keyword = keyword;
            this.data = it.data;
            this.schema = it.schema[keyword];
            this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;
            this.schemaValue = (0, util_1$L.schemaRefOrVal)(it, this.schema, keyword, this.$data);
            this.schemaType = def.schemaType;
            this.parentSchema = it.schema;
            this.params = {};
            this.it = it;
            this.def = def;
            if (this.$data) {
                this.schemaCode = it.gen.const("vSchema", getData$3(this.$data, it));
            }
            else {
                this.schemaCode = this.schemaValue;
                if (!(0, keyword_1$1.validSchemaType)(this.schema, def.schemaType, def.allowUndefined)) {
                    throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);
                }
            }
            if ("code" in def ? def.trackErrors : def.errors !== false) {
                this.errsCount = it.gen.const("_errs", names_1$a.default.errors);
            }
        }
        result(condition, successAction, failAction) {
            this.failResult((0, codegen_1$R.not)(condition), successAction, failAction);
        }
        failResult(condition, successAction, failAction) {
            this.gen.if(condition);
            if (failAction)
                failAction();
            else
                this.error();
            if (successAction) {
                this.gen.else();
                successAction();
                if (this.allErrors)
                    this.gen.endIf();
            }
            else {
                if (this.allErrors)
                    this.gen.endIf();
                else
                    this.gen.else();
            }
        }
        pass(condition, failAction) {
            this.failResult((0, codegen_1$R.not)(condition), undefined, failAction);
        }
        fail(condition) {
            if (condition === undefined) {
                this.error();
                if (!this.allErrors)
                    this.gen.if(false); // this branch will be removed by gen.optimize
                return;
            }
            this.gen.if(condition);
            this.error();
            if (this.allErrors)
                this.gen.endIf();
            else
                this.gen.else();
        }
        fail$data(condition) {
            if (!this.$data)
                return this.fail(condition);
            const { schemaCode } = this;
            this.fail((0, codegen_1$R._) `${schemaCode} !== undefined && (${(0, codegen_1$R.or)(this.invalid$data(), condition)})`);
        }
        error(append, errorParams, errorPaths) {
            if (errorParams) {
                this.setParams(errorParams);
                this._error(append, errorPaths);
                this.setParams({});
                return;
            }
            this._error(append, errorPaths);
        }
        _error(append, errorPaths) {
            (append ? errors_1$3.reportExtraError : errors_1$3.reportError)(this, this.def.error, errorPaths);
        }
        $dataError() {
            (0, errors_1$3.reportError)(this, this.def.$dataError || errors_1$3.keyword$DataError);
        }
        reset() {
            if (this.errsCount === undefined)
                throw new Error('add "trackErrors" to keyword definition');
            (0, errors_1$3.resetErrorsCount)(this.gen, this.errsCount);
        }
        ok(cond) {
            if (!this.allErrors)
                this.gen.if(cond);
        }
        setParams(obj, assign) {
            if (assign)
                Object.assign(this.params, obj);
            else
                this.params = obj;
        }
        block$data(valid, codeBlock, $dataValid = codegen_1$R.nil) {
            this.gen.block(() => {
                this.check$data(valid, $dataValid);
                codeBlock();
            });
        }
        check$data(valid = codegen_1$R.nil, $dataValid = codegen_1$R.nil) {
            if (!this.$data)
                return;
            const { gen, schemaCode, schemaType, def } = this;
            gen.if((0, codegen_1$R.or)((0, codegen_1$R._) `${schemaCode} === undefined`, $dataValid));
            if (valid !== codegen_1$R.nil)
                gen.assign(valid, true);
            if (schemaType.length || def.validateSchema) {
                gen.elseIf(this.invalid$data());
                this.$dataError();
                if (valid !== codegen_1$R.nil)
                    gen.assign(valid, false);
            }
            gen.else();
        }
        invalid$data() {
            const { gen, schemaCode, schemaType, def, it } = this;
            return (0, codegen_1$R.or)(wrong$DataType(), invalid$DataSchema());
            function wrong$DataType() {
                if (schemaType.length) {
                    /* istanbul ignore if */
                    if (!(schemaCode instanceof codegen_1$R.Name))
                        throw new Error("ajv implementation error");
                    const st = Array.isArray(schemaType) ? schemaType : [schemaType];
                    return (0, codegen_1$R._) `${(0, dataType_2$1.checkDataTypes)(st, schemaCode, it.opts.strictNumbers, dataType_2$1.DataType.Wrong)}`;
                }
                return codegen_1$R.nil;
            }
            function invalid$DataSchema() {
                if (def.validateSchema) {
                    const validateSchemaRef = gen.scopeValue("validate$data", { ref: def.validateSchema }); // TODO value.code for standalone
                    return (0, codegen_1$R._) `!${validateSchemaRef}(${schemaCode})`;
                }
                return codegen_1$R.nil;
            }
        }
        subschema(appl, valid) {
            const subschema = (0, subschema_1$1.getSubschema)(this.it, appl);
            (0, subschema_1$1.extendSubschemaData)(subschema, this.it, appl);
            (0, subschema_1$1.extendSubschemaMode)(subschema, appl);
            const nextContext = { ...this.it, ...subschema, items: undefined, props: undefined };
            subschemaCode$1(nextContext, valid);
            return nextContext;
        }
        mergeEvaluated(schemaCxt, toName) {
            const { it, gen } = this;
            if (!it.opts.unevaluated)
                return;
            if (it.props !== true && schemaCxt.props !== undefined) {
                it.props = util_1$L.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);
            }
            if (it.items !== true && schemaCxt.items !== undefined) {
                it.items = util_1$L.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);
            }
        }
        mergeValidEvaluated(schemaCxt, valid) {
            const { it, gen } = this;
            if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {
                gen.if(valid, () => this.mergeEvaluated(schemaCxt, codegen_1$R.Name));
                return true;
            }
        }
    }
    validate$2.KeywordCxt = KeywordCxt$1;
    function keywordCode$1(it, keyword, def, ruleType) {
        const cxt = new KeywordCxt$1(it, def, keyword);
        if ("code" in def) {
            def.code(cxt, ruleType);
        }
        else if (cxt.$data && def.validate) {
            (0, keyword_1$1.funcKeywordCode)(cxt, def);
        }
        else if ("macro" in def) {
            (0, keyword_1$1.macroKeywordCode)(cxt, def);
        }
        else if (def.compile || def.validate) {
            (0, keyword_1$1.funcKeywordCode)(cxt, def);
        }
    }
    const JSON_POINTER$1 = /^\/(?:[^~]|~0|~1)*$/;
    const RELATIVE_JSON_POINTER$1 = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
    function getData$3($data, { dataLevel, dataNames, dataPathArr }) {
        let jsonPointer;
        let data;
        if ($data === "")
            return names_1$a.default.rootData;
        if ($data[0] === "/") {
            if (!JSON_POINTER$1.test($data))
                throw new Error(`Invalid JSON-pointer: ${$data}`);
            jsonPointer = $data;
            data = names_1$a.default.rootData;
        }
        else {
            const matches = RELATIVE_JSON_POINTER$1.exec($data);
            if (!matches)
                throw new Error(`Invalid JSON-pointer: ${$data}`);
            const up = +matches[1];
            jsonPointer = matches[2];
            if (jsonPointer === "#") {
                if (up >= dataLevel)
                    throw new Error(errorMsg("property/index", up));
                return dataPathArr[dataLevel - up];
            }
            if (up > dataLevel)
                throw new Error(errorMsg("data", up));
            data = dataNames[dataLevel - up];
            if (!jsonPointer)
                return data;
        }
        let expr = data;
        const segments = jsonPointer.split("/");
        for (const segment of segments) {
            if (segment) {
                data = (0, codegen_1$R._) `${data}${(0, codegen_1$R.getProperty)((0, util_1$L.unescapeJsonPointer)(segment))}`;
                expr = (0, codegen_1$R._) `${expr} && ${data}`;
            }
        }
        return expr;
        function errorMsg(pointerType, up) {
            return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;
        }
    }
    validate$2.getData = getData$3;

    var validation_error$1 = {};

    Object.defineProperty(validation_error$1, "__esModule", { value: true });
    class ValidationError$1 extends Error {
        constructor(errors) {
            super("validation failed");
            this.errors = errors;
            this.ajv = this.validation = true;
        }
    }
    validation_error$1.default = ValidationError$1;

    var ref_error$1 = {};

    Object.defineProperty(ref_error$1, "__esModule", { value: true });
    const resolve_1$4 = resolve$3;
    class MissingRefError$1 extends Error {
        constructor(resolver, baseId, ref, msg) {
            super(msg || `can't resolve reference ${ref} from id ${baseId}`);
            this.missingRef = (0, resolve_1$4.resolveUrl)(resolver, baseId, ref);
            this.missingSchema = (0, resolve_1$4.normalizeId)((0, resolve_1$4.getFullPath)(resolver, this.missingRef));
        }
    }
    ref_error$1.default = MissingRefError$1;

    var compile$2 = {};

    Object.defineProperty(compile$2, "__esModule", { value: true });
    compile$2.resolveSchema = compile$2.getCompilingSchema = compile$2.resolveRef = compile$2.compileSchema = compile$2.SchemaEnv = void 0;
    const codegen_1$Q = codegen$1;
    const validation_error_1$1 = validation_error$1;
    const names_1$9 = names$3;
    const resolve_1$3 = resolve$3;
    const util_1$K = util$1;
    const validate_1$3 = validate$2;
    class SchemaEnv$1 {
        constructor(env) {
            var _a;
            this.refs = {};
            this.dynamicAnchors = {};
            let schema;
            if (typeof env.schema == "object")
                schema = env.schema;
            this.schema = env.schema;
            this.schemaId = env.schemaId;
            this.root = env.root || this;
            this.baseId = (_a = env.baseId) !== null && _a !== void 0 ? _a : (0, resolve_1$3.normalizeId)(schema === null || schema === void 0 ? void 0 : schema[env.schemaId || "$id"]);
            this.schemaPath = env.schemaPath;
            this.localRefs = env.localRefs;
            this.meta = env.meta;
            this.$async = schema === null || schema === void 0 ? void 0 : schema.$async;
            this.refs = {};
        }
    }
    compile$2.SchemaEnv = SchemaEnv$1;
    // let codeSize = 0
    // let nodeCount = 0
    // Compiles schema in SchemaEnv
    function compileSchema$1(sch) {
        // TODO refactor - remove compilations
        const _sch = getCompilingSchema$1.call(this, sch);
        if (_sch)
            return _sch;
        const rootId = (0, resolve_1$3.getFullPath)(this.opts.uriResolver, sch.root.baseId); // TODO if getFullPath removed 1 tests fails
        const { es5, lines } = this.opts.code;
        const { ownProperties } = this.opts;
        const gen = new codegen_1$Q.CodeGen(this.scope, { es5, lines, ownProperties });
        let _ValidationError;
        if (sch.$async) {
            _ValidationError = gen.scopeValue("Error", {
                ref: validation_error_1$1.default,
                code: (0, codegen_1$Q._) `require("ajv/dist/runtime/validation_error").default`,
            });
        }
        const validateName = gen.scopeName("validate");
        sch.validateName = validateName;
        const schemaCxt = {
            gen,
            allErrors: this.opts.allErrors,
            data: names_1$9.default.data,
            parentData: names_1$9.default.parentData,
            parentDataProperty: names_1$9.default.parentDataProperty,
            dataNames: [names_1$9.default.data],
            dataPathArr: [codegen_1$Q.nil],
            dataLevel: 0,
            dataTypes: [],
            definedProperties: new Set(),
            topSchemaRef: gen.scopeValue("schema", this.opts.code.source === true
                ? { ref: sch.schema, code: (0, codegen_1$Q.stringify)(sch.schema) }
                : { ref: sch.schema }),
            validateName,
            ValidationError: _ValidationError,
            schema: sch.schema,
            schemaEnv: sch,
            rootId,
            baseId: sch.baseId || rootId,
            schemaPath: codegen_1$Q.nil,
            errSchemaPath: sch.schemaPath || (this.opts.jtd ? "" : "#"),
            errorPath: (0, codegen_1$Q._) `""`,
            opts: this.opts,
            self: this,
        };
        let sourceCode;
        try {
            this._compilations.add(sch);
            (0, validate_1$3.validateFunctionCode)(schemaCxt);
            gen.optimize(this.opts.code.optimize);
            // gen.optimize(1)
            const validateCode = gen.toString();
            sourceCode = `${gen.scopeRefs(names_1$9.default.scope)}return ${validateCode}`;
            // console.log((codeSize += sourceCode.length), (nodeCount += gen.nodeCount))
            if (this.opts.code.process)
                sourceCode = this.opts.code.process(sourceCode, sch);
            // console.log("\n\n\n *** \n", sourceCode)
            const makeValidate = new Function(`${names_1$9.default.self}`, `${names_1$9.default.scope}`, sourceCode);
            const validate = makeValidate(this, this.scope.get());
            this.scope.value(validateName, { ref: validate });
            validate.errors = null;
            validate.schema = sch.schema;
            validate.schemaEnv = sch;
            if (sch.$async)
                validate.$async = true;
            if (this.opts.code.source === true) {
                validate.source = { validateName, validateCode, scopeValues: gen._values };
            }
            if (this.opts.unevaluated) {
                const { props, items } = schemaCxt;
                validate.evaluated = {
                    props: props instanceof codegen_1$Q.Name ? undefined : props,
                    items: items instanceof codegen_1$Q.Name ? undefined : items,
                    dynamicProps: props instanceof codegen_1$Q.Name,
                    dynamicItems: items instanceof codegen_1$Q.Name,
                };
                if (validate.source)
                    validate.source.evaluated = (0, codegen_1$Q.stringify)(validate.evaluated);
            }
            sch.validate = validate;
            return sch;
        }
        catch (e) {
            delete sch.validate;
            delete sch.validateName;
            if (sourceCode)
                this.logger.error("Error compiling schema, function code:", sourceCode);
            // console.log("\n\n\n *** \n", sourceCode, this.opts)
            throw e;
        }
        finally {
            this._compilations.delete(sch);
        }
    }
    compile$2.compileSchema = compileSchema$1;
    function resolveRef$1(root, baseId, ref) {
        var _a;
        ref = (0, resolve_1$3.resolveUrl)(this.opts.uriResolver, baseId, ref);
        const schOrFunc = root.refs[ref];
        if (schOrFunc)
            return schOrFunc;
        let _sch = resolve$2.call(this, root, ref);
        if (_sch === undefined) {
            const schema = (_a = root.localRefs) === null || _a === void 0 ? void 0 : _a[ref]; // TODO maybe localRefs should hold SchemaEnv
            const { schemaId } = this.opts;
            if (schema)
                _sch = new SchemaEnv$1({ schema, schemaId, root, baseId });
        }
        if (_sch === undefined)
            return;
        return (root.refs[ref] = inlineOrCompile$1.call(this, _sch));
    }
    compile$2.resolveRef = resolveRef$1;
    function inlineOrCompile$1(sch) {
        if ((0, resolve_1$3.inlineRef)(sch.schema, this.opts.inlineRefs))
            return sch.schema;
        return sch.validate ? sch : compileSchema$1.call(this, sch);
    }
    // Index of schema compilation in the currently compiled list
    function getCompilingSchema$1(schEnv) {
        for (const sch of this._compilations) {
            if (sameSchemaEnv$1(sch, schEnv))
                return sch;
        }
    }
    compile$2.getCompilingSchema = getCompilingSchema$1;
    function sameSchemaEnv$1(s1, s2) {
        return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;
    }
    // resolve and compile the references ($ref)
    // TODO returns AnySchemaObject (if the schema can be inlined) or validation function
    function resolve$2(root, // information about the root schema for the current schema
    ref // reference to resolve
    ) {
        let sch;
        while (typeof (sch = this.refs[ref]) == "string")
            ref = sch;
        return sch || this.schemas[ref] || resolveSchema$2.call(this, root, ref);
    }
    // Resolve schema, its root and baseId
    function resolveSchema$2(root, // root object with properties schema, refs TODO below SchemaEnv is assigned to it
    ref // reference to resolve
    ) {
        const p = this.opts.uriResolver.parse(ref);
        const refPath = (0, resolve_1$3._getFullPath)(this.opts.uriResolver, p);
        let baseId = (0, resolve_1$3.getFullPath)(this.opts.uriResolver, root.baseId, undefined);
        // TODO `Object.keys(root.schema).length > 0` should not be needed - but removing breaks 2 tests
        if (Object.keys(root.schema).length > 0 && refPath === baseId) {
            return getJsonPointer$1.call(this, p, root);
        }
        const id = (0, resolve_1$3.normalizeId)(refPath);
        const schOrRef = this.refs[id] || this.schemas[id];
        if (typeof schOrRef == "string") {
            const sch = resolveSchema$2.call(this, root, schOrRef);
            if (typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !== "object")
                return;
            return getJsonPointer$1.call(this, p, sch);
        }
        if (typeof (schOrRef === null || schOrRef === void 0 ? void 0 : schOrRef.schema) !== "object")
            return;
        if (!schOrRef.validate)
            compileSchema$1.call(this, schOrRef);
        if (id === (0, resolve_1$3.normalizeId)(ref)) {
            const { schema } = schOrRef;
            const { schemaId } = this.opts;
            const schId = schema[schemaId];
            if (schId)
                baseId = (0, resolve_1$3.resolveUrl)(this.opts.uriResolver, baseId, schId);
            return new SchemaEnv$1({ schema, schemaId, root, baseId });
        }
        return getJsonPointer$1.call(this, p, schOrRef);
    }
    compile$2.resolveSchema = resolveSchema$2;
    const PREVENT_SCOPE_CHANGE$1 = new Set([
        "properties",
        "patternProperties",
        "enum",
        "dependencies",
        "definitions",
    ]);
    function getJsonPointer$1(parsedRef, { baseId, schema, root }) {
        var _a;
        if (((_a = parsedRef.fragment) === null || _a === void 0 ? void 0 : _a[0]) !== "/")
            return;
        for (const part of parsedRef.fragment.slice(1).split("/")) {
            if (typeof schema === "boolean")
                return;
            const partSchema = schema[(0, util_1$K.unescapeFragment)(part)];
            if (partSchema === undefined)
                return;
            schema = partSchema;
            // TODO PREVENT_SCOPE_CHANGE could be defined in keyword def?
            const schId = typeof schema === "object" && schema[this.opts.schemaId];
            if (!PREVENT_SCOPE_CHANGE$1.has(part) && schId) {
                baseId = (0, resolve_1$3.resolveUrl)(this.opts.uriResolver, baseId, schId);
            }
        }
        let env;
        if (typeof schema != "boolean" && schema.$ref && !(0, util_1$K.schemaHasRulesButRef)(schema, this.RULES)) {
            const $ref = (0, resolve_1$3.resolveUrl)(this.opts.uriResolver, baseId, schema.$ref);
            env = resolveSchema$2.call(this, root, $ref);
        }
        // even though resolution failed we need to return SchemaEnv to throw exception
        // so that compileAsync loads missing schema.
        const { schemaId } = this.opts;
        env = env || new SchemaEnv$1({ schema, schemaId, root, baseId });
        if (env.schema !== env.root.schema)
            return env;
        return undefined;
    }

    var $id$3 = "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#";
    var description$1 = "Meta-schema for $data reference (JSON AnySchema extension proposal)";
    var type$3 = "object";
    var required$3 = [
    	"$data"
    ];
    var properties$6 = {
    	$data: {
    		type: "string",
    		anyOf: [
    			{
    				format: "relative-json-pointer"
    			},
    			{
    				format: "json-pointer"
    			}
    		]
    	}
    };
    var additionalProperties$3 = false;
    var require$$9$1 = {
    	$id: $id$3,
    	description: description$1,
    	type: type$3,
    	required: required$3,
    	properties: properties$6,
    	additionalProperties: additionalProperties$3
    };

    var uri$3 = {};

    var uri_all = {exports: {}};

    /** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */

    (function (module, exports) {
    (function (global, factory) {
    	factory(exports) ;
    }(commonjsGlobal, (function (exports) {
    function merge() {
        for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
            sets[_key] = arguments[_key];
        }

        if (sets.length > 1) {
            sets[0] = sets[0].slice(0, -1);
            var xl = sets.length - 1;
            for (var x = 1; x < xl; ++x) {
                sets[x] = sets[x].slice(1, -1);
            }
            sets[xl] = sets[xl].slice(1);
            return sets.join('');
        } else {
            return sets[0];
        }
    }
    function subexp(str) {
        return "(?:" + str + ")";
    }
    function typeOf(o) {
        return o === undefined ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
    }
    function toUpperCase(str) {
        return str.toUpperCase();
    }
    function toArray(obj) {
        return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
    }
    function assign(target, source) {
        var obj = target;
        if (source) {
            for (var key in source) {
                obj[key] = source[key];
            }
        }
        return obj;
    }

    function buildExps(isIRI) {
        var ALPHA$$ = "[A-Za-z]",
            DIGIT$$ = "[0-9]",
            HEXDIG$$ = merge(DIGIT$$, "[A-Fa-f]"),
            PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)),
            //expanded
        GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]",
            SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",
            RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),
            UCSCHAR$$ = isIRI ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]",
            //subset, excludes bidi control characters
        IPRIVATE$$ = isIRI ? "[\\uE000-\\uF8FF]" : "[]",
            //subset
        UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$);
            subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*");
            subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]")) + "*");
            var DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$),
            //relaxed parsing rules
        IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$),
            H16$ = subexp(HEXDIG$$ + "{1,4}"),
            LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$),
            IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$),
            //                           6( h16 ":" ) ls32
        IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$),
            //                      "::" 5( h16 ":" ) ls32
        IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$),
            //[               h16 ] "::" 4( h16 ":" ) ls32
        IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$),
            //[ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
        IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$),
            //[ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
        IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$),
            //[ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
        IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$),
            //[ *4( h16 ":" ) h16 ] "::"              ls32
        IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$),
            //[ *5( h16 ":" ) h16 ] "::"              h16
        IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"),
            //[ *6( h16 ":" ) h16 ] "::"
        IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")),
            ZONEID$ = subexp(subexp(UNRESERVED$$ + "|" + PCT_ENCODED$) + "+");
            //RFC 6874, with relaxed parsing rules
        subexp("[vV]" + HEXDIG$$ + "+\\." + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]") + "+");
            //RFC 6874
        subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$)) + "*");
            var PCHAR$ = subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@]"));
            subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\@]")) + "+");
            subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*");
        return {
            NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
            NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
            NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
            ESCAPE: new RegExp(merge("[^]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            UNRESERVED: new RegExp(UNRESERVED$$, "g"),
            OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$, RESERVED$$), "g"),
            PCT_ENCODED: new RegExp(PCT_ENCODED$, "g"),
            IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
            IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$") //RFC 6874, with relaxed parsing rules
        };
    }
    var URI_PROTOCOL = buildExps(false);

    var IRI_PROTOCOL = buildExps(true);

    var slicedToArray = function () {
      function sliceIterator(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;

        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);

            if (i && _arr.length === i) break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"]) _i["return"]();
          } finally {
            if (_d) throw _e;
          }
        }

        return _arr;
      }

      return function (arr, i) {
        if (Array.isArray(arr)) {
          return arr;
        } else if (Symbol.iterator in Object(arr)) {
          return sliceIterator(arr, i);
        } else {
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
      };
    }();













    var toConsumableArray = function (arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

        return arr2;
      } else {
        return Array.from(arr);
      }
    };

    /** Highest positive signed 32-bit float value */

    var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

    /** Bootstring parameters */
    var base = 36;
    var tMin = 1;
    var tMax = 26;
    var skew = 38;
    var damp = 700;
    var initialBias = 72;
    var initialN = 128; // 0x80
    var delimiter = '-'; // '\x2D'

    /** Regular expressions */
    var regexPunycode = /^xn--/;
    var regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars
    var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

    /** Error messages */
    var errors = {
    	'overflow': 'Overflow: input needs wider integers to process',
    	'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    	'invalid-input': 'Invalid input'
    };

    /** Convenience shortcuts */
    var baseMinusTMin = base - tMin;
    var floor = Math.floor;
    var stringFromCharCode = String.fromCharCode;

    /*--------------------------------------------------------------------------*/

    /**
     * A generic error utility function.
     * @private
     * @param {String} type The error type.
     * @returns {Error} Throws a `RangeError` with the applicable error message.
     */
    function error$1(type) {
    	throw new RangeError(errors[type]);
    }

    /**
     * A generic `Array#map` utility function.
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} callback The function that gets called for every array
     * item.
     * @returns {Array} A new array of values returned by the callback function.
     */
    function map(array, fn) {
    	var result = [];
    	var length = array.length;
    	while (length--) {
    		result[length] = fn(array[length]);
    	}
    	return result;
    }

    /**
     * A simple `Array#map`-like wrapper to work with domain name strings or email
     * addresses.
     * @private
     * @param {String} domain The domain name or email address.
     * @param {Function} callback The function that gets called for every
     * character.
     * @returns {Array} A new string of characters returned by the callback
     * function.
     */
    function mapDomain(string, fn) {
    	var parts = string.split('@');
    	var result = '';
    	if (parts.length > 1) {
    		// In email addresses, only the domain name should be punycoded. Leave
    		// the local part (i.e. everything up to `@`) intact.
    		result = parts[0] + '@';
    		string = parts[1];
    	}
    	// Avoid `split(regex)` for IE8 compatibility. See #17.
    	string = string.replace(regexSeparators, '\x2E');
    	var labels = string.split('.');
    	var encoded = map(labels, fn).join('.');
    	return result + encoded;
    }

    /**
     * Creates an array containing the numeric code points of each Unicode
     * character in the string. While JavaScript uses UCS-2 internally,
     * this function will convert a pair of surrogate halves (each of which
     * UCS-2 exposes as separate characters) into a single code point,
     * matching UTF-16.
     * @see `punycode.ucs2.encode`
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode.ucs2
     * @name decode
     * @param {String} string The Unicode input string (UCS-2).
     * @returns {Array} The new array of code points.
     */
    function ucs2decode(string) {
    	var output = [];
    	var counter = 0;
    	var length = string.length;
    	while (counter < length) {
    		var value = string.charCodeAt(counter++);
    		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
    			// It's a high surrogate, and there is a next character.
    			var extra = string.charCodeAt(counter++);
    			if ((extra & 0xFC00) == 0xDC00) {
    				// Low surrogate.
    				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
    			} else {
    				// It's an unmatched surrogate; only append this code unit, in case the
    				// next code unit is the high surrogate of a surrogate pair.
    				output.push(value);
    				counter--;
    			}
    		} else {
    			output.push(value);
    		}
    	}
    	return output;
    }

    /**
     * Creates a string based on an array of numeric code points.
     * @see `punycode.ucs2.decode`
     * @memberOf punycode.ucs2
     * @name encode
     * @param {Array} codePoints The array of numeric code points.
     * @returns {String} The new Unicode string (UCS-2).
     */
    var ucs2encode = function ucs2encode(array) {
    	return String.fromCodePoint.apply(String, toConsumableArray(array));
    };

    /**
     * Converts a basic code point into a digit/integer.
     * @see `digitToBasic()`
     * @private
     * @param {Number} codePoint The basic numeric code point value.
     * @returns {Number} The numeric value of a basic code point (for use in
     * representing integers) in the range `0` to `base - 1`, or `base` if
     * the code point does not represent a value.
     */
    var basicToDigit = function basicToDigit(codePoint) {
    	if (codePoint - 0x30 < 0x0A) {
    		return codePoint - 0x16;
    	}
    	if (codePoint - 0x41 < 0x1A) {
    		return codePoint - 0x41;
    	}
    	if (codePoint - 0x61 < 0x1A) {
    		return codePoint - 0x61;
    	}
    	return base;
    };

    /**
     * Converts a digit/integer into a basic code point.
     * @see `basicToDigit()`
     * @private
     * @param {Number} digit The numeric value of a basic code point.
     * @returns {Number} The basic code point whose value (when used for
     * representing integers) is `digit`, which needs to be in the range
     * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
     * used; else, the lowercase form is used. The behavior is undefined
     * if `flag` is non-zero and `digit` has no uppercase form.
     */
    var digitToBasic = function digitToBasic(digit, flag) {
    	//  0..25 map to ASCII a..z or A..Z
    	// 26..35 map to ASCII 0..9
    	return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    };

    /**
     * Bias adaptation function as per section 3.4 of RFC 3492.
     * https://tools.ietf.org/html/rfc3492#section-3.4
     * @private
     */
    var adapt = function adapt(delta, numPoints, firstTime) {
    	var k = 0;
    	delta = firstTime ? floor(delta / damp) : delta >> 1;
    	delta += floor(delta / numPoints);
    	for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
    		delta = floor(delta / baseMinusTMin);
    	}
    	return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    };

    /**
     * Converts a Punycode string of ASCII-only symbols to a string of Unicode
     * symbols.
     * @memberOf punycode
     * @param {String} input The Punycode string of ASCII-only symbols.
     * @returns {String} The resulting string of Unicode symbols.
     */
    var decode = function decode(input) {
    	// Don't use UCS-2.
    	var output = [];
    	var inputLength = input.length;
    	var i = 0;
    	var n = initialN;
    	var bias = initialBias;

    	// Handle the basic code points: let `basic` be the number of input code
    	// points before the last delimiter, or `0` if there is none, then copy
    	// the first basic code points to the output.

    	var basic = input.lastIndexOf(delimiter);
    	if (basic < 0) {
    		basic = 0;
    	}

    	for (var j = 0; j < basic; ++j) {
    		// if it's not a basic code point
    		if (input.charCodeAt(j) >= 0x80) {
    			error$1('not-basic');
    		}
    		output.push(input.charCodeAt(j));
    	}

    	// Main decoding loop: start just after the last delimiter if any basic code
    	// points were copied; start at the beginning otherwise.

    	for (var index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{

    		// `index` is the index of the next character to be consumed.
    		// Decode a generalized variable-length integer into `delta`,
    		// which gets added to `i`. The overflow checking is easier
    		// if we increase `i` as we go, then subtract off its starting
    		// value at the end to obtain `delta`.
    		var oldi = i;
    		for (var w = 1, k = base;; /* no condition */k += base) {

    			if (index >= inputLength) {
    				error$1('invalid-input');
    			}

    			var digit = basicToDigit(input.charCodeAt(index++));

    			if (digit >= base || digit > floor((maxInt - i) / w)) {
    				error$1('overflow');
    			}

    			i += digit * w;
    			var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

    			if (digit < t) {
    				break;
    			}

    			var baseMinusT = base - t;
    			if (w > floor(maxInt / baseMinusT)) {
    				error$1('overflow');
    			}

    			w *= baseMinusT;
    		}

    		var out = output.length + 1;
    		bias = adapt(i - oldi, out, oldi == 0);

    		// `i` was supposed to wrap around from `out` to `0`,
    		// incrementing `n` each time, so we'll fix that now:
    		if (floor(i / out) > maxInt - n) {
    			error$1('overflow');
    		}

    		n += floor(i / out);
    		i %= out;

    		// Insert `n` at position `i` of the output.
    		output.splice(i++, 0, n);
    	}

    	return String.fromCodePoint.apply(String, output);
    };

    /**
     * Converts a string of Unicode symbols (e.g. a domain name label) to a
     * Punycode string of ASCII-only symbols.
     * @memberOf punycode
     * @param {String} input The string of Unicode symbols.
     * @returns {String} The resulting Punycode string of ASCII-only symbols.
     */
    var encode = function encode(input) {
    	var output = [];

    	// Convert the input in UCS-2 to an array of Unicode code points.
    	input = ucs2decode(input);

    	// Cache the length.
    	var inputLength = input.length;

    	// Initialize the state.
    	var n = initialN;
    	var delta = 0;
    	var bias = initialBias;

    	// Handle the basic code points.
    	var _iteratorNormalCompletion = true;
    	var _didIteratorError = false;
    	var _iteratorError = undefined;

    	try {
    		for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    			var _currentValue2 = _step.value;

    			if (_currentValue2 < 0x80) {
    				output.push(stringFromCharCode(_currentValue2));
    			}
    		}
    	} catch (err) {
    		_didIteratorError = true;
    		_iteratorError = err;
    	} finally {
    		try {
    			if (!_iteratorNormalCompletion && _iterator.return) {
    				_iterator.return();
    			}
    		} finally {
    			if (_didIteratorError) {
    				throw _iteratorError;
    			}
    		}
    	}

    	var basicLength = output.length;
    	var handledCPCount = basicLength;

    	// `handledCPCount` is the number of code points that have been handled;
    	// `basicLength` is the number of basic code points.

    	// Finish the basic string with a delimiter unless it's empty.
    	if (basicLength) {
    		output.push(delimiter);
    	}

    	// Main encoding loop:
    	while (handledCPCount < inputLength) {

    		// All non-basic code points < n have been handled already. Find the next
    		// larger one:
    		var m = maxInt;
    		var _iteratorNormalCompletion2 = true;
    		var _didIteratorError2 = false;
    		var _iteratorError2 = undefined;

    		try {
    			for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
    				var currentValue = _step2.value;

    				if (currentValue >= n && currentValue < m) {
    					m = currentValue;
    				}
    			}

    			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
    			// but guard against overflow.
    		} catch (err) {
    			_didIteratorError2 = true;
    			_iteratorError2 = err;
    		} finally {
    			try {
    				if (!_iteratorNormalCompletion2 && _iterator2.return) {
    					_iterator2.return();
    				}
    			} finally {
    				if (_didIteratorError2) {
    					throw _iteratorError2;
    				}
    			}
    		}

    		var handledCPCountPlusOne = handledCPCount + 1;
    		if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
    			error$1('overflow');
    		}

    		delta += (m - n) * handledCPCountPlusOne;
    		n = m;

    		var _iteratorNormalCompletion3 = true;
    		var _didIteratorError3 = false;
    		var _iteratorError3 = undefined;

    		try {
    			for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
    				var _currentValue = _step3.value;

    				if (_currentValue < n && ++delta > maxInt) {
    					error$1('overflow');
    				}
    				if (_currentValue == n) {
    					// Represent delta as a generalized variable-length integer.
    					var q = delta;
    					for (var k = base;; /* no condition */k += base) {
    						var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
    						if (q < t) {
    							break;
    						}
    						var qMinusT = q - t;
    						var baseMinusT = base - t;
    						output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
    						q = floor(qMinusT / baseMinusT);
    					}

    					output.push(stringFromCharCode(digitToBasic(q, 0)));
    					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
    					delta = 0;
    					++handledCPCount;
    				}
    			}
    		} catch (err) {
    			_didIteratorError3 = true;
    			_iteratorError3 = err;
    		} finally {
    			try {
    				if (!_iteratorNormalCompletion3 && _iterator3.return) {
    					_iterator3.return();
    				}
    			} finally {
    				if (_didIteratorError3) {
    					throw _iteratorError3;
    				}
    			}
    		}

    		++delta;
    		++n;
    	}
    	return output.join('');
    };

    /**
     * Converts a Punycode string representing a domain name or an email address
     * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
     * it doesn't matter if you call it on a string that has already been
     * converted to Unicode.
     * @memberOf punycode
     * @param {String} input The Punycoded domain name or email address to
     * convert to Unicode.
     * @returns {String} The Unicode representation of the given Punycode
     * string.
     */
    var toUnicode = function toUnicode(input) {
    	return mapDomain(input, function (string) {
    		return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
    	});
    };

    /**
     * Converts a Unicode string representing a domain name or an email address to
     * Punycode. Only the non-ASCII parts of the domain name will be converted,
     * i.e. it doesn't matter if you call it with a domain that's already in
     * ASCII.
     * @memberOf punycode
     * @param {String} input The domain name or email address to convert, as a
     * Unicode string.
     * @returns {String} The Punycode representation of the given domain name or
     * email address.
     */
    var toASCII = function toASCII(input) {
    	return mapDomain(input, function (string) {
    		return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
    	});
    };

    /*--------------------------------------------------------------------------*/

    /** Define the public API */
    var punycode = {
    	/**
      * A string representing the current Punycode.js version number.
      * @memberOf punycode
      * @type String
      */
    	'version': '2.1.0',
    	/**
      * An object of methods to convert from JavaScript's internal character
      * representation (UCS-2) to Unicode code points, and back.
      * @see <https://mathiasbynens.be/notes/javascript-encoding>
      * @memberOf punycode
      * @type Object
      */
    	'ucs2': {
    		'decode': ucs2decode,
    		'encode': ucs2encode
    	},
    	'decode': decode,
    	'encode': encode,
    	'toASCII': toASCII,
    	'toUnicode': toUnicode
    };

    /**
     * URI.js
     *
     * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.
     * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
     * @see http://github.com/garycourt/uri-js
     */
    /**
     * Copyright 2011 Gary Court. All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     *    1. Redistributions of source code must retain the above copyright notice, this list of
     *       conditions and the following disclaimer.
     *
     *    2. Redistributions in binary form must reproduce the above copyright notice, this list
     *       of conditions and the following disclaimer in the documentation and/or other materials
     *       provided with the distribution.
     *
     * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED
     * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR
     * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
     * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     *
     * The views and conclusions contained in the software and documentation are those of the
     * authors and should not be interpreted as representing official policies, either expressed
     * or implied, of Gary Court.
     */
    var SCHEMES = {};
    function pctEncChar(chr) {
        var c = chr.charCodeAt(0);
        var e = void 0;
        if (c < 16) e = "%0" + c.toString(16).toUpperCase();else if (c < 128) e = "%" + c.toString(16).toUpperCase();else if (c < 2048) e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();else e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
        return e;
    }
    function pctDecChars(str) {
        var newStr = "";
        var i = 0;
        var il = str.length;
        while (i < il) {
            var c = parseInt(str.substr(i + 1, 2), 16);
            if (c < 128) {
                newStr += String.fromCharCode(c);
                i += 3;
            } else if (c >= 194 && c < 224) {
                if (il - i >= 6) {
                    var c2 = parseInt(str.substr(i + 4, 2), 16);
                    newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
                } else {
                    newStr += str.substr(i, 6);
                }
                i += 6;
            } else if (c >= 224) {
                if (il - i >= 9) {
                    var _c = parseInt(str.substr(i + 4, 2), 16);
                    var c3 = parseInt(str.substr(i + 7, 2), 16);
                    newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
                } else {
                    newStr += str.substr(i, 9);
                }
                i += 9;
            } else {
                newStr += str.substr(i, 3);
                i += 3;
            }
        }
        return newStr;
    }
    function _normalizeComponentEncoding(components, protocol) {
        function decodeUnreserved(str) {
            var decStr = pctDecChars(str);
            return !decStr.match(protocol.UNRESERVED) ? str : decStr;
        }
        if (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, "");
        if (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        return components;
    }

    function _stripLeadingZeros(str) {
        return str.replace(/^0*(.*)/, "$1") || "0";
    }
    function _normalizeIPv4(host, protocol) {
        var matches = host.match(protocol.IPV4ADDRESS) || [];

        var _matches = slicedToArray(matches, 2),
            address = _matches[1];

        if (address) {
            return address.split(".").map(_stripLeadingZeros).join(".");
        } else {
            return host;
        }
    }
    function _normalizeIPv6(host, protocol) {
        var matches = host.match(protocol.IPV6ADDRESS) || [];

        var _matches2 = slicedToArray(matches, 3),
            address = _matches2[1],
            zone = _matches2[2];

        if (address) {
            var _address$toLowerCase$ = address.toLowerCase().split('::').reverse(),
                _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),
                last = _address$toLowerCase$2[0],
                first = _address$toLowerCase$2[1];

            var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
            var lastFields = last.split(":").map(_stripLeadingZeros);
            var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
            var fieldCount = isLastFieldIPv4Address ? 7 : 8;
            var lastFieldsStart = lastFields.length - fieldCount;
            var fields = Array(fieldCount);
            for (var x = 0; x < fieldCount; ++x) {
                fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';
            }
            if (isLastFieldIPv4Address) {
                fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
            }
            var allZeroFields = fields.reduce(function (acc, field, index) {
                if (!field || field === "0") {
                    var lastLongest = acc[acc.length - 1];
                    if (lastLongest && lastLongest.index + lastLongest.length === index) {
                        lastLongest.length++;
                    } else {
                        acc.push({ index: index, length: 1 });
                    }
                }
                return acc;
            }, []);
            var longestZeroFields = allZeroFields.sort(function (a, b) {
                return b.length - a.length;
            })[0];
            var newHost = void 0;
            if (longestZeroFields && longestZeroFields.length > 1) {
                var newFirst = fields.slice(0, longestZeroFields.index);
                var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
                newHost = newFirst.join(":") + "::" + newLast.join(":");
            } else {
                newHost = fields.join(":");
            }
            if (zone) {
                newHost += "%" + zone;
            }
            return newHost;
        } else {
            return host;
        }
    }
    var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
    var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === undefined;
    function parse(uriString) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var components = {};
        var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
        if (options.reference === "suffix") uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString;
        var matches = uriString.match(URI_PARSE);
        if (matches) {
            if (NO_MATCH_IS_UNDEFINED) {
                //store each component
                components.scheme = matches[1];
                components.userinfo = matches[3];
                components.host = matches[4];
                components.port = parseInt(matches[5], 10);
                components.path = matches[6] || "";
                components.query = matches[7];
                components.fragment = matches[8];
                //fix port number
                if (isNaN(components.port)) {
                    components.port = matches[5];
                }
            } else {
                //IE FIX for improper RegExp matching
                //store each component
                components.scheme = matches[1] || undefined;
                components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : undefined;
                components.host = uriString.indexOf("//") !== -1 ? matches[4] : undefined;
                components.port = parseInt(matches[5], 10);
                components.path = matches[6] || "";
                components.query = uriString.indexOf("?") !== -1 ? matches[7] : undefined;
                components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : undefined;
                //fix port number
                if (isNaN(components.port)) {
                    components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : undefined;
                }
            }
            if (components.host) {
                //normalize IP hosts
                components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
            }
            //determine reference type
            if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {
                components.reference = "same-document";
            } else if (components.scheme === undefined) {
                components.reference = "relative";
            } else if (components.fragment === undefined) {
                components.reference = "absolute";
            } else {
                components.reference = "uri";
            }
            //check for reference errors
            if (options.reference && options.reference !== "suffix" && options.reference !== components.reference) {
                components.error = components.error || "URI is not a " + options.reference + " reference.";
            }
            //find scheme handler
            var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
            //check if scheme can't handle IRIs
            if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
                //if host component is a domain name
                if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {
                    //convert Unicode IDN -> ASCII IDN
                    try {
                        components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
                    } catch (e) {
                        components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
                    }
                }
                //convert IRI -> URI
                _normalizeComponentEncoding(components, URI_PROTOCOL);
            } else {
                //normalize encodings
                _normalizeComponentEncoding(components, protocol);
            }
            //perform scheme specific parsing
            if (schemeHandler && schemeHandler.parse) {
                schemeHandler.parse(components, options);
            }
        } else {
            components.error = components.error || "URI can not be parsed.";
        }
        return components;
    }

    function _recomposeAuthority(components, options) {
        var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
        var uriTokens = [];
        if (components.userinfo !== undefined) {
            uriTokens.push(components.userinfo);
            uriTokens.push("@");
        }
        if (components.host !== undefined) {
            //normalize IP hosts, add brackets and escape zone separator for IPv6
            uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function (_, $1, $2) {
                return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
            }));
        }
        if (typeof components.port === "number" || typeof components.port === "string") {
            uriTokens.push(":");
            uriTokens.push(String(components.port));
        }
        return uriTokens.length ? uriTokens.join("") : undefined;
    }

    var RDS1 = /^\.\.?\//;
    var RDS2 = /^\/\.(\/|$)/;
    var RDS3 = /^\/\.\.(\/|$)/;
    var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
    function removeDotSegments(input) {
        var output = [];
        while (input.length) {
            if (input.match(RDS1)) {
                input = input.replace(RDS1, "");
            } else if (input.match(RDS2)) {
                input = input.replace(RDS2, "/");
            } else if (input.match(RDS3)) {
                input = input.replace(RDS3, "/");
                output.pop();
            } else if (input === "." || input === "..") {
                input = "";
            } else {
                var im = input.match(RDS5);
                if (im) {
                    var s = im[0];
                    input = input.slice(s.length);
                    output.push(s);
                } else {
                    throw new Error("Unexpected dot segment condition");
                }
            }
        }
        return output.join("");
    }

    function serialize(components) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
        var uriTokens = [];
        //find scheme handler
        var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
        //perform scheme specific serialization
        if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);
        if (components.host) {
            //if host component is an IPv6 address
            if (protocol.IPV6ADDRESS.test(components.host)) ;
            //TODO: normalize IPv6 address as per RFC 5952

            //if host component is a domain name
            else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {
                    //convert IDN via punycode
                    try {
                        components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
                    } catch (e) {
                        components.error = components.error || "Host's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
                    }
                }
        }
        //normalize encoding
        _normalizeComponentEncoding(components, protocol);
        if (options.reference !== "suffix" && components.scheme) {
            uriTokens.push(components.scheme);
            uriTokens.push(":");
        }
        var authority = _recomposeAuthority(components, options);
        if (authority !== undefined) {
            if (options.reference !== "suffix") {
                uriTokens.push("//");
            }
            uriTokens.push(authority);
            if (components.path && components.path.charAt(0) !== "/") {
                uriTokens.push("/");
            }
        }
        if (components.path !== undefined) {
            var s = components.path;
            if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
                s = removeDotSegments(s);
            }
            if (authority === undefined) {
                s = s.replace(/^\/\//, "/%2F"); //don't allow the path to start with "//"
            }
            uriTokens.push(s);
        }
        if (components.query !== undefined) {
            uriTokens.push("?");
            uriTokens.push(components.query);
        }
        if (components.fragment !== undefined) {
            uriTokens.push("#");
            uriTokens.push(components.fragment);
        }
        return uriTokens.join(""); //merge tokens into a string
    }

    function resolveComponents(base, relative) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var skipNormalization = arguments[3];

        var target = {};
        if (!skipNormalization) {
            base = parse(serialize(base, options), options); //normalize base components
            relative = parse(serialize(relative, options), options); //normalize relative components
        }
        options = options || {};
        if (!options.tolerant && relative.scheme) {
            target.scheme = relative.scheme;
            //target.authority = relative.authority;
            target.userinfo = relative.userinfo;
            target.host = relative.host;
            target.port = relative.port;
            target.path = removeDotSegments(relative.path || "");
            target.query = relative.query;
        } else {
            if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
                //target.authority = relative.authority;
                target.userinfo = relative.userinfo;
                target.host = relative.host;
                target.port = relative.port;
                target.path = removeDotSegments(relative.path || "");
                target.query = relative.query;
            } else {
                if (!relative.path) {
                    target.path = base.path;
                    if (relative.query !== undefined) {
                        target.query = relative.query;
                    } else {
                        target.query = base.query;
                    }
                } else {
                    if (relative.path.charAt(0) === "/") {
                        target.path = removeDotSegments(relative.path);
                    } else {
                        if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {
                            target.path = "/" + relative.path;
                        } else if (!base.path) {
                            target.path = relative.path;
                        } else {
                            target.path = base.path.slice(0, base.path.lastIndexOf("/") + 1) + relative.path;
                        }
                        target.path = removeDotSegments(target.path);
                    }
                    target.query = relative.query;
                }
                //target.authority = base.authority;
                target.userinfo = base.userinfo;
                target.host = base.host;
                target.port = base.port;
            }
            target.scheme = base.scheme;
        }
        target.fragment = relative.fragment;
        return target;
    }

    function resolve(baseURI, relativeURI, options) {
        var schemelessOptions = assign({ scheme: 'null' }, options);
        return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
    }

    function normalize(uri, options) {
        if (typeof uri === "string") {
            uri = serialize(parse(uri, options), options);
        } else if (typeOf(uri) === "object") {
            uri = parse(serialize(uri, options), options);
        }
        return uri;
    }

    function equal(uriA, uriB, options) {
        if (typeof uriA === "string") {
            uriA = serialize(parse(uriA, options), options);
        } else if (typeOf(uriA) === "object") {
            uriA = serialize(uriA, options);
        }
        if (typeof uriB === "string") {
            uriB = serialize(parse(uriB, options), options);
        } else if (typeOf(uriB) === "object") {
            uriB = serialize(uriB, options);
        }
        return uriA === uriB;
    }

    function escapeComponent(str, options) {
        return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
    }

    function unescapeComponent(str, options) {
        return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
    }

    var handler = {
        scheme: "http",
        domainHost: true,
        parse: function parse(components, options) {
            //report missing host
            if (!components.host) {
                components.error = components.error || "HTTP URIs must have a host.";
            }
            return components;
        },
        serialize: function serialize(components, options) {
            var secure = String(components.scheme).toLowerCase() === "https";
            //normalize the default port
            if (components.port === (secure ? 443 : 80) || components.port === "") {
                components.port = undefined;
            }
            //normalize the empty path
            if (!components.path) {
                components.path = "/";
            }
            //NOTE: We do not parse query strings for HTTP URIs
            //as WWW Form Url Encoded query strings are part of the HTML4+ spec,
            //and not the HTTP spec.
            return components;
        }
    };

    var handler$1 = {
        scheme: "https",
        domainHost: handler.domainHost,
        parse: handler.parse,
        serialize: handler.serialize
    };

    function isSecure(wsComponents) {
        return typeof wsComponents.secure === 'boolean' ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
    }
    //RFC 6455
    var handler$2 = {
        scheme: "ws",
        domainHost: true,
        parse: function parse(components, options) {
            var wsComponents = components;
            //indicate if the secure flag is set
            wsComponents.secure = isSecure(wsComponents);
            //construct resouce name
            wsComponents.resourceName = (wsComponents.path || '/') + (wsComponents.query ? '?' + wsComponents.query : '');
            wsComponents.path = undefined;
            wsComponents.query = undefined;
            return wsComponents;
        },
        serialize: function serialize(wsComponents, options) {
            //normalize the default port
            if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
                wsComponents.port = undefined;
            }
            //ensure scheme matches secure flag
            if (typeof wsComponents.secure === 'boolean') {
                wsComponents.scheme = wsComponents.secure ? 'wss' : 'ws';
                wsComponents.secure = undefined;
            }
            //reconstruct path from resource name
            if (wsComponents.resourceName) {
                var _wsComponents$resourc = wsComponents.resourceName.split('?'),
                    _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2),
                    path = _wsComponents$resourc2[0],
                    query = _wsComponents$resourc2[1];

                wsComponents.path = path && path !== '/' ? path : undefined;
                wsComponents.query = query;
                wsComponents.resourceName = undefined;
            }
            //forbid fragment component
            wsComponents.fragment = undefined;
            return wsComponents;
        }
    };

    var handler$3 = {
        scheme: "wss",
        domainHost: handler$2.domainHost,
        parse: handler$2.parse,
        serialize: handler$2.serialize
    };

    var O = {};
    //RFC 3986
    var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + ("\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF" ) + "]";
    var HEXDIG$$ = "[0-9A-Fa-f]"; //case-insensitive
    var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)); //expanded
    //RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =
    //const ATEXT$$ = "[A-Za-z0-9\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~]";
    //const WSP$$ = "[\\x20\\x09]";
    //const OBS_QTEXT$$ = "[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]";  //(%d1-8 / %d11-12 / %d14-31 / %d127)
    //const QTEXT$$ = merge("[\\x21\\x23-\\x5B\\x5D-\\x7E]", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext
    //const VCHAR$$ = "[\\x21-\\x7E]";
    //const WSP$$ = "[\\x20\\x09]";
    //const OBS_QP$ = subexp("\\\\" + merge("[\\x00\\x0D\\x0A]", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext
    //const FWS$ = subexp(subexp(WSP$$ + "*" + "\\x0D\\x0A") + "?" + WSP$$ + "+");
    //const QUOTED_PAIR$ = subexp(subexp("\\\\" + subexp(VCHAR$$ + "|" + WSP$$)) + "|" + OBS_QP$);
    //const QUOTED_STRING$ = subexp('\\"' + subexp(FWS$ + "?" + QCONTENT$) + "*" + FWS$ + "?" + '\\"');
    var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
    var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
    var VCHAR$$ = merge(QTEXT$$, "[\\\"\\\\]");
    var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
    var UNRESERVED = new RegExp(UNRESERVED$$, "g");
    var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
    var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
    var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
    var NOT_HFVALUE = NOT_HFNAME;
    function decodeUnreserved(str) {
        var decStr = pctDecChars(str);
        return !decStr.match(UNRESERVED) ? str : decStr;
    }
    var handler$4 = {
        scheme: "mailto",
        parse: function parse$$1(components, options) {
            var mailtoComponents = components;
            var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
            mailtoComponents.path = undefined;
            if (mailtoComponents.query) {
                var unknownHeaders = false;
                var headers = {};
                var hfields = mailtoComponents.query.split("&");
                for (var x = 0, xl = hfields.length; x < xl; ++x) {
                    var hfield = hfields[x].split("=");
                    switch (hfield[0]) {
                        case "to":
                            var toAddrs = hfield[1].split(",");
                            for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                                to.push(toAddrs[_x]);
                            }
                            break;
                        case "subject":
                            mailtoComponents.subject = unescapeComponent(hfield[1], options);
                            break;
                        case "body":
                            mailtoComponents.body = unescapeComponent(hfield[1], options);
                            break;
                        default:
                            unknownHeaders = true;
                            headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
                            break;
                    }
                }
                if (unknownHeaders) mailtoComponents.headers = headers;
            }
            mailtoComponents.query = undefined;
            for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
                var addr = to[_x2].split("@");
                addr[0] = unescapeComponent(addr[0]);
                if (!options.unicodeSupport) {
                    //convert Unicode IDN -> ASCII IDN
                    try {
                        addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
                    } catch (e) {
                        mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
                    }
                } else {
                    addr[1] = unescapeComponent(addr[1], options).toLowerCase();
                }
                to[_x2] = addr.join("@");
            }
            return mailtoComponents;
        },
        serialize: function serialize$$1(mailtoComponents, options) {
            var components = mailtoComponents;
            var to = toArray(mailtoComponents.to);
            if (to) {
                for (var x = 0, xl = to.length; x < xl; ++x) {
                    var toAddr = String(to[x]);
                    var atIdx = toAddr.lastIndexOf("@");
                    var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
                    var domain = toAddr.slice(atIdx + 1);
                    //convert IDN via punycode
                    try {
                        domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);
                    } catch (e) {
                        components.error = components.error || "Email address's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
                    }
                    to[x] = localPart + "@" + domain;
                }
                components.path = to.join(",");
            }
            var headers = mailtoComponents.headers = mailtoComponents.headers || {};
            if (mailtoComponents.subject) headers["subject"] = mailtoComponents.subject;
            if (mailtoComponents.body) headers["body"] = mailtoComponents.body;
            var fields = [];
            for (var name in headers) {
                if (headers[name] !== O[name]) {
                    fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
                }
            }
            if (fields.length) {
                components.query = fields.join("&");
            }
            return components;
        }
    };

    var URN_PARSE = /^([^\:]+)\:(.*)/;
    //RFC 2141
    var handler$5 = {
        scheme: "urn",
        parse: function parse$$1(components, options) {
            var matches = components.path && components.path.match(URN_PARSE);
            var urnComponents = components;
            if (matches) {
                var scheme = options.scheme || urnComponents.scheme || "urn";
                var nid = matches[1].toLowerCase();
                var nss = matches[2];
                var urnScheme = scheme + ":" + (options.nid || nid);
                var schemeHandler = SCHEMES[urnScheme];
                urnComponents.nid = nid;
                urnComponents.nss = nss;
                urnComponents.path = undefined;
                if (schemeHandler) {
                    urnComponents = schemeHandler.parse(urnComponents, options);
                }
            } else {
                urnComponents.error = urnComponents.error || "URN can not be parsed.";
            }
            return urnComponents;
        },
        serialize: function serialize$$1(urnComponents, options) {
            var scheme = options.scheme || urnComponents.scheme || "urn";
            var nid = urnComponents.nid;
            var urnScheme = scheme + ":" + (options.nid || nid);
            var schemeHandler = SCHEMES[urnScheme];
            if (schemeHandler) {
                urnComponents = schemeHandler.serialize(urnComponents, options);
            }
            var uriComponents = urnComponents;
            var nss = urnComponents.nss;
            uriComponents.path = (nid || options.nid) + ":" + nss;
            return uriComponents;
        }
    };

    var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
    //RFC 4122
    var handler$6 = {
        scheme: "urn:uuid",
        parse: function parse(urnComponents, options) {
            var uuidComponents = urnComponents;
            uuidComponents.uuid = uuidComponents.nss;
            uuidComponents.nss = undefined;
            if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
                uuidComponents.error = uuidComponents.error || "UUID is not valid.";
            }
            return uuidComponents;
        },
        serialize: function serialize(uuidComponents, options) {
            var urnComponents = uuidComponents;
            //normalize UUID
            urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
            return urnComponents;
        }
    };

    SCHEMES[handler.scheme] = handler;
    SCHEMES[handler$1.scheme] = handler$1;
    SCHEMES[handler$2.scheme] = handler$2;
    SCHEMES[handler$3.scheme] = handler$3;
    SCHEMES[handler$4.scheme] = handler$4;
    SCHEMES[handler$5.scheme] = handler$5;
    SCHEMES[handler$6.scheme] = handler$6;

    exports.SCHEMES = SCHEMES;
    exports.pctEncChar = pctEncChar;
    exports.pctDecChars = pctDecChars;
    exports.parse = parse;
    exports.removeDotSegments = removeDotSegments;
    exports.serialize = serialize;
    exports.resolveComponents = resolveComponents;
    exports.resolve = resolve;
    exports.normalize = normalize;
    exports.equal = equal;
    exports.escapeComponent = escapeComponent;
    exports.unescapeComponent = unescapeComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

    })));

    }(uri_all, uri_all.exports));

    Object.defineProperty(uri$3, "__esModule", { value: true });
    const uri$2 = uri_all.exports;
    uri$2.code = 'require("ajv/dist/runtime/uri").default';
    uri$3.default = uri$2;

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
    var validate_1 = validate$2;
    Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function () { return validate_1.KeywordCxt; } });
    var codegen_1 = codegen$1;
    Object.defineProperty(exports, "_", { enumerable: true, get: function () { return codegen_1._; } });
    Object.defineProperty(exports, "str", { enumerable: true, get: function () { return codegen_1.str; } });
    Object.defineProperty(exports, "stringify", { enumerable: true, get: function () { return codegen_1.stringify; } });
    Object.defineProperty(exports, "nil", { enumerable: true, get: function () { return codegen_1.nil; } });
    Object.defineProperty(exports, "Name", { enumerable: true, get: function () { return codegen_1.Name; } });
    Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function () { return codegen_1.CodeGen; } });
    const validation_error_1 = validation_error$1;
    const ref_error_1 = ref_error$1;
    const rules_1 = rules$1;
    const compile_1 = compile$2;
    const codegen_2 = codegen$1;
    const resolve_1 = resolve$3;
    const dataType_1 = dataType$1;
    const util_1 = util$1;
    const $dataRefSchema = require$$9$1;
    const uri_1 = uri$3;
    const defaultRegExp = (str, flags) => new RegExp(str, flags);
    defaultRegExp.code = "new RegExp";
    const META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes"];
    const EXT_SCOPE_NAMES = new Set([
        "validate",
        "serialize",
        "parse",
        "wrapper",
        "root",
        "schema",
        "keyword",
        "pattern",
        "formats",
        "validate$data",
        "func",
        "obj",
        "Error",
    ]);
    const removedOptions = {
        errorDataPath: "",
        format: "`validateFormats: false` can be used instead.",
        nullable: '"nullable" keyword is supported by default.',
        jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
        extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
        missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
        processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
        sourceCode: "Use option `code: {source: true}`",
        strictDefaults: "It is default now, see option `strict`.",
        strictKeywords: "It is default now, see option `strict`.",
        uniqueItems: '"uniqueItems" keyword is always validated.',
        unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
        cache: "Map is used as cache, schema object as key.",
        serialize: "Map is used as cache, schema object as key.",
        ajvErrors: "It is default now.",
    };
    const deprecatedOptions = {
        ignoreKeywordsWithRef: "",
        jsPropertySyntax: "",
        unicode: '"minLength"/"maxLength" account for unicode characters by default.',
    };
    const MAX_EXPRESSION = 200;
    // eslint-disable-next-line complexity
    function requiredOptions(o) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
        const s = o.strict;
        const _optz = (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;
        const optimize = _optz === true || _optz === undefined ? 1 : _optz || 0;
        const regExp = (_c = (_b = o.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;
        const uriResolver = (_d = o.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;
        return {
            strictSchema: (_f = (_e = o.strictSchema) !== null && _e !== void 0 ? _e : s) !== null && _f !== void 0 ? _f : true,
            strictNumbers: (_h = (_g = o.strictNumbers) !== null && _g !== void 0 ? _g : s) !== null && _h !== void 0 ? _h : true,
            strictTypes: (_k = (_j = o.strictTypes) !== null && _j !== void 0 ? _j : s) !== null && _k !== void 0 ? _k : "log",
            strictTuples: (_m = (_l = o.strictTuples) !== null && _l !== void 0 ? _l : s) !== null && _m !== void 0 ? _m : "log",
            strictRequired: (_p = (_o = o.strictRequired) !== null && _o !== void 0 ? _o : s) !== null && _p !== void 0 ? _p : false,
            code: o.code ? { ...o.code, optimize, regExp } : { optimize, regExp },
            loopRequired: (_q = o.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,
            loopEnum: (_r = o.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,
            meta: (_s = o.meta) !== null && _s !== void 0 ? _s : true,
            messages: (_t = o.messages) !== null && _t !== void 0 ? _t : true,
            inlineRefs: (_u = o.inlineRefs) !== null && _u !== void 0 ? _u : true,
            schemaId: (_v = o.schemaId) !== null && _v !== void 0 ? _v : "$id",
            addUsedSchema: (_w = o.addUsedSchema) !== null && _w !== void 0 ? _w : true,
            validateSchema: (_x = o.validateSchema) !== null && _x !== void 0 ? _x : true,
            validateFormats: (_y = o.validateFormats) !== null && _y !== void 0 ? _y : true,
            unicodeRegExp: (_z = o.unicodeRegExp) !== null && _z !== void 0 ? _z : true,
            int32range: (_0 = o.int32range) !== null && _0 !== void 0 ? _0 : true,
            uriResolver: uriResolver,
        };
    }
    class Ajv {
        constructor(opts = {}) {
            this.schemas = {};
            this.refs = {};
            this.formats = {};
            this._compilations = new Set();
            this._loading = {};
            this._cache = new Map();
            opts = this.opts = { ...opts, ...requiredOptions(opts) };
            const { es5, lines } = this.opts.code;
            this.scope = new codegen_2.ValueScope({ scope: {}, prefixes: EXT_SCOPE_NAMES, es5, lines });
            this.logger = getLogger(opts.logger);
            const formatOpt = opts.validateFormats;
            opts.validateFormats = false;
            this.RULES = (0, rules_1.getRules)();
            checkOptions.call(this, removedOptions, opts, "NOT SUPPORTED");
            checkOptions.call(this, deprecatedOptions, opts, "DEPRECATED", "warn");
            this._metaOpts = getMetaSchemaOptions.call(this);
            if (opts.formats)
                addInitialFormats.call(this);
            this._addVocabularies();
            this._addDefaultMetaSchema();
            if (opts.keywords)
                addInitialKeywords.call(this, opts.keywords);
            if (typeof opts.meta == "object")
                this.addMetaSchema(opts.meta);
            addInitialSchemas.call(this);
            opts.validateFormats = formatOpt;
        }
        _addVocabularies() {
            this.addKeyword("$async");
        }
        _addDefaultMetaSchema() {
            const { $data, meta, schemaId } = this.opts;
            let _dataRefSchema = $dataRefSchema;
            if (schemaId === "id") {
                _dataRefSchema = { ...$dataRefSchema };
                _dataRefSchema.id = _dataRefSchema.$id;
                delete _dataRefSchema.$id;
            }
            if (meta && $data)
                this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);
        }
        defaultMeta() {
            const { meta, schemaId } = this.opts;
            return (this.opts.defaultMeta = typeof meta == "object" ? meta[schemaId] || meta : undefined);
        }
        validate(schemaKeyRef, // key, ref or schema object
        data // to be validated
        ) {
            let v;
            if (typeof schemaKeyRef == "string") {
                v = this.getSchema(schemaKeyRef);
                if (!v)
                    throw new Error(`no schema with key or ref "${schemaKeyRef}"`);
            }
            else {
                v = this.compile(schemaKeyRef);
            }
            const valid = v(data);
            if (!("$async" in v))
                this.errors = v.errors;
            return valid;
        }
        compile(schema, _meta) {
            const sch = this._addSchema(schema, _meta);
            return (sch.validate || this._compileSchemaEnv(sch));
        }
        compileAsync(schema, meta) {
            if (typeof this.opts.loadSchema != "function") {
                throw new Error("options.loadSchema should be a function");
            }
            const { loadSchema } = this.opts;
            return runCompileAsync.call(this, schema, meta);
            async function runCompileAsync(_schema, _meta) {
                await loadMetaSchema.call(this, _schema.$schema);
                const sch = this._addSchema(_schema, _meta);
                return sch.validate || _compileAsync.call(this, sch);
            }
            async function loadMetaSchema($ref) {
                if ($ref && !this.getSchema($ref)) {
                    await runCompileAsync.call(this, { $ref }, true);
                }
            }
            async function _compileAsync(sch) {
                try {
                    return this._compileSchemaEnv(sch);
                }
                catch (e) {
                    if (!(e instanceof ref_error_1.default))
                        throw e;
                    checkLoaded.call(this, e);
                    await loadMissingSchema.call(this, e.missingSchema);
                    return _compileAsync.call(this, sch);
                }
            }
            function checkLoaded({ missingSchema: ref, missingRef }) {
                if (this.refs[ref]) {
                    throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);
                }
            }
            async function loadMissingSchema(ref) {
                const _schema = await _loadSchema.call(this, ref);
                if (!this.refs[ref])
                    await loadMetaSchema.call(this, _schema.$schema);
                if (!this.refs[ref])
                    this.addSchema(_schema, ref, meta);
            }
            async function _loadSchema(ref) {
                const p = this._loading[ref];
                if (p)
                    return p;
                try {
                    return await (this._loading[ref] = loadSchema(ref));
                }
                finally {
                    delete this._loading[ref];
                }
            }
        }
        // Adds schema to the instance
        addSchema(schema, // If array is passed, `key` will be ignored
        key, // Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
        _meta, // true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
        _validateSchema = this.opts.validateSchema // false to skip schema validation. Used internally, option validateSchema should be used instead.
        ) {
            if (Array.isArray(schema)) {
                for (const sch of schema)
                    this.addSchema(sch, undefined, _meta, _validateSchema);
                return this;
            }
            let id;
            if (typeof schema === "object") {
                const { schemaId } = this.opts;
                id = schema[schemaId];
                if (id !== undefined && typeof id != "string") {
                    throw new Error(`schema ${schemaId} must be string`);
                }
            }
            key = (0, resolve_1.normalizeId)(key || id);
            this._checkUnique(key);
            this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);
            return this;
        }
        // Add schema that will be used to validate other schemas
        // options in META_IGNORE_OPTIONS are alway set to false
        addMetaSchema(schema, key, // schema key
        _validateSchema = this.opts.validateSchema // false to skip schema validation, can be used to override validateSchema option for meta-schema
        ) {
            this.addSchema(schema, key, true, _validateSchema);
            return this;
        }
        //  Validate schema against its meta-schema
        validateSchema(schema, throwOrLogError) {
            if (typeof schema == "boolean")
                return true;
            let $schema;
            $schema = schema.$schema;
            if ($schema !== undefined && typeof $schema != "string") {
                throw new Error("$schema must be a string");
            }
            $schema = $schema || this.opts.defaultMeta || this.defaultMeta();
            if (!$schema) {
                this.logger.warn("meta-schema not available");
                this.errors = null;
                return true;
            }
            const valid = this.validate($schema, schema);
            if (!valid && throwOrLogError) {
                const message = "schema is invalid: " + this.errorsText();
                if (this.opts.validateSchema === "log")
                    this.logger.error(message);
                else
                    throw new Error(message);
            }
            return valid;
        }
        // Get compiled schema by `key` or `ref`.
        // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)
        getSchema(keyRef) {
            let sch;
            while (typeof (sch = getSchEnv.call(this, keyRef)) == "string")
                keyRef = sch;
            if (sch === undefined) {
                const { schemaId } = this.opts;
                const root = new compile_1.SchemaEnv({ schema: {}, schemaId });
                sch = compile_1.resolveSchema.call(this, root, keyRef);
                if (!sch)
                    return;
                this.refs[keyRef] = sch;
            }
            return (sch.validate || this._compileSchemaEnv(sch));
        }
        // Remove cached schema(s).
        // If no parameter is passed all schemas but meta-schemas are removed.
        // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
        // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
        removeSchema(schemaKeyRef) {
            if (schemaKeyRef instanceof RegExp) {
                this._removeAllSchemas(this.schemas, schemaKeyRef);
                this._removeAllSchemas(this.refs, schemaKeyRef);
                return this;
            }
            switch (typeof schemaKeyRef) {
                case "undefined":
                    this._removeAllSchemas(this.schemas);
                    this._removeAllSchemas(this.refs);
                    this._cache.clear();
                    return this;
                case "string": {
                    const sch = getSchEnv.call(this, schemaKeyRef);
                    if (typeof sch == "object")
                        this._cache.delete(sch.schema);
                    delete this.schemas[schemaKeyRef];
                    delete this.refs[schemaKeyRef];
                    return this;
                }
                case "object": {
                    const cacheKey = schemaKeyRef;
                    this._cache.delete(cacheKey);
                    let id = schemaKeyRef[this.opts.schemaId];
                    if (id) {
                        id = (0, resolve_1.normalizeId)(id);
                        delete this.schemas[id];
                        delete this.refs[id];
                    }
                    return this;
                }
                default:
                    throw new Error("ajv.removeSchema: invalid parameter");
            }
        }
        // add "vocabulary" - a collection of keywords
        addVocabulary(definitions) {
            for (const def of definitions)
                this.addKeyword(def);
            return this;
        }
        addKeyword(kwdOrDef, def // deprecated
        ) {
            let keyword;
            if (typeof kwdOrDef == "string") {
                keyword = kwdOrDef;
                if (typeof def == "object") {
                    this.logger.warn("these parameters are deprecated, see docs for addKeyword");
                    def.keyword = keyword;
                }
            }
            else if (typeof kwdOrDef == "object" && def === undefined) {
                def = kwdOrDef;
                keyword = def.keyword;
                if (Array.isArray(keyword) && !keyword.length) {
                    throw new Error("addKeywords: keyword must be string or non-empty array");
                }
            }
            else {
                throw new Error("invalid addKeywords parameters");
            }
            checkKeyword.call(this, keyword, def);
            if (!def) {
                (0, util_1.eachItem)(keyword, (kwd) => addRule.call(this, kwd));
                return this;
            }
            keywordMetaschema.call(this, def);
            const definition = {
                ...def,
                type: (0, dataType_1.getJSONTypes)(def.type),
                schemaType: (0, dataType_1.getJSONTypes)(def.schemaType),
            };
            (0, util_1.eachItem)(keyword, definition.type.length === 0
                ? (k) => addRule.call(this, k, definition)
                : (k) => definition.type.forEach((t) => addRule.call(this, k, definition, t)));
            return this;
        }
        getKeyword(keyword) {
            const rule = this.RULES.all[keyword];
            return typeof rule == "object" ? rule.definition : !!rule;
        }
        // Remove keyword
        removeKeyword(keyword) {
            // TODO return type should be Ajv
            const { RULES } = this;
            delete RULES.keywords[keyword];
            delete RULES.all[keyword];
            for (const group of RULES.rules) {
                const i = group.rules.findIndex((rule) => rule.keyword === keyword);
                if (i >= 0)
                    group.rules.splice(i, 1);
            }
            return this;
        }
        // Add format
        addFormat(name, format) {
            if (typeof format == "string")
                format = new RegExp(format);
            this.formats[name] = format;
            return this;
        }
        errorsText(errors = this.errors, // optional array of validation errors
        { separator = ", ", dataVar = "data" } = {} // optional options with properties `separator` and `dataVar`
        ) {
            if (!errors || errors.length === 0)
                return "No errors";
            return errors
                .map((e) => `${dataVar}${e.instancePath} ${e.message}`)
                .reduce((text, msg) => text + separator + msg);
        }
        $dataMetaSchema(metaSchema, keywordsJsonPointers) {
            const rules = this.RULES.all;
            metaSchema = JSON.parse(JSON.stringify(metaSchema));
            for (const jsonPointer of keywordsJsonPointers) {
                const segments = jsonPointer.split("/").slice(1); // first segment is an empty string
                let keywords = metaSchema;
                for (const seg of segments)
                    keywords = keywords[seg];
                for (const key in rules) {
                    const rule = rules[key];
                    if (typeof rule != "object")
                        continue;
                    const { $data } = rule.definition;
                    const schema = keywords[key];
                    if ($data && schema)
                        keywords[key] = schemaOrData(schema);
                }
            }
            return metaSchema;
        }
        _removeAllSchemas(schemas, regex) {
            for (const keyRef in schemas) {
                const sch = schemas[keyRef];
                if (!regex || regex.test(keyRef)) {
                    if (typeof sch == "string") {
                        delete schemas[keyRef];
                    }
                    else if (sch && !sch.meta) {
                        this._cache.delete(sch.schema);
                        delete schemas[keyRef];
                    }
                }
            }
        }
        _addSchema(schema, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {
            let id;
            const { schemaId } = this.opts;
            if (typeof schema == "object") {
                id = schema[schemaId];
            }
            else {
                if (this.opts.jtd)
                    throw new Error("schema must be object");
                else if (typeof schema != "boolean")
                    throw new Error("schema must be object or boolean");
            }
            let sch = this._cache.get(schema);
            if (sch !== undefined)
                return sch;
            baseId = (0, resolve_1.normalizeId)(id || baseId);
            const localRefs = resolve_1.getSchemaRefs.call(this, schema, baseId);
            sch = new compile_1.SchemaEnv({ schema, schemaId, meta, baseId, localRefs });
            this._cache.set(sch.schema, sch);
            if (addSchema && !baseId.startsWith("#")) {
                // TODO atm it is allowed to overwrite schemas without id (instead of not adding them)
                if (baseId)
                    this._checkUnique(baseId);
                this.refs[baseId] = sch;
            }
            if (validateSchema)
                this.validateSchema(schema, true);
            return sch;
        }
        _checkUnique(id) {
            if (this.schemas[id] || this.refs[id]) {
                throw new Error(`schema with key or id "${id}" already exists`);
            }
        }
        _compileSchemaEnv(sch) {
            if (sch.meta)
                this._compileMetaSchema(sch);
            else
                compile_1.compileSchema.call(this, sch);
            /* istanbul ignore if */
            if (!sch.validate)
                throw new Error("ajv implementation error");
            return sch.validate;
        }
        _compileMetaSchema(sch) {
            const currentOpts = this.opts;
            this.opts = this._metaOpts;
            try {
                compile_1.compileSchema.call(this, sch);
            }
            finally {
                this.opts = currentOpts;
            }
        }
    }
    exports.default = Ajv;
    Ajv.ValidationError = validation_error_1.default;
    Ajv.MissingRefError = ref_error_1.default;
    function checkOptions(checkOpts, options, msg, log = "error") {
        for (const key in checkOpts) {
            const opt = key;
            if (opt in options)
                this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);
        }
    }
    function getSchEnv(keyRef) {
        keyRef = (0, resolve_1.normalizeId)(keyRef); // TODO tests fail without this line
        return this.schemas[keyRef] || this.refs[keyRef];
    }
    function addInitialSchemas() {
        const optsSchemas = this.opts.schemas;
        if (!optsSchemas)
            return;
        if (Array.isArray(optsSchemas))
            this.addSchema(optsSchemas);
        else
            for (const key in optsSchemas)
                this.addSchema(optsSchemas[key], key);
    }
    function addInitialFormats() {
        for (const name in this.opts.formats) {
            const format = this.opts.formats[name];
            if (format)
                this.addFormat(name, format);
        }
    }
    function addInitialKeywords(defs) {
        if (Array.isArray(defs)) {
            this.addVocabulary(defs);
            return;
        }
        this.logger.warn("keywords option as map is deprecated, pass array");
        for (const keyword in defs) {
            const def = defs[keyword];
            if (!def.keyword)
                def.keyword = keyword;
            this.addKeyword(def);
        }
    }
    function getMetaSchemaOptions() {
        const metaOpts = { ...this.opts };
        for (const opt of META_IGNORE_OPTIONS)
            delete metaOpts[opt];
        return metaOpts;
    }
    const noLogs = { log() { }, warn() { }, error() { } };
    function getLogger(logger) {
        if (logger === false)
            return noLogs;
        if (logger === undefined)
            return console;
        if (logger.log && logger.warn && logger.error)
            return logger;
        throw new Error("logger must implement log, warn and error methods");
    }
    const KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;
    function checkKeyword(keyword, def) {
        const { RULES } = this;
        (0, util_1.eachItem)(keyword, (kwd) => {
            if (RULES.keywords[kwd])
                throw new Error(`Keyword ${kwd} is already defined`);
            if (!KEYWORD_NAME.test(kwd))
                throw new Error(`Keyword ${kwd} has invalid name`);
        });
        if (!def)
            return;
        if (def.$data && !("code" in def || "validate" in def)) {
            throw new Error('$data keyword must have "code" or "validate" function');
        }
    }
    function addRule(keyword, definition, dataType) {
        var _a;
        const post = definition === null || definition === void 0 ? void 0 : definition.post;
        if (dataType && post)
            throw new Error('keyword with "post" flag cannot have "type"');
        const { RULES } = this;
        let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t }) => t === dataType);
        if (!ruleGroup) {
            ruleGroup = { type: dataType, rules: [] };
            RULES.rules.push(ruleGroup);
        }
        RULES.keywords[keyword] = true;
        if (!definition)
            return;
        const rule = {
            keyword,
            definition: {
                ...definition,
                type: (0, dataType_1.getJSONTypes)(definition.type),
                schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType),
            },
        };
        if (definition.before)
            addBeforeRule.call(this, ruleGroup, rule, definition.before);
        else
            ruleGroup.rules.push(rule);
        RULES.all[keyword] = rule;
        (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach((kwd) => this.addKeyword(kwd));
    }
    function addBeforeRule(ruleGroup, rule, before) {
        const i = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before);
        if (i >= 0) {
            ruleGroup.rules.splice(i, 0, rule);
        }
        else {
            ruleGroup.rules.push(rule);
            this.logger.warn(`rule ${before} is not defined`);
        }
    }
    function keywordMetaschema(def) {
        let { metaSchema } = def;
        if (metaSchema === undefined)
            return;
        if (def.$data && this.opts.$data)
            metaSchema = schemaOrData(metaSchema);
        def.validateSchema = this.compile(metaSchema, true);
    }
    const $dataRef = {
        $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",
    };
    function schemaOrData(schema) {
        return { anyOf: [schema, $dataRef] };
    }

    }(core$5));

    var draft7$1 = {};

    var core$4 = {};

    var id$1 = {};

    Object.defineProperty(id$1, "__esModule", { value: true });
    const def$V = {
        keyword: "id",
        code() {
            throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
        },
    };
    id$1.default = def$V;

    var ref$1 = {};

    Object.defineProperty(ref$1, "__esModule", { value: true });
    ref$1.callRef = ref$1.getValidate = void 0;
    const ref_error_1$1 = ref_error$1;
    const code_1$i = code$2;
    const codegen_1$P = codegen$1;
    const names_1$8 = names$3;
    const compile_1$3 = compile$2;
    const util_1$J = util$1;
    const def$U = {
        keyword: "$ref",
        schemaType: "string",
        code(cxt) {
            const { gen, schema: $ref, it } = cxt;
            const { baseId, schemaEnv: env, validateName, opts, self } = it;
            const { root } = env;
            if (($ref === "#" || $ref === "#/") && baseId === root.baseId)
                return callRootRef();
            const schOrEnv = compile_1$3.resolveRef.call(self, root, baseId, $ref);
            if (schOrEnv === undefined)
                throw new ref_error_1$1.default(it.opts.uriResolver, baseId, $ref);
            if (schOrEnv instanceof compile_1$3.SchemaEnv)
                return callValidate(schOrEnv);
            return inlineRefSchema(schOrEnv);
            function callRootRef() {
                if (env === root)
                    return callRef$1(cxt, validateName, env, env.$async);
                const rootName = gen.scopeValue("root", { ref: root });
                return callRef$1(cxt, (0, codegen_1$P._) `${rootName}.validate`, root, root.$async);
            }
            function callValidate(sch) {
                const v = getValidate$1(cxt, sch);
                callRef$1(cxt, v, sch, sch.$async);
            }
            function inlineRefSchema(sch) {
                const schName = gen.scopeValue("schema", opts.code.source === true ? { ref: sch, code: (0, codegen_1$P.stringify)(sch) } : { ref: sch });
                const valid = gen.name("valid");
                const schCxt = cxt.subschema({
                    schema: sch,
                    dataTypes: [],
                    schemaPath: codegen_1$P.nil,
                    topSchemaRef: schName,
                    errSchemaPath: $ref,
                }, valid);
                cxt.mergeEvaluated(schCxt);
                cxt.ok(valid);
            }
        },
    };
    function getValidate$1(cxt, sch) {
        const { gen } = cxt;
        return sch.validate
            ? gen.scopeValue("validate", { ref: sch.validate })
            : (0, codegen_1$P._) `${gen.scopeValue("wrapper", { ref: sch })}.validate`;
    }
    ref$1.getValidate = getValidate$1;
    function callRef$1(cxt, v, sch, $async) {
        const { gen, it } = cxt;
        const { allErrors, schemaEnv: env, opts } = it;
        const passCxt = opts.passContext ? names_1$8.default.this : codegen_1$P.nil;
        if ($async)
            callAsyncRef();
        else
            callSyncRef();
        function callAsyncRef() {
            if (!env.$async)
                throw new Error("async schema referenced by sync schema");
            const valid = gen.let("valid");
            gen.try(() => {
                gen.code((0, codegen_1$P._) `await ${(0, code_1$i.callValidateCode)(cxt, v, passCxt)}`);
                addEvaluatedFrom(v); // TODO will not work with async, it has to be returned with the result
                if (!allErrors)
                    gen.assign(valid, true);
            }, (e) => {
                gen.if((0, codegen_1$P._) `!(${e} instanceof ${it.ValidationError})`, () => gen.throw(e));
                addErrorsFrom(e);
                if (!allErrors)
                    gen.assign(valid, false);
            });
            cxt.ok(valid);
        }
        function callSyncRef() {
            cxt.result((0, code_1$i.callValidateCode)(cxt, v, passCxt), () => addEvaluatedFrom(v), () => addErrorsFrom(v));
        }
        function addErrorsFrom(source) {
            const errs = (0, codegen_1$P._) `${source}.errors`;
            gen.assign(names_1$8.default.vErrors, (0, codegen_1$P._) `${names_1$8.default.vErrors} === null ? ${errs} : ${names_1$8.default.vErrors}.concat(${errs})`); // TODO tagged
            gen.assign(names_1$8.default.errors, (0, codegen_1$P._) `${names_1$8.default.vErrors}.length`);
        }
        function addEvaluatedFrom(source) {
            var _a;
            if (!it.opts.unevaluated)
                return;
            const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated;
            // TODO refactor
            if (it.props !== true) {
                if (schEvaluated && !schEvaluated.dynamicProps) {
                    if (schEvaluated.props !== undefined) {
                        it.props = util_1$J.mergeEvaluated.props(gen, schEvaluated.props, it.props);
                    }
                }
                else {
                    const props = gen.var("props", (0, codegen_1$P._) `${source}.evaluated.props`);
                    it.props = util_1$J.mergeEvaluated.props(gen, props, it.props, codegen_1$P.Name);
                }
            }
            if (it.items !== true) {
                if (schEvaluated && !schEvaluated.dynamicItems) {
                    if (schEvaluated.items !== undefined) {
                        it.items = util_1$J.mergeEvaluated.items(gen, schEvaluated.items, it.items);
                    }
                }
                else {
                    const items = gen.var("items", (0, codegen_1$P._) `${source}.evaluated.items`);
                    it.items = util_1$J.mergeEvaluated.items(gen, items, it.items, codegen_1$P.Name);
                }
            }
        }
    }
    ref$1.callRef = callRef$1;
    ref$1.default = def$U;

    Object.defineProperty(core$4, "__esModule", { value: true });
    const id_1$1 = id$1;
    const ref_1$1 = ref$1;
    const core$3 = [
        "$schema",
        "$id",
        "$defs",
        "$vocabulary",
        { keyword: "$comment" },
        "definitions",
        id_1$1.default,
        ref_1$1.default,
    ];
    core$4.default = core$3;

    var validation$3 = {};

    var limitNumber$1 = {};

    Object.defineProperty(limitNumber$1, "__esModule", { value: true });
    const codegen_1$O = codegen$1;
    const ops$1 = codegen_1$O.operators;
    const KWDs$1 = {
        maximum: { okStr: "<=", ok: ops$1.LTE, fail: ops$1.GT },
        minimum: { okStr: ">=", ok: ops$1.GTE, fail: ops$1.LT },
        exclusiveMaximum: { okStr: "<", ok: ops$1.LT, fail: ops$1.GTE },
        exclusiveMinimum: { okStr: ">", ok: ops$1.GT, fail: ops$1.LTE },
    };
    const error$B = {
        message: ({ keyword, schemaCode }) => (0, codegen_1$O.str) `must be ${KWDs$1[keyword].okStr} ${schemaCode}`,
        params: ({ keyword, schemaCode }) => (0, codegen_1$O._) `{comparison: ${KWDs$1[keyword].okStr}, limit: ${schemaCode}}`,
    };
    const def$T = {
        keyword: Object.keys(KWDs$1),
        type: "number",
        schemaType: "number",
        $data: true,
        error: error$B,
        code(cxt) {
            const { keyword, data, schemaCode } = cxt;
            cxt.fail$data((0, codegen_1$O._) `${data} ${KWDs$1[keyword].fail} ${schemaCode} || isNaN(${data})`);
        },
    };
    limitNumber$1.default = def$T;

    var multipleOf$1 = {};

    Object.defineProperty(multipleOf$1, "__esModule", { value: true });
    const codegen_1$N = codegen$1;
    const error$A = {
        message: ({ schemaCode }) => (0, codegen_1$N.str) `must be multiple of ${schemaCode}`,
        params: ({ schemaCode }) => (0, codegen_1$N._) `{multipleOf: ${schemaCode}}`,
    };
    const def$S = {
        keyword: "multipleOf",
        type: "number",
        schemaType: "number",
        $data: true,
        error: error$A,
        code(cxt) {
            const { gen, data, schemaCode, it } = cxt;
            // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)
            const prec = it.opts.multipleOfPrecision;
            const res = gen.let("res");
            const invalid = prec
                ? (0, codegen_1$N._) `Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}`
                : (0, codegen_1$N._) `${res} !== parseInt(${res})`;
            cxt.fail$data((0, codegen_1$N._) `(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);
        },
    };
    multipleOf$1.default = def$S;

    var limitLength$1 = {};

    var ucs2length$3 = {};

    Object.defineProperty(ucs2length$3, "__esModule", { value: true });
    // https://mathiasbynens.be/notes/javascript-encoding
    // https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
    function ucs2length$2(str) {
        const len = str.length;
        let length = 0;
        let pos = 0;
        let value;
        while (pos < len) {
            length++;
            value = str.charCodeAt(pos++);
            if (value >= 0xd800 && value <= 0xdbff && pos < len) {
                // high surrogate, and there is a next character
                value = str.charCodeAt(pos);
                if ((value & 0xfc00) === 0xdc00)
                    pos++; // low surrogate
            }
        }
        return length;
    }
    ucs2length$3.default = ucs2length$2;
    ucs2length$2.code = 'require("ajv/dist/runtime/ucs2length").default';

    Object.defineProperty(limitLength$1, "__esModule", { value: true });
    const codegen_1$M = codegen$1;
    const util_1$I = util$1;
    const ucs2length_1$1 = ucs2length$3;
    const error$z = {
        message({ keyword, schemaCode }) {
            const comp = keyword === "maxLength" ? "more" : "fewer";
            return (0, codegen_1$M.str) `must NOT have ${comp} than ${schemaCode} characters`;
        },
        params: ({ schemaCode }) => (0, codegen_1$M._) `{limit: ${schemaCode}}`,
    };
    const def$R = {
        keyword: ["maxLength", "minLength"],
        type: "string",
        schemaType: "number",
        $data: true,
        error: error$z,
        code(cxt) {
            const { keyword, data, schemaCode, it } = cxt;
            const op = keyword === "maxLength" ? codegen_1$M.operators.GT : codegen_1$M.operators.LT;
            const len = it.opts.unicode === false ? (0, codegen_1$M._) `${data}.length` : (0, codegen_1$M._) `${(0, util_1$I.useFunc)(cxt.gen, ucs2length_1$1.default)}(${data})`;
            cxt.fail$data((0, codegen_1$M._) `${len} ${op} ${schemaCode}`);
        },
    };
    limitLength$1.default = def$R;

    var pattern$1 = {};

    Object.defineProperty(pattern$1, "__esModule", { value: true });
    const code_1$h = code$2;
    const codegen_1$L = codegen$1;
    const error$y = {
        message: ({ schemaCode }) => (0, codegen_1$L.str) `must match pattern "${schemaCode}"`,
        params: ({ schemaCode }) => (0, codegen_1$L._) `{pattern: ${schemaCode}}`,
    };
    const def$Q = {
        keyword: "pattern",
        type: "string",
        schemaType: "string",
        $data: true,
        error: error$y,
        code(cxt) {
            const { data, $data, schema, schemaCode, it } = cxt;
            // TODO regexp should be wrapped in try/catchs
            const u = it.opts.unicodeRegExp ? "u" : "";
            const regExp = $data ? (0, codegen_1$L._) `(new RegExp(${schemaCode}, ${u}))` : (0, code_1$h.usePattern)(cxt, schema);
            cxt.fail$data((0, codegen_1$L._) `!${regExp}.test(${data})`);
        },
    };
    pattern$1.default = def$Q;

    var limitProperties$1 = {};

    Object.defineProperty(limitProperties$1, "__esModule", { value: true });
    const codegen_1$K = codegen$1;
    const error$x = {
        message({ keyword, schemaCode }) {
            const comp = keyword === "maxProperties" ? "more" : "fewer";
            return (0, codegen_1$K.str) `must NOT have ${comp} than ${schemaCode} properties`;
        },
        params: ({ schemaCode }) => (0, codegen_1$K._) `{limit: ${schemaCode}}`,
    };
    const def$P = {
        keyword: ["maxProperties", "minProperties"],
        type: "object",
        schemaType: "number",
        $data: true,
        error: error$x,
        code(cxt) {
            const { keyword, data, schemaCode } = cxt;
            const op = keyword === "maxProperties" ? codegen_1$K.operators.GT : codegen_1$K.operators.LT;
            cxt.fail$data((0, codegen_1$K._) `Object.keys(${data}).length ${op} ${schemaCode}`);
        },
    };
    limitProperties$1.default = def$P;

    var required$2 = {};

    Object.defineProperty(required$2, "__esModule", { value: true });
    const code_1$g = code$2;
    const codegen_1$J = codegen$1;
    const util_1$H = util$1;
    const error$w = {
        message: ({ params: { missingProperty } }) => (0, codegen_1$J.str) `must have required property '${missingProperty}'`,
        params: ({ params: { missingProperty } }) => (0, codegen_1$J._) `{missingProperty: ${missingProperty}}`,
    };
    const def$O = {
        keyword: "required",
        type: "object",
        schemaType: "array",
        $data: true,
        error: error$w,
        code(cxt) {
            const { gen, schema, schemaCode, data, $data, it } = cxt;
            const { opts } = it;
            if (!$data && schema.length === 0)
                return;
            const useLoop = schema.length >= opts.loopRequired;
            if (it.allErrors)
                allErrorsMode();
            else
                exitOnErrorMode();
            if (opts.strictRequired) {
                const props = cxt.parentSchema.properties;
                const { definedProperties } = cxt.it;
                for (const requiredKey of schema) {
                    if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === undefined && !definedProperties.has(requiredKey)) {
                        const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
                        const msg = `required property "${requiredKey}" is not defined at "${schemaPath}" (strictRequired)`;
                        (0, util_1$H.checkStrictMode)(it, msg, it.opts.strictRequired);
                    }
                }
            }
            function allErrorsMode() {
                if (useLoop || $data) {
                    cxt.block$data(codegen_1$J.nil, loopAllRequired);
                }
                else {
                    for (const prop of schema) {
                        (0, code_1$g.checkReportMissingProp)(cxt, prop);
                    }
                }
            }
            function exitOnErrorMode() {
                const missing = gen.let("missing");
                if (useLoop || $data) {
                    const valid = gen.let("valid", true);
                    cxt.block$data(valid, () => loopUntilMissing(missing, valid));
                    cxt.ok(valid);
                }
                else {
                    gen.if((0, code_1$g.checkMissingProp)(cxt, schema, missing));
                    (0, code_1$g.reportMissingProp)(cxt, missing);
                    gen.else();
                }
            }
            function loopAllRequired() {
                gen.forOf("prop", schemaCode, (prop) => {
                    cxt.setParams({ missingProperty: prop });
                    gen.if((0, code_1$g.noPropertyInData)(gen, data, prop, opts.ownProperties), () => cxt.error());
                });
            }
            function loopUntilMissing(missing, valid) {
                cxt.setParams({ missingProperty: missing });
                gen.forOf(missing, schemaCode, () => {
                    gen.assign(valid, (0, code_1$g.propertyInData)(gen, data, missing, opts.ownProperties));
                    gen.if((0, codegen_1$J.not)(valid), () => {
                        cxt.error();
                        gen.break();
                    });
                }, codegen_1$J.nil);
            }
        },
    };
    required$2.default = def$O;

    var limitItems$1 = {};

    Object.defineProperty(limitItems$1, "__esModule", { value: true });
    const codegen_1$I = codegen$1;
    const error$v = {
        message({ keyword, schemaCode }) {
            const comp = keyword === "maxItems" ? "more" : "fewer";
            return (0, codegen_1$I.str) `must NOT have ${comp} than ${schemaCode} items`;
        },
        params: ({ schemaCode }) => (0, codegen_1$I._) `{limit: ${schemaCode}}`,
    };
    const def$N = {
        keyword: ["maxItems", "minItems"],
        type: "array",
        schemaType: "number",
        $data: true,
        error: error$v,
        code(cxt) {
            const { keyword, data, schemaCode } = cxt;
            const op = keyword === "maxItems" ? codegen_1$I.operators.GT : codegen_1$I.operators.LT;
            cxt.fail$data((0, codegen_1$I._) `${data}.length ${op} ${schemaCode}`);
        },
    };
    limitItems$1.default = def$N;

    var uniqueItems$1 = {};

    var equal$4 = {};

    Object.defineProperty(equal$4, "__esModule", { value: true });
    // https://github.com/ajv-validator/ajv/issues/889
    const equal$3 = fastDeepEqual;
    equal$3.code = 'require("ajv/dist/runtime/equal").default';
    equal$4.default = equal$3;

    Object.defineProperty(uniqueItems$1, "__esModule", { value: true });
    const dataType_1$2 = dataType$1;
    const codegen_1$H = codegen$1;
    const util_1$G = util$1;
    const equal_1$5 = equal$4;
    const error$u = {
        message: ({ params: { i, j } }) => (0, codegen_1$H.str) `must NOT have duplicate items (items ## ${j} and ${i} are identical)`,
        params: ({ params: { i, j } }) => (0, codegen_1$H._) `{i: ${i}, j: ${j}}`,
    };
    const def$M = {
        keyword: "uniqueItems",
        type: "array",
        schemaType: "boolean",
        $data: true,
        error: error$u,
        code(cxt) {
            const { gen, data, $data, schema, parentSchema, schemaCode, it } = cxt;
            if (!$data && !schema)
                return;
            const valid = gen.let("valid");
            const itemTypes = parentSchema.items ? (0, dataType_1$2.getSchemaTypes)(parentSchema.items) : [];
            cxt.block$data(valid, validateUniqueItems, (0, codegen_1$H._) `${schemaCode} === false`);
            cxt.ok(valid);
            function validateUniqueItems() {
                const i = gen.let("i", (0, codegen_1$H._) `${data}.length`);
                const j = gen.let("j");
                cxt.setParams({ i, j });
                gen.assign(valid, true);
                gen.if((0, codegen_1$H._) `${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j));
            }
            function canOptimize() {
                return itemTypes.length > 0 && !itemTypes.some((t) => t === "object" || t === "array");
            }
            function loopN(i, j) {
                const item = gen.name("item");
                const wrongType = (0, dataType_1$2.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1$2.DataType.Wrong);
                const indices = gen.const("indices", (0, codegen_1$H._) `{}`);
                gen.for((0, codegen_1$H._) `;${i}--;`, () => {
                    gen.let(item, (0, codegen_1$H._) `${data}[${i}]`);
                    gen.if(wrongType, (0, codegen_1$H._) `continue`);
                    if (itemTypes.length > 1)
                        gen.if((0, codegen_1$H._) `typeof ${item} == "string"`, (0, codegen_1$H._) `${item} += "_"`);
                    gen
                        .if((0, codegen_1$H._) `typeof ${indices}[${item}] == "number"`, () => {
                        gen.assign(j, (0, codegen_1$H._) `${indices}[${item}]`);
                        cxt.error();
                        gen.assign(valid, false).break();
                    })
                        .code((0, codegen_1$H._) `${indices}[${item}] = ${i}`);
                });
            }
            function loopN2(i, j) {
                const eql = (0, util_1$G.useFunc)(gen, equal_1$5.default);
                const outer = gen.name("outer");
                gen.label(outer).for((0, codegen_1$H._) `;${i}--;`, () => gen.for((0, codegen_1$H._) `${j} = ${i}; ${j}--;`, () => gen.if((0, codegen_1$H._) `${eql}(${data}[${i}], ${data}[${j}])`, () => {
                    cxt.error();
                    gen.assign(valid, false).break(outer);
                })));
            }
        },
    };
    uniqueItems$1.default = def$M;

    var _const$1 = {};

    Object.defineProperty(_const$1, "__esModule", { value: true });
    const codegen_1$G = codegen$1;
    const util_1$F = util$1;
    const equal_1$4 = equal$4;
    const error$t = {
        message: "must be equal to constant",
        params: ({ schemaCode }) => (0, codegen_1$G._) `{allowedValue: ${schemaCode}}`,
    };
    const def$L = {
        keyword: "const",
        $data: true,
        error: error$t,
        code(cxt) {
            const { gen, data, $data, schemaCode, schema } = cxt;
            if ($data || (schema && typeof schema == "object")) {
                cxt.fail$data((0, codegen_1$G._) `!${(0, util_1$F.useFunc)(gen, equal_1$4.default)}(${data}, ${schemaCode})`);
            }
            else {
                cxt.fail((0, codegen_1$G._) `${schema} !== ${data}`);
            }
        },
    };
    _const$1.default = def$L;

    var _enum$1 = {};

    Object.defineProperty(_enum$1, "__esModule", { value: true });
    const codegen_1$F = codegen$1;
    const util_1$E = util$1;
    const equal_1$3 = equal$4;
    const error$s = {
        message: "must be equal to one of the allowed values",
        params: ({ schemaCode }) => (0, codegen_1$F._) `{allowedValues: ${schemaCode}}`,
    };
    const def$K = {
        keyword: "enum",
        schemaType: "array",
        $data: true,
        error: error$s,
        code(cxt) {
            const { gen, data, $data, schema, schemaCode, it } = cxt;
            if (!$data && schema.length === 0)
                throw new Error("enum must have non-empty array");
            const useLoop = schema.length >= it.opts.loopEnum;
            let eql;
            const getEql = () => (eql !== null && eql !== void 0 ? eql : (eql = (0, util_1$E.useFunc)(gen, equal_1$3.default)));
            let valid;
            if (useLoop || $data) {
                valid = gen.let("valid");
                cxt.block$data(valid, loopEnum);
            }
            else {
                /* istanbul ignore if */
                if (!Array.isArray(schema))
                    throw new Error("ajv implementation error");
                const vSchema = gen.const("vSchema", schemaCode);
                valid = (0, codegen_1$F.or)(...schema.map((_x, i) => equalCode(vSchema, i)));
            }
            cxt.pass(valid);
            function loopEnum() {
                gen.assign(valid, false);
                gen.forOf("v", schemaCode, (v) => gen.if((0, codegen_1$F._) `${getEql()}(${data}, ${v})`, () => gen.assign(valid, true).break()));
            }
            function equalCode(vSchema, i) {
                const sch = schema[i];
                return typeof sch === "object" && sch !== null
                    ? (0, codegen_1$F._) `${getEql()}(${data}, ${vSchema}[${i}])`
                    : (0, codegen_1$F._) `${data} === ${sch}`;
            }
        },
    };
    _enum$1.default = def$K;

    Object.defineProperty(validation$3, "__esModule", { value: true });
    const limitNumber_1$1 = limitNumber$1;
    const multipleOf_1$1 = multipleOf$1;
    const limitLength_1$1 = limitLength$1;
    const pattern_1$1 = pattern$1;
    const limitProperties_1$1 = limitProperties$1;
    const required_1$1 = required$2;
    const limitItems_1$1 = limitItems$1;
    const uniqueItems_1$1 = uniqueItems$1;
    const const_1$1 = _const$1;
    const enum_1$1 = _enum$1;
    const validation$2 = [
        // number
        limitNumber_1$1.default,
        multipleOf_1$1.default,
        // string
        limitLength_1$1.default,
        pattern_1$1.default,
        // object
        limitProperties_1$1.default,
        required_1$1.default,
        // array
        limitItems_1$1.default,
        uniqueItems_1$1.default,
        // any
        { keyword: "type", schemaType: ["string", "array"] },
        { keyword: "nullable", schemaType: "boolean" },
        const_1$1.default,
        enum_1$1.default,
    ];
    validation$3.default = validation$2;

    var applicator$1 = {};

    var additionalItems$1 = {};

    Object.defineProperty(additionalItems$1, "__esModule", { value: true });
    additionalItems$1.validateAdditionalItems = void 0;
    const codegen_1$E = codegen$1;
    const util_1$D = util$1;
    const error$r = {
        message: ({ params: { len } }) => (0, codegen_1$E.str) `must NOT have more than ${len} items`,
        params: ({ params: { len } }) => (0, codegen_1$E._) `{limit: ${len}}`,
    };
    const def$J = {
        keyword: "additionalItems",
        type: "array",
        schemaType: ["boolean", "object"],
        before: "uniqueItems",
        error: error$r,
        code(cxt) {
            const { parentSchema, it } = cxt;
            const { items } = parentSchema;
            if (!Array.isArray(items)) {
                (0, util_1$D.checkStrictMode)(it, '"additionalItems" is ignored when "items" is not an array of schemas');
                return;
            }
            validateAdditionalItems$1(cxt, items);
        },
    };
    function validateAdditionalItems$1(cxt, items) {
        const { gen, schema, data, keyword, it } = cxt;
        it.items = true;
        const len = gen.const("len", (0, codegen_1$E._) `${data}.length`);
        if (schema === false) {
            cxt.setParams({ len: items.length });
            cxt.pass((0, codegen_1$E._) `${len} <= ${items.length}`);
        }
        else if (typeof schema == "object" && !(0, util_1$D.alwaysValidSchema)(it, schema)) {
            const valid = gen.var("valid", (0, codegen_1$E._) `${len} <= ${items.length}`); // TODO var
            gen.if((0, codegen_1$E.not)(valid), () => validateItems(valid));
            cxt.ok(valid);
        }
        function validateItems(valid) {
            gen.forRange("i", items.length, len, (i) => {
                cxt.subschema({ keyword, dataProp: i, dataPropType: util_1$D.Type.Num }, valid);
                if (!it.allErrors)
                    gen.if((0, codegen_1$E.not)(valid), () => gen.break());
            });
        }
    }
    additionalItems$1.validateAdditionalItems = validateAdditionalItems$1;
    additionalItems$1.default = def$J;

    var prefixItems$1 = {};

    var items$1 = {};

    Object.defineProperty(items$1, "__esModule", { value: true });
    items$1.validateTuple = void 0;
    const codegen_1$D = codegen$1;
    const util_1$C = util$1;
    const code_1$f = code$2;
    const def$I = {
        keyword: "items",
        type: "array",
        schemaType: ["object", "array", "boolean"],
        before: "uniqueItems",
        code(cxt) {
            const { schema, it } = cxt;
            if (Array.isArray(schema))
                return validateTuple$1(cxt, "additionalItems", schema);
            it.items = true;
            if ((0, util_1$C.alwaysValidSchema)(it, schema))
                return;
            cxt.ok((0, code_1$f.validateArray)(cxt));
        },
    };
    function validateTuple$1(cxt, extraItems, schArr = cxt.schema) {
        const { gen, parentSchema, data, keyword, it } = cxt;
        checkStrictTuple(parentSchema);
        if (it.opts.unevaluated && schArr.length && it.items !== true) {
            it.items = util_1$C.mergeEvaluated.items(gen, schArr.length, it.items);
        }
        const valid = gen.name("valid");
        const len = gen.const("len", (0, codegen_1$D._) `${data}.length`);
        schArr.forEach((sch, i) => {
            if ((0, util_1$C.alwaysValidSchema)(it, sch))
                return;
            gen.if((0, codegen_1$D._) `${len} > ${i}`, () => cxt.subschema({
                keyword,
                schemaProp: i,
                dataProp: i,
            }, valid));
            cxt.ok(valid);
        });
        function checkStrictTuple(sch) {
            const { opts, errSchemaPath } = it;
            const l = schArr.length;
            const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);
            if (opts.strictTuples && !fullTuple) {
                const msg = `"${keyword}" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path "${errSchemaPath}"`;
                (0, util_1$C.checkStrictMode)(it, msg, opts.strictTuples);
            }
        }
    }
    items$1.validateTuple = validateTuple$1;
    items$1.default = def$I;

    Object.defineProperty(prefixItems$1, "__esModule", { value: true });
    const items_1$3 = items$1;
    const def$H = {
        keyword: "prefixItems",
        type: "array",
        schemaType: ["array"],
        before: "uniqueItems",
        code: (cxt) => (0, items_1$3.validateTuple)(cxt, "items"),
    };
    prefixItems$1.default = def$H;

    var items2020$1 = {};

    Object.defineProperty(items2020$1, "__esModule", { value: true });
    const codegen_1$C = codegen$1;
    const util_1$B = util$1;
    const code_1$e = code$2;
    const additionalItems_1$3 = additionalItems$1;
    const error$q = {
        message: ({ params: { len } }) => (0, codegen_1$C.str) `must NOT have more than ${len} items`,
        params: ({ params: { len } }) => (0, codegen_1$C._) `{limit: ${len}}`,
    };
    const def$G = {
        keyword: "items",
        type: "array",
        schemaType: ["object", "boolean"],
        before: "uniqueItems",
        error: error$q,
        code(cxt) {
            const { schema, parentSchema, it } = cxt;
            const { prefixItems } = parentSchema;
            it.items = true;
            if ((0, util_1$B.alwaysValidSchema)(it, schema))
                return;
            if (prefixItems)
                (0, additionalItems_1$3.validateAdditionalItems)(cxt, prefixItems);
            else
                cxt.ok((0, code_1$e.validateArray)(cxt));
        },
    };
    items2020$1.default = def$G;

    var contains$2 = {};

    Object.defineProperty(contains$2, "__esModule", { value: true });
    const codegen_1$B = codegen$1;
    const util_1$A = util$1;
    const error$p = {
        message: ({ params: { min, max } }) => max === undefined
            ? (0, codegen_1$B.str) `must contain at least ${min} valid item(s)`
            : (0, codegen_1$B.str) `must contain at least ${min} and no more than ${max} valid item(s)`,
        params: ({ params: { min, max } }) => max === undefined ? (0, codegen_1$B._) `{minContains: ${min}}` : (0, codegen_1$B._) `{minContains: ${min}, maxContains: ${max}}`,
    };
    const def$F = {
        keyword: "contains",
        type: "array",
        schemaType: ["object", "boolean"],
        before: "uniqueItems",
        trackErrors: true,
        error: error$p,
        code(cxt) {
            const { gen, schema, parentSchema, data, it } = cxt;
            let min;
            let max;
            const { minContains, maxContains } = parentSchema;
            if (it.opts.next) {
                min = minContains === undefined ? 1 : minContains;
                max = maxContains;
            }
            else {
                min = 1;
            }
            const len = gen.const("len", (0, codegen_1$B._) `${data}.length`);
            cxt.setParams({ min, max });
            if (max === undefined && min === 0) {
                (0, util_1$A.checkStrictMode)(it, `"minContains" == 0 without "maxContains": "contains" keyword ignored`);
                return;
            }
            if (max !== undefined && min > max) {
                (0, util_1$A.checkStrictMode)(it, `"minContains" > "maxContains" is always invalid`);
                cxt.fail();
                return;
            }
            if ((0, util_1$A.alwaysValidSchema)(it, schema)) {
                let cond = (0, codegen_1$B._) `${len} >= ${min}`;
                if (max !== undefined)
                    cond = (0, codegen_1$B._) `${cond} && ${len} <= ${max}`;
                cxt.pass(cond);
                return;
            }
            it.items = true;
            const valid = gen.name("valid");
            if (max === undefined && min === 1) {
                validateItems(valid, () => gen.if(valid, () => gen.break()));
            }
            else if (min === 0) {
                gen.let(valid, true);
                if (max !== undefined)
                    gen.if((0, codegen_1$B._) `${data}.length > 0`, validateItemsWithCount);
            }
            else {
                gen.let(valid, false);
                validateItemsWithCount();
            }
            cxt.result(valid, () => cxt.reset());
            function validateItemsWithCount() {
                const schValid = gen.name("_valid");
                const count = gen.let("count", 0);
                validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));
            }
            function validateItems(_valid, block) {
                gen.forRange("i", 0, len, (i) => {
                    cxt.subschema({
                        keyword: "contains",
                        dataProp: i,
                        dataPropType: util_1$A.Type.Num,
                        compositeRule: true,
                    }, _valid);
                    block();
                });
            }
            function checkLimits(count) {
                gen.code((0, codegen_1$B._) `${count}++`);
                if (max === undefined) {
                    gen.if((0, codegen_1$B._) `${count} >= ${min}`, () => gen.assign(valid, true).break());
                }
                else {
                    gen.if((0, codegen_1$B._) `${count} > ${max}`, () => gen.assign(valid, false).break());
                    if (min === 1)
                        gen.assign(valid, true);
                    else
                        gen.if((0, codegen_1$B._) `${count} >= ${min}`, () => gen.assign(valid, true));
                }
            }
        },
    };
    contains$2.default = def$F;

    var dependencies$1 = {};

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;
    const codegen_1 = codegen$1;
    const util_1 = util$1;
    const code_1 = code$2;
    exports.error = {
        message: ({ params: { property, depsCount, deps } }) => {
            const property_ies = depsCount === 1 ? "property" : "properties";
            return (0, codegen_1.str) `must have ${property_ies} ${deps} when property ${property} is present`;
        },
        params: ({ params: { property, depsCount, deps, missingProperty } }) => (0, codegen_1._) `{property: ${property},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}`, // TODO change to reference
    };
    const def = {
        keyword: "dependencies",
        type: "object",
        schemaType: "object",
        error: exports.error,
        code(cxt) {
            const [propDeps, schDeps] = splitDependencies(cxt);
            validatePropertyDeps(cxt, propDeps);
            validateSchemaDeps(cxt, schDeps);
        },
    };
    function splitDependencies({ schema }) {
        const propertyDeps = {};
        const schemaDeps = {};
        for (const key in schema) {
            if (key === "__proto__")
                continue;
            const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;
            deps[key] = schema[key];
        }
        return [propertyDeps, schemaDeps];
    }
    function validatePropertyDeps(cxt, propertyDeps = cxt.schema) {
        const { gen, data, it } = cxt;
        if (Object.keys(propertyDeps).length === 0)
            return;
        const missing = gen.let("missing");
        for (const prop in propertyDeps) {
            const deps = propertyDeps[prop];
            if (deps.length === 0)
                continue;
            const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);
            cxt.setParams({
                property: prop,
                depsCount: deps.length,
                deps: deps.join(", "),
            });
            if (it.allErrors) {
                gen.if(hasProperty, () => {
                    for (const depProp of deps) {
                        (0, code_1.checkReportMissingProp)(cxt, depProp);
                    }
                });
            }
            else {
                gen.if((0, codegen_1._) `${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);
                (0, code_1.reportMissingProp)(cxt, missing);
                gen.else();
            }
        }
    }
    exports.validatePropertyDeps = validatePropertyDeps;
    function validateSchemaDeps(cxt, schemaDeps = cxt.schema) {
        const { gen, data, keyword, it } = cxt;
        const valid = gen.name("valid");
        for (const prop in schemaDeps) {
            if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop]))
                continue;
            gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => {
                const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid);
                cxt.mergeValidEvaluated(schCxt, valid);
            }, () => gen.var(valid, true) // TODO var
            );
            cxt.ok(valid);
        }
    }
    exports.validateSchemaDeps = validateSchemaDeps;
    exports.default = def;

    }(dependencies$1));

    var propertyNames$1 = {};

    Object.defineProperty(propertyNames$1, "__esModule", { value: true });
    const codegen_1$A = codegen$1;
    const util_1$z = util$1;
    const error$o = {
        message: "property name must be valid",
        params: ({ params }) => (0, codegen_1$A._) `{propertyName: ${params.propertyName}}`,
    };
    const def$E = {
        keyword: "propertyNames",
        type: "object",
        schemaType: ["object", "boolean"],
        error: error$o,
        code(cxt) {
            const { gen, schema, data, it } = cxt;
            if ((0, util_1$z.alwaysValidSchema)(it, schema))
                return;
            const valid = gen.name("valid");
            gen.forIn("key", data, (key) => {
                cxt.setParams({ propertyName: key });
                cxt.subschema({
                    keyword: "propertyNames",
                    data: key,
                    dataTypes: ["string"],
                    propertyName: key,
                    compositeRule: true,
                }, valid);
                gen.if((0, codegen_1$A.not)(valid), () => {
                    cxt.error(true);
                    if (!it.allErrors)
                        gen.break();
                });
            });
            cxt.ok(valid);
        },
    };
    propertyNames$1.default = def$E;

    var additionalProperties$2 = {};

    Object.defineProperty(additionalProperties$2, "__esModule", { value: true });
    const code_1$d = code$2;
    const codegen_1$z = codegen$1;
    const names_1$7 = names$3;
    const util_1$y = util$1;
    const error$n = {
        message: "must NOT have additional properties",
        params: ({ params }) => (0, codegen_1$z._) `{additionalProperty: ${params.additionalProperty}}`,
    };
    const def$D = {
        keyword: "additionalProperties",
        type: ["object"],
        schemaType: ["boolean", "object"],
        allowUndefined: true,
        trackErrors: true,
        error: error$n,
        code(cxt) {
            const { gen, schema, parentSchema, data, errsCount, it } = cxt;
            /* istanbul ignore if */
            if (!errsCount)
                throw new Error("ajv implementation error");
            const { allErrors, opts } = it;
            it.props = true;
            if (opts.removeAdditional !== "all" && (0, util_1$y.alwaysValidSchema)(it, schema))
                return;
            const props = (0, code_1$d.allSchemaProperties)(parentSchema.properties);
            const patProps = (0, code_1$d.allSchemaProperties)(parentSchema.patternProperties);
            checkAdditionalProperties();
            cxt.ok((0, codegen_1$z._) `${errsCount} === ${names_1$7.default.errors}`);
            function checkAdditionalProperties() {
                gen.forIn("key", data, (key) => {
                    if (!props.length && !patProps.length)
                        additionalPropertyCode(key);
                    else
                        gen.if(isAdditional(key), () => additionalPropertyCode(key));
                });
            }
            function isAdditional(key) {
                let definedProp;
                if (props.length > 8) {
                    // TODO maybe an option instead of hard-coded 8?
                    const propsSchema = (0, util_1$y.schemaRefOrVal)(it, parentSchema.properties, "properties");
                    definedProp = (0, code_1$d.isOwnProperty)(gen, propsSchema, key);
                }
                else if (props.length) {
                    definedProp = (0, codegen_1$z.or)(...props.map((p) => (0, codegen_1$z._) `${key} === ${p}`));
                }
                else {
                    definedProp = codegen_1$z.nil;
                }
                if (patProps.length) {
                    definedProp = (0, codegen_1$z.or)(definedProp, ...patProps.map((p) => (0, codegen_1$z._) `${(0, code_1$d.usePattern)(cxt, p)}.test(${key})`));
                }
                return (0, codegen_1$z.not)(definedProp);
            }
            function deleteAdditional(key) {
                gen.code((0, codegen_1$z._) `delete ${data}[${key}]`);
            }
            function additionalPropertyCode(key) {
                if (opts.removeAdditional === "all" || (opts.removeAdditional && schema === false)) {
                    deleteAdditional(key);
                    return;
                }
                if (schema === false) {
                    cxt.setParams({ additionalProperty: key });
                    cxt.error();
                    if (!allErrors)
                        gen.break();
                    return;
                }
                if (typeof schema == "object" && !(0, util_1$y.alwaysValidSchema)(it, schema)) {
                    const valid = gen.name("valid");
                    if (opts.removeAdditional === "failing") {
                        applyAdditionalSchema(key, valid, false);
                        gen.if((0, codegen_1$z.not)(valid), () => {
                            cxt.reset();
                            deleteAdditional(key);
                        });
                    }
                    else {
                        applyAdditionalSchema(key, valid);
                        if (!allErrors)
                            gen.if((0, codegen_1$z.not)(valid), () => gen.break());
                    }
                }
            }
            function applyAdditionalSchema(key, valid, errors) {
                const subschema = {
                    keyword: "additionalProperties",
                    dataProp: key,
                    dataPropType: util_1$y.Type.Str,
                };
                if (errors === false) {
                    Object.assign(subschema, {
                        compositeRule: true,
                        createErrors: false,
                        allErrors: false,
                    });
                }
                cxt.subschema(subschema, valid);
            }
        },
    };
    additionalProperties$2.default = def$D;

    var properties$5 = {};

    Object.defineProperty(properties$5, "__esModule", { value: true });
    const validate_1$2 = validate$2;
    const code_1$c = code$2;
    const util_1$x = util$1;
    const additionalProperties_1$3 = additionalProperties$2;
    const def$C = {
        keyword: "properties",
        type: "object",
        schemaType: "object",
        code(cxt) {
            const { gen, schema, parentSchema, data, it } = cxt;
            if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === undefined) {
                additionalProperties_1$3.default.code(new validate_1$2.KeywordCxt(it, additionalProperties_1$3.default, "additionalProperties"));
            }
            const allProps = (0, code_1$c.allSchemaProperties)(schema);
            for (const prop of allProps) {
                it.definedProperties.add(prop);
            }
            if (it.opts.unevaluated && allProps.length && it.props !== true) {
                it.props = util_1$x.mergeEvaluated.props(gen, (0, util_1$x.toHash)(allProps), it.props);
            }
            const properties = allProps.filter((p) => !(0, util_1$x.alwaysValidSchema)(it, schema[p]));
            if (properties.length === 0)
                return;
            const valid = gen.name("valid");
            for (const prop of properties) {
                if (hasDefault(prop)) {
                    applyPropertySchema(prop);
                }
                else {
                    gen.if((0, code_1$c.propertyInData)(gen, data, prop, it.opts.ownProperties));
                    applyPropertySchema(prop);
                    if (!it.allErrors)
                        gen.else().var(valid, true);
                    gen.endIf();
                }
                cxt.it.definedProperties.add(prop);
                cxt.ok(valid);
            }
            function hasDefault(prop) {
                return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== undefined;
            }
            function applyPropertySchema(prop) {
                cxt.subschema({
                    keyword: "properties",
                    schemaProp: prop,
                    dataProp: prop,
                }, valid);
            }
        },
    };
    properties$5.default = def$C;

    var patternProperties$1 = {};

    Object.defineProperty(patternProperties$1, "__esModule", { value: true });
    const code_1$b = code$2;
    const codegen_1$y = codegen$1;
    const util_1$w = util$1;
    const util_2$2 = util$1;
    const def$B = {
        keyword: "patternProperties",
        type: "object",
        schemaType: "object",
        code(cxt) {
            const { gen, schema, data, parentSchema, it } = cxt;
            const { opts } = it;
            const patterns = (0, code_1$b.allSchemaProperties)(schema);
            const alwaysValidPatterns = patterns.filter((p) => (0, util_1$w.alwaysValidSchema)(it, schema[p]));
            if (patterns.length === 0 ||
                (alwaysValidPatterns.length === patterns.length &&
                    (!it.opts.unevaluated || it.props === true))) {
                return;
            }
            const checkProperties = opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties;
            const valid = gen.name("valid");
            if (it.props !== true && !(it.props instanceof codegen_1$y.Name)) {
                it.props = (0, util_2$2.evaluatedPropsToName)(gen, it.props);
            }
            const { props } = it;
            validatePatternProperties();
            function validatePatternProperties() {
                for (const pat of patterns) {
                    if (checkProperties)
                        checkMatchingProperties(pat);
                    if (it.allErrors) {
                        validateProperties(pat);
                    }
                    else {
                        gen.var(valid, true); // TODO var
                        validateProperties(pat);
                        gen.if(valid);
                    }
                }
            }
            function checkMatchingProperties(pat) {
                for (const prop in checkProperties) {
                    if (new RegExp(pat).test(prop)) {
                        (0, util_1$w.checkStrictMode)(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);
                    }
                }
            }
            function validateProperties(pat) {
                gen.forIn("key", data, (key) => {
                    gen.if((0, codegen_1$y._) `${(0, code_1$b.usePattern)(cxt, pat)}.test(${key})`, () => {
                        const alwaysValid = alwaysValidPatterns.includes(pat);
                        if (!alwaysValid) {
                            cxt.subschema({
                                keyword: "patternProperties",
                                schemaProp: pat,
                                dataProp: key,
                                dataPropType: util_2$2.Type.Str,
                            }, valid);
                        }
                        if (it.opts.unevaluated && props !== true) {
                            gen.assign((0, codegen_1$y._) `${props}[${key}]`, true);
                        }
                        else if (!alwaysValid && !it.allErrors) {
                            // can short-circuit if `unevaluatedProperties` is not supported (opts.next === false)
                            // or if all properties were evaluated (props === true)
                            gen.if((0, codegen_1$y.not)(valid), () => gen.break());
                        }
                    });
                });
            }
        },
    };
    patternProperties$1.default = def$B;

    var not$1 = {};

    Object.defineProperty(not$1, "__esModule", { value: true });
    const util_1$v = util$1;
    const def$A = {
        keyword: "not",
        schemaType: ["object", "boolean"],
        trackErrors: true,
        code(cxt) {
            const { gen, schema, it } = cxt;
            if ((0, util_1$v.alwaysValidSchema)(it, schema)) {
                cxt.fail();
                return;
            }
            const valid = gen.name("valid");
            cxt.subschema({
                keyword: "not",
                compositeRule: true,
                createErrors: false,
                allErrors: false,
            }, valid);
            cxt.failResult(valid, () => cxt.reset(), () => cxt.error());
        },
        error: { message: "must NOT be valid" },
    };
    not$1.default = def$A;

    var anyOf$1 = {};

    Object.defineProperty(anyOf$1, "__esModule", { value: true });
    const code_1$a = code$2;
    const def$z = {
        keyword: "anyOf",
        schemaType: "array",
        trackErrors: true,
        code: code_1$a.validateUnion,
        error: { message: "must match a schema in anyOf" },
    };
    anyOf$1.default = def$z;

    var oneOf$1 = {};

    Object.defineProperty(oneOf$1, "__esModule", { value: true });
    const codegen_1$x = codegen$1;
    const util_1$u = util$1;
    const error$m = {
        message: "must match exactly one schema in oneOf",
        params: ({ params }) => (0, codegen_1$x._) `{passingSchemas: ${params.passing}}`,
    };
    const def$y = {
        keyword: "oneOf",
        schemaType: "array",
        trackErrors: true,
        error: error$m,
        code(cxt) {
            const { gen, schema, parentSchema, it } = cxt;
            /* istanbul ignore if */
            if (!Array.isArray(schema))
                throw new Error("ajv implementation error");
            if (it.opts.discriminator && parentSchema.discriminator)
                return;
            const schArr = schema;
            const valid = gen.let("valid", false);
            const passing = gen.let("passing", null);
            const schValid = gen.name("_valid");
            cxt.setParams({ passing });
            // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas
            gen.block(validateOneOf);
            cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
            function validateOneOf() {
                schArr.forEach((sch, i) => {
                    let schCxt;
                    if ((0, util_1$u.alwaysValidSchema)(it, sch)) {
                        gen.var(schValid, true);
                    }
                    else {
                        schCxt = cxt.subschema({
                            keyword: "oneOf",
                            schemaProp: i,
                            compositeRule: true,
                        }, schValid);
                    }
                    if (i > 0) {
                        gen
                            .if((0, codegen_1$x._) `${schValid} && ${valid}`)
                            .assign(valid, false)
                            .assign(passing, (0, codegen_1$x._) `[${passing}, ${i}]`)
                            .else();
                    }
                    gen.if(schValid, () => {
                        gen.assign(valid, true);
                        gen.assign(passing, i);
                        if (schCxt)
                            cxt.mergeEvaluated(schCxt, codegen_1$x.Name);
                    });
                });
            }
        },
    };
    oneOf$1.default = def$y;

    var allOf$1 = {};

    Object.defineProperty(allOf$1, "__esModule", { value: true });
    const util_1$t = util$1;
    const def$x = {
        keyword: "allOf",
        schemaType: "array",
        code(cxt) {
            const { gen, schema, it } = cxt;
            /* istanbul ignore if */
            if (!Array.isArray(schema))
                throw new Error("ajv implementation error");
            const valid = gen.name("valid");
            schema.forEach((sch, i) => {
                if ((0, util_1$t.alwaysValidSchema)(it, sch))
                    return;
                const schCxt = cxt.subschema({ keyword: "allOf", schemaProp: i }, valid);
                cxt.ok(valid);
                cxt.mergeEvaluated(schCxt);
            });
        },
    };
    allOf$1.default = def$x;

    var _if$1 = {};

    Object.defineProperty(_if$1, "__esModule", { value: true });
    const codegen_1$w = codegen$1;
    const util_1$s = util$1;
    const error$l = {
        message: ({ params }) => (0, codegen_1$w.str) `must match "${params.ifClause}" schema`,
        params: ({ params }) => (0, codegen_1$w._) `{failingKeyword: ${params.ifClause}}`,
    };
    const def$w = {
        keyword: "if",
        schemaType: ["object", "boolean"],
        trackErrors: true,
        error: error$l,
        code(cxt) {
            const { gen, parentSchema, it } = cxt;
            if (parentSchema.then === undefined && parentSchema.else === undefined) {
                (0, util_1$s.checkStrictMode)(it, '"if" without "then" and "else" is ignored');
            }
            const hasThen = hasSchema$1(it, "then");
            const hasElse = hasSchema$1(it, "else");
            if (!hasThen && !hasElse)
                return;
            const valid = gen.let("valid", true);
            const schValid = gen.name("_valid");
            validateIf();
            cxt.reset();
            if (hasThen && hasElse) {
                const ifClause = gen.let("ifClause");
                cxt.setParams({ ifClause });
                gen.if(schValid, validateClause("then", ifClause), validateClause("else", ifClause));
            }
            else if (hasThen) {
                gen.if(schValid, validateClause("then"));
            }
            else {
                gen.if((0, codegen_1$w.not)(schValid), validateClause("else"));
            }
            cxt.pass(valid, () => cxt.error(true));
            function validateIf() {
                const schCxt = cxt.subschema({
                    keyword: "if",
                    compositeRule: true,
                    createErrors: false,
                    allErrors: false,
                }, schValid);
                cxt.mergeEvaluated(schCxt);
            }
            function validateClause(keyword, ifClause) {
                return () => {
                    const schCxt = cxt.subschema({ keyword }, schValid);
                    gen.assign(valid, schValid);
                    cxt.mergeValidEvaluated(schCxt, valid);
                    if (ifClause)
                        gen.assign(ifClause, (0, codegen_1$w._) `${keyword}`);
                    else
                        cxt.setParams({ ifClause: keyword });
                };
            }
        },
    };
    function hasSchema$1(it, keyword) {
        const schema = it.schema[keyword];
        return schema !== undefined && !(0, util_1$s.alwaysValidSchema)(it, schema);
    }
    _if$1.default = def$w;

    var thenElse$1 = {};

    Object.defineProperty(thenElse$1, "__esModule", { value: true });
    const util_1$r = util$1;
    const def$v = {
        keyword: ["then", "else"],
        schemaType: ["object", "boolean"],
        code({ keyword, parentSchema, it }) {
            if (parentSchema.if === undefined)
                (0, util_1$r.checkStrictMode)(it, `"${keyword}" without "if" is ignored`);
        },
    };
    thenElse$1.default = def$v;

    Object.defineProperty(applicator$1, "__esModule", { value: true });
    const additionalItems_1$2 = additionalItems$1;
    const prefixItems_1$1 = prefixItems$1;
    const items_1$2 = items$1;
    const items2020_1$1 = items2020$1;
    const contains_1$1 = contains$2;
    const dependencies_1$1 = dependencies$1;
    const propertyNames_1$1 = propertyNames$1;
    const additionalProperties_1$2 = additionalProperties$2;
    const properties_1$1 = properties$5;
    const patternProperties_1$1 = patternProperties$1;
    const not_1$1 = not$1;
    const anyOf_1$1 = anyOf$1;
    const oneOf_1$1 = oneOf$1;
    const allOf_1$1 = allOf$1;
    const if_1$1 = _if$1;
    const thenElse_1$1 = thenElse$1;
    function getApplicator$1(draft2020 = false) {
        const applicator = [
            // any
            not_1$1.default,
            anyOf_1$1.default,
            oneOf_1$1.default,
            allOf_1$1.default,
            if_1$1.default,
            thenElse_1$1.default,
            // object
            propertyNames_1$1.default,
            additionalProperties_1$2.default,
            dependencies_1$1.default,
            properties_1$1.default,
            patternProperties_1$1.default,
        ];
        // array
        if (draft2020)
            applicator.push(prefixItems_1$1.default, items2020_1$1.default);
        else
            applicator.push(additionalItems_1$2.default, items_1$2.default);
        applicator.push(contains_1$1.default);
        return applicator;
    }
    applicator$1.default = getApplicator$1;

    var format$6 = {};

    var format$5 = {};

    Object.defineProperty(format$5, "__esModule", { value: true });
    const codegen_1$v = codegen$1;
    const error$k = {
        message: ({ schemaCode }) => (0, codegen_1$v.str) `must match format "${schemaCode}"`,
        params: ({ schemaCode }) => (0, codegen_1$v._) `{format: ${schemaCode}}`,
    };
    const def$u = {
        keyword: "format",
        type: ["number", "string"],
        schemaType: "string",
        $data: true,
        error: error$k,
        code(cxt, ruleType) {
            const { gen, data, $data, schema, schemaCode, it } = cxt;
            const { opts, errSchemaPath, schemaEnv, self } = it;
            if (!opts.validateFormats)
                return;
            if ($data)
                validate$DataFormat();
            else
                validateFormat();
            function validate$DataFormat() {
                const fmts = gen.scopeValue("formats", {
                    ref: self.formats,
                    code: opts.code.formats,
                });
                const fDef = gen.const("fDef", (0, codegen_1$v._) `${fmts}[${schemaCode}]`);
                const fType = gen.let("fType");
                const format = gen.let("format");
                // TODO simplify
                gen.if((0, codegen_1$v._) `typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1$v._) `${fDef}.type || "string"`).assign(format, (0, codegen_1$v._) `${fDef}.validate`), () => gen.assign(fType, (0, codegen_1$v._) `"string"`).assign(format, fDef));
                cxt.fail$data((0, codegen_1$v.or)(unknownFmt(), invalidFmt()));
                function unknownFmt() {
                    if (opts.strictSchema === false)
                        return codegen_1$v.nil;
                    return (0, codegen_1$v._) `${schemaCode} && !${format}`;
                }
                function invalidFmt() {
                    const callFormat = schemaEnv.$async
                        ? (0, codegen_1$v._) `(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))`
                        : (0, codegen_1$v._) `${format}(${data})`;
                    const validData = (0, codegen_1$v._) `(typeof ${format} == "function" ? ${callFormat} : ${format}.test(${data}))`;
                    return (0, codegen_1$v._) `${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;
                }
            }
            function validateFormat() {
                const formatDef = self.formats[schema];
                if (!formatDef) {
                    unknownFormat();
                    return;
                }
                if (formatDef === true)
                    return;
                const [fmtType, format, fmtRef] = getFormat(formatDef);
                if (fmtType === ruleType)
                    cxt.pass(validCondition());
                function unknownFormat() {
                    if (opts.strictSchema === false) {
                        self.logger.warn(unknownMsg());
                        return;
                    }
                    throw new Error(unknownMsg());
                    function unknownMsg() {
                        return `unknown format "${schema}" ignored in schema at path "${errSchemaPath}"`;
                    }
                }
                function getFormat(fmtDef) {
                    const code = fmtDef instanceof RegExp
                        ? (0, codegen_1$v.regexpCode)(fmtDef)
                        : opts.code.formats
                            ? (0, codegen_1$v._) `${opts.code.formats}${(0, codegen_1$v.getProperty)(schema)}`
                            : undefined;
                    const fmt = gen.scopeValue("formats", { key: schema, ref: fmtDef, code });
                    if (typeof fmtDef == "object" && !(fmtDef instanceof RegExp)) {
                        return [fmtDef.type || "string", fmtDef.validate, (0, codegen_1$v._) `${fmt}.validate`];
                    }
                    return ["string", fmtDef, fmt];
                }
                function validCondition() {
                    if (typeof formatDef == "object" && !(formatDef instanceof RegExp) && formatDef.async) {
                        if (!schemaEnv.$async)
                            throw new Error("async format in sync schema");
                        return (0, codegen_1$v._) `await ${fmtRef}(${data})`;
                    }
                    return typeof format == "function" ? (0, codegen_1$v._) `${fmtRef}(${data})` : (0, codegen_1$v._) `${fmtRef}.test(${data})`;
                }
            }
        },
    };
    format$5.default = def$u;

    Object.defineProperty(format$6, "__esModule", { value: true });
    const format_1$3 = format$5;
    const format$4 = [format_1$3.default];
    format$6.default = format$4;

    var metadata$1 = {};

    Object.defineProperty(metadata$1, "__esModule", { value: true });
    metadata$1.contentVocabulary = metadata$1.metadataVocabulary = void 0;
    metadata$1.metadataVocabulary = [
        "title",
        "description",
        "default",
        "deprecated",
        "readOnly",
        "writeOnly",
        "examples",
    ];
    metadata$1.contentVocabulary = [
        "contentMediaType",
        "contentEncoding",
        "contentSchema",
    ];

    Object.defineProperty(draft7$1, "__esModule", { value: true });
    const core_1$1 = core$4;
    const validation_1$1 = validation$3;
    const applicator_1$1 = applicator$1;
    const format_1$2 = format$6;
    const metadata_1$1 = metadata$1;
    const draft7Vocabularies$1 = [
        core_1$1.default,
        validation_1$1.default,
        (0, applicator_1$1.default)(),
        format_1$2.default,
        metadata_1$1.metadataVocabulary,
        metadata_1$1.contentVocabulary,
    ];
    draft7$1.default = draft7Vocabularies$1;

    var discriminator$1 = {};

    var types$1 = {};

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DiscrError = void 0;
    (function (DiscrError) {
        DiscrError["Tag"] = "tag";
        DiscrError["Mapping"] = "mapping";
    })(exports.DiscrError || (exports.DiscrError = {}));

    }(types$1));

    Object.defineProperty(discriminator$1, "__esModule", { value: true });
    const codegen_1$u = codegen$1;
    const types_1$1 = types$1;
    const compile_1$2 = compile$2;
    const util_1$q = util$1;
    const error$j = {
        message: ({ params: { discrError, tagName } }) => discrError === types_1$1.DiscrError.Tag
            ? `tag "${tagName}" must be string`
            : `value of tag "${tagName}" must be in oneOf`,
        params: ({ params: { discrError, tag, tagName } }) => (0, codegen_1$u._) `{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`,
    };
    const def$t = {
        keyword: "discriminator",
        type: "object",
        schemaType: "object",
        error: error$j,
        code(cxt) {
            const { gen, data, schema, parentSchema, it } = cxt;
            const { oneOf } = parentSchema;
            if (!it.opts.discriminator) {
                throw new Error("discriminator: requires discriminator option");
            }
            const tagName = schema.propertyName;
            if (typeof tagName != "string")
                throw new Error("discriminator: requires propertyName");
            if (schema.mapping)
                throw new Error("discriminator: mapping is not supported");
            if (!oneOf)
                throw new Error("discriminator: requires oneOf keyword");
            const valid = gen.let("valid", false);
            const tag = gen.const("tag", (0, codegen_1$u._) `${data}${(0, codegen_1$u.getProperty)(tagName)}`);
            gen.if((0, codegen_1$u._) `typeof ${tag} == "string"`, () => validateMapping(), () => cxt.error(false, { discrError: types_1$1.DiscrError.Tag, tag, tagName }));
            cxt.ok(valid);
            function validateMapping() {
                const mapping = getMapping();
                gen.if(false);
                for (const tagValue in mapping) {
                    gen.elseIf((0, codegen_1$u._) `${tag} === ${tagValue}`);
                    gen.assign(valid, applyTagSchema(mapping[tagValue]));
                }
                gen.else();
                cxt.error(false, { discrError: types_1$1.DiscrError.Mapping, tag, tagName });
                gen.endIf();
            }
            function applyTagSchema(schemaProp) {
                const _valid = gen.name("valid");
                const schCxt = cxt.subschema({ keyword: "oneOf", schemaProp }, _valid);
                cxt.mergeEvaluated(schCxt, codegen_1$u.Name);
                return _valid;
            }
            function getMapping() {
                var _a;
                const oneOfMapping = {};
                const topRequired = hasRequired(parentSchema);
                let tagRequired = true;
                for (let i = 0; i < oneOf.length; i++) {
                    let sch = oneOf[i];
                    if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1$q.schemaHasRulesButRef)(sch, it.self.RULES)) {
                        sch = compile_1$2.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, sch === null || sch === void 0 ? void 0 : sch.$ref);
                        if (sch instanceof compile_1$2.SchemaEnv)
                            sch = sch.schema;
                    }
                    const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];
                    if (typeof propSch != "object") {
                        throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${tagName}"`);
                    }
                    tagRequired = tagRequired && (topRequired || hasRequired(sch));
                    addMappings(propSch, i);
                }
                if (!tagRequired)
                    throw new Error(`discriminator: "${tagName}" must be required`);
                return oneOfMapping;
                function hasRequired({ required }) {
                    return Array.isArray(required) && required.includes(tagName);
                }
                function addMappings(sch, i) {
                    if (sch.const) {
                        addMapping(sch.const, i);
                    }
                    else if (sch.enum) {
                        for (const tagValue of sch.enum) {
                            addMapping(tagValue, i);
                        }
                    }
                    else {
                        throw new Error(`discriminator: "properties/${tagName}" must have "const" or "enum"`);
                    }
                }
                function addMapping(tagValue, i) {
                    if (typeof tagValue != "string" || tagValue in oneOfMapping) {
                        throw new Error(`discriminator: "${tagName}" values must be unique strings`);
                    }
                    oneOfMapping[tagValue] = i;
                }
            }
        },
    };
    discriminator$1.default = def$t;

    var $schema$1 = "http://json-schema.org/draft-07/schema#";
    var $id$2 = "http://json-schema.org/draft-07/schema#";
    var title$1 = "Core schema meta-schema";
    var definitions$1 = {
    	schemaArray: {
    		type: "array",
    		minItems: 1,
    		items: {
    			$ref: "#"
    		}
    	},
    	nonNegativeInteger: {
    		type: "integer",
    		minimum: 0
    	},
    	nonNegativeIntegerDefault0: {
    		allOf: [
    			{
    				$ref: "#/definitions/nonNegativeInteger"
    			},
    			{
    				"default": 0
    			}
    		]
    	},
    	simpleTypes: {
    		"enum": [
    			"array",
    			"boolean",
    			"integer",
    			"null",
    			"number",
    			"object",
    			"string"
    		]
    	},
    	stringArray: {
    		type: "array",
    		items: {
    			type: "string"
    		},
    		uniqueItems: true,
    		"default": [
    		]
    	}
    };
    var type$2 = [
    	"object",
    	"boolean"
    ];
    var properties$4 = {
    	$id: {
    		type: "string",
    		format: "uri-reference"
    	},
    	$schema: {
    		type: "string",
    		format: "uri"
    	},
    	$ref: {
    		type: "string",
    		format: "uri-reference"
    	},
    	$comment: {
    		type: "string"
    	},
    	title: {
    		type: "string"
    	},
    	description: {
    		type: "string"
    	},
    	"default": true,
    	readOnly: {
    		type: "boolean",
    		"default": false
    	},
    	examples: {
    		type: "array",
    		items: true
    	},
    	multipleOf: {
    		type: "number",
    		exclusiveMinimum: 0
    	},
    	maximum: {
    		type: "number"
    	},
    	exclusiveMaximum: {
    		type: "number"
    	},
    	minimum: {
    		type: "number"
    	},
    	exclusiveMinimum: {
    		type: "number"
    	},
    	maxLength: {
    		$ref: "#/definitions/nonNegativeInteger"
    	},
    	minLength: {
    		$ref: "#/definitions/nonNegativeIntegerDefault0"
    	},
    	pattern: {
    		type: "string",
    		format: "regex"
    	},
    	additionalItems: {
    		$ref: "#"
    	},
    	items: {
    		anyOf: [
    			{
    				$ref: "#"
    			},
    			{
    				$ref: "#/definitions/schemaArray"
    			}
    		],
    		"default": true
    	},
    	maxItems: {
    		$ref: "#/definitions/nonNegativeInteger"
    	},
    	minItems: {
    		$ref: "#/definitions/nonNegativeIntegerDefault0"
    	},
    	uniqueItems: {
    		type: "boolean",
    		"default": false
    	},
    	contains: {
    		$ref: "#"
    	},
    	maxProperties: {
    		$ref: "#/definitions/nonNegativeInteger"
    	},
    	minProperties: {
    		$ref: "#/definitions/nonNegativeIntegerDefault0"
    	},
    	required: {
    		$ref: "#/definitions/stringArray"
    	},
    	additionalProperties: {
    		$ref: "#"
    	},
    	definitions: {
    		type: "object",
    		additionalProperties: {
    			$ref: "#"
    		},
    		"default": {
    		}
    	},
    	properties: {
    		type: "object",
    		additionalProperties: {
    			$ref: "#"
    		},
    		"default": {
    		}
    	},
    	patternProperties: {
    		type: "object",
    		additionalProperties: {
    			$ref: "#"
    		},
    		propertyNames: {
    			format: "regex"
    		},
    		"default": {
    		}
    	},
    	dependencies: {
    		type: "object",
    		additionalProperties: {
    			anyOf: [
    				{
    					$ref: "#"
    				},
    				{
    					$ref: "#/definitions/stringArray"
    				}
    			]
    		}
    	},
    	propertyNames: {
    		$ref: "#"
    	},
    	"const": true,
    	"enum": {
    		type: "array",
    		items: true,
    		minItems: 1,
    		uniqueItems: true
    	},
    	type: {
    		anyOf: [
    			{
    				$ref: "#/definitions/simpleTypes"
    			},
    			{
    				type: "array",
    				items: {
    					$ref: "#/definitions/simpleTypes"
    				},
    				minItems: 1,
    				uniqueItems: true
    			}
    		]
    	},
    	format: {
    		type: "string"
    	},
    	contentMediaType: {
    		type: "string"
    	},
    	contentEncoding: {
    		type: "string"
    	},
    	"if": {
    		$ref: "#"
    	},
    	then: {
    		$ref: "#"
    	},
    	"else": {
    		$ref: "#"
    	},
    	allOf: {
    		$ref: "#/definitions/schemaArray"
    	},
    	anyOf: {
    		$ref: "#/definitions/schemaArray"
    	},
    	oneOf: {
    		$ref: "#/definitions/schemaArray"
    	},
    	not: {
    		$ref: "#"
    	}
    };
    var require$$3$1 = {
    	$schema: $schema$1,
    	$id: $id$2,
    	title: title$1,
    	definitions: definitions$1,
    	type: type$2,
    	properties: properties$4,
    	"default": true
    };

    (function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MissingRefError = exports.ValidationError = exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
    const core_1 = core$5;
    const draft7_1 = draft7$1;
    const discriminator_1 = discriminator$1;
    const draft7MetaSchema = require$$3$1;
    const META_SUPPORT_DATA = ["/properties"];
    const META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
    class Ajv extends core_1.default {
        _addVocabularies() {
            super._addVocabularies();
            draft7_1.default.forEach((v) => this.addVocabulary(v));
            if (this.opts.discriminator)
                this.addKeyword(discriminator_1.default);
        }
        _addDefaultMetaSchema() {
            super._addDefaultMetaSchema();
            if (!this.opts.meta)
                return;
            const metaSchema = this.opts.$data
                ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA)
                : draft7MetaSchema;
            this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
            this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
        }
        defaultMeta() {
            return (this.opts.defaultMeta =
                super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined));
        }
    }
    module.exports = exports = Ajv;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Ajv;
    var validate_1 = validate$2;
    Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function () { return validate_1.KeywordCxt; } });
    var codegen_1 = codegen$1;
    Object.defineProperty(exports, "_", { enumerable: true, get: function () { return codegen_1._; } });
    Object.defineProperty(exports, "str", { enumerable: true, get: function () { return codegen_1.str; } });
    Object.defineProperty(exports, "stringify", { enumerable: true, get: function () { return codegen_1.stringify; } });
    Object.defineProperty(exports, "nil", { enumerable: true, get: function () { return codegen_1.nil; } });
    Object.defineProperty(exports, "Name", { enumerable: true, get: function () { return codegen_1.Name; } });
    Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function () { return codegen_1.CodeGen; } });
    var validation_error_1 = validation_error$1;
    Object.defineProperty(exports, "ValidationError", { enumerable: true, get: function () { return validation_error_1.default; } });
    var ref_error_1 = ref_error$1;
    Object.defineProperty(exports, "MissingRefError", { enumerable: true, get: function () { return ref_error_1.default; } });

    }(ajv$1, ajv$1.exports));

    var Ajv = /*@__PURE__*/getDefaultExportFromCjs(ajv$1.exports);

    var dist = {exports: {}};

    var formats = {};

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatNames = exports.fastFormats = exports.fullFormats = void 0;
    function fmtDef(validate, compare) {
        return { validate, compare };
    }
    exports.fullFormats = {
        // date: http://tools.ietf.org/html/rfc3339#section-5.6
        date: fmtDef(date, compareDate),
        // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
        time: fmtDef(time, compareTime),
        "date-time": fmtDef(date_time, compareDateTime),
        // duration: https://tools.ietf.org/html/rfc3339#appendix-A
        duration: /^P(?!$)((\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?|(\d+W)?)$/,
        uri,
        "uri-reference": /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,
        // uri-template: https://tools.ietf.org/html/rfc6570
        "uri-template": /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i,
        // For the source: https://gist.github.com/dperini/729294
        // For test cases: https://mathiasbynens.be/demo/url-regex
        url: /^(?:https?|ftp):\/\/(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)(?:\.(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu,
        email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
        hostname: /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i,
        // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
        ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
        ipv6: /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))$/i,
        regex,
        // uuid: http://tools.ietf.org/html/rfc4122
        uuid: /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,
        // JSON-pointer: https://tools.ietf.org/html/rfc6901
        // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
        "json-pointer": /^(?:\/(?:[^~/]|~0|~1)*)*$/,
        "json-pointer-uri-fragment": /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,
        // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
        "relative-json-pointer": /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/,
        // the following formats are used by the openapi specification: https://spec.openapis.org/oas/v3.0.0#data-types
        // byte: https://github.com/miguelmota/is-base64
        byte,
        // signed 32 bit integer
        int32: { type: "number", validate: validateInt32 },
        // signed 64 bit integer
        int64: { type: "number", validate: validateInt64 },
        // C-type float
        float: { type: "number", validate: validateNumber },
        // C-type double
        double: { type: "number", validate: validateNumber },
        // hint to the UI to hide input strings
        password: true,
        // unchecked string payload
        binary: true,
    };
    exports.fastFormats = {
        ...exports.fullFormats,
        date: fmtDef(/^\d\d\d\d-[0-1]\d-[0-3]\d$/, compareDate),
        time: fmtDef(/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i, compareTime),
        "date-time": fmtDef(/^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i, compareDateTime),
        // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
        uri: /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,
        "uri-reference": /^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
        // email (sources from jsen validator):
        // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
        // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'wilful violation')
        email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
    };
    exports.formatNames = Object.keys(exports.fullFormats);
    function isLeapYear(year) {
        // https://tools.ietf.org/html/rfc3339#appendix-C
        return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    }
    const DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
    const DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    function date(str) {
        // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
        const matches = DATE.exec(str);
        if (!matches)
            return false;
        const year = +matches[1];
        const month = +matches[2];
        const day = +matches[3];
        return (month >= 1 &&
            month <= 12 &&
            day >= 1 &&
            day <= (month === 2 && isLeapYear(year) ? 29 : DAYS[month]));
    }
    function compareDate(d1, d2) {
        if (!(d1 && d2))
            return undefined;
        if (d1 > d2)
            return 1;
        if (d1 < d2)
            return -1;
        return 0;
    }
    const TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;
    function time(str, withTimeZone) {
        const matches = TIME.exec(str);
        if (!matches)
            return false;
        const hour = +matches[1];
        const minute = +matches[2];
        const second = +matches[3];
        const timeZone = matches[5];
        return (((hour <= 23 && minute <= 59 && second <= 59) ||
            (hour === 23 && minute === 59 && second === 60)) &&
            (!withTimeZone || timeZone !== ""));
    }
    function compareTime(t1, t2) {
        if (!(t1 && t2))
            return undefined;
        const a1 = TIME.exec(t1);
        const a2 = TIME.exec(t2);
        if (!(a1 && a2))
            return undefined;
        t1 = a1[1] + a1[2] + a1[3] + (a1[4] || "");
        t2 = a2[1] + a2[2] + a2[3] + (a2[4] || "");
        if (t1 > t2)
            return 1;
        if (t1 < t2)
            return -1;
        return 0;
    }
    const DATE_TIME_SEPARATOR = /t|\s/i;
    function date_time(str) {
        // http://tools.ietf.org/html/rfc3339#section-5.6
        const dateTime = str.split(DATE_TIME_SEPARATOR);
        return dateTime.length === 2 && date(dateTime[0]) && time(dateTime[1], true);
    }
    function compareDateTime(dt1, dt2) {
        if (!(dt1 && dt2))
            return undefined;
        const [d1, t1] = dt1.split(DATE_TIME_SEPARATOR);
        const [d2, t2] = dt2.split(DATE_TIME_SEPARATOR);
        const res = compareDate(d1, d2);
        if (res === undefined)
            return undefined;
        return res || compareTime(t1, t2);
    }
    const NOT_URI_FRAGMENT = /\/|:/;
    const URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
    function uri(str) {
        // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
        return NOT_URI_FRAGMENT.test(str) && URI.test(str);
    }
    const BYTE = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/gm;
    function byte(str) {
        BYTE.lastIndex = 0;
        return BYTE.test(str);
    }
    const MIN_INT32 = -(2 ** 31);
    const MAX_INT32 = 2 ** 31 - 1;
    function validateInt32(value) {
        return Number.isInteger(value) && value <= MAX_INT32 && value >= MIN_INT32;
    }
    function validateInt64(value) {
        // JSON and javascript max Int is 2**53, so any int that passes isInteger is valid for Int64
        return Number.isInteger(value);
    }
    function validateNumber() {
        return true;
    }
    const Z_ANCHOR = /[^\\]\\Z/;
    function regex(str) {
        if (Z_ANCHOR.test(str))
            return false;
        try {
            new RegExp(str);
            return true;
        }
        catch (e) {
            return false;
        }
    }

    }(formats));

    var limit = {};

    var ajv = {exports: {}};

    var core$2 = {};

    var validate$1 = {};

    var boolSchema = {};

    var errors = {};

    var codegen = {};

    var code$1 = {};

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.regexpCode = exports.getEsmExportName = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;
    class _CodeOrName {
    }
    exports._CodeOrName = _CodeOrName;
    exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
    class Name extends _CodeOrName {
        constructor(s) {
            super();
            if (!exports.IDENTIFIER.test(s))
                throw new Error("CodeGen: name must be a valid identifier");
            this.str = s;
        }
        toString() {
            return this.str;
        }
        emptyStr() {
            return false;
        }
        get names() {
            return { [this.str]: 1 };
        }
    }
    exports.Name = Name;
    class _Code extends _CodeOrName {
        constructor(code) {
            super();
            this._items = typeof code === "string" ? [code] : code;
        }
        toString() {
            return this.str;
        }
        emptyStr() {
            if (this._items.length > 1)
                return false;
            const item = this._items[0];
            return item === "" || item === '""';
        }
        get str() {
            var _a;
            return ((_a = this._str) !== null && _a !== void 0 ? _a : (this._str = this._items.reduce((s, c) => `${s}${c}`, "")));
        }
        get names() {
            var _a;
            return ((_a = this._names) !== null && _a !== void 0 ? _a : (this._names = this._items.reduce((names, c) => {
                if (c instanceof Name)
                    names[c.str] = (names[c.str] || 0) + 1;
                return names;
            }, {})));
        }
    }
    exports._Code = _Code;
    exports.nil = new _Code("");
    function _(strs, ...args) {
        const code = [strs[0]];
        let i = 0;
        while (i < args.length) {
            addCodeArg(code, args[i]);
            code.push(strs[++i]);
        }
        return new _Code(code);
    }
    exports._ = _;
    const plus = new _Code("+");
    function str(strs, ...args) {
        const expr = [safeStringify(strs[0])];
        let i = 0;
        while (i < args.length) {
            expr.push(plus);
            addCodeArg(expr, args[i]);
            expr.push(plus, safeStringify(strs[++i]));
        }
        optimize(expr);
        return new _Code(expr);
    }
    exports.str = str;
    function addCodeArg(code, arg) {
        if (arg instanceof _Code)
            code.push(...arg._items);
        else if (arg instanceof Name)
            code.push(arg);
        else
            code.push(interpolate(arg));
    }
    exports.addCodeArg = addCodeArg;
    function optimize(expr) {
        let i = 1;
        while (i < expr.length - 1) {
            if (expr[i] === plus) {
                const res = mergeExprItems(expr[i - 1], expr[i + 1]);
                if (res !== undefined) {
                    expr.splice(i - 1, 3, res);
                    continue;
                }
                expr[i++] = "+";
            }
            i++;
        }
    }
    function mergeExprItems(a, b) {
        if (b === '""')
            return a;
        if (a === '""')
            return b;
        if (typeof a == "string") {
            if (b instanceof Name || a[a.length - 1] !== '"')
                return;
            if (typeof b != "string")
                return `${a.slice(0, -1)}${b}"`;
            if (b[0] === '"')
                return a.slice(0, -1) + b.slice(1);
            return;
        }
        if (typeof b == "string" && b[0] === '"' && !(a instanceof Name))
            return `"${a}${b.slice(1)}`;
        return;
    }
    function strConcat(c1, c2) {
        return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str `${c1}${c2}`;
    }
    exports.strConcat = strConcat;
    // TODO do not allow arrays here
    function interpolate(x) {
        return typeof x == "number" || typeof x == "boolean" || x === null
            ? x
            : safeStringify(Array.isArray(x) ? x.join(",") : x);
    }
    function stringify(x) {
        return new _Code(safeStringify(x));
    }
    exports.stringify = stringify;
    function safeStringify(x) {
        return JSON.stringify(x)
            .replace(/\u2028/g, "\\u2028")
            .replace(/\u2029/g, "\\u2029");
    }
    exports.safeStringify = safeStringify;
    function getProperty(key) {
        return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _ `[${key}]`;
    }
    exports.getProperty = getProperty;
    //Does best effort to format the name properly
    function getEsmExportName(key) {
        if (typeof key == "string" && exports.IDENTIFIER.test(key)) {
            return new _Code(`${key}`);
        }
        throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`);
    }
    exports.getEsmExportName = getEsmExportName;
    function regexpCode(rx) {
        return new _Code(rx.toString());
    }
    exports.regexpCode = regexpCode;

    }(code$1));

    var scope = {};

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;
    const code_1 = code$1;
    class ValueError extends Error {
        constructor(name) {
            super(`CodeGen: "code" for ${name} not defined`);
            this.value = name.value;
        }
    }
    var UsedValueState;
    (function (UsedValueState) {
        UsedValueState[UsedValueState["Started"] = 0] = "Started";
        UsedValueState[UsedValueState["Completed"] = 1] = "Completed";
    })(UsedValueState = exports.UsedValueState || (exports.UsedValueState = {}));
    exports.varKinds = {
        const: new code_1.Name("const"),
        let: new code_1.Name("let"),
        var: new code_1.Name("var"),
    };
    class Scope {
        constructor({ prefixes, parent } = {}) {
            this._names = {};
            this._prefixes = prefixes;
            this._parent = parent;
        }
        toName(nameOrPrefix) {
            return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
        }
        name(prefix) {
            return new code_1.Name(this._newName(prefix));
        }
        _newName(prefix) {
            const ng = this._names[prefix] || this._nameGroup(prefix);
            return `${prefix}${ng.index++}`;
        }
        _nameGroup(prefix) {
            var _a, _b;
            if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || (this._prefixes && !this._prefixes.has(prefix))) {
                throw new Error(`CodeGen: prefix "${prefix}" is not allowed in this scope`);
            }
            return (this._names[prefix] = { prefix, index: 0 });
        }
    }
    exports.Scope = Scope;
    class ValueScopeName extends code_1.Name {
        constructor(prefix, nameStr) {
            super(nameStr);
            this.prefix = prefix;
        }
        setValue(value, { property, itemIndex }) {
            this.value = value;
            this.scopePath = (0, code_1._) `.${new code_1.Name(property)}[${itemIndex}]`;
        }
    }
    exports.ValueScopeName = ValueScopeName;
    const line = (0, code_1._) `\n`;
    class ValueScope extends Scope {
        constructor(opts) {
            super(opts);
            this._values = {};
            this._scope = opts.scope;
            this.opts = { ...opts, _n: opts.lines ? line : code_1.nil };
        }
        get() {
            return this._scope;
        }
        name(prefix) {
            return new ValueScopeName(prefix, this._newName(prefix));
        }
        value(nameOrPrefix, value) {
            var _a;
            if (value.ref === undefined)
                throw new Error("CodeGen: ref must be passed in value");
            const name = this.toName(nameOrPrefix);
            const { prefix } = name;
            const valueKey = (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;
            let vs = this._values[prefix];
            if (vs) {
                const _name = vs.get(valueKey);
                if (_name)
                    return _name;
            }
            else {
                vs = this._values[prefix] = new Map();
            }
            vs.set(valueKey, name);
            const s = this._scope[prefix] || (this._scope[prefix] = []);
            const itemIndex = s.length;
            s[itemIndex] = value.ref;
            name.setValue(value, { property: prefix, itemIndex });
            return name;
        }
        getValue(prefix, keyOrRef) {
            const vs = this._values[prefix];
            if (!vs)
                return;
            return vs.get(keyOrRef);
        }
        scopeRefs(scopeName, values = this._values) {
            return this._reduceValues(values, (name) => {
                if (name.scopePath === undefined)
                    throw new Error(`CodeGen: name "${name}" has no value`);
                return (0, code_1._) `${scopeName}${name.scopePath}`;
            });
        }
        scopeCode(values = this._values, usedValues, getCode) {
            return this._reduceValues(values, (name) => {
                if (name.value === undefined)
                    throw new Error(`CodeGen: name "${name}" has no value`);
                return name.value.code;
            }, usedValues, getCode);
        }
        _reduceValues(values, valueCode, usedValues = {}, getCode) {
            let code = code_1.nil;
            for (const prefix in values) {
                const vs = values[prefix];
                if (!vs)
                    continue;
                const nameSet = (usedValues[prefix] = usedValues[prefix] || new Map());
                vs.forEach((name) => {
                    if (nameSet.has(name))
                        return;
                    nameSet.set(name, UsedValueState.Started);
                    let c = valueCode(name);
                    if (c) {
                        const def = this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;
                        code = (0, code_1._) `${code}${def} ${name} = ${c};${this.opts._n}`;
                    }
                    else if ((c = getCode === null || getCode === void 0 ? void 0 : getCode(name))) {
                        code = (0, code_1._) `${code}${c}${this.opts._n}`;
                    }
                    else {
                        throw new ValueError(name);
                    }
                    nameSet.set(name, UsedValueState.Completed);
                });
            }
            return code;
        }
    }
    exports.ValueScope = ValueScope;

    }(scope));

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;
    const code_1 = code$1;
    const scope_1 = scope;
    var code_2 = code$1;
    Object.defineProperty(exports, "_", { enumerable: true, get: function () { return code_2._; } });
    Object.defineProperty(exports, "str", { enumerable: true, get: function () { return code_2.str; } });
    Object.defineProperty(exports, "strConcat", { enumerable: true, get: function () { return code_2.strConcat; } });
    Object.defineProperty(exports, "nil", { enumerable: true, get: function () { return code_2.nil; } });
    Object.defineProperty(exports, "getProperty", { enumerable: true, get: function () { return code_2.getProperty; } });
    Object.defineProperty(exports, "stringify", { enumerable: true, get: function () { return code_2.stringify; } });
    Object.defineProperty(exports, "regexpCode", { enumerable: true, get: function () { return code_2.regexpCode; } });
    Object.defineProperty(exports, "Name", { enumerable: true, get: function () { return code_2.Name; } });
    var scope_2 = scope;
    Object.defineProperty(exports, "Scope", { enumerable: true, get: function () { return scope_2.Scope; } });
    Object.defineProperty(exports, "ValueScope", { enumerable: true, get: function () { return scope_2.ValueScope; } });
    Object.defineProperty(exports, "ValueScopeName", { enumerable: true, get: function () { return scope_2.ValueScopeName; } });
    Object.defineProperty(exports, "varKinds", { enumerable: true, get: function () { return scope_2.varKinds; } });
    exports.operators = {
        GT: new code_1._Code(">"),
        GTE: new code_1._Code(">="),
        LT: new code_1._Code("<"),
        LTE: new code_1._Code("<="),
        EQ: new code_1._Code("==="),
        NEQ: new code_1._Code("!=="),
        NOT: new code_1._Code("!"),
        OR: new code_1._Code("||"),
        AND: new code_1._Code("&&"),
        ADD: new code_1._Code("+"),
    };
    class Node {
        optimizeNodes() {
            return this;
        }
        optimizeNames(_names, _constants) {
            return this;
        }
    }
    class Def extends Node {
        constructor(varKind, name, rhs) {
            super();
            this.varKind = varKind;
            this.name = name;
            this.rhs = rhs;
        }
        render({ es5, _n }) {
            const varKind = es5 ? scope_1.varKinds.var : this.varKind;
            const rhs = this.rhs === undefined ? "" : ` = ${this.rhs}`;
            return `${varKind} ${this.name}${rhs};` + _n;
        }
        optimizeNames(names, constants) {
            if (!names[this.name.str])
                return;
            if (this.rhs)
                this.rhs = optimizeExpr(this.rhs, names, constants);
            return this;
        }
        get names() {
            return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
        }
    }
    class Assign extends Node {
        constructor(lhs, rhs, sideEffects) {
            super();
            this.lhs = lhs;
            this.rhs = rhs;
            this.sideEffects = sideEffects;
        }
        render({ _n }) {
            return `${this.lhs} = ${this.rhs};` + _n;
        }
        optimizeNames(names, constants) {
            if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects)
                return;
            this.rhs = optimizeExpr(this.rhs, names, constants);
            return this;
        }
        get names() {
            const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };
            return addExprNames(names, this.rhs);
        }
    }
    class AssignOp extends Assign {
        constructor(lhs, op, rhs, sideEffects) {
            super(lhs, rhs, sideEffects);
            this.op = op;
        }
        render({ _n }) {
            return `${this.lhs} ${this.op}= ${this.rhs};` + _n;
        }
    }
    class Label extends Node {
        constructor(label) {
            super();
            this.label = label;
            this.names = {};
        }
        render({ _n }) {
            return `${this.label}:` + _n;
        }
    }
    class Break extends Node {
        constructor(label) {
            super();
            this.label = label;
            this.names = {};
        }
        render({ _n }) {
            const label = this.label ? ` ${this.label}` : "";
            return `break${label};` + _n;
        }
    }
    class Throw extends Node {
        constructor(error) {
            super();
            this.error = error;
        }
        render({ _n }) {
            return `throw ${this.error};` + _n;
        }
        get names() {
            return this.error.names;
        }
    }
    class AnyCode extends Node {
        constructor(code) {
            super();
            this.code = code;
        }
        render({ _n }) {
            return `${this.code};` + _n;
        }
        optimizeNodes() {
            return `${this.code}` ? this : undefined;
        }
        optimizeNames(names, constants) {
            this.code = optimizeExpr(this.code, names, constants);
            return this;
        }
        get names() {
            return this.code instanceof code_1._CodeOrName ? this.code.names : {};
        }
    }
    class ParentNode extends Node {
        constructor(nodes = []) {
            super();
            this.nodes = nodes;
        }
        render(opts) {
            return this.nodes.reduce((code, n) => code + n.render(opts), "");
        }
        optimizeNodes() {
            const { nodes } = this;
            let i = nodes.length;
            while (i--) {
                const n = nodes[i].optimizeNodes();
                if (Array.isArray(n))
                    nodes.splice(i, 1, ...n);
                else if (n)
                    nodes[i] = n;
                else
                    nodes.splice(i, 1);
            }
            return nodes.length > 0 ? this : undefined;
        }
        optimizeNames(names, constants) {
            const { nodes } = this;
            let i = nodes.length;
            while (i--) {
                // iterating backwards improves 1-pass optimization
                const n = nodes[i];
                if (n.optimizeNames(names, constants))
                    continue;
                subtractNames(names, n.names);
                nodes.splice(i, 1);
            }
            return nodes.length > 0 ? this : undefined;
        }
        get names() {
            return this.nodes.reduce((names, n) => addNames(names, n.names), {});
        }
    }
    class BlockNode extends ParentNode {
        render(opts) {
            return "{" + opts._n + super.render(opts) + "}" + opts._n;
        }
    }
    class Root extends ParentNode {
    }
    class Else extends BlockNode {
    }
    Else.kind = "else";
    class If extends BlockNode {
        constructor(condition, nodes) {
            super(nodes);
            this.condition = condition;
        }
        render(opts) {
            let code = `if(${this.condition})` + super.render(opts);
            if (this.else)
                code += "else " + this.else.render(opts);
            return code;
        }
        optimizeNodes() {
            super.optimizeNodes();
            const cond = this.condition;
            if (cond === true)
                return this.nodes; // else is ignored here
            let e = this.else;
            if (e) {
                const ns = e.optimizeNodes();
                e = this.else = Array.isArray(ns) ? new Else(ns) : ns;
            }
            if (e) {
                if (cond === false)
                    return e instanceof If ? e : e.nodes;
                if (this.nodes.length)
                    return this;
                return new If(not(cond), e instanceof If ? [e] : e.nodes);
            }
            if (cond === false || !this.nodes.length)
                return undefined;
            return this;
        }
        optimizeNames(names, constants) {
            var _a;
            this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
            if (!(super.optimizeNames(names, constants) || this.else))
                return;
            this.condition = optimizeExpr(this.condition, names, constants);
            return this;
        }
        get names() {
            const names = super.names;
            addExprNames(names, this.condition);
            if (this.else)
                addNames(names, this.else.names);
            return names;
        }
    }
    If.kind = "if";
    class For extends BlockNode {
    }
    For.kind = "for";
    class ForLoop extends For {
        constructor(iteration) {
            super();
            this.iteration = iteration;
        }
        render(opts) {
            return `for(${this.iteration})` + super.render(opts);
        }
        optimizeNames(names, constants) {
            if (!super.optimizeNames(names, constants))
                return;
            this.iteration = optimizeExpr(this.iteration, names, constants);
            return this;
        }
        get names() {
            return addNames(super.names, this.iteration.names);
        }
    }
    class ForRange extends For {
        constructor(varKind, name, from, to) {
            super();
            this.varKind = varKind;
            this.name = name;
            this.from = from;
            this.to = to;
        }
        render(opts) {
            const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
            const { name, from, to } = this;
            return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);
        }
        get names() {
            const names = addExprNames(super.names, this.from);
            return addExprNames(names, this.to);
        }
    }
    class ForIter extends For {
        constructor(loop, varKind, name, iterable) {
            super();
            this.loop = loop;
            this.varKind = varKind;
            this.name = name;
            this.iterable = iterable;
        }
        render(opts) {
            return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);
        }
        optimizeNames(names, constants) {
            if (!super.optimizeNames(names, constants))
                return;
            this.iterable = optimizeExpr(this.iterable, names, constants);
            return this;
        }
        get names() {
            return addNames(super.names, this.iterable.names);
        }
    }
    class Func extends BlockNode {
        constructor(name, args, async) {
            super();
            this.name = name;
            this.args = args;
            this.async = async;
        }
        render(opts) {
            const _async = this.async ? "async " : "";
            return `${_async}function ${this.name}(${this.args})` + super.render(opts);
        }
    }
    Func.kind = "func";
    class Return extends ParentNode {
        render(opts) {
            return "return " + super.render(opts);
        }
    }
    Return.kind = "return";
    class Try extends BlockNode {
        render(opts) {
            let code = "try" + super.render(opts);
            if (this.catch)
                code += this.catch.render(opts);
            if (this.finally)
                code += this.finally.render(opts);
            return code;
        }
        optimizeNodes() {
            var _a, _b;
            super.optimizeNodes();
            (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();
            (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();
            return this;
        }
        optimizeNames(names, constants) {
            var _a, _b;
            super.optimizeNames(names, constants);
            (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
            (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);
            return this;
        }
        get names() {
            const names = super.names;
            if (this.catch)
                addNames(names, this.catch.names);
            if (this.finally)
                addNames(names, this.finally.names);
            return names;
        }
    }
    class Catch extends BlockNode {
        constructor(error) {
            super();
            this.error = error;
        }
        render(opts) {
            return `catch(${this.error})` + super.render(opts);
        }
    }
    Catch.kind = "catch";
    class Finally extends BlockNode {
        render(opts) {
            return "finally" + super.render(opts);
        }
    }
    Finally.kind = "finally";
    class CodeGen {
        constructor(extScope, opts = {}) {
            this._values = {};
            this._blockStarts = [];
            this._constants = {};
            this.opts = { ...opts, _n: opts.lines ? "\n" : "" };
            this._extScope = extScope;
            this._scope = new scope_1.Scope({ parent: extScope });
            this._nodes = [new Root()];
        }
        toString() {
            return this._root.render(this.opts);
        }
        // returns unique name in the internal scope
        name(prefix) {
            return this._scope.name(prefix);
        }
        // reserves unique name in the external scope
        scopeName(prefix) {
            return this._extScope.name(prefix);
        }
        // reserves unique name in the external scope and assigns value to it
        scopeValue(prefixOrName, value) {
            const name = this._extScope.value(prefixOrName, value);
            const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());
            vs.add(name);
            return name;
        }
        getScopeValue(prefix, keyOrRef) {
            return this._extScope.getValue(prefix, keyOrRef);
        }
        // return code that assigns values in the external scope to the names that are used internally
        // (same names that were returned by gen.scopeName or gen.scopeValue)
        scopeRefs(scopeName) {
            return this._extScope.scopeRefs(scopeName, this._values);
        }
        scopeCode() {
            return this._extScope.scopeCode(this._values);
        }
        _def(varKind, nameOrPrefix, rhs, constant) {
            const name = this._scope.toName(nameOrPrefix);
            if (rhs !== undefined && constant)
                this._constants[name.str] = rhs;
            this._leafNode(new Def(varKind, name, rhs));
            return name;
        }
        // `const` declaration (`var` in es5 mode)
        const(nameOrPrefix, rhs, _constant) {
            return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
        }
        // `let` declaration with optional assignment (`var` in es5 mode)
        let(nameOrPrefix, rhs, _constant) {
            return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
        }
        // `var` declaration with optional assignment
        var(nameOrPrefix, rhs, _constant) {
            return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
        }
        // assignment code
        assign(lhs, rhs, sideEffects) {
            return this._leafNode(new Assign(lhs, rhs, sideEffects));
        }
        // `+=` code
        add(lhs, rhs) {
            return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));
        }
        // appends passed SafeExpr to code or executes Block
        code(c) {
            if (typeof c == "function")
                c();
            else if (c !== code_1.nil)
                this._leafNode(new AnyCode(c));
            return this;
        }
        // returns code for object literal for the passed argument list of key-value pairs
        object(...keyValues) {
            const code = ["{"];
            for (const [key, value] of keyValues) {
                if (code.length > 1)
                    code.push(",");
                code.push(key);
                if (key !== value || this.opts.es5) {
                    code.push(":");
                    (0, code_1.addCodeArg)(code, value);
                }
            }
            code.push("}");
            return new code_1._Code(code);
        }
        // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)
        if(condition, thenBody, elseBody) {
            this._blockNode(new If(condition));
            if (thenBody && elseBody) {
                this.code(thenBody).else().code(elseBody).endIf();
            }
            else if (thenBody) {
                this.code(thenBody).endIf();
            }
            else if (elseBody) {
                throw new Error('CodeGen: "else" body without "then" body');
            }
            return this;
        }
        // `else if` clause - invalid without `if` or after `else` clauses
        elseIf(condition) {
            return this._elseNode(new If(condition));
        }
        // `else` clause - only valid after `if` or `else if` clauses
        else() {
            return this._elseNode(new Else());
        }
        // end `if` statement (needed if gen.if was used only with condition)
        endIf() {
            return this._endBlockNode(If, Else);
        }
        _for(node, forBody) {
            this._blockNode(node);
            if (forBody)
                this.code(forBody).endFor();
            return this;
        }
        // a generic `for` clause (or statement if `forBody` is passed)
        for(iteration, forBody) {
            return this._for(new ForLoop(iteration), forBody);
        }
        // `for` statement for a range of values
        forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {
            const name = this._scope.toName(nameOrPrefix);
            return this._for(new ForRange(varKind, name, from, to), () => forBody(name));
        }
        // `for-of` statement (in es5 mode replace with a normal for loop)
        forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {
            const name = this._scope.toName(nameOrPrefix);
            if (this.opts.es5) {
                const arr = iterable instanceof code_1.Name ? iterable : this.var("_arr", iterable);
                return this.forRange("_i", 0, (0, code_1._) `${arr}.length`, (i) => {
                    this.var(name, (0, code_1._) `${arr}[${i}]`);
                    forBody(name);
                });
            }
            return this._for(new ForIter("of", varKind, name, iterable), () => forBody(name));
        }
        // `for-in` statement.
        // With option `ownProperties` replaced with a `for-of` loop for object keys
        forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {
            if (this.opts.ownProperties) {
                return this.forOf(nameOrPrefix, (0, code_1._) `Object.keys(${obj})`, forBody);
            }
            const name = this._scope.toName(nameOrPrefix);
            return this._for(new ForIter("in", varKind, name, obj), () => forBody(name));
        }
        // end `for` loop
        endFor() {
            return this._endBlockNode(For);
        }
        // `label` statement
        label(label) {
            return this._leafNode(new Label(label));
        }
        // `break` statement
        break(label) {
            return this._leafNode(new Break(label));
        }
        // `return` statement
        return(value) {
            const node = new Return();
            this._blockNode(node);
            this.code(value);
            if (node.nodes.length !== 1)
                throw new Error('CodeGen: "return" should have one node');
            return this._endBlockNode(Return);
        }
        // `try` statement
        try(tryBody, catchCode, finallyCode) {
            if (!catchCode && !finallyCode)
                throw new Error('CodeGen: "try" without "catch" and "finally"');
            const node = new Try();
            this._blockNode(node);
            this.code(tryBody);
            if (catchCode) {
                const error = this.name("e");
                this._currNode = node.catch = new Catch(error);
                catchCode(error);
            }
            if (finallyCode) {
                this._currNode = node.finally = new Finally();
                this.code(finallyCode);
            }
            return this._endBlockNode(Catch, Finally);
        }
        // `throw` statement
        throw(error) {
            return this._leafNode(new Throw(error));
        }
        // start self-balancing block
        block(body, nodeCount) {
            this._blockStarts.push(this._nodes.length);
            if (body)
                this.code(body).endBlock(nodeCount);
            return this;
        }
        // end the current self-balancing block
        endBlock(nodeCount) {
            const len = this._blockStarts.pop();
            if (len === undefined)
                throw new Error("CodeGen: not in self-balancing block");
            const toClose = this._nodes.length - len;
            if (toClose < 0 || (nodeCount !== undefined && toClose !== nodeCount)) {
                throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);
            }
            this._nodes.length = len;
            return this;
        }
        // `function` heading (or definition if funcBody is passed)
        func(name, args = code_1.nil, async, funcBody) {
            this._blockNode(new Func(name, args, async));
            if (funcBody)
                this.code(funcBody).endFunc();
            return this;
        }
        // end function definition
        endFunc() {
            return this._endBlockNode(Func);
        }
        optimize(n = 1) {
            while (n-- > 0) {
                this._root.optimizeNodes();
                this._root.optimizeNames(this._root.names, this._constants);
            }
        }
        _leafNode(node) {
            this._currNode.nodes.push(node);
            return this;
        }
        _blockNode(node) {
            this._currNode.nodes.push(node);
            this._nodes.push(node);
        }
        _endBlockNode(N1, N2) {
            const n = this._currNode;
            if (n instanceof N1 || (N2 && n instanceof N2)) {
                this._nodes.pop();
                return this;
            }
            throw new Error(`CodeGen: not in block "${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}"`);
        }
        _elseNode(node) {
            const n = this._currNode;
            if (!(n instanceof If)) {
                throw new Error('CodeGen: "else" without "if"');
            }
            this._currNode = n.else = node;
            return this;
        }
        get _root() {
            return this._nodes[0];
        }
        get _currNode() {
            const ns = this._nodes;
            return ns[ns.length - 1];
        }
        set _currNode(node) {
            const ns = this._nodes;
            ns[ns.length - 1] = node;
        }
    }
    exports.CodeGen = CodeGen;
    function addNames(names, from) {
        for (const n in from)
            names[n] = (names[n] || 0) + (from[n] || 0);
        return names;
    }
    function addExprNames(names, from) {
        return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;
    }
    function optimizeExpr(expr, names, constants) {
        if (expr instanceof code_1.Name)
            return replaceName(expr);
        if (!canOptimize(expr))
            return expr;
        return new code_1._Code(expr._items.reduce((items, c) => {
            if (c instanceof code_1.Name)
                c = replaceName(c);
            if (c instanceof code_1._Code)
                items.push(...c._items);
            else
                items.push(c);
            return items;
        }, []));
        function replaceName(n) {
            const c = constants[n.str];
            if (c === undefined || names[n.str] !== 1)
                return n;
            delete names[n.str];
            return c;
        }
        function canOptimize(e) {
            return (e instanceof code_1._Code &&
                e._items.some((c) => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined));
        }
    }
    function subtractNames(names, from) {
        for (const n in from)
            names[n] = (names[n] || 0) - (from[n] || 0);
    }
    function not(x) {
        return typeof x == "boolean" || typeof x == "number" || x === null ? !x : (0, code_1._) `!${par(x)}`;
    }
    exports.not = not;
    const andCode = mappend(exports.operators.AND);
    // boolean AND (&&) expression with the passed arguments
    function and(...args) {
        return args.reduce(andCode);
    }
    exports.and = and;
    const orCode = mappend(exports.operators.OR);
    // boolean OR (||) expression with the passed arguments
    function or(...args) {
        return args.reduce(orCode);
    }
    exports.or = or;
    function mappend(op) {
        return (x, y) => (x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._) `${par(x)} ${op} ${par(y)}`);
    }
    function par(x) {
        return x instanceof code_1.Name ? x : (0, code_1._) `(${x})`;
    }

    }(codegen));

    var util = {};

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkStrictMode = exports.getErrorPath = exports.Type = exports.useFunc = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;
    const codegen_1 = codegen;
    const code_1 = code$1;
    // TODO refactor to use Set
    function toHash(arr) {
        const hash = {};
        for (const item of arr)
            hash[item] = true;
        return hash;
    }
    exports.toHash = toHash;
    function alwaysValidSchema(it, schema) {
        if (typeof schema == "boolean")
            return schema;
        if (Object.keys(schema).length === 0)
            return true;
        checkUnknownRules(it, schema);
        return !schemaHasRules(schema, it.self.RULES.all);
    }
    exports.alwaysValidSchema = alwaysValidSchema;
    function checkUnknownRules(it, schema = it.schema) {
        const { opts, self } = it;
        if (!opts.strictSchema)
            return;
        if (typeof schema === "boolean")
            return;
        const rules = self.RULES.keywords;
        for (const key in schema) {
            if (!rules[key])
                checkStrictMode(it, `unknown keyword: "${key}"`);
        }
    }
    exports.checkUnknownRules = checkUnknownRules;
    function schemaHasRules(schema, rules) {
        if (typeof schema == "boolean")
            return !schema;
        for (const key in schema)
            if (rules[key])
                return true;
        return false;
    }
    exports.schemaHasRules = schemaHasRules;
    function schemaHasRulesButRef(schema, RULES) {
        if (typeof schema == "boolean")
            return !schema;
        for (const key in schema)
            if (key !== "$ref" && RULES.all[key])
                return true;
        return false;
    }
    exports.schemaHasRulesButRef = schemaHasRulesButRef;
    function schemaRefOrVal({ topSchemaRef, schemaPath }, schema, keyword, $data) {
        if (!$data) {
            if (typeof schema == "number" || typeof schema == "boolean")
                return schema;
            if (typeof schema == "string")
                return (0, codegen_1._) `${schema}`;
        }
        return (0, codegen_1._) `${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;
    }
    exports.schemaRefOrVal = schemaRefOrVal;
    function unescapeFragment(str) {
        return unescapeJsonPointer(decodeURIComponent(str));
    }
    exports.unescapeFragment = unescapeFragment;
    function escapeFragment(str) {
        return encodeURIComponent(escapeJsonPointer(str));
    }
    exports.escapeFragment = escapeFragment;
    function escapeJsonPointer(str) {
        if (typeof str == "number")
            return `${str}`;
        return str.replace(/~/g, "~0").replace(/\//g, "~1");
    }
    exports.escapeJsonPointer = escapeJsonPointer;
    function unescapeJsonPointer(str) {
        return str.replace(/~1/g, "/").replace(/~0/g, "~");
    }
    exports.unescapeJsonPointer = unescapeJsonPointer;
    function eachItem(xs, f) {
        if (Array.isArray(xs)) {
            for (const x of xs)
                f(x);
        }
        else {
            f(xs);
        }
    }
    exports.eachItem = eachItem;
    function makeMergeEvaluated({ mergeNames, mergeToName, mergeValues, resultToName, }) {
        return (gen, from, to, toName) => {
            const res = to === undefined
                ? from
                : to instanceof codegen_1.Name
                    ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to)
                    : from instanceof codegen_1.Name
                        ? (mergeToName(gen, to, from), from)
                        : mergeValues(from, to);
            return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;
        };
    }
    exports.mergeEvaluated = {
        props: makeMergeEvaluated({
            mergeNames: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true && ${from} !== undefined`, () => {
                gen.if((0, codegen_1._) `${from} === true`, () => gen.assign(to, true), () => gen.assign(to, (0, codegen_1._) `${to} || {}`).code((0, codegen_1._) `Object.assign(${to}, ${from})`));
            }),
            mergeToName: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true`, () => {
                if (from === true) {
                    gen.assign(to, true);
                }
                else {
                    gen.assign(to, (0, codegen_1._) `${to} || {}`);
                    setEvaluated(gen, to, from);
                }
            }),
            mergeValues: (from, to) => (from === true ? true : { ...from, ...to }),
            resultToName: evaluatedPropsToName,
        }),
        items: makeMergeEvaluated({
            mergeNames: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true && ${from} !== undefined`, () => gen.assign(to, (0, codegen_1._) `${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)),
            mergeToName: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true`, () => gen.assign(to, from === true ? true : (0, codegen_1._) `${to} > ${from} ? ${to} : ${from}`)),
            mergeValues: (from, to) => (from === true ? true : Math.max(from, to)),
            resultToName: (gen, items) => gen.var("items", items),
        }),
    };
    function evaluatedPropsToName(gen, ps) {
        if (ps === true)
            return gen.var("props", true);
        const props = gen.var("props", (0, codegen_1._) `{}`);
        if (ps !== undefined)
            setEvaluated(gen, props, ps);
        return props;
    }
    exports.evaluatedPropsToName = evaluatedPropsToName;
    function setEvaluated(gen, props, ps) {
        Object.keys(ps).forEach((p) => gen.assign((0, codegen_1._) `${props}${(0, codegen_1.getProperty)(p)}`, true));
    }
    exports.setEvaluated = setEvaluated;
    const snippets = {};
    function useFunc(gen, f) {
        return gen.scopeValue("func", {
            ref: f,
            code: snippets[f.code] || (snippets[f.code] = new code_1._Code(f.code)),
        });
    }
    exports.useFunc = useFunc;
    var Type;
    (function (Type) {
        Type[Type["Num"] = 0] = "Num";
        Type[Type["Str"] = 1] = "Str";
    })(Type = exports.Type || (exports.Type = {}));
    function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
        // let path
        if (dataProp instanceof codegen_1.Name) {
            const isNumber = dataPropType === Type.Num;
            return jsPropertySyntax
                ? isNumber
                    ? (0, codegen_1._) `"[" + ${dataProp} + "]"`
                    : (0, codegen_1._) `"['" + ${dataProp} + "']"`
                : isNumber
                    ? (0, codegen_1._) `"/" + ${dataProp}`
                    : (0, codegen_1._) `"/" + ${dataProp}.replace(/~/g, "~0").replace(/\\//g, "~1")`; // TODO maybe use global escapePointer
        }
        return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : "/" + escapeJsonPointer(dataProp);
    }
    exports.getErrorPath = getErrorPath;
    function checkStrictMode(it, msg, mode = it.opts.strictSchema) {
        if (!mode)
            return;
        msg = `strict mode: ${msg}`;
        if (mode === true)
            throw new Error(msg);
        it.self.logger.warn(msg);
    }
    exports.checkStrictMode = checkStrictMode;

    }(util));

    var names$1 = {};

    Object.defineProperty(names$1, "__esModule", { value: true });
    const codegen_1$t = codegen;
    const names = {
        // validation function arguments
        data: new codegen_1$t.Name("data"),
        // args passed from referencing schema
        valCxt: new codegen_1$t.Name("valCxt"),
        instancePath: new codegen_1$t.Name("instancePath"),
        parentData: new codegen_1$t.Name("parentData"),
        parentDataProperty: new codegen_1$t.Name("parentDataProperty"),
        rootData: new codegen_1$t.Name("rootData"),
        dynamicAnchors: new codegen_1$t.Name("dynamicAnchors"),
        // function scoped variables
        vErrors: new codegen_1$t.Name("vErrors"),
        errors: new codegen_1$t.Name("errors"),
        this: new codegen_1$t.Name("this"),
        // "globals"
        self: new codegen_1$t.Name("self"),
        scope: new codegen_1$t.Name("scope"),
        // JTD serialize/parse name for JSON string and position
        json: new codegen_1$t.Name("json"),
        jsonPos: new codegen_1$t.Name("jsonPos"),
        jsonLen: new codegen_1$t.Name("jsonLen"),
        jsonPart: new codegen_1$t.Name("jsonPart"),
    };
    names$1.default = names;

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;
    const codegen_1 = codegen;
    const util_1 = util;
    const names_1 = names$1;
    exports.keywordError = {
        message: ({ keyword }) => (0, codegen_1.str) `must pass "${keyword}" keyword validation`,
    };
    exports.keyword$DataError = {
        message: ({ keyword, schemaType }) => schemaType
            ? (0, codegen_1.str) `"${keyword}" keyword must be ${schemaType} ($data)`
            : (0, codegen_1.str) `"${keyword}" keyword is invalid ($data)`,
    };
    function reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {
        const { it } = cxt;
        const { gen, compositeRule, allErrors } = it;
        const errObj = errorObjectCode(cxt, error, errorPaths);
        if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : (compositeRule || allErrors)) {
            addError(gen, errObj);
        }
        else {
            returnErrors(it, (0, codegen_1._) `[${errObj}]`);
        }
    }
    exports.reportError = reportError;
    function reportExtraError(cxt, error = exports.keywordError, errorPaths) {
        const { it } = cxt;
        const { gen, compositeRule, allErrors } = it;
        const errObj = errorObjectCode(cxt, error, errorPaths);
        addError(gen, errObj);
        if (!(compositeRule || allErrors)) {
            returnErrors(it, names_1.default.vErrors);
        }
    }
    exports.reportExtraError = reportExtraError;
    function resetErrorsCount(gen, errsCount) {
        gen.assign(names_1.default.errors, errsCount);
        gen.if((0, codegen_1._) `${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign((0, codegen_1._) `${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));
    }
    exports.resetErrorsCount = resetErrorsCount;
    function extendErrors({ gen, keyword, schemaValue, data, errsCount, it, }) {
        /* istanbul ignore if */
        if (errsCount === undefined)
            throw new Error("ajv implementation error");
        const err = gen.name("err");
        gen.forRange("i", errsCount, names_1.default.errors, (i) => {
            gen.const(err, (0, codegen_1._) `${names_1.default.vErrors}[${i}]`);
            gen.if((0, codegen_1._) `${err}.instancePath === undefined`, () => gen.assign((0, codegen_1._) `${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));
            gen.assign((0, codegen_1._) `${err}.schemaPath`, (0, codegen_1.str) `${it.errSchemaPath}/${keyword}`);
            if (it.opts.verbose) {
                gen.assign((0, codegen_1._) `${err}.schema`, schemaValue);
                gen.assign((0, codegen_1._) `${err}.data`, data);
            }
        });
    }
    exports.extendErrors = extendErrors;
    function addError(gen, errObj) {
        const err = gen.const("err", errObj);
        gen.if((0, codegen_1._) `${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, (0, codegen_1._) `[${err}]`), (0, codegen_1._) `${names_1.default.vErrors}.push(${err})`);
        gen.code((0, codegen_1._) `${names_1.default.errors}++`);
    }
    function returnErrors(it, errs) {
        const { gen, validateName, schemaEnv } = it;
        if (schemaEnv.$async) {
            gen.throw((0, codegen_1._) `new ${it.ValidationError}(${errs})`);
        }
        else {
            gen.assign((0, codegen_1._) `${validateName}.errors`, errs);
            gen.return(false);
        }
    }
    const E = {
        keyword: new codegen_1.Name("keyword"),
        schemaPath: new codegen_1.Name("schemaPath"),
        params: new codegen_1.Name("params"),
        propertyName: new codegen_1.Name("propertyName"),
        message: new codegen_1.Name("message"),
        schema: new codegen_1.Name("schema"),
        parentSchema: new codegen_1.Name("parentSchema"),
    };
    function errorObjectCode(cxt, error, errorPaths) {
        const { createErrors } = cxt.it;
        if (createErrors === false)
            return (0, codegen_1._) `{}`;
        return errorObject(cxt, error, errorPaths);
    }
    function errorObject(cxt, error, errorPaths = {}) {
        const { gen, it } = cxt;
        const keyValues = [
            errorInstancePath(it, errorPaths),
            errorSchemaPath(cxt, errorPaths),
        ];
        extraErrorProps(cxt, error, keyValues);
        return gen.object(...keyValues);
    }
    function errorInstancePath({ errorPath }, { instancePath }) {
        const instPath = instancePath
            ? (0, codegen_1.str) `${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}`
            : errorPath;
        return [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)];
    }
    function errorSchemaPath({ keyword, it: { errSchemaPath } }, { schemaPath, parentSchema }) {
        let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str) `${errSchemaPath}/${keyword}`;
        if (schemaPath) {
            schPath = (0, codegen_1.str) `${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;
        }
        return [E.schemaPath, schPath];
    }
    function extraErrorProps(cxt, { params, message }, keyValues) {
        const { keyword, data, schemaValue, it } = cxt;
        const { opts, propertyName, topSchemaRef, schemaPath } = it;
        keyValues.push([E.keyword, keyword], [E.params, typeof params == "function" ? params(cxt) : params || (0, codegen_1._) `{}`]);
        if (opts.messages) {
            keyValues.push([E.message, typeof message == "function" ? message(cxt) : message]);
        }
        if (opts.verbose) {
            keyValues.push([E.schema, schemaValue], [E.parentSchema, (0, codegen_1._) `${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);
        }
        if (propertyName)
            keyValues.push([E.propertyName, propertyName]);
    }

    }(errors));

    Object.defineProperty(boolSchema, "__esModule", { value: true });
    boolSchema.boolOrEmptySchema = boolSchema.topBoolOrEmptySchema = void 0;
    const errors_1$2 = errors;
    const codegen_1$s = codegen;
    const names_1$6 = names$1;
    const boolError = {
        message: "boolean schema is false",
    };
    function topBoolOrEmptySchema(it) {
        const { gen, schema, validateName } = it;
        if (schema === false) {
            falseSchemaError(it, false);
        }
        else if (typeof schema == "object" && schema.$async === true) {
            gen.return(names_1$6.default.data);
        }
        else {
            gen.assign((0, codegen_1$s._) `${validateName}.errors`, null);
            gen.return(true);
        }
    }
    boolSchema.topBoolOrEmptySchema = topBoolOrEmptySchema;
    function boolOrEmptySchema(it, valid) {
        const { gen, schema } = it;
        if (schema === false) {
            gen.var(valid, false); // TODO var
            falseSchemaError(it);
        }
        else {
            gen.var(valid, true); // TODO var
        }
    }
    boolSchema.boolOrEmptySchema = boolOrEmptySchema;
    function falseSchemaError(it, overrideAllErrors) {
        const { gen, data } = it;
        // TODO maybe some other interface should be used for non-keyword validation errors...
        const cxt = {
            gen,
            keyword: "false schema",
            data,
            schema: false,
            schemaCode: false,
            schemaValue: false,
            params: {},
            it,
        };
        (0, errors_1$2.reportError)(cxt, boolError, undefined, overrideAllErrors);
    }

    var dataType = {};

    var rules = {};

    Object.defineProperty(rules, "__esModule", { value: true });
    rules.getRules = rules.isJSONType = void 0;
    const _jsonTypes = ["string", "number", "integer", "boolean", "null", "object", "array"];
    const jsonTypes = new Set(_jsonTypes);
    function isJSONType(x) {
        return typeof x == "string" && jsonTypes.has(x);
    }
    rules.isJSONType = isJSONType;
    function getRules$1() {
        const groups = {
            number: { type: "number", rules: [] },
            string: { type: "string", rules: [] },
            array: { type: "array", rules: [] },
            object: { type: "object", rules: [] },
        };
        return {
            types: { ...groups, integer: true, boolean: true, null: true },
            rules: [{ rules: [] }, groups.number, groups.string, groups.array, groups.object],
            post: { rules: [] },
            all: {},
            keywords: {},
        };
    }
    rules.getRules = getRules$1;

    var applicability = {};

    Object.defineProperty(applicability, "__esModule", { value: true });
    applicability.shouldUseRule = applicability.shouldUseGroup = applicability.schemaHasRulesForType = void 0;
    function schemaHasRulesForType({ schema, self }, type) {
        const group = self.RULES.types[type];
        return group && group !== true && shouldUseGroup(schema, group);
    }
    applicability.schemaHasRulesForType = schemaHasRulesForType;
    function shouldUseGroup(schema, group) {
        return group.rules.some((rule) => shouldUseRule(schema, rule));
    }
    applicability.shouldUseGroup = shouldUseGroup;
    function shouldUseRule(schema, rule) {
        var _a;
        return (schema[rule.keyword] !== undefined ||
            ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some((kwd) => schema[kwd] !== undefined)));
    }
    applicability.shouldUseRule = shouldUseRule;

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;
    const rules_1 = rules;
    const applicability_1 = applicability;
    const errors_1 = errors;
    const codegen_1 = codegen;
    const util_1 = util;
    var DataType;
    (function (DataType) {
        DataType[DataType["Correct"] = 0] = "Correct";
        DataType[DataType["Wrong"] = 1] = "Wrong";
    })(DataType = exports.DataType || (exports.DataType = {}));
    function getSchemaTypes(schema) {
        const types = getJSONTypes(schema.type);
        const hasNull = types.includes("null");
        if (hasNull) {
            if (schema.nullable === false)
                throw new Error("type: null contradicts nullable: false");
        }
        else {
            if (!types.length && schema.nullable !== undefined) {
                throw new Error('"nullable" cannot be used without "type"');
            }
            if (schema.nullable === true)
                types.push("null");
        }
        return types;
    }
    exports.getSchemaTypes = getSchemaTypes;
    function getJSONTypes(ts) {
        const types = Array.isArray(ts) ? ts : ts ? [ts] : [];
        if (types.every(rules_1.isJSONType))
            return types;
        throw new Error("type must be JSONType or JSONType[]: " + types.join(","));
    }
    exports.getJSONTypes = getJSONTypes;
    function coerceAndCheckDataType(it, types) {
        const { gen, data, opts } = it;
        const coerceTo = coerceToTypes(types, opts.coerceTypes);
        const checkTypes = types.length > 0 &&
            !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));
        if (checkTypes) {
            const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);
            gen.if(wrongType, () => {
                if (coerceTo.length)
                    coerceData(it, types, coerceTo);
                else
                    reportTypeError(it);
            });
        }
        return checkTypes;
    }
    exports.coerceAndCheckDataType = coerceAndCheckDataType;
    const COERCIBLE = new Set(["string", "number", "integer", "boolean", "null"]);
    function coerceToTypes(types, coerceTypes) {
        return coerceTypes
            ? types.filter((t) => COERCIBLE.has(t) || (coerceTypes === "array" && t === "array"))
            : [];
    }
    function coerceData(it, types, coerceTo) {
        const { gen, data, opts } = it;
        const dataType = gen.let("dataType", (0, codegen_1._) `typeof ${data}`);
        const coerced = gen.let("coerced", (0, codegen_1._) `undefined`);
        if (opts.coerceTypes === "array") {
            gen.if((0, codegen_1._) `${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen
                .assign(data, (0, codegen_1._) `${data}[0]`)
                .assign(dataType, (0, codegen_1._) `typeof ${data}`)
                .if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));
        }
        gen.if((0, codegen_1._) `${coerced} !== undefined`);
        for (const t of coerceTo) {
            if (COERCIBLE.has(t) || (t === "array" && opts.coerceTypes === "array")) {
                coerceSpecificType(t);
            }
        }
        gen.else();
        reportTypeError(it);
        gen.endIf();
        gen.if((0, codegen_1._) `${coerced} !== undefined`, () => {
            gen.assign(data, coerced);
            assignParentData(it, coerced);
        });
        function coerceSpecificType(t) {
            switch (t) {
                case "string":
                    gen
                        .elseIf((0, codegen_1._) `${dataType} == "number" || ${dataType} == "boolean"`)
                        .assign(coerced, (0, codegen_1._) `"" + ${data}`)
                        .elseIf((0, codegen_1._) `${data} === null`)
                        .assign(coerced, (0, codegen_1._) `""`);
                    return;
                case "number":
                    gen
                        .elseIf((0, codegen_1._) `${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`)
                        .assign(coerced, (0, codegen_1._) `+${data}`);
                    return;
                case "integer":
                    gen
                        .elseIf((0, codegen_1._) `${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`)
                        .assign(coerced, (0, codegen_1._) `+${data}`);
                    return;
                case "boolean":
                    gen
                        .elseIf((0, codegen_1._) `${data} === "false" || ${data} === 0 || ${data} === null`)
                        .assign(coerced, false)
                        .elseIf((0, codegen_1._) `${data} === "true" || ${data} === 1`)
                        .assign(coerced, true);
                    return;
                case "null":
                    gen.elseIf((0, codegen_1._) `${data} === "" || ${data} === 0 || ${data} === false`);
                    gen.assign(coerced, null);
                    return;
                case "array":
                    gen
                        .elseIf((0, codegen_1._) `${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`)
                        .assign(coerced, (0, codegen_1._) `[${data}]`);
            }
        }
    }
    function assignParentData({ gen, parentData, parentDataProperty }, expr) {
        // TODO use gen.property
        gen.if((0, codegen_1._) `${parentData} !== undefined`, () => gen.assign((0, codegen_1._) `${parentData}[${parentDataProperty}]`, expr));
    }
    function checkDataType(dataType, data, strictNums, correct = DataType.Correct) {
        const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;
        let cond;
        switch (dataType) {
            case "null":
                return (0, codegen_1._) `${data} ${EQ} null`;
            case "array":
                cond = (0, codegen_1._) `Array.isArray(${data})`;
                break;
            case "object":
                cond = (0, codegen_1._) `${data} && typeof ${data} == "object" && !Array.isArray(${data})`;
                break;
            case "integer":
                cond = numCond((0, codegen_1._) `!(${data} % 1) && !isNaN(${data})`);
                break;
            case "number":
                cond = numCond();
                break;
            default:
                return (0, codegen_1._) `typeof ${data} ${EQ} ${dataType}`;
        }
        return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);
        function numCond(_cond = codegen_1.nil) {
            return (0, codegen_1.and)((0, codegen_1._) `typeof ${data} == "number"`, _cond, strictNums ? (0, codegen_1._) `isFinite(${data})` : codegen_1.nil);
        }
    }
    exports.checkDataType = checkDataType;
    function checkDataTypes(dataTypes, data, strictNums, correct) {
        if (dataTypes.length === 1) {
            return checkDataType(dataTypes[0], data, strictNums, correct);
        }
        let cond;
        const types = (0, util_1.toHash)(dataTypes);
        if (types.array && types.object) {
            const notObj = (0, codegen_1._) `typeof ${data} != "object"`;
            cond = types.null ? notObj : (0, codegen_1._) `!${data} || ${notObj}`;
            delete types.null;
            delete types.array;
            delete types.object;
        }
        else {
            cond = codegen_1.nil;
        }
        if (types.number)
            delete types.integer;
        for (const t in types)
            cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));
        return cond;
    }
    exports.checkDataTypes = checkDataTypes;
    const typeError = {
        message: ({ schema }) => `must be ${schema}`,
        params: ({ schema, schemaValue }) => typeof schema == "string" ? (0, codegen_1._) `{type: ${schema}}` : (0, codegen_1._) `{type: ${schemaValue}}`,
    };
    function reportTypeError(it) {
        const cxt = getTypeErrorContext(it);
        (0, errors_1.reportError)(cxt, typeError);
    }
    exports.reportTypeError = reportTypeError;
    function getTypeErrorContext(it) {
        const { gen, data, schema } = it;
        const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, "type");
        return {
            gen,
            keyword: "type",
            data,
            schema: schema.type,
            schemaCode,
            schemaValue: schemaCode,
            parentSchema: schema,
            params: {},
            it,
        };
    }

    }(dataType));

    var defaults = {};

    Object.defineProperty(defaults, "__esModule", { value: true });
    defaults.assignDefaults = void 0;
    const codegen_1$r = codegen;
    const util_1$p = util;
    function assignDefaults(it, ty) {
        const { properties, items } = it.schema;
        if (ty === "object" && properties) {
            for (const key in properties) {
                assignDefault(it, key, properties[key].default);
            }
        }
        else if (ty === "array" && Array.isArray(items)) {
            items.forEach((sch, i) => assignDefault(it, i, sch.default));
        }
    }
    defaults.assignDefaults = assignDefaults;
    function assignDefault(it, prop, defaultValue) {
        const { gen, compositeRule, data, opts } = it;
        if (defaultValue === undefined)
            return;
        const childData = (0, codegen_1$r._) `${data}${(0, codegen_1$r.getProperty)(prop)}`;
        if (compositeRule) {
            (0, util_1$p.checkStrictMode)(it, `default is ignored for: ${childData}`);
            return;
        }
        let condition = (0, codegen_1$r._) `${childData} === undefined`;
        if (opts.useDefaults === "empty") {
            condition = (0, codegen_1$r._) `${condition} || ${childData} === null || ${childData} === ""`;
        }
        // `${childData} === undefined` +
        // (opts.useDefaults === "empty" ? ` || ${childData} === null || ${childData} === ""` : "")
        gen.if(condition, (0, codegen_1$r._) `${childData} = ${(0, codegen_1$r.stringify)(defaultValue)}`);
    }

    var keyword = {};

    var code = {};

    Object.defineProperty(code, "__esModule", { value: true });
    code.validateUnion = code.validateArray = code.usePattern = code.callValidateCode = code.schemaProperties = code.allSchemaProperties = code.noPropertyInData = code.propertyInData = code.isOwnProperty = code.hasPropFunc = code.reportMissingProp = code.checkMissingProp = code.checkReportMissingProp = void 0;
    const codegen_1$q = codegen;
    const util_1$o = util;
    const names_1$5 = names$1;
    const util_2$1 = util;
    function checkReportMissingProp(cxt, prop) {
        const { gen, data, it } = cxt;
        gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), () => {
            cxt.setParams({ missingProperty: (0, codegen_1$q._) `${prop}` }, true);
            cxt.error();
        });
    }
    code.checkReportMissingProp = checkReportMissingProp;
    function checkMissingProp({ gen, data, it: { opts } }, properties, missing) {
        return (0, codegen_1$q.or)(...properties.map((prop) => (0, codegen_1$q.and)(noPropertyInData(gen, data, prop, opts.ownProperties), (0, codegen_1$q._) `${missing} = ${prop}`)));
    }
    code.checkMissingProp = checkMissingProp;
    function reportMissingProp(cxt, missing) {
        cxt.setParams({ missingProperty: missing }, true);
        cxt.error();
    }
    code.reportMissingProp = reportMissingProp;
    function hasPropFunc(gen) {
        return gen.scopeValue("func", {
            // eslint-disable-next-line @typescript-eslint/unbound-method
            ref: Object.prototype.hasOwnProperty,
            code: (0, codegen_1$q._) `Object.prototype.hasOwnProperty`,
        });
    }
    code.hasPropFunc = hasPropFunc;
    function isOwnProperty(gen, data, property) {
        return (0, codegen_1$q._) `${hasPropFunc(gen)}.call(${data}, ${property})`;
    }
    code.isOwnProperty = isOwnProperty;
    function propertyInData(gen, data, property, ownProperties) {
        const cond = (0, codegen_1$q._) `${data}${(0, codegen_1$q.getProperty)(property)} !== undefined`;
        return ownProperties ? (0, codegen_1$q._) `${cond} && ${isOwnProperty(gen, data, property)}` : cond;
    }
    code.propertyInData = propertyInData;
    function noPropertyInData(gen, data, property, ownProperties) {
        const cond = (0, codegen_1$q._) `${data}${(0, codegen_1$q.getProperty)(property)} === undefined`;
        return ownProperties ? (0, codegen_1$q.or)(cond, (0, codegen_1$q.not)(isOwnProperty(gen, data, property))) : cond;
    }
    code.noPropertyInData = noPropertyInData;
    function allSchemaProperties(schemaMap) {
        return schemaMap ? Object.keys(schemaMap).filter((p) => p !== "__proto__") : [];
    }
    code.allSchemaProperties = allSchemaProperties;
    function schemaProperties(it, schemaMap) {
        return allSchemaProperties(schemaMap).filter((p) => !(0, util_1$o.alwaysValidSchema)(it, schemaMap[p]));
    }
    code.schemaProperties = schemaProperties;
    function callValidateCode({ schemaCode, data, it: { gen, topSchemaRef, schemaPath, errorPath }, it }, func, context, passSchema) {
        const dataAndSchema = passSchema ? (0, codegen_1$q._) `${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;
        const valCxt = [
            [names_1$5.default.instancePath, (0, codegen_1$q.strConcat)(names_1$5.default.instancePath, errorPath)],
            [names_1$5.default.parentData, it.parentData],
            [names_1$5.default.parentDataProperty, it.parentDataProperty],
            [names_1$5.default.rootData, names_1$5.default.rootData],
        ];
        if (it.opts.dynamicRef)
            valCxt.push([names_1$5.default.dynamicAnchors, names_1$5.default.dynamicAnchors]);
        const args = (0, codegen_1$q._) `${dataAndSchema}, ${gen.object(...valCxt)}`;
        return context !== codegen_1$q.nil ? (0, codegen_1$q._) `${func}.call(${context}, ${args})` : (0, codegen_1$q._) `${func}(${args})`;
    }
    code.callValidateCode = callValidateCode;
    const newRegExp = (0, codegen_1$q._) `new RegExp`;
    function usePattern({ gen, it: { opts } }, pattern) {
        const u = opts.unicodeRegExp ? "u" : "";
        const { regExp } = opts.code;
        const rx = regExp(pattern, u);
        return gen.scopeValue("pattern", {
            key: rx.toString(),
            ref: rx,
            code: (0, codegen_1$q._) `${regExp.code === "new RegExp" ? newRegExp : (0, util_2$1.useFunc)(gen, regExp)}(${pattern}, ${u})`,
        });
    }
    code.usePattern = usePattern;
    function validateArray(cxt) {
        const { gen, data, keyword, it } = cxt;
        const valid = gen.name("valid");
        if (it.allErrors) {
            const validArr = gen.let("valid", true);
            validateItems(() => gen.assign(validArr, false));
            return validArr;
        }
        gen.var(valid, true);
        validateItems(() => gen.break());
        return valid;
        function validateItems(notValid) {
            const len = gen.const("len", (0, codegen_1$q._) `${data}.length`);
            gen.forRange("i", 0, len, (i) => {
                cxt.subschema({
                    keyword,
                    dataProp: i,
                    dataPropType: util_1$o.Type.Num,
                }, valid);
                gen.if((0, codegen_1$q.not)(valid), notValid);
            });
        }
    }
    code.validateArray = validateArray;
    function validateUnion(cxt) {
        const { gen, schema, keyword, it } = cxt;
        /* istanbul ignore if */
        if (!Array.isArray(schema))
            throw new Error("ajv implementation error");
        const alwaysValid = schema.some((sch) => (0, util_1$o.alwaysValidSchema)(it, sch));
        if (alwaysValid && !it.opts.unevaluated)
            return;
        const valid = gen.let("valid", false);
        const schValid = gen.name("_valid");
        gen.block(() => schema.forEach((_sch, i) => {
            const schCxt = cxt.subschema({
                keyword,
                schemaProp: i,
                compositeRule: true,
            }, schValid);
            gen.assign(valid, (0, codegen_1$q._) `${valid} || ${schValid}`);
            const merged = cxt.mergeValidEvaluated(schCxt, schValid);
            // can short-circuit if `unevaluatedProperties/Items` not supported (opts.unevaluated !== true)
            // or if all properties and items were evaluated (it.props === true && it.items === true)
            if (!merged)
                gen.if((0, codegen_1$q.not)(valid));
        }));
        cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
    }
    code.validateUnion = validateUnion;

    Object.defineProperty(keyword, "__esModule", { value: true });
    keyword.validateKeywordUsage = keyword.validSchemaType = keyword.funcKeywordCode = keyword.macroKeywordCode = void 0;
    const codegen_1$p = codegen;
    const names_1$4 = names$1;
    const code_1$9 = code;
    const errors_1$1 = errors;
    function macroKeywordCode(cxt, def) {
        const { gen, keyword, schema, parentSchema, it } = cxt;
        const macroSchema = def.macro.call(it.self, schema, parentSchema, it);
        const schemaRef = useKeyword(gen, keyword, macroSchema);
        if (it.opts.validateSchema !== false)
            it.self.validateSchema(macroSchema, true);
        const valid = gen.name("valid");
        cxt.subschema({
            schema: macroSchema,
            schemaPath: codegen_1$p.nil,
            errSchemaPath: `${it.errSchemaPath}/${keyword}`,
            topSchemaRef: schemaRef,
            compositeRule: true,
        }, valid);
        cxt.pass(valid, () => cxt.error(true));
    }
    keyword.macroKeywordCode = macroKeywordCode;
    function funcKeywordCode(cxt, def) {
        var _a;
        const { gen, keyword, schema, parentSchema, $data, it } = cxt;
        checkAsyncKeyword(it, def);
        const validate = !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate;
        const validateRef = useKeyword(gen, keyword, validate);
        const valid = gen.let("valid");
        cxt.block$data(valid, validateKeyword);
        cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid);
        function validateKeyword() {
            if (def.errors === false) {
                assignValid();
                if (def.modifying)
                    modifyData(cxt);
                reportErrs(() => cxt.error());
            }
            else {
                const ruleErrs = def.async ? validateAsync() : validateSync();
                if (def.modifying)
                    modifyData(cxt);
                reportErrs(() => addErrs(cxt, ruleErrs));
            }
        }
        function validateAsync() {
            const ruleErrs = gen.let("ruleErrs", null);
            gen.try(() => assignValid((0, codegen_1$p._) `await `), (e) => gen.assign(valid, false).if((0, codegen_1$p._) `${e} instanceof ${it.ValidationError}`, () => gen.assign(ruleErrs, (0, codegen_1$p._) `${e}.errors`), () => gen.throw(e)));
            return ruleErrs;
        }
        function validateSync() {
            const validateErrs = (0, codegen_1$p._) `${validateRef}.errors`;
            gen.assign(validateErrs, null);
            assignValid(codegen_1$p.nil);
            return validateErrs;
        }
        function assignValid(_await = def.async ? (0, codegen_1$p._) `await ` : codegen_1$p.nil) {
            const passCxt = it.opts.passContext ? names_1$4.default.this : names_1$4.default.self;
            const passSchema = !(("compile" in def && !$data) || def.schema === false);
            gen.assign(valid, (0, codegen_1$p._) `${_await}${(0, code_1$9.callValidateCode)(cxt, validateRef, passCxt, passSchema)}`, def.modifying);
        }
        function reportErrs(errors) {
            var _a;
            gen.if((0, codegen_1$p.not)((_a = def.valid) !== null && _a !== void 0 ? _a : valid), errors);
        }
    }
    keyword.funcKeywordCode = funcKeywordCode;
    function modifyData(cxt) {
        const { gen, data, it } = cxt;
        gen.if(it.parentData, () => gen.assign(data, (0, codegen_1$p._) `${it.parentData}[${it.parentDataProperty}]`));
    }
    function addErrs(cxt, errs) {
        const { gen } = cxt;
        gen.if((0, codegen_1$p._) `Array.isArray(${errs})`, () => {
            gen
                .assign(names_1$4.default.vErrors, (0, codegen_1$p._) `${names_1$4.default.vErrors} === null ? ${errs} : ${names_1$4.default.vErrors}.concat(${errs})`)
                .assign(names_1$4.default.errors, (0, codegen_1$p._) `${names_1$4.default.vErrors}.length`);
            (0, errors_1$1.extendErrors)(cxt);
        }, () => cxt.error());
    }
    function checkAsyncKeyword({ schemaEnv }, def) {
        if (def.async && !schemaEnv.$async)
            throw new Error("async keyword in sync schema");
    }
    function useKeyword(gen, keyword, result) {
        if (result === undefined)
            throw new Error(`keyword "${keyword}" failed to compile`);
        return gen.scopeValue("keyword", typeof result == "function" ? { ref: result } : { ref: result, code: (0, codegen_1$p.stringify)(result) });
    }
    function validSchemaType(schema, schemaType, allowUndefined = false) {
        // TODO add tests
        return (!schemaType.length ||
            schemaType.some((st) => st === "array"
                ? Array.isArray(schema)
                : st === "object"
                    ? schema && typeof schema == "object" && !Array.isArray(schema)
                    : typeof schema == st || (allowUndefined && typeof schema == "undefined")));
    }
    keyword.validSchemaType = validSchemaType;
    function validateKeywordUsage({ schema, opts, self, errSchemaPath }, def, keyword) {
        /* istanbul ignore if */
        if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {
            throw new Error("ajv implementation error");
        }
        const deps = def.dependencies;
        if (deps === null || deps === void 0 ? void 0 : deps.some((kwd) => !Object.prototype.hasOwnProperty.call(schema, kwd))) {
            throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(",")}`);
        }
        if (def.validateSchema) {
            const valid = def.validateSchema(schema[keyword]);
            if (!valid) {
                const msg = `keyword "${keyword}" value is invalid at path "${errSchemaPath}": ` +
                    self.errorsText(def.validateSchema.errors);
                if (opts.validateSchema === "log")
                    self.logger.error(msg);
                else
                    throw new Error(msg);
            }
        }
    }
    keyword.validateKeywordUsage = validateKeywordUsage;

    var subschema = {};

    Object.defineProperty(subschema, "__esModule", { value: true });
    subschema.extendSubschemaMode = subschema.extendSubschemaData = subschema.getSubschema = void 0;
    const codegen_1$o = codegen;
    const util_1$n = util;
    function getSubschema(it, { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }) {
        if (keyword !== undefined && schema !== undefined) {
            throw new Error('both "keyword" and "schema" passed, only one allowed');
        }
        if (keyword !== undefined) {
            const sch = it.schema[keyword];
            return schemaProp === undefined
                ? {
                    schema: sch,
                    schemaPath: (0, codegen_1$o._) `${it.schemaPath}${(0, codegen_1$o.getProperty)(keyword)}`,
                    errSchemaPath: `${it.errSchemaPath}/${keyword}`,
                }
                : {
                    schema: sch[schemaProp],
                    schemaPath: (0, codegen_1$o._) `${it.schemaPath}${(0, codegen_1$o.getProperty)(keyword)}${(0, codegen_1$o.getProperty)(schemaProp)}`,
                    errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1$n.escapeFragment)(schemaProp)}`,
                };
        }
        if (schema !== undefined) {
            if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {
                throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
            }
            return {
                schema,
                schemaPath,
                topSchemaRef,
                errSchemaPath,
            };
        }
        throw new Error('either "keyword" or "schema" must be passed');
    }
    subschema.getSubschema = getSubschema;
    function extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {
        if (data !== undefined && dataProp !== undefined) {
            throw new Error('both "data" and "dataProp" passed, only one allowed');
        }
        const { gen } = it;
        if (dataProp !== undefined) {
            const { errorPath, dataPathArr, opts } = it;
            const nextData = gen.let("data", (0, codegen_1$o._) `${it.data}${(0, codegen_1$o.getProperty)(dataProp)}`, true);
            dataContextProps(nextData);
            subschema.errorPath = (0, codegen_1$o.str) `${errorPath}${(0, util_1$n.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;
            subschema.parentDataProperty = (0, codegen_1$o._) `${dataProp}`;
            subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];
        }
        if (data !== undefined) {
            const nextData = data instanceof codegen_1$o.Name ? data : gen.let("data", data, true); // replaceable if used once?
            dataContextProps(nextData);
            if (propertyName !== undefined)
                subschema.propertyName = propertyName;
            // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr
        }
        if (dataTypes)
            subschema.dataTypes = dataTypes;
        function dataContextProps(_nextData) {
            subschema.data = _nextData;
            subschema.dataLevel = it.dataLevel + 1;
            subschema.dataTypes = [];
            it.definedProperties = new Set();
            subschema.parentData = it.data;
            subschema.dataNames = [...it.dataNames, _nextData];
        }
    }
    subschema.extendSubschemaData = extendSubschemaData;
    function extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {
        if (compositeRule !== undefined)
            subschema.compositeRule = compositeRule;
        if (createErrors !== undefined)
            subschema.createErrors = createErrors;
        if (allErrors !== undefined)
            subschema.allErrors = allErrors;
        subschema.jtdDiscriminator = jtdDiscriminator; // not inherited
        subschema.jtdMetadata = jtdMetadata; // not inherited
    }
    subschema.extendSubschemaMode = extendSubschemaMode;

    var resolve$1 = {};

    var jsonSchemaTraverse = {exports: {}};

    var traverse$2 = jsonSchemaTraverse.exports = function (schema, opts, cb) {
      // Legacy support for v0.3.1 and earlier.
      if (typeof opts == 'function') {
        cb = opts;
        opts = {};
      }

      cb = opts.cb || cb;
      var pre = (typeof cb == 'function') ? cb : cb.pre || function() {};
      var post = cb.post || function() {};

      _traverse(opts, pre, post, schema, '', schema);
    };


    traverse$2.keywords = {
      additionalItems: true,
      items: true,
      contains: true,
      additionalProperties: true,
      propertyNames: true,
      not: true,
      if: true,
      then: true,
      else: true
    };

    traverse$2.arrayKeywords = {
      items: true,
      allOf: true,
      anyOf: true,
      oneOf: true
    };

    traverse$2.propsKeywords = {
      $defs: true,
      definitions: true,
      properties: true,
      patternProperties: true,
      dependencies: true
    };

    traverse$2.skipKeywords = {
      default: true,
      enum: true,
      const: true,
      required: true,
      maximum: true,
      minimum: true,
      exclusiveMaximum: true,
      exclusiveMinimum: true,
      multipleOf: true,
      maxLength: true,
      minLength: true,
      pattern: true,
      format: true,
      maxItems: true,
      minItems: true,
      uniqueItems: true,
      maxProperties: true,
      minProperties: true
    };


    function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
      if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
        pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
        for (var key in schema) {
          var sch = schema[key];
          if (Array.isArray(sch)) {
            if (key in traverse$2.arrayKeywords) {
              for (var i=0; i<sch.length; i++)
                _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
            }
          } else if (key in traverse$2.propsKeywords) {
            if (sch && typeof sch == 'object') {
              for (var prop in sch)
                _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
            }
          } else if (key in traverse$2.keywords || (opts.allKeys && !(key in traverse$2.skipKeywords))) {
            _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
          }
        }
        post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
      }
    }


    function escapeJsonPtr(str) {
      return str.replace(/~/g, '~0').replace(/\//g, '~1');
    }

    Object.defineProperty(resolve$1, "__esModule", { value: true });
    resolve$1.getSchemaRefs = resolve$1.resolveUrl = resolve$1.normalizeId = resolve$1._getFullPath = resolve$1.getFullPath = resolve$1.inlineRef = void 0;
    const util_1$m = util;
    const equal$2 = fastDeepEqual;
    const traverse$1 = jsonSchemaTraverse.exports;
    // TODO refactor to use keyword definitions
    const SIMPLE_INLINED = new Set([
        "type",
        "format",
        "pattern",
        "maxLength",
        "minLength",
        "maxProperties",
        "minProperties",
        "maxItems",
        "minItems",
        "maximum",
        "minimum",
        "uniqueItems",
        "multipleOf",
        "required",
        "enum",
        "const",
    ]);
    function inlineRef(schema, limit = true) {
        if (typeof schema == "boolean")
            return true;
        if (limit === true)
            return !hasRef(schema);
        if (!limit)
            return false;
        return countKeys(schema) <= limit;
    }
    resolve$1.inlineRef = inlineRef;
    const REF_KEYWORDS = new Set([
        "$ref",
        "$recursiveRef",
        "$recursiveAnchor",
        "$dynamicRef",
        "$dynamicAnchor",
    ]);
    function hasRef(schema) {
        for (const key in schema) {
            if (REF_KEYWORDS.has(key))
                return true;
            const sch = schema[key];
            if (Array.isArray(sch) && sch.some(hasRef))
                return true;
            if (typeof sch == "object" && hasRef(sch))
                return true;
        }
        return false;
    }
    function countKeys(schema) {
        let count = 0;
        for (const key in schema) {
            if (key === "$ref")
                return Infinity;
            count++;
            if (SIMPLE_INLINED.has(key))
                continue;
            if (typeof schema[key] == "object") {
                (0, util_1$m.eachItem)(schema[key], (sch) => (count += countKeys(sch)));
            }
            if (count === Infinity)
                return Infinity;
        }
        return count;
    }
    function getFullPath(resolver, id = "", normalize) {
        if (normalize !== false)
            id = normalizeId(id);
        const p = resolver.parse(id);
        return _getFullPath(resolver, p);
    }
    resolve$1.getFullPath = getFullPath;
    function _getFullPath(resolver, p) {
        const serialized = resolver.serialize(p);
        return serialized.split("#")[0] + "#";
    }
    resolve$1._getFullPath = _getFullPath;
    const TRAILING_SLASH_HASH = /#\/?$/;
    function normalizeId(id) {
        return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
    }
    resolve$1.normalizeId = normalizeId;
    function resolveUrl(resolver, baseId, id) {
        id = normalizeId(id);
        return resolver.resolve(baseId, id);
    }
    resolve$1.resolveUrl = resolveUrl;
    const ANCHOR = /^[a-z_][-a-z0-9._]*$/i;
    function getSchemaRefs(schema, baseId) {
        if (typeof schema == "boolean")
            return {};
        const { schemaId, uriResolver } = this.opts;
        const schId = normalizeId(schema[schemaId] || baseId);
        const baseIds = { "": schId };
        const pathPrefix = getFullPath(uriResolver, schId, false);
        const localRefs = {};
        const schemaRefs = new Set();
        traverse$1(schema, { allKeys: true }, (sch, jsonPtr, _, parentJsonPtr) => {
            if (parentJsonPtr === undefined)
                return;
            const fullPath = pathPrefix + jsonPtr;
            let baseId = baseIds[parentJsonPtr];
            if (typeof sch[schemaId] == "string")
                baseId = addRef.call(this, sch[schemaId]);
            addAnchor.call(this, sch.$anchor);
            addAnchor.call(this, sch.$dynamicAnchor);
            baseIds[jsonPtr] = baseId;
            function addRef(ref) {
                // eslint-disable-next-line @typescript-eslint/unbound-method
                const _resolve = this.opts.uriResolver.resolve;
                ref = normalizeId(baseId ? _resolve(baseId, ref) : ref);
                if (schemaRefs.has(ref))
                    throw ambiguos(ref);
                schemaRefs.add(ref);
                let schOrRef = this.refs[ref];
                if (typeof schOrRef == "string")
                    schOrRef = this.refs[schOrRef];
                if (typeof schOrRef == "object") {
                    checkAmbiguosRef(sch, schOrRef.schema, ref);
                }
                else if (ref !== normalizeId(fullPath)) {
                    if (ref[0] === "#") {
                        checkAmbiguosRef(sch, localRefs[ref], ref);
                        localRefs[ref] = sch;
                    }
                    else {
                        this.refs[ref] = fullPath;
                    }
                }
                return ref;
            }
            function addAnchor(anchor) {
                if (typeof anchor == "string") {
                    if (!ANCHOR.test(anchor))
                        throw new Error(`invalid anchor "${anchor}"`);
                    addRef.call(this, `#${anchor}`);
                }
            }
        });
        return localRefs;
        function checkAmbiguosRef(sch1, sch2, ref) {
            if (sch2 !== undefined && !equal$2(sch1, sch2))
                throw ambiguos(ref);
        }
        function ambiguos(ref) {
            return new Error(`reference "${ref}" resolves to more than one schema`);
        }
    }
    resolve$1.getSchemaRefs = getSchemaRefs;

    Object.defineProperty(validate$1, "__esModule", { value: true });
    validate$1.getData = validate$1.KeywordCxt = validate$1.validateFunctionCode = void 0;
    const boolSchema_1 = boolSchema;
    const dataType_1$1 = dataType;
    const applicability_1 = applicability;
    const dataType_2 = dataType;
    const defaults_1 = defaults;
    const keyword_1 = keyword;
    const subschema_1 = subschema;
    const codegen_1$n = codegen;
    const names_1$3 = names$1;
    const resolve_1$2 = resolve$1;
    const util_1$l = util;
    const errors_1 = errors;
    // schema compilation - generates validation function, subschemaCode (below) is used for subschemas
    function validateFunctionCode(it) {
        if (isSchemaObj(it)) {
            checkKeywords(it);
            if (schemaCxtHasRules(it)) {
                topSchemaObjCode(it);
                return;
            }
        }
        validateFunction(it, () => (0, boolSchema_1.topBoolOrEmptySchema)(it));
    }
    validate$1.validateFunctionCode = validateFunctionCode;
    function validateFunction({ gen, validateName, schema, schemaEnv, opts }, body) {
        if (opts.code.es5) {
            gen.func(validateName, (0, codegen_1$n._) `${names_1$3.default.data}, ${names_1$3.default.valCxt}`, schemaEnv.$async, () => {
                gen.code((0, codegen_1$n._) `"use strict"; ${funcSourceUrl(schema, opts)}`);
                destructureValCxtES5(gen, opts);
                gen.code(body);
            });
        }
        else {
            gen.func(validateName, (0, codegen_1$n._) `${names_1$3.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () => gen.code(funcSourceUrl(schema, opts)).code(body));
        }
    }
    function destructureValCxt(opts) {
        return (0, codegen_1$n._) `{${names_1$3.default.instancePath}="", ${names_1$3.default.parentData}, ${names_1$3.default.parentDataProperty}, ${names_1$3.default.rootData}=${names_1$3.default.data}${opts.dynamicRef ? (0, codegen_1$n._) `, ${names_1$3.default.dynamicAnchors}={}` : codegen_1$n.nil}}={}`;
    }
    function destructureValCxtES5(gen, opts) {
        gen.if(names_1$3.default.valCxt, () => {
            gen.var(names_1$3.default.instancePath, (0, codegen_1$n._) `${names_1$3.default.valCxt}.${names_1$3.default.instancePath}`);
            gen.var(names_1$3.default.parentData, (0, codegen_1$n._) `${names_1$3.default.valCxt}.${names_1$3.default.parentData}`);
            gen.var(names_1$3.default.parentDataProperty, (0, codegen_1$n._) `${names_1$3.default.valCxt}.${names_1$3.default.parentDataProperty}`);
            gen.var(names_1$3.default.rootData, (0, codegen_1$n._) `${names_1$3.default.valCxt}.${names_1$3.default.rootData}`);
            if (opts.dynamicRef)
                gen.var(names_1$3.default.dynamicAnchors, (0, codegen_1$n._) `${names_1$3.default.valCxt}.${names_1$3.default.dynamicAnchors}`);
        }, () => {
            gen.var(names_1$3.default.instancePath, (0, codegen_1$n._) `""`);
            gen.var(names_1$3.default.parentData, (0, codegen_1$n._) `undefined`);
            gen.var(names_1$3.default.parentDataProperty, (0, codegen_1$n._) `undefined`);
            gen.var(names_1$3.default.rootData, names_1$3.default.data);
            if (opts.dynamicRef)
                gen.var(names_1$3.default.dynamicAnchors, (0, codegen_1$n._) `{}`);
        });
    }
    function topSchemaObjCode(it) {
        const { schema, opts, gen } = it;
        validateFunction(it, () => {
            if (opts.$comment && schema.$comment)
                commentKeyword(it);
            checkNoDefault(it);
            gen.let(names_1$3.default.vErrors, null);
            gen.let(names_1$3.default.errors, 0);
            if (opts.unevaluated)
                resetEvaluated(it);
            typeAndKeywords(it);
            returnResults(it);
        });
        return;
    }
    function resetEvaluated(it) {
        // TODO maybe some hook to execute it in the end to check whether props/items are Name, as in assignEvaluated
        const { gen, validateName } = it;
        it.evaluated = gen.const("evaluated", (0, codegen_1$n._) `${validateName}.evaluated`);
        gen.if((0, codegen_1$n._) `${it.evaluated}.dynamicProps`, () => gen.assign((0, codegen_1$n._) `${it.evaluated}.props`, (0, codegen_1$n._) `undefined`));
        gen.if((0, codegen_1$n._) `${it.evaluated}.dynamicItems`, () => gen.assign((0, codegen_1$n._) `${it.evaluated}.items`, (0, codegen_1$n._) `undefined`));
    }
    function funcSourceUrl(schema, opts) {
        const schId = typeof schema == "object" && schema[opts.schemaId];
        return schId && (opts.code.source || opts.code.process) ? (0, codegen_1$n._) `/*# sourceURL=${schId} */` : codegen_1$n.nil;
    }
    // schema compilation - this function is used recursively to generate code for sub-schemas
    function subschemaCode(it, valid) {
        if (isSchemaObj(it)) {
            checkKeywords(it);
            if (schemaCxtHasRules(it)) {
                subSchemaObjCode(it, valid);
                return;
            }
        }
        (0, boolSchema_1.boolOrEmptySchema)(it, valid);
    }
    function schemaCxtHasRules({ schema, self }) {
        if (typeof schema == "boolean")
            return !schema;
        for (const key in schema)
            if (self.RULES.all[key])
                return true;
        return false;
    }
    function isSchemaObj(it) {
        return typeof it.schema != "boolean";
    }
    function subSchemaObjCode(it, valid) {
        const { schema, gen, opts } = it;
        if (opts.$comment && schema.$comment)
            commentKeyword(it);
        updateContext(it);
        checkAsyncSchema(it);
        const errsCount = gen.const("_errs", names_1$3.default.errors);
        typeAndKeywords(it, errsCount);
        // TODO var
        gen.var(valid, (0, codegen_1$n._) `${errsCount} === ${names_1$3.default.errors}`);
    }
    function checkKeywords(it) {
        (0, util_1$l.checkUnknownRules)(it);
        checkRefsAndKeywords(it);
    }
    function typeAndKeywords(it, errsCount) {
        if (it.opts.jtd)
            return schemaKeywords(it, [], false, errsCount);
        const types = (0, dataType_1$1.getSchemaTypes)(it.schema);
        const checkedTypes = (0, dataType_1$1.coerceAndCheckDataType)(it, types);
        schemaKeywords(it, types, !checkedTypes, errsCount);
    }
    function checkRefsAndKeywords(it) {
        const { schema, errSchemaPath, opts, self } = it;
        if (schema.$ref && opts.ignoreKeywordsWithRef && (0, util_1$l.schemaHasRulesButRef)(schema, self.RULES)) {
            self.logger.warn(`$ref: keywords ignored in schema at path "${errSchemaPath}"`);
        }
    }
    function checkNoDefault(it) {
        const { schema, opts } = it;
        if (schema.default !== undefined && opts.useDefaults && opts.strictSchema) {
            (0, util_1$l.checkStrictMode)(it, "default is ignored in the schema root");
        }
    }
    function updateContext(it) {
        const schId = it.schema[it.opts.schemaId];
        if (schId)
            it.baseId = (0, resolve_1$2.resolveUrl)(it.opts.uriResolver, it.baseId, schId);
    }
    function checkAsyncSchema(it) {
        if (it.schema.$async && !it.schemaEnv.$async)
            throw new Error("async schema in sync schema");
    }
    function commentKeyword({ gen, schemaEnv, schema, errSchemaPath, opts }) {
        const msg = schema.$comment;
        if (opts.$comment === true) {
            gen.code((0, codegen_1$n._) `${names_1$3.default.self}.logger.log(${msg})`);
        }
        else if (typeof opts.$comment == "function") {
            const schemaPath = (0, codegen_1$n.str) `${errSchemaPath}/$comment`;
            const rootName = gen.scopeValue("root", { ref: schemaEnv.root });
            gen.code((0, codegen_1$n._) `${names_1$3.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);
        }
    }
    function returnResults(it) {
        const { gen, schemaEnv, validateName, ValidationError, opts } = it;
        if (schemaEnv.$async) {
            // TODO assign unevaluated
            gen.if((0, codegen_1$n._) `${names_1$3.default.errors} === 0`, () => gen.return(names_1$3.default.data), () => gen.throw((0, codegen_1$n._) `new ${ValidationError}(${names_1$3.default.vErrors})`));
        }
        else {
            gen.assign((0, codegen_1$n._) `${validateName}.errors`, names_1$3.default.vErrors);
            if (opts.unevaluated)
                assignEvaluated(it);
            gen.return((0, codegen_1$n._) `${names_1$3.default.errors} === 0`);
        }
    }
    function assignEvaluated({ gen, evaluated, props, items }) {
        if (props instanceof codegen_1$n.Name)
            gen.assign((0, codegen_1$n._) `${evaluated}.props`, props);
        if (items instanceof codegen_1$n.Name)
            gen.assign((0, codegen_1$n._) `${evaluated}.items`, items);
    }
    function schemaKeywords(it, types, typeErrors, errsCount) {
        const { gen, schema, data, allErrors, opts, self } = it;
        const { RULES } = self;
        if (schema.$ref && (opts.ignoreKeywordsWithRef || !(0, util_1$l.schemaHasRulesButRef)(schema, RULES))) {
            gen.block(() => keywordCode(it, "$ref", RULES.all.$ref.definition)); // TODO typecast
            return;
        }
        if (!opts.jtd)
            checkStrictTypes(it, types);
        gen.block(() => {
            for (const group of RULES.rules)
                groupKeywords(group);
            groupKeywords(RULES.post);
        });
        function groupKeywords(group) {
            if (!(0, applicability_1.shouldUseGroup)(schema, group))
                return;
            if (group.type) {
                gen.if((0, dataType_2.checkDataType)(group.type, data, opts.strictNumbers));
                iterateKeywords(it, group);
                if (types.length === 1 && types[0] === group.type && typeErrors) {
                    gen.else();
                    (0, dataType_2.reportTypeError)(it);
                }
                gen.endIf();
            }
            else {
                iterateKeywords(it, group);
            }
            // TODO make it "ok" call?
            if (!allErrors)
                gen.if((0, codegen_1$n._) `${names_1$3.default.errors} === ${errsCount || 0}`);
        }
    }
    function iterateKeywords(it, group) {
        const { gen, schema, opts: { useDefaults }, } = it;
        if (useDefaults)
            (0, defaults_1.assignDefaults)(it, group.type);
        gen.block(() => {
            for (const rule of group.rules) {
                if ((0, applicability_1.shouldUseRule)(schema, rule)) {
                    keywordCode(it, rule.keyword, rule.definition, group.type);
                }
            }
        });
    }
    function checkStrictTypes(it, types) {
        if (it.schemaEnv.meta || !it.opts.strictTypes)
            return;
        checkContextTypes(it, types);
        if (!it.opts.allowUnionTypes)
            checkMultipleTypes(it, types);
        checkKeywordTypes(it, it.dataTypes);
    }
    function checkContextTypes(it, types) {
        if (!types.length)
            return;
        if (!it.dataTypes.length) {
            it.dataTypes = types;
            return;
        }
        types.forEach((t) => {
            if (!includesType(it.dataTypes, t)) {
                strictTypesError(it, `type "${t}" not allowed by context "${it.dataTypes.join(",")}"`);
            }
        });
        narrowSchemaTypes(it, types);
    }
    function checkMultipleTypes(it, ts) {
        if (ts.length > 1 && !(ts.length === 2 && ts.includes("null"))) {
            strictTypesError(it, "use allowUnionTypes to allow union type keyword");
        }
    }
    function checkKeywordTypes(it, ts) {
        const rules = it.self.RULES.all;
        for (const keyword in rules) {
            const rule = rules[keyword];
            if (typeof rule == "object" && (0, applicability_1.shouldUseRule)(it.schema, rule)) {
                const { type } = rule.definition;
                if (type.length && !type.some((t) => hasApplicableType(ts, t))) {
                    strictTypesError(it, `missing type "${type.join(",")}" for keyword "${keyword}"`);
                }
            }
        }
    }
    function hasApplicableType(schTs, kwdT) {
        return schTs.includes(kwdT) || (kwdT === "number" && schTs.includes("integer"));
    }
    function includesType(ts, t) {
        return ts.includes(t) || (t === "integer" && ts.includes("number"));
    }
    function narrowSchemaTypes(it, withTypes) {
        const ts = [];
        for (const t of it.dataTypes) {
            if (includesType(withTypes, t))
                ts.push(t);
            else if (withTypes.includes("integer") && t === "number")
                ts.push("integer");
        }
        it.dataTypes = ts;
    }
    function strictTypesError(it, msg) {
        const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
        msg += ` at "${schemaPath}" (strictTypes)`;
        (0, util_1$l.checkStrictMode)(it, msg, it.opts.strictTypes);
    }
    class KeywordCxt {
        constructor(it, def, keyword) {
            (0, keyword_1.validateKeywordUsage)(it, def, keyword);
            this.gen = it.gen;
            this.allErrors = it.allErrors;
            this.keyword = keyword;
            this.data = it.data;
            this.schema = it.schema[keyword];
            this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;
            this.schemaValue = (0, util_1$l.schemaRefOrVal)(it, this.schema, keyword, this.$data);
            this.schemaType = def.schemaType;
            this.parentSchema = it.schema;
            this.params = {};
            this.it = it;
            this.def = def;
            if (this.$data) {
                this.schemaCode = it.gen.const("vSchema", getData$2(this.$data, it));
            }
            else {
                this.schemaCode = this.schemaValue;
                if (!(0, keyword_1.validSchemaType)(this.schema, def.schemaType, def.allowUndefined)) {
                    throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);
                }
            }
            if ("code" in def ? def.trackErrors : def.errors !== false) {
                this.errsCount = it.gen.const("_errs", names_1$3.default.errors);
            }
        }
        result(condition, successAction, failAction) {
            this.failResult((0, codegen_1$n.not)(condition), successAction, failAction);
        }
        failResult(condition, successAction, failAction) {
            this.gen.if(condition);
            if (failAction)
                failAction();
            else
                this.error();
            if (successAction) {
                this.gen.else();
                successAction();
                if (this.allErrors)
                    this.gen.endIf();
            }
            else {
                if (this.allErrors)
                    this.gen.endIf();
                else
                    this.gen.else();
            }
        }
        pass(condition, failAction) {
            this.failResult((0, codegen_1$n.not)(condition), undefined, failAction);
        }
        fail(condition) {
            if (condition === undefined) {
                this.error();
                if (!this.allErrors)
                    this.gen.if(false); // this branch will be removed by gen.optimize
                return;
            }
            this.gen.if(condition);
            this.error();
            if (this.allErrors)
                this.gen.endIf();
            else
                this.gen.else();
        }
        fail$data(condition) {
            if (!this.$data)
                return this.fail(condition);
            const { schemaCode } = this;
            this.fail((0, codegen_1$n._) `${schemaCode} !== undefined && (${(0, codegen_1$n.or)(this.invalid$data(), condition)})`);
        }
        error(append, errorParams, errorPaths) {
            if (errorParams) {
                this.setParams(errorParams);
                this._error(append, errorPaths);
                this.setParams({});
                return;
            }
            this._error(append, errorPaths);
        }
        _error(append, errorPaths) {
            (append ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error, errorPaths);
        }
        $dataError() {
            (0, errors_1.reportError)(this, this.def.$dataError || errors_1.keyword$DataError);
        }
        reset() {
            if (this.errsCount === undefined)
                throw new Error('add "trackErrors" to keyword definition');
            (0, errors_1.resetErrorsCount)(this.gen, this.errsCount);
        }
        ok(cond) {
            if (!this.allErrors)
                this.gen.if(cond);
        }
        setParams(obj, assign) {
            if (assign)
                Object.assign(this.params, obj);
            else
                this.params = obj;
        }
        block$data(valid, codeBlock, $dataValid = codegen_1$n.nil) {
            this.gen.block(() => {
                this.check$data(valid, $dataValid);
                codeBlock();
            });
        }
        check$data(valid = codegen_1$n.nil, $dataValid = codegen_1$n.nil) {
            if (!this.$data)
                return;
            const { gen, schemaCode, schemaType, def } = this;
            gen.if((0, codegen_1$n.or)((0, codegen_1$n._) `${schemaCode} === undefined`, $dataValid));
            if (valid !== codegen_1$n.nil)
                gen.assign(valid, true);
            if (schemaType.length || def.validateSchema) {
                gen.elseIf(this.invalid$data());
                this.$dataError();
                if (valid !== codegen_1$n.nil)
                    gen.assign(valid, false);
            }
            gen.else();
        }
        invalid$data() {
            const { gen, schemaCode, schemaType, def, it } = this;
            return (0, codegen_1$n.or)(wrong$DataType(), invalid$DataSchema());
            function wrong$DataType() {
                if (schemaType.length) {
                    /* istanbul ignore if */
                    if (!(schemaCode instanceof codegen_1$n.Name))
                        throw new Error("ajv implementation error");
                    const st = Array.isArray(schemaType) ? schemaType : [schemaType];
                    return (0, codegen_1$n._) `${(0, dataType_2.checkDataTypes)(st, schemaCode, it.opts.strictNumbers, dataType_2.DataType.Wrong)}`;
                }
                return codegen_1$n.nil;
            }
            function invalid$DataSchema() {
                if (def.validateSchema) {
                    const validateSchemaRef = gen.scopeValue("validate$data", { ref: def.validateSchema }); // TODO value.code for standalone
                    return (0, codegen_1$n._) `!${validateSchemaRef}(${schemaCode})`;
                }
                return codegen_1$n.nil;
            }
        }
        subschema(appl, valid) {
            const subschema = (0, subschema_1.getSubschema)(this.it, appl);
            (0, subschema_1.extendSubschemaData)(subschema, this.it, appl);
            (0, subschema_1.extendSubschemaMode)(subschema, appl);
            const nextContext = { ...this.it, ...subschema, items: undefined, props: undefined };
            subschemaCode(nextContext, valid);
            return nextContext;
        }
        mergeEvaluated(schemaCxt, toName) {
            const { it, gen } = this;
            if (!it.opts.unevaluated)
                return;
            if (it.props !== true && schemaCxt.props !== undefined) {
                it.props = util_1$l.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);
            }
            if (it.items !== true && schemaCxt.items !== undefined) {
                it.items = util_1$l.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);
            }
        }
        mergeValidEvaluated(schemaCxt, valid) {
            const { it, gen } = this;
            if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {
                gen.if(valid, () => this.mergeEvaluated(schemaCxt, codegen_1$n.Name));
                return true;
            }
        }
    }
    validate$1.KeywordCxt = KeywordCxt;
    function keywordCode(it, keyword, def, ruleType) {
        const cxt = new KeywordCxt(it, def, keyword);
        if ("code" in def) {
            def.code(cxt, ruleType);
        }
        else if (cxt.$data && def.validate) {
            (0, keyword_1.funcKeywordCode)(cxt, def);
        }
        else if ("macro" in def) {
            (0, keyword_1.macroKeywordCode)(cxt, def);
        }
        else if (def.compile || def.validate) {
            (0, keyword_1.funcKeywordCode)(cxt, def);
        }
    }
    const JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
    const RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
    function getData$2($data, { dataLevel, dataNames, dataPathArr }) {
        let jsonPointer;
        let data;
        if ($data === "")
            return names_1$3.default.rootData;
        if ($data[0] === "/") {
            if (!JSON_POINTER.test($data))
                throw new Error(`Invalid JSON-pointer: ${$data}`);
            jsonPointer = $data;
            data = names_1$3.default.rootData;
        }
        else {
            const matches = RELATIVE_JSON_POINTER.exec($data);
            if (!matches)
                throw new Error(`Invalid JSON-pointer: ${$data}`);
            const up = +matches[1];
            jsonPointer = matches[2];
            if (jsonPointer === "#") {
                if (up >= dataLevel)
                    throw new Error(errorMsg("property/index", up));
                return dataPathArr[dataLevel - up];
            }
            if (up > dataLevel)
                throw new Error(errorMsg("data", up));
            data = dataNames[dataLevel - up];
            if (!jsonPointer)
                return data;
        }
        let expr = data;
        const segments = jsonPointer.split("/");
        for (const segment of segments) {
            if (segment) {
                data = (0, codegen_1$n._) `${data}${(0, codegen_1$n.getProperty)((0, util_1$l.unescapeJsonPointer)(segment))}`;
                expr = (0, codegen_1$n._) `${expr} && ${data}`;
            }
        }
        return expr;
        function errorMsg(pointerType, up) {
            return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;
        }
    }
    validate$1.getData = getData$2;

    var validation_error = {};

    Object.defineProperty(validation_error, "__esModule", { value: true });
    class ValidationError extends Error {
        constructor(errors) {
            super("validation failed");
            this.errors = errors;
            this.ajv = this.validation = true;
        }
    }
    validation_error.default = ValidationError;

    var ref_error = {};

    Object.defineProperty(ref_error, "__esModule", { value: true });
    const resolve_1$1 = resolve$1;
    class MissingRefError extends Error {
        constructor(resolver, baseId, ref, msg) {
            super(msg || `can't resolve reference ${ref} from id ${baseId}`);
            this.missingRef = (0, resolve_1$1.resolveUrl)(resolver, baseId, ref);
            this.missingSchema = (0, resolve_1$1.normalizeId)((0, resolve_1$1.getFullPath)(resolver, this.missingRef));
        }
    }
    ref_error.default = MissingRefError;

    var compile$1 = {};

    Object.defineProperty(compile$1, "__esModule", { value: true });
    compile$1.resolveSchema = compile$1.getCompilingSchema = compile$1.resolveRef = compile$1.compileSchema = compile$1.SchemaEnv = void 0;
    const codegen_1$m = codegen;
    const validation_error_1 = validation_error;
    const names_1$2 = names$1;
    const resolve_1 = resolve$1;
    const util_1$k = util;
    const validate_1$1 = validate$1;
    class SchemaEnv {
        constructor(env) {
            var _a;
            this.refs = {};
            this.dynamicAnchors = {};
            let schema;
            if (typeof env.schema == "object")
                schema = env.schema;
            this.schema = env.schema;
            this.schemaId = env.schemaId;
            this.root = env.root || this;
            this.baseId = (_a = env.baseId) !== null && _a !== void 0 ? _a : (0, resolve_1.normalizeId)(schema === null || schema === void 0 ? void 0 : schema[env.schemaId || "$id"]);
            this.schemaPath = env.schemaPath;
            this.localRefs = env.localRefs;
            this.meta = env.meta;
            this.$async = schema === null || schema === void 0 ? void 0 : schema.$async;
            this.refs = {};
        }
    }
    compile$1.SchemaEnv = SchemaEnv;
    // let codeSize = 0
    // let nodeCount = 0
    // Compiles schema in SchemaEnv
    function compileSchema(sch) {
        // TODO refactor - remove compilations
        const _sch = getCompilingSchema.call(this, sch);
        if (_sch)
            return _sch;
        const rootId = (0, resolve_1.getFullPath)(this.opts.uriResolver, sch.root.baseId); // TODO if getFullPath removed 1 tests fails
        const { es5, lines } = this.opts.code;
        const { ownProperties } = this.opts;
        const gen = new codegen_1$m.CodeGen(this.scope, { es5, lines, ownProperties });
        let _ValidationError;
        if (sch.$async) {
            _ValidationError = gen.scopeValue("Error", {
                ref: validation_error_1.default,
                code: (0, codegen_1$m._) `require("ajv/dist/runtime/validation_error").default`,
            });
        }
        const validateName = gen.scopeName("validate");
        sch.validateName = validateName;
        const schemaCxt = {
            gen,
            allErrors: this.opts.allErrors,
            data: names_1$2.default.data,
            parentData: names_1$2.default.parentData,
            parentDataProperty: names_1$2.default.parentDataProperty,
            dataNames: [names_1$2.default.data],
            dataPathArr: [codegen_1$m.nil],
            dataLevel: 0,
            dataTypes: [],
            definedProperties: new Set(),
            topSchemaRef: gen.scopeValue("schema", this.opts.code.source === true
                ? { ref: sch.schema, code: (0, codegen_1$m.stringify)(sch.schema) }
                : { ref: sch.schema }),
            validateName,
            ValidationError: _ValidationError,
            schema: sch.schema,
            schemaEnv: sch,
            rootId,
            baseId: sch.baseId || rootId,
            schemaPath: codegen_1$m.nil,
            errSchemaPath: sch.schemaPath || (this.opts.jtd ? "" : "#"),
            errorPath: (0, codegen_1$m._) `""`,
            opts: this.opts,
            self: this,
        };
        let sourceCode;
        try {
            this._compilations.add(sch);
            (0, validate_1$1.validateFunctionCode)(schemaCxt);
            gen.optimize(this.opts.code.optimize);
            // gen.optimize(1)
            const validateCode = gen.toString();
            sourceCode = `${gen.scopeRefs(names_1$2.default.scope)}return ${validateCode}`;
            // console.log((codeSize += sourceCode.length), (nodeCount += gen.nodeCount))
            if (this.opts.code.process)
                sourceCode = this.opts.code.process(sourceCode, sch);
            // console.log("\n\n\n *** \n", sourceCode)
            const makeValidate = new Function(`${names_1$2.default.self}`, `${names_1$2.default.scope}`, sourceCode);
            const validate = makeValidate(this, this.scope.get());
            this.scope.value(validateName, { ref: validate });
            validate.errors = null;
            validate.schema = sch.schema;
            validate.schemaEnv = sch;
            if (sch.$async)
                validate.$async = true;
            if (this.opts.code.source === true) {
                validate.source = { validateName, validateCode, scopeValues: gen._values };
            }
            if (this.opts.unevaluated) {
                const { props, items } = schemaCxt;
                validate.evaluated = {
                    props: props instanceof codegen_1$m.Name ? undefined : props,
                    items: items instanceof codegen_1$m.Name ? undefined : items,
                    dynamicProps: props instanceof codegen_1$m.Name,
                    dynamicItems: items instanceof codegen_1$m.Name,
                };
                if (validate.source)
                    validate.source.evaluated = (0, codegen_1$m.stringify)(validate.evaluated);
            }
            sch.validate = validate;
            return sch;
        }
        catch (e) {
            delete sch.validate;
            delete sch.validateName;
            if (sourceCode)
                this.logger.error("Error compiling schema, function code:", sourceCode);
            // console.log("\n\n\n *** \n", sourceCode, this.opts)
            throw e;
        }
        finally {
            this._compilations.delete(sch);
        }
    }
    compile$1.compileSchema = compileSchema;
    function resolveRef(root, baseId, ref) {
        var _a;
        ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, ref);
        const schOrFunc = root.refs[ref];
        if (schOrFunc)
            return schOrFunc;
        let _sch = resolve.call(this, root, ref);
        if (_sch === undefined) {
            const schema = (_a = root.localRefs) === null || _a === void 0 ? void 0 : _a[ref]; // TODO maybe localRefs should hold SchemaEnv
            const { schemaId } = this.opts;
            if (schema)
                _sch = new SchemaEnv({ schema, schemaId, root, baseId });
        }
        if (_sch === undefined)
            return;
        return (root.refs[ref] = inlineOrCompile.call(this, _sch));
    }
    compile$1.resolveRef = resolveRef;
    function inlineOrCompile(sch) {
        if ((0, resolve_1.inlineRef)(sch.schema, this.opts.inlineRefs))
            return sch.schema;
        return sch.validate ? sch : compileSchema.call(this, sch);
    }
    // Index of schema compilation in the currently compiled list
    function getCompilingSchema(schEnv) {
        for (const sch of this._compilations) {
            if (sameSchemaEnv(sch, schEnv))
                return sch;
        }
    }
    compile$1.getCompilingSchema = getCompilingSchema;
    function sameSchemaEnv(s1, s2) {
        return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;
    }
    // resolve and compile the references ($ref)
    // TODO returns AnySchemaObject (if the schema can be inlined) or validation function
    function resolve(root, // information about the root schema for the current schema
    ref // reference to resolve
    ) {
        let sch;
        while (typeof (sch = this.refs[ref]) == "string")
            ref = sch;
        return sch || this.schemas[ref] || resolveSchema$1.call(this, root, ref);
    }
    // Resolve schema, its root and baseId
    function resolveSchema$1(root, // root object with properties schema, refs TODO below SchemaEnv is assigned to it
    ref // reference to resolve
    ) {
        const p = this.opts.uriResolver.parse(ref);
        const refPath = (0, resolve_1._getFullPath)(this.opts.uriResolver, p);
        let baseId = (0, resolve_1.getFullPath)(this.opts.uriResolver, root.baseId, undefined);
        // TODO `Object.keys(root.schema).length > 0` should not be needed - but removing breaks 2 tests
        if (Object.keys(root.schema).length > 0 && refPath === baseId) {
            return getJsonPointer.call(this, p, root);
        }
        const id = (0, resolve_1.normalizeId)(refPath);
        const schOrRef = this.refs[id] || this.schemas[id];
        if (typeof schOrRef == "string") {
            const sch = resolveSchema$1.call(this, root, schOrRef);
            if (typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !== "object")
                return;
            return getJsonPointer.call(this, p, sch);
        }
        if (typeof (schOrRef === null || schOrRef === void 0 ? void 0 : schOrRef.schema) !== "object")
            return;
        if (!schOrRef.validate)
            compileSchema.call(this, schOrRef);
        if (id === (0, resolve_1.normalizeId)(ref)) {
            const { schema } = schOrRef;
            const { schemaId } = this.opts;
            const schId = schema[schemaId];
            if (schId)
                baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
            return new SchemaEnv({ schema, schemaId, root, baseId });
        }
        return getJsonPointer.call(this, p, schOrRef);
    }
    compile$1.resolveSchema = resolveSchema$1;
    const PREVENT_SCOPE_CHANGE = new Set([
        "properties",
        "patternProperties",
        "enum",
        "dependencies",
        "definitions",
    ]);
    function getJsonPointer(parsedRef, { baseId, schema, root }) {
        var _a;
        if (((_a = parsedRef.fragment) === null || _a === void 0 ? void 0 : _a[0]) !== "/")
            return;
        for (const part of parsedRef.fragment.slice(1).split("/")) {
            if (typeof schema === "boolean")
                return;
            const partSchema = schema[(0, util_1$k.unescapeFragment)(part)];
            if (partSchema === undefined)
                return;
            schema = partSchema;
            // TODO PREVENT_SCOPE_CHANGE could be defined in keyword def?
            const schId = typeof schema === "object" && schema[this.opts.schemaId];
            if (!PREVENT_SCOPE_CHANGE.has(part) && schId) {
                baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
            }
        }
        let env;
        if (typeof schema != "boolean" && schema.$ref && !(0, util_1$k.schemaHasRulesButRef)(schema, this.RULES)) {
            const $ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schema.$ref);
            env = resolveSchema$1.call(this, root, $ref);
        }
        // even though resolution failed we need to return SchemaEnv to throw exception
        // so that compileAsync loads missing schema.
        const { schemaId } = this.opts;
        env = env || new SchemaEnv({ schema, schemaId, root, baseId });
        if (env.schema !== env.root.schema)
            return env;
        return undefined;
    }

    var $id$1 = "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#";
    var description = "Meta-schema for $data reference (JSON AnySchema extension proposal)";
    var type$1 = "object";
    var required$1 = [
    	"$data"
    ];
    var properties$3 = {
    	$data: {
    		type: "string",
    		anyOf: [
    			{
    				format: "relative-json-pointer"
    			},
    			{
    				format: "json-pointer"
    			}
    		]
    	}
    };
    var additionalProperties$1 = false;
    var require$$9 = {
    	$id: $id$1,
    	description: description,
    	type: type$1,
    	required: required$1,
    	properties: properties$3,
    	additionalProperties: additionalProperties$1
    };

    var uri$1 = {};

    Object.defineProperty(uri$1, "__esModule", { value: true });
    const uri = uri_all.exports;
    uri.code = 'require("ajv/dist/runtime/uri").default';
    uri$1.default = uri;

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
    var validate_1 = validate$1;
    Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function () { return validate_1.KeywordCxt; } });
    var codegen_1 = codegen;
    Object.defineProperty(exports, "_", { enumerable: true, get: function () { return codegen_1._; } });
    Object.defineProperty(exports, "str", { enumerable: true, get: function () { return codegen_1.str; } });
    Object.defineProperty(exports, "stringify", { enumerable: true, get: function () { return codegen_1.stringify; } });
    Object.defineProperty(exports, "nil", { enumerable: true, get: function () { return codegen_1.nil; } });
    Object.defineProperty(exports, "Name", { enumerable: true, get: function () { return codegen_1.Name; } });
    Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function () { return codegen_1.CodeGen; } });
    const validation_error_1 = validation_error;
    const ref_error_1 = ref_error;
    const rules_1 = rules;
    const compile_1 = compile$1;
    const codegen_2 = codegen;
    const resolve_1 = resolve$1;
    const dataType_1 = dataType;
    const util_1 = util;
    const $dataRefSchema = require$$9;
    const uri_1 = uri$1;
    const defaultRegExp = (str, flags) => new RegExp(str, flags);
    defaultRegExp.code = "new RegExp";
    const META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes"];
    const EXT_SCOPE_NAMES = new Set([
        "validate",
        "serialize",
        "parse",
        "wrapper",
        "root",
        "schema",
        "keyword",
        "pattern",
        "formats",
        "validate$data",
        "func",
        "obj",
        "Error",
    ]);
    const removedOptions = {
        errorDataPath: "",
        format: "`validateFormats: false` can be used instead.",
        nullable: '"nullable" keyword is supported by default.',
        jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
        extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
        missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
        processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
        sourceCode: "Use option `code: {source: true}`",
        strictDefaults: "It is default now, see option `strict`.",
        strictKeywords: "It is default now, see option `strict`.",
        uniqueItems: '"uniqueItems" keyword is always validated.',
        unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
        cache: "Map is used as cache, schema object as key.",
        serialize: "Map is used as cache, schema object as key.",
        ajvErrors: "It is default now.",
    };
    const deprecatedOptions = {
        ignoreKeywordsWithRef: "",
        jsPropertySyntax: "",
        unicode: '"minLength"/"maxLength" account for unicode characters by default.',
    };
    const MAX_EXPRESSION = 200;
    // eslint-disable-next-line complexity
    function requiredOptions(o) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
        const s = o.strict;
        const _optz = (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;
        const optimize = _optz === true || _optz === undefined ? 1 : _optz || 0;
        const regExp = (_c = (_b = o.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;
        const uriResolver = (_d = o.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;
        return {
            strictSchema: (_f = (_e = o.strictSchema) !== null && _e !== void 0 ? _e : s) !== null && _f !== void 0 ? _f : true,
            strictNumbers: (_h = (_g = o.strictNumbers) !== null && _g !== void 0 ? _g : s) !== null && _h !== void 0 ? _h : true,
            strictTypes: (_k = (_j = o.strictTypes) !== null && _j !== void 0 ? _j : s) !== null && _k !== void 0 ? _k : "log",
            strictTuples: (_m = (_l = o.strictTuples) !== null && _l !== void 0 ? _l : s) !== null && _m !== void 0 ? _m : "log",
            strictRequired: (_p = (_o = o.strictRequired) !== null && _o !== void 0 ? _o : s) !== null && _p !== void 0 ? _p : false,
            code: o.code ? { ...o.code, optimize, regExp } : { optimize, regExp },
            loopRequired: (_q = o.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,
            loopEnum: (_r = o.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,
            meta: (_s = o.meta) !== null && _s !== void 0 ? _s : true,
            messages: (_t = o.messages) !== null && _t !== void 0 ? _t : true,
            inlineRefs: (_u = o.inlineRefs) !== null && _u !== void 0 ? _u : true,
            schemaId: (_v = o.schemaId) !== null && _v !== void 0 ? _v : "$id",
            addUsedSchema: (_w = o.addUsedSchema) !== null && _w !== void 0 ? _w : true,
            validateSchema: (_x = o.validateSchema) !== null && _x !== void 0 ? _x : true,
            validateFormats: (_y = o.validateFormats) !== null && _y !== void 0 ? _y : true,
            unicodeRegExp: (_z = o.unicodeRegExp) !== null && _z !== void 0 ? _z : true,
            int32range: (_0 = o.int32range) !== null && _0 !== void 0 ? _0 : true,
            uriResolver: uriResolver,
        };
    }
    class Ajv {
        constructor(opts = {}) {
            this.schemas = {};
            this.refs = {};
            this.formats = {};
            this._compilations = new Set();
            this._loading = {};
            this._cache = new Map();
            opts = this.opts = { ...opts, ...requiredOptions(opts) };
            const { es5, lines } = this.opts.code;
            this.scope = new codegen_2.ValueScope({ scope: {}, prefixes: EXT_SCOPE_NAMES, es5, lines });
            this.logger = getLogger(opts.logger);
            const formatOpt = opts.validateFormats;
            opts.validateFormats = false;
            this.RULES = (0, rules_1.getRules)();
            checkOptions.call(this, removedOptions, opts, "NOT SUPPORTED");
            checkOptions.call(this, deprecatedOptions, opts, "DEPRECATED", "warn");
            this._metaOpts = getMetaSchemaOptions.call(this);
            if (opts.formats)
                addInitialFormats.call(this);
            this._addVocabularies();
            this._addDefaultMetaSchema();
            if (opts.keywords)
                addInitialKeywords.call(this, opts.keywords);
            if (typeof opts.meta == "object")
                this.addMetaSchema(opts.meta);
            addInitialSchemas.call(this);
            opts.validateFormats = formatOpt;
        }
        _addVocabularies() {
            this.addKeyword("$async");
        }
        _addDefaultMetaSchema() {
            const { $data, meta, schemaId } = this.opts;
            let _dataRefSchema = $dataRefSchema;
            if (schemaId === "id") {
                _dataRefSchema = { ...$dataRefSchema };
                _dataRefSchema.id = _dataRefSchema.$id;
                delete _dataRefSchema.$id;
            }
            if (meta && $data)
                this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);
        }
        defaultMeta() {
            const { meta, schemaId } = this.opts;
            return (this.opts.defaultMeta = typeof meta == "object" ? meta[schemaId] || meta : undefined);
        }
        validate(schemaKeyRef, // key, ref or schema object
        data // to be validated
        ) {
            let v;
            if (typeof schemaKeyRef == "string") {
                v = this.getSchema(schemaKeyRef);
                if (!v)
                    throw new Error(`no schema with key or ref "${schemaKeyRef}"`);
            }
            else {
                v = this.compile(schemaKeyRef);
            }
            const valid = v(data);
            if (!("$async" in v))
                this.errors = v.errors;
            return valid;
        }
        compile(schema, _meta) {
            const sch = this._addSchema(schema, _meta);
            return (sch.validate || this._compileSchemaEnv(sch));
        }
        compileAsync(schema, meta) {
            if (typeof this.opts.loadSchema != "function") {
                throw new Error("options.loadSchema should be a function");
            }
            const { loadSchema } = this.opts;
            return runCompileAsync.call(this, schema, meta);
            async function runCompileAsync(_schema, _meta) {
                await loadMetaSchema.call(this, _schema.$schema);
                const sch = this._addSchema(_schema, _meta);
                return sch.validate || _compileAsync.call(this, sch);
            }
            async function loadMetaSchema($ref) {
                if ($ref && !this.getSchema($ref)) {
                    await runCompileAsync.call(this, { $ref }, true);
                }
            }
            async function _compileAsync(sch) {
                try {
                    return this._compileSchemaEnv(sch);
                }
                catch (e) {
                    if (!(e instanceof ref_error_1.default))
                        throw e;
                    checkLoaded.call(this, e);
                    await loadMissingSchema.call(this, e.missingSchema);
                    return _compileAsync.call(this, sch);
                }
            }
            function checkLoaded({ missingSchema: ref, missingRef }) {
                if (this.refs[ref]) {
                    throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);
                }
            }
            async function loadMissingSchema(ref) {
                const _schema = await _loadSchema.call(this, ref);
                if (!this.refs[ref])
                    await loadMetaSchema.call(this, _schema.$schema);
                if (!this.refs[ref])
                    this.addSchema(_schema, ref, meta);
            }
            async function _loadSchema(ref) {
                const p = this._loading[ref];
                if (p)
                    return p;
                try {
                    return await (this._loading[ref] = loadSchema(ref));
                }
                finally {
                    delete this._loading[ref];
                }
            }
        }
        // Adds schema to the instance
        addSchema(schema, // If array is passed, `key` will be ignored
        key, // Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
        _meta, // true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
        _validateSchema = this.opts.validateSchema // false to skip schema validation. Used internally, option validateSchema should be used instead.
        ) {
            if (Array.isArray(schema)) {
                for (const sch of schema)
                    this.addSchema(sch, undefined, _meta, _validateSchema);
                return this;
            }
            let id;
            if (typeof schema === "object") {
                const { schemaId } = this.opts;
                id = schema[schemaId];
                if (id !== undefined && typeof id != "string") {
                    throw new Error(`schema ${schemaId} must be string`);
                }
            }
            key = (0, resolve_1.normalizeId)(key || id);
            this._checkUnique(key);
            this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);
            return this;
        }
        // Add schema that will be used to validate other schemas
        // options in META_IGNORE_OPTIONS are alway set to false
        addMetaSchema(schema, key, // schema key
        _validateSchema = this.opts.validateSchema // false to skip schema validation, can be used to override validateSchema option for meta-schema
        ) {
            this.addSchema(schema, key, true, _validateSchema);
            return this;
        }
        //  Validate schema against its meta-schema
        validateSchema(schema, throwOrLogError) {
            if (typeof schema == "boolean")
                return true;
            let $schema;
            $schema = schema.$schema;
            if ($schema !== undefined && typeof $schema != "string") {
                throw new Error("$schema must be a string");
            }
            $schema = $schema || this.opts.defaultMeta || this.defaultMeta();
            if (!$schema) {
                this.logger.warn("meta-schema not available");
                this.errors = null;
                return true;
            }
            const valid = this.validate($schema, schema);
            if (!valid && throwOrLogError) {
                const message = "schema is invalid: " + this.errorsText();
                if (this.opts.validateSchema === "log")
                    this.logger.error(message);
                else
                    throw new Error(message);
            }
            return valid;
        }
        // Get compiled schema by `key` or `ref`.
        // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)
        getSchema(keyRef) {
            let sch;
            while (typeof (sch = getSchEnv.call(this, keyRef)) == "string")
                keyRef = sch;
            if (sch === undefined) {
                const { schemaId } = this.opts;
                const root = new compile_1.SchemaEnv({ schema: {}, schemaId });
                sch = compile_1.resolveSchema.call(this, root, keyRef);
                if (!sch)
                    return;
                this.refs[keyRef] = sch;
            }
            return (sch.validate || this._compileSchemaEnv(sch));
        }
        // Remove cached schema(s).
        // If no parameter is passed all schemas but meta-schemas are removed.
        // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
        // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
        removeSchema(schemaKeyRef) {
            if (schemaKeyRef instanceof RegExp) {
                this._removeAllSchemas(this.schemas, schemaKeyRef);
                this._removeAllSchemas(this.refs, schemaKeyRef);
                return this;
            }
            switch (typeof schemaKeyRef) {
                case "undefined":
                    this._removeAllSchemas(this.schemas);
                    this._removeAllSchemas(this.refs);
                    this._cache.clear();
                    return this;
                case "string": {
                    const sch = getSchEnv.call(this, schemaKeyRef);
                    if (typeof sch == "object")
                        this._cache.delete(sch.schema);
                    delete this.schemas[schemaKeyRef];
                    delete this.refs[schemaKeyRef];
                    return this;
                }
                case "object": {
                    const cacheKey = schemaKeyRef;
                    this._cache.delete(cacheKey);
                    let id = schemaKeyRef[this.opts.schemaId];
                    if (id) {
                        id = (0, resolve_1.normalizeId)(id);
                        delete this.schemas[id];
                        delete this.refs[id];
                    }
                    return this;
                }
                default:
                    throw new Error("ajv.removeSchema: invalid parameter");
            }
        }
        // add "vocabulary" - a collection of keywords
        addVocabulary(definitions) {
            for (const def of definitions)
                this.addKeyword(def);
            return this;
        }
        addKeyword(kwdOrDef, def // deprecated
        ) {
            let keyword;
            if (typeof kwdOrDef == "string") {
                keyword = kwdOrDef;
                if (typeof def == "object") {
                    this.logger.warn("these parameters are deprecated, see docs for addKeyword");
                    def.keyword = keyword;
                }
            }
            else if (typeof kwdOrDef == "object" && def === undefined) {
                def = kwdOrDef;
                keyword = def.keyword;
                if (Array.isArray(keyword) && !keyword.length) {
                    throw new Error("addKeywords: keyword must be string or non-empty array");
                }
            }
            else {
                throw new Error("invalid addKeywords parameters");
            }
            checkKeyword.call(this, keyword, def);
            if (!def) {
                (0, util_1.eachItem)(keyword, (kwd) => addRule.call(this, kwd));
                return this;
            }
            keywordMetaschema.call(this, def);
            const definition = {
                ...def,
                type: (0, dataType_1.getJSONTypes)(def.type),
                schemaType: (0, dataType_1.getJSONTypes)(def.schemaType),
            };
            (0, util_1.eachItem)(keyword, definition.type.length === 0
                ? (k) => addRule.call(this, k, definition)
                : (k) => definition.type.forEach((t) => addRule.call(this, k, definition, t)));
            return this;
        }
        getKeyword(keyword) {
            const rule = this.RULES.all[keyword];
            return typeof rule == "object" ? rule.definition : !!rule;
        }
        // Remove keyword
        removeKeyword(keyword) {
            // TODO return type should be Ajv
            const { RULES } = this;
            delete RULES.keywords[keyword];
            delete RULES.all[keyword];
            for (const group of RULES.rules) {
                const i = group.rules.findIndex((rule) => rule.keyword === keyword);
                if (i >= 0)
                    group.rules.splice(i, 1);
            }
            return this;
        }
        // Add format
        addFormat(name, format) {
            if (typeof format == "string")
                format = new RegExp(format);
            this.formats[name] = format;
            return this;
        }
        errorsText(errors = this.errors, // optional array of validation errors
        { separator = ", ", dataVar = "data" } = {} // optional options with properties `separator` and `dataVar`
        ) {
            if (!errors || errors.length === 0)
                return "No errors";
            return errors
                .map((e) => `${dataVar}${e.instancePath} ${e.message}`)
                .reduce((text, msg) => text + separator + msg);
        }
        $dataMetaSchema(metaSchema, keywordsJsonPointers) {
            const rules = this.RULES.all;
            metaSchema = JSON.parse(JSON.stringify(metaSchema));
            for (const jsonPointer of keywordsJsonPointers) {
                const segments = jsonPointer.split("/").slice(1); // first segment is an empty string
                let keywords = metaSchema;
                for (const seg of segments)
                    keywords = keywords[seg];
                for (const key in rules) {
                    const rule = rules[key];
                    if (typeof rule != "object")
                        continue;
                    const { $data } = rule.definition;
                    const schema = keywords[key];
                    if ($data && schema)
                        keywords[key] = schemaOrData(schema);
                }
            }
            return metaSchema;
        }
        _removeAllSchemas(schemas, regex) {
            for (const keyRef in schemas) {
                const sch = schemas[keyRef];
                if (!regex || regex.test(keyRef)) {
                    if (typeof sch == "string") {
                        delete schemas[keyRef];
                    }
                    else if (sch && !sch.meta) {
                        this._cache.delete(sch.schema);
                        delete schemas[keyRef];
                    }
                }
            }
        }
        _addSchema(schema, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {
            let id;
            const { schemaId } = this.opts;
            if (typeof schema == "object") {
                id = schema[schemaId];
            }
            else {
                if (this.opts.jtd)
                    throw new Error("schema must be object");
                else if (typeof schema != "boolean")
                    throw new Error("schema must be object or boolean");
            }
            let sch = this._cache.get(schema);
            if (sch !== undefined)
                return sch;
            baseId = (0, resolve_1.normalizeId)(id || baseId);
            const localRefs = resolve_1.getSchemaRefs.call(this, schema, baseId);
            sch = new compile_1.SchemaEnv({ schema, schemaId, meta, baseId, localRefs });
            this._cache.set(sch.schema, sch);
            if (addSchema && !baseId.startsWith("#")) {
                // TODO atm it is allowed to overwrite schemas without id (instead of not adding them)
                if (baseId)
                    this._checkUnique(baseId);
                this.refs[baseId] = sch;
            }
            if (validateSchema)
                this.validateSchema(schema, true);
            return sch;
        }
        _checkUnique(id) {
            if (this.schemas[id] || this.refs[id]) {
                throw new Error(`schema with key or id "${id}" already exists`);
            }
        }
        _compileSchemaEnv(sch) {
            if (sch.meta)
                this._compileMetaSchema(sch);
            else
                compile_1.compileSchema.call(this, sch);
            /* istanbul ignore if */
            if (!sch.validate)
                throw new Error("ajv implementation error");
            return sch.validate;
        }
        _compileMetaSchema(sch) {
            const currentOpts = this.opts;
            this.opts = this._metaOpts;
            try {
                compile_1.compileSchema.call(this, sch);
            }
            finally {
                this.opts = currentOpts;
            }
        }
    }
    exports.default = Ajv;
    Ajv.ValidationError = validation_error_1.default;
    Ajv.MissingRefError = ref_error_1.default;
    function checkOptions(checkOpts, options, msg, log = "error") {
        for (const key in checkOpts) {
            const opt = key;
            if (opt in options)
                this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);
        }
    }
    function getSchEnv(keyRef) {
        keyRef = (0, resolve_1.normalizeId)(keyRef); // TODO tests fail without this line
        return this.schemas[keyRef] || this.refs[keyRef];
    }
    function addInitialSchemas() {
        const optsSchemas = this.opts.schemas;
        if (!optsSchemas)
            return;
        if (Array.isArray(optsSchemas))
            this.addSchema(optsSchemas);
        else
            for (const key in optsSchemas)
                this.addSchema(optsSchemas[key], key);
    }
    function addInitialFormats() {
        for (const name in this.opts.formats) {
            const format = this.opts.formats[name];
            if (format)
                this.addFormat(name, format);
        }
    }
    function addInitialKeywords(defs) {
        if (Array.isArray(defs)) {
            this.addVocabulary(defs);
            return;
        }
        this.logger.warn("keywords option as map is deprecated, pass array");
        for (const keyword in defs) {
            const def = defs[keyword];
            if (!def.keyword)
                def.keyword = keyword;
            this.addKeyword(def);
        }
    }
    function getMetaSchemaOptions() {
        const metaOpts = { ...this.opts };
        for (const opt of META_IGNORE_OPTIONS)
            delete metaOpts[opt];
        return metaOpts;
    }
    const noLogs = { log() { }, warn() { }, error() { } };
    function getLogger(logger) {
        if (logger === false)
            return noLogs;
        if (logger === undefined)
            return console;
        if (logger.log && logger.warn && logger.error)
            return logger;
        throw new Error("logger must implement log, warn and error methods");
    }
    const KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;
    function checkKeyword(keyword, def) {
        const { RULES } = this;
        (0, util_1.eachItem)(keyword, (kwd) => {
            if (RULES.keywords[kwd])
                throw new Error(`Keyword ${kwd} is already defined`);
            if (!KEYWORD_NAME.test(kwd))
                throw new Error(`Keyword ${kwd} has invalid name`);
        });
        if (!def)
            return;
        if (def.$data && !("code" in def || "validate" in def)) {
            throw new Error('$data keyword must have "code" or "validate" function');
        }
    }
    function addRule(keyword, definition, dataType) {
        var _a;
        const post = definition === null || definition === void 0 ? void 0 : definition.post;
        if (dataType && post)
            throw new Error('keyword with "post" flag cannot have "type"');
        const { RULES } = this;
        let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t }) => t === dataType);
        if (!ruleGroup) {
            ruleGroup = { type: dataType, rules: [] };
            RULES.rules.push(ruleGroup);
        }
        RULES.keywords[keyword] = true;
        if (!definition)
            return;
        const rule = {
            keyword,
            definition: {
                ...definition,
                type: (0, dataType_1.getJSONTypes)(definition.type),
                schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType),
            },
        };
        if (definition.before)
            addBeforeRule.call(this, ruleGroup, rule, definition.before);
        else
            ruleGroup.rules.push(rule);
        RULES.all[keyword] = rule;
        (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach((kwd) => this.addKeyword(kwd));
    }
    function addBeforeRule(ruleGroup, rule, before) {
        const i = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before);
        if (i >= 0) {
            ruleGroup.rules.splice(i, 0, rule);
        }
        else {
            ruleGroup.rules.push(rule);
            this.logger.warn(`rule ${before} is not defined`);
        }
    }
    function keywordMetaschema(def) {
        let { metaSchema } = def;
        if (metaSchema === undefined)
            return;
        if (def.$data && this.opts.$data)
            metaSchema = schemaOrData(metaSchema);
        def.validateSchema = this.compile(metaSchema, true);
    }
    const $dataRef = {
        $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",
    };
    function schemaOrData(schema) {
        return { anyOf: [schema, $dataRef] };
    }

    }(core$2));

    var draft7 = {};

    var core$1 = {};

    var id = {};

    Object.defineProperty(id, "__esModule", { value: true });
    const def$s = {
        keyword: "id",
        code() {
            throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
        },
    };
    id.default = def$s;

    var ref = {};

    Object.defineProperty(ref, "__esModule", { value: true });
    ref.callRef = ref.getValidate = void 0;
    const ref_error_1 = ref_error;
    const code_1$8 = code;
    const codegen_1$l = codegen;
    const names_1$1 = names$1;
    const compile_1$1 = compile$1;
    const util_1$j = util;
    const def$r = {
        keyword: "$ref",
        schemaType: "string",
        code(cxt) {
            const { gen, schema: $ref, it } = cxt;
            const { baseId, schemaEnv: env, validateName, opts, self } = it;
            const { root } = env;
            if (($ref === "#" || $ref === "#/") && baseId === root.baseId)
                return callRootRef();
            const schOrEnv = compile_1$1.resolveRef.call(self, root, baseId, $ref);
            if (schOrEnv === undefined)
                throw new ref_error_1.default(it.opts.uriResolver, baseId, $ref);
            if (schOrEnv instanceof compile_1$1.SchemaEnv)
                return callValidate(schOrEnv);
            return inlineRefSchema(schOrEnv);
            function callRootRef() {
                if (env === root)
                    return callRef(cxt, validateName, env, env.$async);
                const rootName = gen.scopeValue("root", { ref: root });
                return callRef(cxt, (0, codegen_1$l._) `${rootName}.validate`, root, root.$async);
            }
            function callValidate(sch) {
                const v = getValidate(cxt, sch);
                callRef(cxt, v, sch, sch.$async);
            }
            function inlineRefSchema(sch) {
                const schName = gen.scopeValue("schema", opts.code.source === true ? { ref: sch, code: (0, codegen_1$l.stringify)(sch) } : { ref: sch });
                const valid = gen.name("valid");
                const schCxt = cxt.subschema({
                    schema: sch,
                    dataTypes: [],
                    schemaPath: codegen_1$l.nil,
                    topSchemaRef: schName,
                    errSchemaPath: $ref,
                }, valid);
                cxt.mergeEvaluated(schCxt);
                cxt.ok(valid);
            }
        },
    };
    function getValidate(cxt, sch) {
        const { gen } = cxt;
        return sch.validate
            ? gen.scopeValue("validate", { ref: sch.validate })
            : (0, codegen_1$l._) `${gen.scopeValue("wrapper", { ref: sch })}.validate`;
    }
    ref.getValidate = getValidate;
    function callRef(cxt, v, sch, $async) {
        const { gen, it } = cxt;
        const { allErrors, schemaEnv: env, opts } = it;
        const passCxt = opts.passContext ? names_1$1.default.this : codegen_1$l.nil;
        if ($async)
            callAsyncRef();
        else
            callSyncRef();
        function callAsyncRef() {
            if (!env.$async)
                throw new Error("async schema referenced by sync schema");
            const valid = gen.let("valid");
            gen.try(() => {
                gen.code((0, codegen_1$l._) `await ${(0, code_1$8.callValidateCode)(cxt, v, passCxt)}`);
                addEvaluatedFrom(v); // TODO will not work with async, it has to be returned with the result
                if (!allErrors)
                    gen.assign(valid, true);
            }, (e) => {
                gen.if((0, codegen_1$l._) `!(${e} instanceof ${it.ValidationError})`, () => gen.throw(e));
                addErrorsFrom(e);
                if (!allErrors)
                    gen.assign(valid, false);
            });
            cxt.ok(valid);
        }
        function callSyncRef() {
            cxt.result((0, code_1$8.callValidateCode)(cxt, v, passCxt), () => addEvaluatedFrom(v), () => addErrorsFrom(v));
        }
        function addErrorsFrom(source) {
            const errs = (0, codegen_1$l._) `${source}.errors`;
            gen.assign(names_1$1.default.vErrors, (0, codegen_1$l._) `${names_1$1.default.vErrors} === null ? ${errs} : ${names_1$1.default.vErrors}.concat(${errs})`); // TODO tagged
            gen.assign(names_1$1.default.errors, (0, codegen_1$l._) `${names_1$1.default.vErrors}.length`);
        }
        function addEvaluatedFrom(source) {
            var _a;
            if (!it.opts.unevaluated)
                return;
            const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated;
            // TODO refactor
            if (it.props !== true) {
                if (schEvaluated && !schEvaluated.dynamicProps) {
                    if (schEvaluated.props !== undefined) {
                        it.props = util_1$j.mergeEvaluated.props(gen, schEvaluated.props, it.props);
                    }
                }
                else {
                    const props = gen.var("props", (0, codegen_1$l._) `${source}.evaluated.props`);
                    it.props = util_1$j.mergeEvaluated.props(gen, props, it.props, codegen_1$l.Name);
                }
            }
            if (it.items !== true) {
                if (schEvaluated && !schEvaluated.dynamicItems) {
                    if (schEvaluated.items !== undefined) {
                        it.items = util_1$j.mergeEvaluated.items(gen, schEvaluated.items, it.items);
                    }
                }
                else {
                    const items = gen.var("items", (0, codegen_1$l._) `${source}.evaluated.items`);
                    it.items = util_1$j.mergeEvaluated.items(gen, items, it.items, codegen_1$l.Name);
                }
            }
        }
    }
    ref.callRef = callRef;
    ref.default = def$r;

    Object.defineProperty(core$1, "__esModule", { value: true });
    const id_1 = id;
    const ref_1 = ref;
    const core = [
        "$schema",
        "$id",
        "$defs",
        "$vocabulary",
        { keyword: "$comment" },
        "definitions",
        id_1.default,
        ref_1.default,
    ];
    core$1.default = core;

    var validation$1 = {};

    var limitNumber = {};

    Object.defineProperty(limitNumber, "__esModule", { value: true });
    const codegen_1$k = codegen;
    const ops = codegen_1$k.operators;
    const KWDs = {
        maximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
        minimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
        exclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
        exclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE },
    };
    const error$i = {
        message: ({ keyword, schemaCode }) => (0, codegen_1$k.str) `must be ${KWDs[keyword].okStr} ${schemaCode}`,
        params: ({ keyword, schemaCode }) => (0, codegen_1$k._) `{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`,
    };
    const def$q = {
        keyword: Object.keys(KWDs),
        type: "number",
        schemaType: "number",
        $data: true,
        error: error$i,
        code(cxt) {
            const { keyword, data, schemaCode } = cxt;
            cxt.fail$data((0, codegen_1$k._) `${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);
        },
    };
    limitNumber.default = def$q;

    var multipleOf = {};

    Object.defineProperty(multipleOf, "__esModule", { value: true });
    const codegen_1$j = codegen;
    const error$h = {
        message: ({ schemaCode }) => (0, codegen_1$j.str) `must be multiple of ${schemaCode}`,
        params: ({ schemaCode }) => (0, codegen_1$j._) `{multipleOf: ${schemaCode}}`,
    };
    const def$p = {
        keyword: "multipleOf",
        type: "number",
        schemaType: "number",
        $data: true,
        error: error$h,
        code(cxt) {
            const { gen, data, schemaCode, it } = cxt;
            // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)
            const prec = it.opts.multipleOfPrecision;
            const res = gen.let("res");
            const invalid = prec
                ? (0, codegen_1$j._) `Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}`
                : (0, codegen_1$j._) `${res} !== parseInt(${res})`;
            cxt.fail$data((0, codegen_1$j._) `(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);
        },
    };
    multipleOf.default = def$p;

    var limitLength = {};

    var ucs2length$1 = {};

    Object.defineProperty(ucs2length$1, "__esModule", { value: true });
    // https://mathiasbynens.be/notes/javascript-encoding
    // https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
    function ucs2length(str) {
        const len = str.length;
        let length = 0;
        let pos = 0;
        let value;
        while (pos < len) {
            length++;
            value = str.charCodeAt(pos++);
            if (value >= 0xd800 && value <= 0xdbff && pos < len) {
                // high surrogate, and there is a next character
                value = str.charCodeAt(pos);
                if ((value & 0xfc00) === 0xdc00)
                    pos++; // low surrogate
            }
        }
        return length;
    }
    ucs2length$1.default = ucs2length;
    ucs2length.code = 'require("ajv/dist/runtime/ucs2length").default';

    Object.defineProperty(limitLength, "__esModule", { value: true });
    const codegen_1$i = codegen;
    const util_1$i = util;
    const ucs2length_1 = ucs2length$1;
    const error$g = {
        message({ keyword, schemaCode }) {
            const comp = keyword === "maxLength" ? "more" : "fewer";
            return (0, codegen_1$i.str) `must NOT have ${comp} than ${schemaCode} characters`;
        },
        params: ({ schemaCode }) => (0, codegen_1$i._) `{limit: ${schemaCode}}`,
    };
    const def$o = {
        keyword: ["maxLength", "minLength"],
        type: "string",
        schemaType: "number",
        $data: true,
        error: error$g,
        code(cxt) {
            const { keyword, data, schemaCode, it } = cxt;
            const op = keyword === "maxLength" ? codegen_1$i.operators.GT : codegen_1$i.operators.LT;
            const len = it.opts.unicode === false ? (0, codegen_1$i._) `${data}.length` : (0, codegen_1$i._) `${(0, util_1$i.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;
            cxt.fail$data((0, codegen_1$i._) `${len} ${op} ${schemaCode}`);
        },
    };
    limitLength.default = def$o;

    var pattern = {};

    Object.defineProperty(pattern, "__esModule", { value: true });
    const code_1$7 = code;
    const codegen_1$h = codegen;
    const error$f = {
        message: ({ schemaCode }) => (0, codegen_1$h.str) `must match pattern "${schemaCode}"`,
        params: ({ schemaCode }) => (0, codegen_1$h._) `{pattern: ${schemaCode}}`,
    };
    const def$n = {
        keyword: "pattern",
        type: "string",
        schemaType: "string",
        $data: true,
        error: error$f,
        code(cxt) {
            const { data, $data, schema, schemaCode, it } = cxt;
            // TODO regexp should be wrapped in try/catchs
            const u = it.opts.unicodeRegExp ? "u" : "";
            const regExp = $data ? (0, codegen_1$h._) `(new RegExp(${schemaCode}, ${u}))` : (0, code_1$7.usePattern)(cxt, schema);
            cxt.fail$data((0, codegen_1$h._) `!${regExp}.test(${data})`);
        },
    };
    pattern.default = def$n;

    var limitProperties = {};

    Object.defineProperty(limitProperties, "__esModule", { value: true });
    const codegen_1$g = codegen;
    const error$e = {
        message({ keyword, schemaCode }) {
            const comp = keyword === "maxProperties" ? "more" : "fewer";
            return (0, codegen_1$g.str) `must NOT have ${comp} than ${schemaCode} properties`;
        },
        params: ({ schemaCode }) => (0, codegen_1$g._) `{limit: ${schemaCode}}`,
    };
    const def$m = {
        keyword: ["maxProperties", "minProperties"],
        type: "object",
        schemaType: "number",
        $data: true,
        error: error$e,
        code(cxt) {
            const { keyword, data, schemaCode } = cxt;
            const op = keyword === "maxProperties" ? codegen_1$g.operators.GT : codegen_1$g.operators.LT;
            cxt.fail$data((0, codegen_1$g._) `Object.keys(${data}).length ${op} ${schemaCode}`);
        },
    };
    limitProperties.default = def$m;

    var required = {};

    Object.defineProperty(required, "__esModule", { value: true });
    const code_1$6 = code;
    const codegen_1$f = codegen;
    const util_1$h = util;
    const error$d = {
        message: ({ params: { missingProperty } }) => (0, codegen_1$f.str) `must have required property '${missingProperty}'`,
        params: ({ params: { missingProperty } }) => (0, codegen_1$f._) `{missingProperty: ${missingProperty}}`,
    };
    const def$l = {
        keyword: "required",
        type: "object",
        schemaType: "array",
        $data: true,
        error: error$d,
        code(cxt) {
            const { gen, schema, schemaCode, data, $data, it } = cxt;
            const { opts } = it;
            if (!$data && schema.length === 0)
                return;
            const useLoop = schema.length >= opts.loopRequired;
            if (it.allErrors)
                allErrorsMode();
            else
                exitOnErrorMode();
            if (opts.strictRequired) {
                const props = cxt.parentSchema.properties;
                const { definedProperties } = cxt.it;
                for (const requiredKey of schema) {
                    if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === undefined && !definedProperties.has(requiredKey)) {
                        const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
                        const msg = `required property "${requiredKey}" is not defined at "${schemaPath}" (strictRequired)`;
                        (0, util_1$h.checkStrictMode)(it, msg, it.opts.strictRequired);
                    }
                }
            }
            function allErrorsMode() {
                if (useLoop || $data) {
                    cxt.block$data(codegen_1$f.nil, loopAllRequired);
                }
                else {
                    for (const prop of schema) {
                        (0, code_1$6.checkReportMissingProp)(cxt, prop);
                    }
                }
            }
            function exitOnErrorMode() {
                const missing = gen.let("missing");
                if (useLoop || $data) {
                    const valid = gen.let("valid", true);
                    cxt.block$data(valid, () => loopUntilMissing(missing, valid));
                    cxt.ok(valid);
                }
                else {
                    gen.if((0, code_1$6.checkMissingProp)(cxt, schema, missing));
                    (0, code_1$6.reportMissingProp)(cxt, missing);
                    gen.else();
                }
            }
            function loopAllRequired() {
                gen.forOf("prop", schemaCode, (prop) => {
                    cxt.setParams({ missingProperty: prop });
                    gen.if((0, code_1$6.noPropertyInData)(gen, data, prop, opts.ownProperties), () => cxt.error());
                });
            }
            function loopUntilMissing(missing, valid) {
                cxt.setParams({ missingProperty: missing });
                gen.forOf(missing, schemaCode, () => {
                    gen.assign(valid, (0, code_1$6.propertyInData)(gen, data, missing, opts.ownProperties));
                    gen.if((0, codegen_1$f.not)(valid), () => {
                        cxt.error();
                        gen.break();
                    });
                }, codegen_1$f.nil);
            }
        },
    };
    required.default = def$l;

    var limitItems = {};

    Object.defineProperty(limitItems, "__esModule", { value: true });
    const codegen_1$e = codegen;
    const error$c = {
        message({ keyword, schemaCode }) {
            const comp = keyword === "maxItems" ? "more" : "fewer";
            return (0, codegen_1$e.str) `must NOT have ${comp} than ${schemaCode} items`;
        },
        params: ({ schemaCode }) => (0, codegen_1$e._) `{limit: ${schemaCode}}`,
    };
    const def$k = {
        keyword: ["maxItems", "minItems"],
        type: "array",
        schemaType: "number",
        $data: true,
        error: error$c,
        code(cxt) {
            const { keyword, data, schemaCode } = cxt;
            const op = keyword === "maxItems" ? codegen_1$e.operators.GT : codegen_1$e.operators.LT;
            cxt.fail$data((0, codegen_1$e._) `${data}.length ${op} ${schemaCode}`);
        },
    };
    limitItems.default = def$k;

    var uniqueItems = {};

    var equal$1 = {};

    Object.defineProperty(equal$1, "__esModule", { value: true });
    // https://github.com/ajv-validator/ajv/issues/889
    const equal = fastDeepEqual;
    equal.code = 'require("ajv/dist/runtime/equal").default';
    equal$1.default = equal;

    Object.defineProperty(uniqueItems, "__esModule", { value: true });
    const dataType_1 = dataType;
    const codegen_1$d = codegen;
    const util_1$g = util;
    const equal_1$2 = equal$1;
    const error$b = {
        message: ({ params: { i, j } }) => (0, codegen_1$d.str) `must NOT have duplicate items (items ## ${j} and ${i} are identical)`,
        params: ({ params: { i, j } }) => (0, codegen_1$d._) `{i: ${i}, j: ${j}}`,
    };
    const def$j = {
        keyword: "uniqueItems",
        type: "array",
        schemaType: "boolean",
        $data: true,
        error: error$b,
        code(cxt) {
            const { gen, data, $data, schema, parentSchema, schemaCode, it } = cxt;
            if (!$data && !schema)
                return;
            const valid = gen.let("valid");
            const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];
            cxt.block$data(valid, validateUniqueItems, (0, codegen_1$d._) `${schemaCode} === false`);
            cxt.ok(valid);
            function validateUniqueItems() {
                const i = gen.let("i", (0, codegen_1$d._) `${data}.length`);
                const j = gen.let("j");
                cxt.setParams({ i, j });
                gen.assign(valid, true);
                gen.if((0, codegen_1$d._) `${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j));
            }
            function canOptimize() {
                return itemTypes.length > 0 && !itemTypes.some((t) => t === "object" || t === "array");
            }
            function loopN(i, j) {
                const item = gen.name("item");
                const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);
                const indices = gen.const("indices", (0, codegen_1$d._) `{}`);
                gen.for((0, codegen_1$d._) `;${i}--;`, () => {
                    gen.let(item, (0, codegen_1$d._) `${data}[${i}]`);
                    gen.if(wrongType, (0, codegen_1$d._) `continue`);
                    if (itemTypes.length > 1)
                        gen.if((0, codegen_1$d._) `typeof ${item} == "string"`, (0, codegen_1$d._) `${item} += "_"`);
                    gen
                        .if((0, codegen_1$d._) `typeof ${indices}[${item}] == "number"`, () => {
                        gen.assign(j, (0, codegen_1$d._) `${indices}[${item}]`);
                        cxt.error();
                        gen.assign(valid, false).break();
                    })
                        .code((0, codegen_1$d._) `${indices}[${item}] = ${i}`);
                });
            }
            function loopN2(i, j) {
                const eql = (0, util_1$g.useFunc)(gen, equal_1$2.default);
                const outer = gen.name("outer");
                gen.label(outer).for((0, codegen_1$d._) `;${i}--;`, () => gen.for((0, codegen_1$d._) `${j} = ${i}; ${j}--;`, () => gen.if((0, codegen_1$d._) `${eql}(${data}[${i}], ${data}[${j}])`, () => {
                    cxt.error();
                    gen.assign(valid, false).break(outer);
                })));
            }
        },
    };
    uniqueItems.default = def$j;

    var _const = {};

    Object.defineProperty(_const, "__esModule", { value: true });
    const codegen_1$c = codegen;
    const util_1$f = util;
    const equal_1$1 = equal$1;
    const error$a = {
        message: "must be equal to constant",
        params: ({ schemaCode }) => (0, codegen_1$c._) `{allowedValue: ${schemaCode}}`,
    };
    const def$i = {
        keyword: "const",
        $data: true,
        error: error$a,
        code(cxt) {
            const { gen, data, $data, schemaCode, schema } = cxt;
            if ($data || (schema && typeof schema == "object")) {
                cxt.fail$data((0, codegen_1$c._) `!${(0, util_1$f.useFunc)(gen, equal_1$1.default)}(${data}, ${schemaCode})`);
            }
            else {
                cxt.fail((0, codegen_1$c._) `${schema} !== ${data}`);
            }
        },
    };
    _const.default = def$i;

    var _enum = {};

    Object.defineProperty(_enum, "__esModule", { value: true });
    const codegen_1$b = codegen;
    const util_1$e = util;
    const equal_1 = equal$1;
    const error$9 = {
        message: "must be equal to one of the allowed values",
        params: ({ schemaCode }) => (0, codegen_1$b._) `{allowedValues: ${schemaCode}}`,
    };
    const def$h = {
        keyword: "enum",
        schemaType: "array",
        $data: true,
        error: error$9,
        code(cxt) {
            const { gen, data, $data, schema, schemaCode, it } = cxt;
            if (!$data && schema.length === 0)
                throw new Error("enum must have non-empty array");
            const useLoop = schema.length >= it.opts.loopEnum;
            let eql;
            const getEql = () => (eql !== null && eql !== void 0 ? eql : (eql = (0, util_1$e.useFunc)(gen, equal_1.default)));
            let valid;
            if (useLoop || $data) {
                valid = gen.let("valid");
                cxt.block$data(valid, loopEnum);
            }
            else {
                /* istanbul ignore if */
                if (!Array.isArray(schema))
                    throw new Error("ajv implementation error");
                const vSchema = gen.const("vSchema", schemaCode);
                valid = (0, codegen_1$b.or)(...schema.map((_x, i) => equalCode(vSchema, i)));
            }
            cxt.pass(valid);
            function loopEnum() {
                gen.assign(valid, false);
                gen.forOf("v", schemaCode, (v) => gen.if((0, codegen_1$b._) `${getEql()}(${data}, ${v})`, () => gen.assign(valid, true).break()));
            }
            function equalCode(vSchema, i) {
                const sch = schema[i];
                return typeof sch === "object" && sch !== null
                    ? (0, codegen_1$b._) `${getEql()}(${data}, ${vSchema}[${i}])`
                    : (0, codegen_1$b._) `${data} === ${sch}`;
            }
        },
    };
    _enum.default = def$h;

    Object.defineProperty(validation$1, "__esModule", { value: true });
    const limitNumber_1 = limitNumber;
    const multipleOf_1 = multipleOf;
    const limitLength_1 = limitLength;
    const pattern_1 = pattern;
    const limitProperties_1 = limitProperties;
    const required_1 = required;
    const limitItems_1 = limitItems;
    const uniqueItems_1 = uniqueItems;
    const const_1 = _const;
    const enum_1 = _enum;
    const validation = [
        // number
        limitNumber_1.default,
        multipleOf_1.default,
        // string
        limitLength_1.default,
        pattern_1.default,
        // object
        limitProperties_1.default,
        required_1.default,
        // array
        limitItems_1.default,
        uniqueItems_1.default,
        // any
        { keyword: "type", schemaType: ["string", "array"] },
        { keyword: "nullable", schemaType: "boolean" },
        const_1.default,
        enum_1.default,
    ];
    validation$1.default = validation;

    var applicator = {};

    var additionalItems = {};

    Object.defineProperty(additionalItems, "__esModule", { value: true });
    additionalItems.validateAdditionalItems = void 0;
    const codegen_1$a = codegen;
    const util_1$d = util;
    const error$8 = {
        message: ({ params: { len } }) => (0, codegen_1$a.str) `must NOT have more than ${len} items`,
        params: ({ params: { len } }) => (0, codegen_1$a._) `{limit: ${len}}`,
    };
    const def$g = {
        keyword: "additionalItems",
        type: "array",
        schemaType: ["boolean", "object"],
        before: "uniqueItems",
        error: error$8,
        code(cxt) {
            const { parentSchema, it } = cxt;
            const { items } = parentSchema;
            if (!Array.isArray(items)) {
                (0, util_1$d.checkStrictMode)(it, '"additionalItems" is ignored when "items" is not an array of schemas');
                return;
            }
            validateAdditionalItems(cxt, items);
        },
    };
    function validateAdditionalItems(cxt, items) {
        const { gen, schema, data, keyword, it } = cxt;
        it.items = true;
        const len = gen.const("len", (0, codegen_1$a._) `${data}.length`);
        if (schema === false) {
            cxt.setParams({ len: items.length });
            cxt.pass((0, codegen_1$a._) `${len} <= ${items.length}`);
        }
        else if (typeof schema == "object" && !(0, util_1$d.alwaysValidSchema)(it, schema)) {
            const valid = gen.var("valid", (0, codegen_1$a._) `${len} <= ${items.length}`); // TODO var
            gen.if((0, codegen_1$a.not)(valid), () => validateItems(valid));
            cxt.ok(valid);
        }
        function validateItems(valid) {
            gen.forRange("i", items.length, len, (i) => {
                cxt.subschema({ keyword, dataProp: i, dataPropType: util_1$d.Type.Num }, valid);
                if (!it.allErrors)
                    gen.if((0, codegen_1$a.not)(valid), () => gen.break());
            });
        }
    }
    additionalItems.validateAdditionalItems = validateAdditionalItems;
    additionalItems.default = def$g;

    var prefixItems = {};

    var items = {};

    Object.defineProperty(items, "__esModule", { value: true });
    items.validateTuple = void 0;
    const codegen_1$9 = codegen;
    const util_1$c = util;
    const code_1$5 = code;
    const def$f = {
        keyword: "items",
        type: "array",
        schemaType: ["object", "array", "boolean"],
        before: "uniqueItems",
        code(cxt) {
            const { schema, it } = cxt;
            if (Array.isArray(schema))
                return validateTuple(cxt, "additionalItems", schema);
            it.items = true;
            if ((0, util_1$c.alwaysValidSchema)(it, schema))
                return;
            cxt.ok((0, code_1$5.validateArray)(cxt));
        },
    };
    function validateTuple(cxt, extraItems, schArr = cxt.schema) {
        const { gen, parentSchema, data, keyword, it } = cxt;
        checkStrictTuple(parentSchema);
        if (it.opts.unevaluated && schArr.length && it.items !== true) {
            it.items = util_1$c.mergeEvaluated.items(gen, schArr.length, it.items);
        }
        const valid = gen.name("valid");
        const len = gen.const("len", (0, codegen_1$9._) `${data}.length`);
        schArr.forEach((sch, i) => {
            if ((0, util_1$c.alwaysValidSchema)(it, sch))
                return;
            gen.if((0, codegen_1$9._) `${len} > ${i}`, () => cxt.subschema({
                keyword,
                schemaProp: i,
                dataProp: i,
            }, valid));
            cxt.ok(valid);
        });
        function checkStrictTuple(sch) {
            const { opts, errSchemaPath } = it;
            const l = schArr.length;
            const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);
            if (opts.strictTuples && !fullTuple) {
                const msg = `"${keyword}" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path "${errSchemaPath}"`;
                (0, util_1$c.checkStrictMode)(it, msg, opts.strictTuples);
            }
        }
    }
    items.validateTuple = validateTuple;
    items.default = def$f;

    Object.defineProperty(prefixItems, "__esModule", { value: true });
    const items_1$1 = items;
    const def$e = {
        keyword: "prefixItems",
        type: "array",
        schemaType: ["array"],
        before: "uniqueItems",
        code: (cxt) => (0, items_1$1.validateTuple)(cxt, "items"),
    };
    prefixItems.default = def$e;

    var items2020 = {};

    Object.defineProperty(items2020, "__esModule", { value: true });
    const codegen_1$8 = codegen;
    const util_1$b = util;
    const code_1$4 = code;
    const additionalItems_1$1 = additionalItems;
    const error$7 = {
        message: ({ params: { len } }) => (0, codegen_1$8.str) `must NOT have more than ${len} items`,
        params: ({ params: { len } }) => (0, codegen_1$8._) `{limit: ${len}}`,
    };
    const def$d = {
        keyword: "items",
        type: "array",
        schemaType: ["object", "boolean"],
        before: "uniqueItems",
        error: error$7,
        code(cxt) {
            const { schema, parentSchema, it } = cxt;
            const { prefixItems } = parentSchema;
            it.items = true;
            if ((0, util_1$b.alwaysValidSchema)(it, schema))
                return;
            if (prefixItems)
                (0, additionalItems_1$1.validateAdditionalItems)(cxt, prefixItems);
            else
                cxt.ok((0, code_1$4.validateArray)(cxt));
        },
    };
    items2020.default = def$d;

    var contains$1 = {};

    Object.defineProperty(contains$1, "__esModule", { value: true });
    const codegen_1$7 = codegen;
    const util_1$a = util;
    const error$6 = {
        message: ({ params: { min, max } }) => max === undefined
            ? (0, codegen_1$7.str) `must contain at least ${min} valid item(s)`
            : (0, codegen_1$7.str) `must contain at least ${min} and no more than ${max} valid item(s)`,
        params: ({ params: { min, max } }) => max === undefined ? (0, codegen_1$7._) `{minContains: ${min}}` : (0, codegen_1$7._) `{minContains: ${min}, maxContains: ${max}}`,
    };
    const def$c = {
        keyword: "contains",
        type: "array",
        schemaType: ["object", "boolean"],
        before: "uniqueItems",
        trackErrors: true,
        error: error$6,
        code(cxt) {
            const { gen, schema, parentSchema, data, it } = cxt;
            let min;
            let max;
            const { minContains, maxContains } = parentSchema;
            if (it.opts.next) {
                min = minContains === undefined ? 1 : minContains;
                max = maxContains;
            }
            else {
                min = 1;
            }
            const len = gen.const("len", (0, codegen_1$7._) `${data}.length`);
            cxt.setParams({ min, max });
            if (max === undefined && min === 0) {
                (0, util_1$a.checkStrictMode)(it, `"minContains" == 0 without "maxContains": "contains" keyword ignored`);
                return;
            }
            if (max !== undefined && min > max) {
                (0, util_1$a.checkStrictMode)(it, `"minContains" > "maxContains" is always invalid`);
                cxt.fail();
                return;
            }
            if ((0, util_1$a.alwaysValidSchema)(it, schema)) {
                let cond = (0, codegen_1$7._) `${len} >= ${min}`;
                if (max !== undefined)
                    cond = (0, codegen_1$7._) `${cond} && ${len} <= ${max}`;
                cxt.pass(cond);
                return;
            }
            it.items = true;
            const valid = gen.name("valid");
            if (max === undefined && min === 1) {
                validateItems(valid, () => gen.if(valid, () => gen.break()));
            }
            else if (min === 0) {
                gen.let(valid, true);
                if (max !== undefined)
                    gen.if((0, codegen_1$7._) `${data}.length > 0`, validateItemsWithCount);
            }
            else {
                gen.let(valid, false);
                validateItemsWithCount();
            }
            cxt.result(valid, () => cxt.reset());
            function validateItemsWithCount() {
                const schValid = gen.name("_valid");
                const count = gen.let("count", 0);
                validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));
            }
            function validateItems(_valid, block) {
                gen.forRange("i", 0, len, (i) => {
                    cxt.subschema({
                        keyword: "contains",
                        dataProp: i,
                        dataPropType: util_1$a.Type.Num,
                        compositeRule: true,
                    }, _valid);
                    block();
                });
            }
            function checkLimits(count) {
                gen.code((0, codegen_1$7._) `${count}++`);
                if (max === undefined) {
                    gen.if((0, codegen_1$7._) `${count} >= ${min}`, () => gen.assign(valid, true).break());
                }
                else {
                    gen.if((0, codegen_1$7._) `${count} > ${max}`, () => gen.assign(valid, false).break());
                    if (min === 1)
                        gen.assign(valid, true);
                    else
                        gen.if((0, codegen_1$7._) `${count} >= ${min}`, () => gen.assign(valid, true));
                }
            }
        },
    };
    contains$1.default = def$c;

    var dependencies = {};

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;
    const codegen_1 = codegen;
    const util_1 = util;
    const code_1 = code;
    exports.error = {
        message: ({ params: { property, depsCount, deps } }) => {
            const property_ies = depsCount === 1 ? "property" : "properties";
            return (0, codegen_1.str) `must have ${property_ies} ${deps} when property ${property} is present`;
        },
        params: ({ params: { property, depsCount, deps, missingProperty } }) => (0, codegen_1._) `{property: ${property},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}`, // TODO change to reference
    };
    const def = {
        keyword: "dependencies",
        type: "object",
        schemaType: "object",
        error: exports.error,
        code(cxt) {
            const [propDeps, schDeps] = splitDependencies(cxt);
            validatePropertyDeps(cxt, propDeps);
            validateSchemaDeps(cxt, schDeps);
        },
    };
    function splitDependencies({ schema }) {
        const propertyDeps = {};
        const schemaDeps = {};
        for (const key in schema) {
            if (key === "__proto__")
                continue;
            const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;
            deps[key] = schema[key];
        }
        return [propertyDeps, schemaDeps];
    }
    function validatePropertyDeps(cxt, propertyDeps = cxt.schema) {
        const { gen, data, it } = cxt;
        if (Object.keys(propertyDeps).length === 0)
            return;
        const missing = gen.let("missing");
        for (const prop in propertyDeps) {
            const deps = propertyDeps[prop];
            if (deps.length === 0)
                continue;
            const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);
            cxt.setParams({
                property: prop,
                depsCount: deps.length,
                deps: deps.join(", "),
            });
            if (it.allErrors) {
                gen.if(hasProperty, () => {
                    for (const depProp of deps) {
                        (0, code_1.checkReportMissingProp)(cxt, depProp);
                    }
                });
            }
            else {
                gen.if((0, codegen_1._) `${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);
                (0, code_1.reportMissingProp)(cxt, missing);
                gen.else();
            }
        }
    }
    exports.validatePropertyDeps = validatePropertyDeps;
    function validateSchemaDeps(cxt, schemaDeps = cxt.schema) {
        const { gen, data, keyword, it } = cxt;
        const valid = gen.name("valid");
        for (const prop in schemaDeps) {
            if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop]))
                continue;
            gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => {
                const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid);
                cxt.mergeValidEvaluated(schCxt, valid);
            }, () => gen.var(valid, true) // TODO var
            );
            cxt.ok(valid);
        }
    }
    exports.validateSchemaDeps = validateSchemaDeps;
    exports.default = def;

    }(dependencies));

    var propertyNames = {};

    Object.defineProperty(propertyNames, "__esModule", { value: true });
    const codegen_1$6 = codegen;
    const util_1$9 = util;
    const error$5 = {
        message: "property name must be valid",
        params: ({ params }) => (0, codegen_1$6._) `{propertyName: ${params.propertyName}}`,
    };
    const def$b = {
        keyword: "propertyNames",
        type: "object",
        schemaType: ["object", "boolean"],
        error: error$5,
        code(cxt) {
            const { gen, schema, data, it } = cxt;
            if ((0, util_1$9.alwaysValidSchema)(it, schema))
                return;
            const valid = gen.name("valid");
            gen.forIn("key", data, (key) => {
                cxt.setParams({ propertyName: key });
                cxt.subschema({
                    keyword: "propertyNames",
                    data: key,
                    dataTypes: ["string"],
                    propertyName: key,
                    compositeRule: true,
                }, valid);
                gen.if((0, codegen_1$6.not)(valid), () => {
                    cxt.error(true);
                    if (!it.allErrors)
                        gen.break();
                });
            });
            cxt.ok(valid);
        },
    };
    propertyNames.default = def$b;

    var additionalProperties = {};

    Object.defineProperty(additionalProperties, "__esModule", { value: true });
    const code_1$3 = code;
    const codegen_1$5 = codegen;
    const names_1 = names$1;
    const util_1$8 = util;
    const error$4 = {
        message: "must NOT have additional properties",
        params: ({ params }) => (0, codegen_1$5._) `{additionalProperty: ${params.additionalProperty}}`,
    };
    const def$a = {
        keyword: "additionalProperties",
        type: ["object"],
        schemaType: ["boolean", "object"],
        allowUndefined: true,
        trackErrors: true,
        error: error$4,
        code(cxt) {
            const { gen, schema, parentSchema, data, errsCount, it } = cxt;
            /* istanbul ignore if */
            if (!errsCount)
                throw new Error("ajv implementation error");
            const { allErrors, opts } = it;
            it.props = true;
            if (opts.removeAdditional !== "all" && (0, util_1$8.alwaysValidSchema)(it, schema))
                return;
            const props = (0, code_1$3.allSchemaProperties)(parentSchema.properties);
            const patProps = (0, code_1$3.allSchemaProperties)(parentSchema.patternProperties);
            checkAdditionalProperties();
            cxt.ok((0, codegen_1$5._) `${errsCount} === ${names_1.default.errors}`);
            function checkAdditionalProperties() {
                gen.forIn("key", data, (key) => {
                    if (!props.length && !patProps.length)
                        additionalPropertyCode(key);
                    else
                        gen.if(isAdditional(key), () => additionalPropertyCode(key));
                });
            }
            function isAdditional(key) {
                let definedProp;
                if (props.length > 8) {
                    // TODO maybe an option instead of hard-coded 8?
                    const propsSchema = (0, util_1$8.schemaRefOrVal)(it, parentSchema.properties, "properties");
                    definedProp = (0, code_1$3.isOwnProperty)(gen, propsSchema, key);
                }
                else if (props.length) {
                    definedProp = (0, codegen_1$5.or)(...props.map((p) => (0, codegen_1$5._) `${key} === ${p}`));
                }
                else {
                    definedProp = codegen_1$5.nil;
                }
                if (patProps.length) {
                    definedProp = (0, codegen_1$5.or)(definedProp, ...patProps.map((p) => (0, codegen_1$5._) `${(0, code_1$3.usePattern)(cxt, p)}.test(${key})`));
                }
                return (0, codegen_1$5.not)(definedProp);
            }
            function deleteAdditional(key) {
                gen.code((0, codegen_1$5._) `delete ${data}[${key}]`);
            }
            function additionalPropertyCode(key) {
                if (opts.removeAdditional === "all" || (opts.removeAdditional && schema === false)) {
                    deleteAdditional(key);
                    return;
                }
                if (schema === false) {
                    cxt.setParams({ additionalProperty: key });
                    cxt.error();
                    if (!allErrors)
                        gen.break();
                    return;
                }
                if (typeof schema == "object" && !(0, util_1$8.alwaysValidSchema)(it, schema)) {
                    const valid = gen.name("valid");
                    if (opts.removeAdditional === "failing") {
                        applyAdditionalSchema(key, valid, false);
                        gen.if((0, codegen_1$5.not)(valid), () => {
                            cxt.reset();
                            deleteAdditional(key);
                        });
                    }
                    else {
                        applyAdditionalSchema(key, valid);
                        if (!allErrors)
                            gen.if((0, codegen_1$5.not)(valid), () => gen.break());
                    }
                }
            }
            function applyAdditionalSchema(key, valid, errors) {
                const subschema = {
                    keyword: "additionalProperties",
                    dataProp: key,
                    dataPropType: util_1$8.Type.Str,
                };
                if (errors === false) {
                    Object.assign(subschema, {
                        compositeRule: true,
                        createErrors: false,
                        allErrors: false,
                    });
                }
                cxt.subschema(subschema, valid);
            }
        },
    };
    additionalProperties.default = def$a;

    var properties$2 = {};

    Object.defineProperty(properties$2, "__esModule", { value: true });
    const validate_1 = validate$1;
    const code_1$2 = code;
    const util_1$7 = util;
    const additionalProperties_1$1 = additionalProperties;
    const def$9 = {
        keyword: "properties",
        type: "object",
        schemaType: "object",
        code(cxt) {
            const { gen, schema, parentSchema, data, it } = cxt;
            if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === undefined) {
                additionalProperties_1$1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1$1.default, "additionalProperties"));
            }
            const allProps = (0, code_1$2.allSchemaProperties)(schema);
            for (const prop of allProps) {
                it.definedProperties.add(prop);
            }
            if (it.opts.unevaluated && allProps.length && it.props !== true) {
                it.props = util_1$7.mergeEvaluated.props(gen, (0, util_1$7.toHash)(allProps), it.props);
            }
            const properties = allProps.filter((p) => !(0, util_1$7.alwaysValidSchema)(it, schema[p]));
            if (properties.length === 0)
                return;
            const valid = gen.name("valid");
            for (const prop of properties) {
                if (hasDefault(prop)) {
                    applyPropertySchema(prop);
                }
                else {
                    gen.if((0, code_1$2.propertyInData)(gen, data, prop, it.opts.ownProperties));
                    applyPropertySchema(prop);
                    if (!it.allErrors)
                        gen.else().var(valid, true);
                    gen.endIf();
                }
                cxt.it.definedProperties.add(prop);
                cxt.ok(valid);
            }
            function hasDefault(prop) {
                return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== undefined;
            }
            function applyPropertySchema(prop) {
                cxt.subschema({
                    keyword: "properties",
                    schemaProp: prop,
                    dataProp: prop,
                }, valid);
            }
        },
    };
    properties$2.default = def$9;

    var patternProperties = {};

    Object.defineProperty(patternProperties, "__esModule", { value: true });
    const code_1$1 = code;
    const codegen_1$4 = codegen;
    const util_1$6 = util;
    const util_2 = util;
    const def$8 = {
        keyword: "patternProperties",
        type: "object",
        schemaType: "object",
        code(cxt) {
            const { gen, schema, data, parentSchema, it } = cxt;
            const { opts } = it;
            const patterns = (0, code_1$1.allSchemaProperties)(schema);
            const alwaysValidPatterns = patterns.filter((p) => (0, util_1$6.alwaysValidSchema)(it, schema[p]));
            if (patterns.length === 0 ||
                (alwaysValidPatterns.length === patterns.length &&
                    (!it.opts.unevaluated || it.props === true))) {
                return;
            }
            const checkProperties = opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties;
            const valid = gen.name("valid");
            if (it.props !== true && !(it.props instanceof codegen_1$4.Name)) {
                it.props = (0, util_2.evaluatedPropsToName)(gen, it.props);
            }
            const { props } = it;
            validatePatternProperties();
            function validatePatternProperties() {
                for (const pat of patterns) {
                    if (checkProperties)
                        checkMatchingProperties(pat);
                    if (it.allErrors) {
                        validateProperties(pat);
                    }
                    else {
                        gen.var(valid, true); // TODO var
                        validateProperties(pat);
                        gen.if(valid);
                    }
                }
            }
            function checkMatchingProperties(pat) {
                for (const prop in checkProperties) {
                    if (new RegExp(pat).test(prop)) {
                        (0, util_1$6.checkStrictMode)(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);
                    }
                }
            }
            function validateProperties(pat) {
                gen.forIn("key", data, (key) => {
                    gen.if((0, codegen_1$4._) `${(0, code_1$1.usePattern)(cxt, pat)}.test(${key})`, () => {
                        const alwaysValid = alwaysValidPatterns.includes(pat);
                        if (!alwaysValid) {
                            cxt.subschema({
                                keyword: "patternProperties",
                                schemaProp: pat,
                                dataProp: key,
                                dataPropType: util_2.Type.Str,
                            }, valid);
                        }
                        if (it.opts.unevaluated && props !== true) {
                            gen.assign((0, codegen_1$4._) `${props}[${key}]`, true);
                        }
                        else if (!alwaysValid && !it.allErrors) {
                            // can short-circuit if `unevaluatedProperties` is not supported (opts.next === false)
                            // or if all properties were evaluated (props === true)
                            gen.if((0, codegen_1$4.not)(valid), () => gen.break());
                        }
                    });
                });
            }
        },
    };
    patternProperties.default = def$8;

    var not = {};

    Object.defineProperty(not, "__esModule", { value: true });
    const util_1$5 = util;
    const def$7 = {
        keyword: "not",
        schemaType: ["object", "boolean"],
        trackErrors: true,
        code(cxt) {
            const { gen, schema, it } = cxt;
            if ((0, util_1$5.alwaysValidSchema)(it, schema)) {
                cxt.fail();
                return;
            }
            const valid = gen.name("valid");
            cxt.subschema({
                keyword: "not",
                compositeRule: true,
                createErrors: false,
                allErrors: false,
            }, valid);
            cxt.failResult(valid, () => cxt.reset(), () => cxt.error());
        },
        error: { message: "must NOT be valid" },
    };
    not.default = def$7;

    var anyOf = {};

    Object.defineProperty(anyOf, "__esModule", { value: true });
    const code_1 = code;
    const def$6 = {
        keyword: "anyOf",
        schemaType: "array",
        trackErrors: true,
        code: code_1.validateUnion,
        error: { message: "must match a schema in anyOf" },
    };
    anyOf.default = def$6;

    var oneOf = {};

    Object.defineProperty(oneOf, "__esModule", { value: true });
    const codegen_1$3 = codegen;
    const util_1$4 = util;
    const error$3 = {
        message: "must match exactly one schema in oneOf",
        params: ({ params }) => (0, codegen_1$3._) `{passingSchemas: ${params.passing}}`,
    };
    const def$5 = {
        keyword: "oneOf",
        schemaType: "array",
        trackErrors: true,
        error: error$3,
        code(cxt) {
            const { gen, schema, parentSchema, it } = cxt;
            /* istanbul ignore if */
            if (!Array.isArray(schema))
                throw new Error("ajv implementation error");
            if (it.opts.discriminator && parentSchema.discriminator)
                return;
            const schArr = schema;
            const valid = gen.let("valid", false);
            const passing = gen.let("passing", null);
            const schValid = gen.name("_valid");
            cxt.setParams({ passing });
            // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas
            gen.block(validateOneOf);
            cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
            function validateOneOf() {
                schArr.forEach((sch, i) => {
                    let schCxt;
                    if ((0, util_1$4.alwaysValidSchema)(it, sch)) {
                        gen.var(schValid, true);
                    }
                    else {
                        schCxt = cxt.subschema({
                            keyword: "oneOf",
                            schemaProp: i,
                            compositeRule: true,
                        }, schValid);
                    }
                    if (i > 0) {
                        gen
                            .if((0, codegen_1$3._) `${schValid} && ${valid}`)
                            .assign(valid, false)
                            .assign(passing, (0, codegen_1$3._) `[${passing}, ${i}]`)
                            .else();
                    }
                    gen.if(schValid, () => {
                        gen.assign(valid, true);
                        gen.assign(passing, i);
                        if (schCxt)
                            cxt.mergeEvaluated(schCxt, codegen_1$3.Name);
                    });
                });
            }
        },
    };
    oneOf.default = def$5;

    var allOf = {};

    Object.defineProperty(allOf, "__esModule", { value: true });
    const util_1$3 = util;
    const def$4 = {
        keyword: "allOf",
        schemaType: "array",
        code(cxt) {
            const { gen, schema, it } = cxt;
            /* istanbul ignore if */
            if (!Array.isArray(schema))
                throw new Error("ajv implementation error");
            const valid = gen.name("valid");
            schema.forEach((sch, i) => {
                if ((0, util_1$3.alwaysValidSchema)(it, sch))
                    return;
                const schCxt = cxt.subschema({ keyword: "allOf", schemaProp: i }, valid);
                cxt.ok(valid);
                cxt.mergeEvaluated(schCxt);
            });
        },
    };
    allOf.default = def$4;

    var _if = {};

    Object.defineProperty(_if, "__esModule", { value: true });
    const codegen_1$2 = codegen;
    const util_1$2 = util;
    const error$2 = {
        message: ({ params }) => (0, codegen_1$2.str) `must match "${params.ifClause}" schema`,
        params: ({ params }) => (0, codegen_1$2._) `{failingKeyword: ${params.ifClause}}`,
    };
    const def$3 = {
        keyword: "if",
        schemaType: ["object", "boolean"],
        trackErrors: true,
        error: error$2,
        code(cxt) {
            const { gen, parentSchema, it } = cxt;
            if (parentSchema.then === undefined && parentSchema.else === undefined) {
                (0, util_1$2.checkStrictMode)(it, '"if" without "then" and "else" is ignored');
            }
            const hasThen = hasSchema(it, "then");
            const hasElse = hasSchema(it, "else");
            if (!hasThen && !hasElse)
                return;
            const valid = gen.let("valid", true);
            const schValid = gen.name("_valid");
            validateIf();
            cxt.reset();
            if (hasThen && hasElse) {
                const ifClause = gen.let("ifClause");
                cxt.setParams({ ifClause });
                gen.if(schValid, validateClause("then", ifClause), validateClause("else", ifClause));
            }
            else if (hasThen) {
                gen.if(schValid, validateClause("then"));
            }
            else {
                gen.if((0, codegen_1$2.not)(schValid), validateClause("else"));
            }
            cxt.pass(valid, () => cxt.error(true));
            function validateIf() {
                const schCxt = cxt.subschema({
                    keyword: "if",
                    compositeRule: true,
                    createErrors: false,
                    allErrors: false,
                }, schValid);
                cxt.mergeEvaluated(schCxt);
            }
            function validateClause(keyword, ifClause) {
                return () => {
                    const schCxt = cxt.subschema({ keyword }, schValid);
                    gen.assign(valid, schValid);
                    cxt.mergeValidEvaluated(schCxt, valid);
                    if (ifClause)
                        gen.assign(ifClause, (0, codegen_1$2._) `${keyword}`);
                    else
                        cxt.setParams({ ifClause: keyword });
                };
            }
        },
    };
    function hasSchema(it, keyword) {
        const schema = it.schema[keyword];
        return schema !== undefined && !(0, util_1$2.alwaysValidSchema)(it, schema);
    }
    _if.default = def$3;

    var thenElse = {};

    Object.defineProperty(thenElse, "__esModule", { value: true });
    const util_1$1 = util;
    const def$2 = {
        keyword: ["then", "else"],
        schemaType: ["object", "boolean"],
        code({ keyword, parentSchema, it }) {
            if (parentSchema.if === undefined)
                (0, util_1$1.checkStrictMode)(it, `"${keyword}" without "if" is ignored`);
        },
    };
    thenElse.default = def$2;

    Object.defineProperty(applicator, "__esModule", { value: true });
    const additionalItems_1 = additionalItems;
    const prefixItems_1 = prefixItems;
    const items_1 = items;
    const items2020_1 = items2020;
    const contains_1 = contains$1;
    const dependencies_1 = dependencies;
    const propertyNames_1 = propertyNames;
    const additionalProperties_1 = additionalProperties;
    const properties_1 = properties$2;
    const patternProperties_1 = patternProperties;
    const not_1 = not;
    const anyOf_1 = anyOf;
    const oneOf_1 = oneOf;
    const allOf_1 = allOf;
    const if_1 = _if;
    const thenElse_1 = thenElse;
    function getApplicator(draft2020 = false) {
        const applicator = [
            // any
            not_1.default,
            anyOf_1.default,
            oneOf_1.default,
            allOf_1.default,
            if_1.default,
            thenElse_1.default,
            // object
            propertyNames_1.default,
            additionalProperties_1.default,
            dependencies_1.default,
            properties_1.default,
            patternProperties_1.default,
        ];
        // array
        if (draft2020)
            applicator.push(prefixItems_1.default, items2020_1.default);
        else
            applicator.push(additionalItems_1.default, items_1.default);
        applicator.push(contains_1.default);
        return applicator;
    }
    applicator.default = getApplicator;

    var format$3 = {};

    var format$2 = {};

    Object.defineProperty(format$2, "__esModule", { value: true });
    const codegen_1$1 = codegen;
    const error$1 = {
        message: ({ schemaCode }) => (0, codegen_1$1.str) `must match format "${schemaCode}"`,
        params: ({ schemaCode }) => (0, codegen_1$1._) `{format: ${schemaCode}}`,
    };
    const def$1 = {
        keyword: "format",
        type: ["number", "string"],
        schemaType: "string",
        $data: true,
        error: error$1,
        code(cxt, ruleType) {
            const { gen, data, $data, schema, schemaCode, it } = cxt;
            const { opts, errSchemaPath, schemaEnv, self } = it;
            if (!opts.validateFormats)
                return;
            if ($data)
                validate$DataFormat();
            else
                validateFormat();
            function validate$DataFormat() {
                const fmts = gen.scopeValue("formats", {
                    ref: self.formats,
                    code: opts.code.formats,
                });
                const fDef = gen.const("fDef", (0, codegen_1$1._) `${fmts}[${schemaCode}]`);
                const fType = gen.let("fType");
                const format = gen.let("format");
                // TODO simplify
                gen.if((0, codegen_1$1._) `typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1$1._) `${fDef}.type || "string"`).assign(format, (0, codegen_1$1._) `${fDef}.validate`), () => gen.assign(fType, (0, codegen_1$1._) `"string"`).assign(format, fDef));
                cxt.fail$data((0, codegen_1$1.or)(unknownFmt(), invalidFmt()));
                function unknownFmt() {
                    if (opts.strictSchema === false)
                        return codegen_1$1.nil;
                    return (0, codegen_1$1._) `${schemaCode} && !${format}`;
                }
                function invalidFmt() {
                    const callFormat = schemaEnv.$async
                        ? (0, codegen_1$1._) `(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))`
                        : (0, codegen_1$1._) `${format}(${data})`;
                    const validData = (0, codegen_1$1._) `(typeof ${format} == "function" ? ${callFormat} : ${format}.test(${data}))`;
                    return (0, codegen_1$1._) `${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;
                }
            }
            function validateFormat() {
                const formatDef = self.formats[schema];
                if (!formatDef) {
                    unknownFormat();
                    return;
                }
                if (formatDef === true)
                    return;
                const [fmtType, format, fmtRef] = getFormat(formatDef);
                if (fmtType === ruleType)
                    cxt.pass(validCondition());
                function unknownFormat() {
                    if (opts.strictSchema === false) {
                        self.logger.warn(unknownMsg());
                        return;
                    }
                    throw new Error(unknownMsg());
                    function unknownMsg() {
                        return `unknown format "${schema}" ignored in schema at path "${errSchemaPath}"`;
                    }
                }
                function getFormat(fmtDef) {
                    const code = fmtDef instanceof RegExp
                        ? (0, codegen_1$1.regexpCode)(fmtDef)
                        : opts.code.formats
                            ? (0, codegen_1$1._) `${opts.code.formats}${(0, codegen_1$1.getProperty)(schema)}`
                            : undefined;
                    const fmt = gen.scopeValue("formats", { key: schema, ref: fmtDef, code });
                    if (typeof fmtDef == "object" && !(fmtDef instanceof RegExp)) {
                        return [fmtDef.type || "string", fmtDef.validate, (0, codegen_1$1._) `${fmt}.validate`];
                    }
                    return ["string", fmtDef, fmt];
                }
                function validCondition() {
                    if (typeof formatDef == "object" && !(formatDef instanceof RegExp) && formatDef.async) {
                        if (!schemaEnv.$async)
                            throw new Error("async format in sync schema");
                        return (0, codegen_1$1._) `await ${fmtRef}(${data})`;
                    }
                    return typeof format == "function" ? (0, codegen_1$1._) `${fmtRef}(${data})` : (0, codegen_1$1._) `${fmtRef}.test(${data})`;
                }
            }
        },
    };
    format$2.default = def$1;

    Object.defineProperty(format$3, "__esModule", { value: true });
    const format_1$1 = format$2;
    const format$1 = [format_1$1.default];
    format$3.default = format$1;

    var metadata = {};

    Object.defineProperty(metadata, "__esModule", { value: true });
    metadata.contentVocabulary = metadata.metadataVocabulary = void 0;
    metadata.metadataVocabulary = [
        "title",
        "description",
        "default",
        "deprecated",
        "readOnly",
        "writeOnly",
        "examples",
    ];
    metadata.contentVocabulary = [
        "contentMediaType",
        "contentEncoding",
        "contentSchema",
    ];

    Object.defineProperty(draft7, "__esModule", { value: true });
    const core_1 = core$1;
    const validation_1 = validation$1;
    const applicator_1 = applicator;
    const format_1 = format$3;
    const metadata_1 = metadata;
    const draft7Vocabularies = [
        core_1.default,
        validation_1.default,
        (0, applicator_1.default)(),
        format_1.default,
        metadata_1.metadataVocabulary,
        metadata_1.contentVocabulary,
    ];
    draft7.default = draft7Vocabularies;

    var discriminator = {};

    var types = {};

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DiscrError = void 0;
    (function (DiscrError) {
        DiscrError["Tag"] = "tag";
        DiscrError["Mapping"] = "mapping";
    })(exports.DiscrError || (exports.DiscrError = {}));

    }(types));

    Object.defineProperty(discriminator, "__esModule", { value: true });
    const codegen_1 = codegen;
    const types_1 = types;
    const compile_1 = compile$1;
    const util_1 = util;
    const error = {
        message: ({ params: { discrError, tagName } }) => discrError === types_1.DiscrError.Tag
            ? `tag "${tagName}" must be string`
            : `value of tag "${tagName}" must be in oneOf`,
        params: ({ params: { discrError, tag, tagName } }) => (0, codegen_1._) `{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`,
    };
    const def = {
        keyword: "discriminator",
        type: "object",
        schemaType: "object",
        error,
        code(cxt) {
            const { gen, data, schema, parentSchema, it } = cxt;
            const { oneOf } = parentSchema;
            if (!it.opts.discriminator) {
                throw new Error("discriminator: requires discriminator option");
            }
            const tagName = schema.propertyName;
            if (typeof tagName != "string")
                throw new Error("discriminator: requires propertyName");
            if (schema.mapping)
                throw new Error("discriminator: mapping is not supported");
            if (!oneOf)
                throw new Error("discriminator: requires oneOf keyword");
            const valid = gen.let("valid", false);
            const tag = gen.const("tag", (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(tagName)}`);
            gen.if((0, codegen_1._) `typeof ${tag} == "string"`, () => validateMapping(), () => cxt.error(false, { discrError: types_1.DiscrError.Tag, tag, tagName }));
            cxt.ok(valid);
            function validateMapping() {
                const mapping = getMapping();
                gen.if(false);
                for (const tagValue in mapping) {
                    gen.elseIf((0, codegen_1._) `${tag} === ${tagValue}`);
                    gen.assign(valid, applyTagSchema(mapping[tagValue]));
                }
                gen.else();
                cxt.error(false, { discrError: types_1.DiscrError.Mapping, tag, tagName });
                gen.endIf();
            }
            function applyTagSchema(schemaProp) {
                const _valid = gen.name("valid");
                const schCxt = cxt.subschema({ keyword: "oneOf", schemaProp }, _valid);
                cxt.mergeEvaluated(schCxt, codegen_1.Name);
                return _valid;
            }
            function getMapping() {
                var _a;
                const oneOfMapping = {};
                const topRequired = hasRequired(parentSchema);
                let tagRequired = true;
                for (let i = 0; i < oneOf.length; i++) {
                    let sch = oneOf[i];
                    if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)) {
                        sch = compile_1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, sch === null || sch === void 0 ? void 0 : sch.$ref);
                        if (sch instanceof compile_1.SchemaEnv)
                            sch = sch.schema;
                    }
                    const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];
                    if (typeof propSch != "object") {
                        throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${tagName}"`);
                    }
                    tagRequired = tagRequired && (topRequired || hasRequired(sch));
                    addMappings(propSch, i);
                }
                if (!tagRequired)
                    throw new Error(`discriminator: "${tagName}" must be required`);
                return oneOfMapping;
                function hasRequired({ required }) {
                    return Array.isArray(required) && required.includes(tagName);
                }
                function addMappings(sch, i) {
                    if (sch.const) {
                        addMapping(sch.const, i);
                    }
                    else if (sch.enum) {
                        for (const tagValue of sch.enum) {
                            addMapping(tagValue, i);
                        }
                    }
                    else {
                        throw new Error(`discriminator: "properties/${tagName}" must have "const" or "enum"`);
                    }
                }
                function addMapping(tagValue, i) {
                    if (typeof tagValue != "string" || tagValue in oneOfMapping) {
                        throw new Error(`discriminator: "${tagName}" values must be unique strings`);
                    }
                    oneOfMapping[tagValue] = i;
                }
            }
        },
    };
    discriminator.default = def;

    var $schema = "http://json-schema.org/draft-07/schema#";
    var $id = "http://json-schema.org/draft-07/schema#";
    var title = "Core schema meta-schema";
    var definitions = {
    	schemaArray: {
    		type: "array",
    		minItems: 1,
    		items: {
    			$ref: "#"
    		}
    	},
    	nonNegativeInteger: {
    		type: "integer",
    		minimum: 0
    	},
    	nonNegativeIntegerDefault0: {
    		allOf: [
    			{
    				$ref: "#/definitions/nonNegativeInteger"
    			},
    			{
    				"default": 0
    			}
    		]
    	},
    	simpleTypes: {
    		"enum": [
    			"array",
    			"boolean",
    			"integer",
    			"null",
    			"number",
    			"object",
    			"string"
    		]
    	},
    	stringArray: {
    		type: "array",
    		items: {
    			type: "string"
    		},
    		uniqueItems: true,
    		"default": [
    		]
    	}
    };
    var type = [
    	"object",
    	"boolean"
    ];
    var properties$1 = {
    	$id: {
    		type: "string",
    		format: "uri-reference"
    	},
    	$schema: {
    		type: "string",
    		format: "uri"
    	},
    	$ref: {
    		type: "string",
    		format: "uri-reference"
    	},
    	$comment: {
    		type: "string"
    	},
    	title: {
    		type: "string"
    	},
    	description: {
    		type: "string"
    	},
    	"default": true,
    	readOnly: {
    		type: "boolean",
    		"default": false
    	},
    	examples: {
    		type: "array",
    		items: true
    	},
    	multipleOf: {
    		type: "number",
    		exclusiveMinimum: 0
    	},
    	maximum: {
    		type: "number"
    	},
    	exclusiveMaximum: {
    		type: "number"
    	},
    	minimum: {
    		type: "number"
    	},
    	exclusiveMinimum: {
    		type: "number"
    	},
    	maxLength: {
    		$ref: "#/definitions/nonNegativeInteger"
    	},
    	minLength: {
    		$ref: "#/definitions/nonNegativeIntegerDefault0"
    	},
    	pattern: {
    		type: "string",
    		format: "regex"
    	},
    	additionalItems: {
    		$ref: "#"
    	},
    	items: {
    		anyOf: [
    			{
    				$ref: "#"
    			},
    			{
    				$ref: "#/definitions/schemaArray"
    			}
    		],
    		"default": true
    	},
    	maxItems: {
    		$ref: "#/definitions/nonNegativeInteger"
    	},
    	minItems: {
    		$ref: "#/definitions/nonNegativeIntegerDefault0"
    	},
    	uniqueItems: {
    		type: "boolean",
    		"default": false
    	},
    	contains: {
    		$ref: "#"
    	},
    	maxProperties: {
    		$ref: "#/definitions/nonNegativeInteger"
    	},
    	minProperties: {
    		$ref: "#/definitions/nonNegativeIntegerDefault0"
    	},
    	required: {
    		$ref: "#/definitions/stringArray"
    	},
    	additionalProperties: {
    		$ref: "#"
    	},
    	definitions: {
    		type: "object",
    		additionalProperties: {
    			$ref: "#"
    		},
    		"default": {
    		}
    	},
    	properties: {
    		type: "object",
    		additionalProperties: {
    			$ref: "#"
    		},
    		"default": {
    		}
    	},
    	patternProperties: {
    		type: "object",
    		additionalProperties: {
    			$ref: "#"
    		},
    		propertyNames: {
    			format: "regex"
    		},
    		"default": {
    		}
    	},
    	dependencies: {
    		type: "object",
    		additionalProperties: {
    			anyOf: [
    				{
    					$ref: "#"
    				},
    				{
    					$ref: "#/definitions/stringArray"
    				}
    			]
    		}
    	},
    	propertyNames: {
    		$ref: "#"
    	},
    	"const": true,
    	"enum": {
    		type: "array",
    		items: true,
    		minItems: 1,
    		uniqueItems: true
    	},
    	type: {
    		anyOf: [
    			{
    				$ref: "#/definitions/simpleTypes"
    			},
    			{
    				type: "array",
    				items: {
    					$ref: "#/definitions/simpleTypes"
    				},
    				minItems: 1,
    				uniqueItems: true
    			}
    		]
    	},
    	format: {
    		type: "string"
    	},
    	contentMediaType: {
    		type: "string"
    	},
    	contentEncoding: {
    		type: "string"
    	},
    	"if": {
    		$ref: "#"
    	},
    	then: {
    		$ref: "#"
    	},
    	"else": {
    		$ref: "#"
    	},
    	allOf: {
    		$ref: "#/definitions/schemaArray"
    	},
    	anyOf: {
    		$ref: "#/definitions/schemaArray"
    	},
    	oneOf: {
    		$ref: "#/definitions/schemaArray"
    	},
    	not: {
    		$ref: "#"
    	}
    };
    var require$$3 = {
    	$schema: $schema,
    	$id: $id,
    	title: title,
    	definitions: definitions,
    	type: type,
    	properties: properties$1,
    	"default": true
    };

    (function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MissingRefError = exports.ValidationError = exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
    const core_1 = core$2;
    const draft7_1 = draft7;
    const discriminator_1 = discriminator;
    const draft7MetaSchema = require$$3;
    const META_SUPPORT_DATA = ["/properties"];
    const META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
    class Ajv extends core_1.default {
        _addVocabularies() {
            super._addVocabularies();
            draft7_1.default.forEach((v) => this.addVocabulary(v));
            if (this.opts.discriminator)
                this.addKeyword(discriminator_1.default);
        }
        _addDefaultMetaSchema() {
            super._addDefaultMetaSchema();
            if (!this.opts.meta)
                return;
            const metaSchema = this.opts.$data
                ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA)
                : draft7MetaSchema;
            this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
            this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
        }
        defaultMeta() {
            return (this.opts.defaultMeta =
                super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined));
        }
    }
    module.exports = exports = Ajv;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Ajv;
    var validate_1 = validate$1;
    Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function () { return validate_1.KeywordCxt; } });
    var codegen_1 = codegen;
    Object.defineProperty(exports, "_", { enumerable: true, get: function () { return codegen_1._; } });
    Object.defineProperty(exports, "str", { enumerable: true, get: function () { return codegen_1.str; } });
    Object.defineProperty(exports, "stringify", { enumerable: true, get: function () { return codegen_1.stringify; } });
    Object.defineProperty(exports, "nil", { enumerable: true, get: function () { return codegen_1.nil; } });
    Object.defineProperty(exports, "Name", { enumerable: true, get: function () { return codegen_1.Name; } });
    Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function () { return codegen_1.CodeGen; } });
    var validation_error_1 = validation_error;
    Object.defineProperty(exports, "ValidationError", { enumerable: true, get: function () { return validation_error_1.default; } });
    var ref_error_1 = ref_error;
    Object.defineProperty(exports, "MissingRefError", { enumerable: true, get: function () { return ref_error_1.default; } });

    }(ajv, ajv.exports));

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatLimitDefinition = void 0;
    const ajv_1 = ajv.exports;
    const codegen_1 = codegen;
    const ops = codegen_1.operators;
    const KWDs = {
        formatMaximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
        formatMinimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
        formatExclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
        formatExclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE },
    };
    const error = {
        message: ({ keyword, schemaCode }) => codegen_1.str `should be ${KWDs[keyword].okStr} ${schemaCode}`,
        params: ({ keyword, schemaCode }) => codegen_1._ `{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`,
    };
    exports.formatLimitDefinition = {
        keyword: Object.keys(KWDs),
        type: "string",
        schemaType: "string",
        $data: true,
        error,
        code(cxt) {
            const { gen, data, schemaCode, keyword, it } = cxt;
            const { opts, self } = it;
            if (!opts.validateFormats)
                return;
            const fCxt = new ajv_1.KeywordCxt(it, self.RULES.all.format.definition, "format");
            if (fCxt.$data)
                validate$DataFormat();
            else
                validateFormat();
            function validate$DataFormat() {
                const fmts = gen.scopeValue("formats", {
                    ref: self.formats,
                    code: opts.code.formats,
                });
                const fmt = gen.const("fmt", codegen_1._ `${fmts}[${fCxt.schemaCode}]`);
                cxt.fail$data(codegen_1.or(codegen_1._ `typeof ${fmt} != "object"`, codegen_1._ `${fmt} instanceof RegExp`, codegen_1._ `typeof ${fmt}.compare != "function"`, compareCode(fmt)));
            }
            function validateFormat() {
                const format = fCxt.schema;
                const fmtDef = self.formats[format];
                if (!fmtDef || fmtDef === true)
                    return;
                if (typeof fmtDef != "object" ||
                    fmtDef instanceof RegExp ||
                    typeof fmtDef.compare != "function") {
                    throw new Error(`"${keyword}": format "${format}" does not define "compare" function`);
                }
                const fmt = gen.scopeValue("formats", {
                    key: format,
                    ref: fmtDef,
                    code: opts.code.formats ? codegen_1._ `${opts.code.formats}${codegen_1.getProperty(format)}` : undefined,
                });
                cxt.fail$data(compareCode(fmt));
            }
            function compareCode(fmt) {
                return codegen_1._ `${fmt}.compare(${data}, ${schemaCode}) ${KWDs[keyword].fail} 0`;
            }
        },
        dependencies: ["format"],
    };
    const formatLimitPlugin = (ajv) => {
        ajv.addKeyword(exports.formatLimitDefinition);
        return ajv;
    };
    exports.default = formatLimitPlugin;

    }(limit));

    (function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    const formats_1 = formats;
    const limit_1 = limit;
    const codegen_1 = codegen;
    const fullName = new codegen_1.Name("fullFormats");
    const fastName = new codegen_1.Name("fastFormats");
    const formatsPlugin = (ajv, opts = { keywords: true }) => {
        if (Array.isArray(opts)) {
            addFormats(ajv, opts, formats_1.fullFormats, fullName);
            return ajv;
        }
        const [formats, exportName] = opts.mode === "fast" ? [formats_1.fastFormats, fastName] : [formats_1.fullFormats, fullName];
        const list = opts.formats || formats_1.formatNames;
        addFormats(ajv, list, formats, exportName);
        if (opts.keywords)
            limit_1.default(ajv);
        return ajv;
    };
    formatsPlugin.get = (name, mode = "full") => {
        const formats = mode === "fast" ? formats_1.fastFormats : formats_1.fullFormats;
        const f = formats[name];
        if (!f)
            throw new Error(`Unknown format "${name}"`);
        return f;
    };
    function addFormats(ajv, list, fs, exportName) {
        var _a;
        var _b;
        (_a = (_b = ajv.opts.code).formats) !== null && _a !== void 0 ? _a : (_b.formats = codegen_1._ `require("ajv-formats/dist/formats").${exportName}`);
        for (const f of list)
            ajv.addFormat(f, fs[f]);
    }
    module.exports = exports = formatsPlugin;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = formatsPlugin;

    }(dist, dist.exports));

    var addFormats = /*@__PURE__*/getDefaultExportFromCjs(dist.exports);

    const ADDITIONAL_PROPERTIES = 'additionalProperties';
    const REQUIRED_PROPERTIES = 'required';
    const distinct = (properties, discriminator) => {
        const known = {};
        return properties.filter(item => {
            const discriminatorValue = discriminator(item);
            if (known.hasOwnProperty(discriminatorValue)) {
                return false;
            }
            else {
                known[discriminatorValue] = true;
                return true;
            }
        });
    };
    class Gen {
        constructor(findOption) {
            this.findOption = findOption;
            this.schemaObject = (data) => {
                const props = this.properties(data);
                const schema = {
                    type: 'object',
                    properties: props,
                    additionalProperties: this.findOption(props)(ADDITIONAL_PROPERTIES)
                };
                const required = this.findOption(props)(REQUIRED_PROPERTIES);
                if (required.length > 0) {
                    schema.required = required;
                }
                return schema;
            };
            this.properties = (data) => {
                const emptyProps = {};
                return Object.keys(data).reduce((acc, propName) => {
                    acc[propName] = this.property(data[propName]);
                    return acc;
                }, emptyProps);
            };
            this.property = (data) => {
                switch (typeof data) {
                    case 'string':
                        return { type: 'string' };
                    case 'boolean':
                        return { type: 'boolean' };
                    case 'number':
                        if (Number.isInteger(data)) {
                            return { type: 'integer' };
                        }
                        return { type: 'number' };
                    case 'object':
                        if (data == null) {
                            return { type: 'null' };
                        }
                        return this.schemaObjectOrArray(data);
                    default:
                        return {};
                }
            };
            this.schemaObjectOrArray = (data) => {
                if (data instanceof Array) {
                    return this.schemaArray(data);
                }
                else {
                    return this.schemaObject(data);
                }
            };
            this.schemaArray = (data) => {
                if (data.length > 0) {
                    const allProperties = data.map(this.property);
                    const uniqueProperties = distinct(allProperties, prop => JSON.stringify(prop));
                    if (uniqueProperties.length === 1) {
                        return {
                            type: 'array',
                            items: uniqueProperties[0]
                        };
                    }
                    else {
                        return {
                            type: 'array',
                            items: {
                                oneOf: uniqueProperties
                            }
                        };
                    }
                }
                else {
                    return {
                        type: 'array',
                        items: {}
                    };
                }
            };
        }
    }
    const generateJsonSchema = (instance, options = {}) => {
        const findOption = (props) => (optionName) => {
            switch (optionName) {
                case ADDITIONAL_PROPERTIES:
                    if (options.hasOwnProperty(ADDITIONAL_PROPERTIES)) {
                        return options[ADDITIONAL_PROPERTIES];
                    }
                    return true;
                case REQUIRED_PROPERTIES:
                    if (options.hasOwnProperty(REQUIRED_PROPERTIES)) {
                        return options[REQUIRED_PROPERTIES](props);
                    }
                    return Object.keys(props);
                default:
                    return;
            }
        };
        const gen = new Gen(findOption);
        return gen.schemaObject(instance);
    };

    var RuleEffect;
    (function (RuleEffect) {
        RuleEffect["HIDE"] = "HIDE";
        RuleEffect["SHOW"] = "SHOW";
        RuleEffect["ENABLE"] = "ENABLE";
        RuleEffect["DISABLE"] = "DISABLE";
    })(RuleEffect || (RuleEffect = {}));
    const isInternationalized = (element) => typeof element === 'object' && element !== null && typeof element.i18n === 'string';
    const isGroup = (layout) => layout.type === 'Group';
    const isLayout$2 = (uischema) => uischema.elements !== undefined;
    const isScopable = (obj) => !!obj && typeof obj === 'object';
    const isScoped = (obj) => isScopable(obj) && typeof obj.scope === 'string';
    const isLabelable = (obj) => !!obj && typeof obj === 'object';

    const move = (array, index, delta) => {
        const newIndex = index + delta;
        if (newIndex < 0 || newIndex >= array.length) {
            return;
        }
        const indexes = [index, newIndex].sort((a, b) => a - b);
        array.splice(indexes[0], 2, array[indexes[1]], array[indexes[0]]);
    };
    const moveUp = (array, toMove) => {
        move(array, toMove, -1);
    };
    const moveDown = (array, toMove) => {
        move(array, toMove, 1);
    };

    const configDefault = {
        restrict: false,
        trim: false,
        showUnfocusedDescription: false,
        hideRequiredAsterisk: false
    };

    const applyDefaultConfiguration = (config = {}) => merge_1({}, configDefault, config);
    const configReducer = (state = applyDefaultConfiguration(), action) => {
        switch (action.type) {
            case SET_CONFIG:
                return applyDefaultConfiguration(action.config);
            default:
                return state;
        }
    };

    const validate = (validator, data) => {
        if (validator === undefined) {
            return [];
        }
        const valid = validator(data);
        if (valid) {
            return [];
        }
        return validator.errors;
    };
    const initState = {
        data: {},
        schema: {},
        uischema: undefined,
        errors: [],
        validator: undefined,
        ajv: undefined,
        validationMode: 'ValidateAndShow',
        additionalErrors: []
    };
    const reuseAjvForSchema = (ajv, schema) => {
        if (schema.hasOwnProperty('id') || schema.hasOwnProperty('$id')) {
            ajv.removeSchema(schema);
        }
        return ajv;
    };
    const getOrCreateAjv = (state, action) => {
        if (action) {
            if (hasAjvOption(action.options)) {
                return action.options.ajv;
            }
            else if (action.options !== undefined) {
                if (isFunction_1(action.options.compile)) {
                    return action.options;
                }
            }
        }
        if (state.ajv) {
            return action?.schema
                ? reuseAjvForSchema(state.ajv, action.schema)
                : state.ajv;
        }
        return createAjv();
    };
    const hasAjvOption = (option) => {
        if (option) {
            return option.ajv !== undefined;
        }
        return false;
    };
    const getValidationMode = (state, action) => {
        if (action && hasValidationModeOption(action.options)) {
            return action.options.validationMode;
        }
        return state.validationMode;
    };
    const hasValidationModeOption = (option) => {
        if (option) {
            return option.validationMode !== undefined;
        }
        return false;
    };
    const hasAdditionalErrorsOption = (option) => {
        if (option) {
            return option.additionalErrors !== undefined;
        }
        return false;
    };
    const getAdditionalErrors = (state, action) => {
        if (action && hasAdditionalErrorsOption(action.options)) {
            return action.options.additionalErrors;
        }
        return state.additionalErrors;
    };
    const coreReducer = (state = initState, action) => {
        switch (action.type) {
            case INIT: {
                const thisAjv = getOrCreateAjv(state, action);
                const validationMode = getValidationMode(state, action);
                const v = validationMode === 'NoValidation' ? undefined : thisAjv.compile(action.schema);
                const e = validate(v, action.data);
                const additionalErrors = getAdditionalErrors(state, action);
                return {
                    ...state,
                    data: action.data,
                    schema: action.schema,
                    uischema: action.uischema,
                    additionalErrors,
                    errors: e,
                    validator: v,
                    ajv: thisAjv,
                    validationMode,
                };
            }
            case UPDATE_CORE: {
                const thisAjv = getOrCreateAjv(state, action);
                const validationMode = getValidationMode(state, action);
                let validator = state.validator;
                let errors = state.errors;
                if (state.schema !== action.schema ||
                    state.validationMode !== validationMode ||
                    state.ajv !== thisAjv) {
                    validator =
                        validationMode === 'NoValidation'
                            ? undefined
                            : thisAjv.compile(action.schema);
                    errors = validate(validator, action.data);
                }
                else if (state.data !== action.data) {
                    errors = validate(validator, action.data);
                }
                const additionalErrors = getAdditionalErrors(state, action);
                const stateChanged = state.data !== action.data ||
                    state.schema !== action.schema ||
                    state.uischema !== action.uischema ||
                    state.ajv !== thisAjv ||
                    state.errors !== errors ||
                    state.validator !== validator ||
                    state.validationMode !== validationMode ||
                    state.additionalErrors !== additionalErrors;
                return stateChanged
                    ? {
                        ...state,
                        data: action.data,
                        schema: action.schema,
                        uischema: action.uischema,
                        ajv: thisAjv,
                        errors: isEqual_1(errors, state.errors) ? state.errors : errors,
                        validator: validator,
                        validationMode: validationMode,
                        additionalErrors
                    }
                    : state;
            }
            case SET_AJV: {
                const currentAjv = action.ajv;
                const validator = state.validationMode === 'NoValidation' ? undefined : currentAjv.compile(state.schema);
                const errors = validate(validator, state.data);
                return {
                    ...state,
                    validator,
                    errors
                };
            }
            case SET_SCHEMA: {
                const needsNewValidator = action.schema && state.ajv && state.validationMode !== 'NoValidation';
                const v = needsNewValidator
                    ? reuseAjvForSchema(state.ajv, action.schema).compile(action.schema)
                    : state.validator;
                const errors = validate(v, state.data);
                return {
                    ...state,
                    validator: v,
                    schema: action.schema,
                    errors
                };
            }
            case SET_UISCHEMA: {
                return {
                    ...state,
                    uischema: action.uischema
                };
            }
            case UPDATE_DATA: {
                if (action.path === undefined || action.path === null) {
                    return state;
                }
                else if (action.path === '') {
                    const result = action.updater(cloneDeep_1(state.data));
                    const errors = validate(state.validator, result);
                    return {
                        ...state,
                        data: result,
                        errors
                    };
                }
                else {
                    const oldData = get_1(state.data, action.path);
                    const newData = action.updater(cloneDeep_1(oldData));
                    const newState = set(action.path, newData, state.data === undefined ? {} : state.data);
                    const errors = validate(state.validator, newState);
                    return {
                        ...state,
                        data: newState,
                        errors
                    };
                }
            }
            case UPDATE_ERRORS: {
                return {
                    ...state,
                    errors: action.errors
                };
            }
            case SET_VALIDATION_MODE: {
                if (state.validationMode === action.validationMode) {
                    return state;
                }
                if (action.validationMode === 'NoValidation') {
                    const errors = validate(undefined, state.data);
                    return {
                        ...state,
                        errors,
                        validationMode: action.validationMode
                    };
                }
                if (state.validationMode === 'NoValidation') {
                    const validator = reuseAjvForSchema(state.ajv, state.schema).compile(state.schema);
                    const errors = validate(validator, state.data);
                    return {
                        ...state,
                        validator,
                        errors,
                        validationMode: action.validationMode
                    };
                }
                return {
                    ...state,
                    validationMode: action.validationMode
                };
            }
            default:
                return state;
        }
    };
    const extractData = (state) => get_1(state, 'data');
    const extractSchema = (state) => get_1(state, 'schema');
    const extractUiSchema = (state) => get_1(state, 'uischema');
    const extractAjv = (state) => get_1(state, 'ajv');
    const getInvalidProperty = (error) => {
        switch (error.keyword) {
            case 'required':
            case 'dependencies':
                return error.params.missingProperty;
            case 'additionalProperties':
                return error.params.additionalProperty;
            default:
                return undefined;
        }
    };
    const getControlPath = (error) => {
        const dataPath = error.dataPath;
        if (dataPath) {
            return dataPath.replace(/\//g, '.').substr(1);
        }
        var controlPath = error.instancePath;
        controlPath = controlPath.replace(/\//g, '.');
        const invalidProperty = getInvalidProperty(error);
        if (invalidProperty !== undefined && !controlPath.endsWith(invalidProperty)) {
            controlPath = `${controlPath}.${invalidProperty}`;
        }
        controlPath = controlPath.replace(/^./, '');
        return controlPath;
    };
    const errorsAt = (instancePath, schema, matchPath) => (errors) => {
        const combinatorPaths = filter_1(errors, error => error.keyword === 'oneOf' || error.keyword === 'anyOf').map(error => getControlPath(error));
        return filter_1(errors, error => {
            if (filteredErrorKeywords.indexOf(error.keyword) !== -1) {
                return false;
            }
            const controlPath = getControlPath(error);
            let result = matchPath(controlPath);
            const parentSchema = error.parentSchema;
            if (result && !isObjectSchema$1(parentSchema)
                && combinatorPaths.findIndex(p => instancePath.startsWith(p)) !== -1) {
                result = result && isEqual_1(parentSchema, schema);
            }
            return result;
        });
    };
    const isObjectSchema$1 = (schema) => {
        return schema?.type === 'object' || !!schema?.properties;
    };
    const filteredErrorKeywords = ['additionalProperties', 'allOf', 'anyOf', 'oneOf'];
    const getErrorsAt = (instancePath, schema, matchPath) => (state) => {
        const errors = state.errors ?? [];
        const additionalErrors = state.additionalErrors ?? [];
        return errorsAt(instancePath, schema, matchPath)(state.validationMode === 'ValidateAndHide' ? additionalErrors : [...errors, ...additionalErrors]);
    };
    const errorAt = (instancePath, schema) => getErrorsAt(instancePath, schema, path => path === instancePath);
    const subErrorsAt = (instancePath, schema) => getErrorsAt(instancePath, schema, path => path.startsWith(instancePath));

    const getI18nKeyPrefixBySchema = (schema, uischema) => {
        if (isInternationalized(uischema)) {
            return uischema.i18n;
        }
        return schema?.i18n ?? undefined;
    };
    const transformPathToI18nPrefix = (path) => {
        return (path
            ?.split('.')
            .filter(segment => !/^\d+$/.test(segment))
            .join('.') || 'root');
    };
    const getI18nKeyPrefix = (schema, uischema, path) => {
        return (getI18nKeyPrefixBySchema(schema, uischema) ??
            transformPathToI18nPrefix(path));
    };
    const getI18nKey = (schema, uischema, path, key) => {
        return `${getI18nKeyPrefix(schema, uischema, path)}.${key}`;
    };
    const defaultTranslator = (_id, defaultMessage) => defaultMessage;
    const defaultErrorTranslator = (error, t, uischema) => {
        const i18nKey = getI18nKey(error.parentSchema, uischema, getControlPath(error), `error.${error.keyword}`);
        const specializedKeywordMessage = t(i18nKey, undefined, { error });
        if (specializedKeywordMessage !== undefined) {
            return specializedKeywordMessage;
        }
        const genericKeywordMessage = t(`error.${error.keyword}`, undefined, { error });
        if (genericKeywordMessage !== undefined) {
            return genericKeywordMessage;
        }
        const messageCustomization = t(error.message, undefined, { error });
        if (messageCustomization !== undefined) {
            return messageCustomization;
        }
        if (error.keyword === 'required' && error.message?.startsWith('must have required property')) {
            return t('is a required property', 'is a required property', { error });
        }
        return error.message;
    };
    const getCombinedErrorMessage = (errors, et, t, schema, uischema, path) => {
        if (errors.length > 0 && t) {
            const customErrorKey = getI18nKey(schema, uischema, path, 'error.custom');
            const specializedErrorMessage = t(customErrorKey, undefined, { schema, uischema, path, errors });
            if (specializedErrorMessage !== undefined) {
                return specializedErrorMessage;
            }
        }
        return formatErrorMessage(errors.map(error => et(error, t, uischema)));
    };
    const deriveLabelForUISchemaElement = (uischema, t) => {
        if (uischema.label === false) {
            return undefined;
        }
        if ((uischema.label === undefined || uischema.label === null || uischema.label === true) && !isInternationalized(uischema)) {
            return undefined;
        }
        const stringifiedLabel = typeof uischema.label === 'string' ? uischema.label : JSON.stringify(uischema.label);
        const i18nKeyPrefix = getI18nKeyPrefixBySchema(undefined, uischema);
        const i18nKey = typeof i18nKeyPrefix === 'string' ? `${i18nKeyPrefix}.label` : stringifiedLabel;
        return t(i18nKey, stringifiedLabel, { uischema: uischema });
    };

    const defaultJsonFormsI18nState = {
        locale: 'en',
        translate: defaultTranslator,
        translateError: defaultErrorTranslator
    };
    const i18nReducer = (state = defaultJsonFormsI18nState, action) => {
        switch (action.type) {
            case UPDATE_I18N: {
                const locale = action.locale ?? defaultJsonFormsI18nState.locale;
                const translate = action.translator ?? defaultJsonFormsI18nState.translate;
                const translateError = action.errorTranslator ?? defaultJsonFormsI18nState.translateError;
                if (locale !== state.locale ||
                    translate !== state.translate ||
                    translateError !== state.translateError) {
                    return {
                        ...state,
                        locale,
                        translate,
                        translateError
                    };
                }
                return state;
            }
            case SET_TRANSLATOR:
                return {
                    ...state,
                    translate: action.translator ?? defaultTranslator,
                    translateError: action.errorTranslator ?? defaultErrorTranslator
                };
            case SET_LOCALE:
                return {
                    ...state,
                    locale: action.locale ?? navigator.languages[0]
                };
            default:
                return state;
        }
    };
    const fetchTranslator = (state) => {
        if (state === undefined) {
            return defaultTranslator;
        }
        return state.translate;
    };
    const fetchErrorTranslator = (state) => {
        if (state === undefined) {
            return defaultErrorTranslator;
        }
        return state.translateError;
    };

    const NOT_APPLICABLE = -1;
    const isControl = (uischema) => !isEmpty_1(uischema) && uischema.scope !== undefined;
    const schemaMatches = (predicate) => (uischema, schema, context) => {
        if (isEmpty_1(uischema) || !isControl(uischema)) {
            return false;
        }
        if (isEmpty_1(schema)) {
            return false;
        }
        const schemaPath = uischema.scope;
        if (isEmpty_1(schemaPath)) {
            return false;
        }
        let currentDataSchema = schema;
        if (hasType(schema, 'object')) {
            currentDataSchema = resolveSchema(schema, schemaPath, context?.rootSchema);
        }
        if (currentDataSchema === undefined) {
            return false;
        }
        return predicate(currentDataSchema, context?.rootSchema);
    };
    const schemaSubPathMatches = (subPath, predicate) => (uischema, schema, context) => {
        if (isEmpty_1(uischema) || !isControl(uischema)) {
            return false;
        }
        const schemaPath = uischema.scope;
        let currentDataSchema = schema;
        if (hasType(schema, 'object')) {
            currentDataSchema = resolveSchema(schema, schemaPath, context?.rootSchema);
        }
        currentDataSchema = get_1(currentDataSchema, subPath);
        if (currentDataSchema === undefined) {
            return false;
        }
        return predicate(currentDataSchema, context?.rootSchema);
    };
    const schemaTypeIs = (expectedType) => schemaMatches(schema => !isEmpty_1(schema) && hasType(schema, expectedType));
    const formatIs = (expectedFormat) => schemaMatches(schema => !isEmpty_1(schema) &&
        schema.format === expectedFormat &&
        hasType(schema, 'string'));
    const uiTypeIs = (expected) => (uischema) => !isEmpty_1(uischema) && uischema.type === expected;
    const optionIs = (optionName, optionValue) => (uischema) => {
        if (isEmpty_1(uischema)) {
            return false;
        }
        const options = uischema.options;
        return !isEmpty_1(options) && options[optionName] === optionValue;
    };
    const and = (...testers) => (uischema, schema, context) => testers.reduce((acc, tester) => acc && tester(uischema, schema, context), true);
    const or = (...testers) => (uischema, schema, context) => testers.reduce((acc, tester) => acc || tester(uischema, schema, context), false);
    const rankWith = (rank, tester) => (uischema, schema, context) => {
        if (tester(uischema, schema, context)) {
            return rank;
        }
        return NOT_APPLICABLE;
    };
    const withIncreasedRank = (by, rankedTester) => (uischema, schema, context) => {
        const rank = rankedTester(uischema, schema, context);
        if (rank === NOT_APPLICABLE) {
            return NOT_APPLICABLE;
        }
        return rank + by;
    };
    const isBooleanControl = and(uiTypeIs('Control'), schemaTypeIs('boolean'));
    const isObjectControl = and(uiTypeIs('Control'), schemaTypeIs('object'));
    const isAllOfControl = and(uiTypeIs('Control'), schemaMatches(schema => schema.hasOwnProperty('allOf')));
    const isAnyOfControl = and(uiTypeIs('Control'), schemaMatches(schema => schema.hasOwnProperty('anyOf')));
    const isOneOfControl = and(uiTypeIs('Control'), schemaMatches(schema => schema.hasOwnProperty('oneOf')));
    const isEnumControl = and(uiTypeIs('Control'), or(schemaMatches(schema => schema.hasOwnProperty('enum')), schemaMatches(schema => schema.hasOwnProperty('const'))));
    const isOneOfEnumControl = and(uiTypeIs('Control'), schemaMatches(schema => schema.hasOwnProperty('oneOf') &&
        schema.oneOf.every(s => s.const !== undefined)));
    const isIntegerControl = and(uiTypeIs('Control'), schemaTypeIs('integer'));
    const isNumberControl = and(uiTypeIs('Control'), schemaTypeIs('number'));
    const isStringControl = and(uiTypeIs('Control'), schemaTypeIs('string'));
    const isDateControl = and(uiTypeIs('Control'), or(formatIs('date'), optionIs('format', 'date')));
    const isTimeControl = and(uiTypeIs('Control'), or(formatIs('time'), optionIs('format', 'time')));
    const isDateTimeControl = and(uiTypeIs('Control'), or(formatIs('date-time'), optionIs('format', 'date-time')));
    const isObjectArray = and(schemaMatches((schema, rootSchema) => hasType(schema, 'array') && !Array.isArray(resolveSchema(schema, 'items', rootSchema))
    ), schemaSubPathMatches('items', (schema, rootSchema) => {
        const resolvedSchema = schema.$ref ? resolveSchema(rootSchema, schema.$ref, rootSchema) : schema;
        return hasType(resolvedSchema, 'object');
    }));
    const isObjectArrayControl = and(uiTypeIs('Control'), isObjectArray);
    const traverse = (any, pred, rootSchema) => {
        if (isArray_1(any)) {
            return reduce_1(any, (acc, el) => acc || traverse(el, pred, rootSchema), false);
        }
        if (pred(any)) {
            return true;
        }
        if (any.$ref) {
            const toTraverse = resolveSchema(rootSchema, any.$ref, rootSchema);
            if (toTraverse && !toTraverse.$ref) {
                return traverse(toTraverse, pred, rootSchema);
            }
        }
        if (any.items) {
            return traverse(any.items, pred, rootSchema);
        }
        if (any.properties) {
            return reduce_1(toPairs_1(any.properties), (acc, [_key, val]) => acc || traverse(val, pred, rootSchema), false);
        }
        return false;
    };
    const isObjectArrayWithNesting = (uischema, schema, context) => {
        if (!uiTypeIs('Control')(uischema, schema, context)) {
            return false;
        }
        const schemaPath = uischema.scope;
        const resolvedSchema = resolveSchema(schema, schemaPath, context?.rootSchema ?? schema);
        let objectDepth = 0;
        if (resolvedSchema !== undefined && resolvedSchema.items !== undefined) {
            if (traverse(resolvedSchema.items, val => {
                if (val === schema) {
                    return false;
                }
                if (val.$ref !== undefined) {
                    return false;
                }
                if (val.anyOf || val.oneOf) {
                    return true;
                }
                if (hasType(val, 'object')) {
                    objectDepth++;
                    if (objectDepth === 2) {
                        return true;
                    }
                }
                if (hasType(val, 'array')) {
                    return true;
                }
                return false;
            }, context?.rootSchema)) {
                return true;
            }
            if (uischema.options && uischema.options.detail) {
                if (typeof uischema.options.detail === 'string') {
                    return uischema.options.detail.toUpperCase() !== 'DEFAULT';
                }
                else if (typeof uischema.options.detail === 'object' &&
                    uischema.options.detail.type) {
                    return true;
                }
            }
        }
        return false;
    };
    const isPrimitiveArrayControl = and(uiTypeIs('Control'), schemaMatches((schema, rootSchema) => deriveTypes(schema).length !== 0 &&
        !Array.isArray(resolveSchema(schema, 'items', rootSchema))
    ), schemaSubPathMatches('items', (schema, rootSchema) => {
        const resolvedSchema = schema.$ref ? resolveSchema(rootSchema, schema.$ref, rootSchema) : schema;
        const types = deriveTypes(resolvedSchema);
        return (types.length === 1 &&
            includes_1(['integer', 'number', 'boolean', 'string'], types[0]));
    }));
    const isRangeControl = and(uiTypeIs('Control'), or(schemaTypeIs('number'), schemaTypeIs('integer')), schemaMatches(schema => schema.hasOwnProperty('maximum') &&
        schema.hasOwnProperty('minimum') &&
        schema.hasOwnProperty('default')), optionIs('slider', true));
    const isNumberFormatControl = and(uiTypeIs('Control'), schemaTypeIs('integer'), optionIs('format', true));
    const isCategorization = (category) => category.type === 'Categorization';
    const isCategory = (uischema) => uischema.type === 'Category';
    const hasCategory = (categorization) => {
        if (isEmpty_1(categorization.elements)) {
            return false;
        }
        return categorization.elements
            .map(elem => isCategorization(elem) ? hasCategory(elem) : isCategory(elem))
            .reduce((prev, curr) => prev && curr, true);
    };
    const categorizationHasCategory = (uischema) => hasCategory(uischema);
    const findMatchingUISchema = (state) => (jsonSchema, schemaPath, path) => {
        const match = maxBy_1(state, entry => entry.tester(jsonSchema, schemaPath, path));
        if (match !== undefined &&
            match.tester(jsonSchema, schemaPath, path) !== NOT_APPLICABLE) {
            return match.uischema;
        }
        return undefined;
    };
    const findUISchema = (uischemas, schema, schemaPath, path, fallback = 'VerticalLayout', control, rootSchema) => {
        if (control && control.options && control.options.detail) {
            if (typeof control.options.detail === 'string') {
                if (control.options.detail.toUpperCase() === 'GENERATE') {
                    if (typeof fallback === "function") {
                        return fallback();
                    }
                    return Generate.uiSchema(schema, fallback);
                }
            }
            else if (typeof control.options.detail === 'object') {
                if (control.options.detail.type &&
                    typeof control.options.detail.type === 'string') {
                    return control.options.detail;
                }
            }
        }
        const uiSchema = findMatchingUISchema(uischemas)(schema, schemaPath, path);
        if (uiSchema === undefined) {
            if (typeof fallback === 'function') {
                return fallback();
            }
            return Generate.uiSchema(schema, fallback, '#', rootSchema);
        }
        return uiSchema;
    };
    const getErrorAt = (instancePath, schema) => (state) => {
        return errorAt(instancePath, schema)(state.jsonforms.core);
    };
    const getSubErrorsAt = (instancePath, schema) => (state) => subErrorsAt(instancePath, schema)(state.jsonforms.core);
    const getConfig = (state) => state.jsonforms.config;
    const getTranslator = () => (state) => fetchTranslator(get_1(state, 'jsonforms.i18n'));
    const getErrorTranslator = () => (state) => fetchErrorTranslator(get_1(state, 'jsonforms.i18n'));

    const getData$1 = (state) => extractData(get_1(state, 'jsonforms.core'));
    const getSchema = (state) => extractSchema(get_1(state, 'jsonforms.core'));
    const getUiSchema = (state) => extractUiSchema(get_1(state, 'jsonforms.core'));
    const getAjv = (state) => extractAjv(get_1(state, 'jsonforms.core'));
    const getRenderers = (state) => get_1(state, 'jsonforms.renderers');
    const getCells = (state) => get_1(state, 'jsonforms.cells');
    const getUISchemas = (state) => get_1(state, 'jsonforms.uischemas');

    const compose$1 = (path1, path2) => {
        let p1 = path1;
        if (!isEmpty_1(path1) && !isEmpty_1(path2) && !path2.startsWith('[')) {
            p1 = path1 + '.';
        }
        if (isEmpty_1(p1)) {
            return path2;
        }
        else if (isEmpty_1(path2)) {
            return p1;
        }
        else {
            return `${p1}${path2}`;
        }
    };
    const toDataPathSegments = (schemaPath) => {
        const s = schemaPath
            .replace(/(anyOf|allOf|oneOf)\/[\d]\//g, '')
            .replace(/(then|else)\//g, '');
        const segments = s.split('/');
        const decodedSegments = segments.map(decode);
        const startFromRoot = decodedSegments[0] === '#' || decodedSegments[0] === '';
        const startIndex = startFromRoot ? 2 : 1;
        return range_1(startIndex, decodedSegments.length, 2).map(idx => decodedSegments[idx]);
    };
    const composeWithUi = (scopableUi, path) => {
        if (!isScoped(scopableUi)) {
            return path ?? '';
        }
        const segments = toDataPathSegments(scopableUi.scope);
        if (isEmpty_1(segments)) {
            return path ?? '';
        }
        return compose$1(path, segments.join('.'));
    };
    const encode = (segment) => segment?.replace(/~/g, '~0').replace(/\//g, '~1');
    const decode = (pointerSegment) => pointerSegment?.replace(/~1/g, '/').replace(/~0/, '~');
    const resolveData = (instance, dataPath) => {
        if (isEmpty_1(dataPath)) {
            return instance;
        }
        const dataPathSegments = dataPath.split('.');
        return dataPathSegments
            .map(segment => decodeURIComponent(segment))
            .reduce((curInstance, decodedSegment) => {
            if (!curInstance || !curInstance.hasOwnProperty(decodedSegment)) {
                return undefined;
            }
            return curInstance[decodedSegment];
        }, instance);
    };
    const invalidSegment = (pathSegment) => pathSegment === '#' || pathSegment === undefined || pathSegment === '';
    const resolveSchema = (schema, schemaPath, rootSchema) => {
        const segments = schemaPath?.split('/').map(decode);
        return resolveSchemaWithSegments(schema, segments, rootSchema);
    };
    const resolveSchemaWithSegments = (schema, pathSegments, rootSchema) => {
        if (isEmpty_1(schema)) {
            return undefined;
        }
        if (schema.$ref) {
            schema = resolveSchema(rootSchema, schema.$ref, rootSchema);
        }
        if (!pathSegments || pathSegments.length === 0) {
            return schema;
        }
        const [segment, ...remainingSegments] = pathSegments;
        if (invalidSegment(segment)) {
            return resolveSchemaWithSegments(schema, remainingSegments, rootSchema);
        }
        const singleSegmentResolveSchema = get_1(schema, segment);
        const resolvedSchema = resolveSchemaWithSegments(singleSegmentResolveSchema, remainingSegments, rootSchema);
        if (resolvedSchema) {
            return resolvedSchema;
        }
        if (segment === 'properties' || segment === 'items') {
            let alternativeResolveResult = undefined;
            const subSchemas = [].concat(schema.oneOf ?? [], schema.allOf ?? [], schema.anyOf ?? [], schema.then ?? [], schema.else ?? []);
            for (const subSchema of subSchemas) {
                alternativeResolveResult = resolveSchemaWithSegments(subSchema, [segment, ...remainingSegments], rootSchema);
                if (alternativeResolveResult) {
                    break;
                }
            }
            return alternativeResolveResult;
        }
        return undefined;
    };

    const isOrCondition = (condition) => condition.type === 'OR';
    const isAndCondition = (condition) => condition.type === 'AND';
    const isLeafCondition = (condition) => condition.type === 'LEAF';
    const isSchemaCondition = (condition) => has_1(condition, 'schema');
    const getConditionScope = (condition, path) => {
        return composeWithUi(condition, path);
    };
    const evaluateCondition = (data, condition, path, ajv) => {
        if (isAndCondition(condition)) {
            return condition.conditions.reduce((acc, cur) => acc && evaluateCondition(data, cur, path, ajv), true);
        }
        else if (isOrCondition(condition)) {
            return condition.conditions.reduce((acc, cur) => acc || evaluateCondition(data, cur, path, ajv), false);
        }
        else if (isLeafCondition(condition)) {
            const value = resolveData(data, getConditionScope(condition, path));
            return value === condition.expectedValue;
        }
        else if (isSchemaCondition(condition)) {
            const value = resolveData(data, getConditionScope(condition, path));
            return ajv.validate(condition.schema, value);
        }
        else {
            return true;
        }
    };
    const isRuleFulfilled = (uischema, data, path, ajv) => {
        const condition = uischema.rule.condition;
        return evaluateCondition(data, condition, path, ajv);
    };
    const evalVisibility = (uischema, data, path = undefined, ajv) => {
        const fulfilled = isRuleFulfilled(uischema, data, path, ajv);
        switch (uischema.rule.effect) {
            case RuleEffect.HIDE:
                return !fulfilled;
            case RuleEffect.SHOW:
                return fulfilled;
            default:
                return true;
        }
    };
    const evalEnablement = (uischema, data, path = undefined, ajv) => {
        const fulfilled = isRuleFulfilled(uischema, data, path, ajv);
        switch (uischema.rule.effect) {
            case RuleEffect.DISABLE:
                return !fulfilled;
            case RuleEffect.ENABLE:
                return fulfilled;
            default:
                return true;
        }
    };
    const hasShowRule = (uischema) => {
        if (uischema.rule &&
            (uischema.rule.effect === RuleEffect.SHOW ||
                uischema.rule.effect === RuleEffect.HIDE)) {
            return true;
        }
        return false;
    };
    const hasEnableRule = (uischema) => {
        if (uischema.rule &&
            (uischema.rule.effect === RuleEffect.ENABLE ||
                uischema.rule.effect === RuleEffect.DISABLE)) {
            return true;
        }
        return false;
    };
    const isVisible = (uischema, data, path = undefined, ajv) => {
        if (uischema.rule) {
            return evalVisibility(uischema, data, path, ajv);
        }
        return true;
    };
    const isEnabled = (uischema, data, path = undefined, ajv) => {
        if (uischema.rule) {
            return evalEnablement(uischema, data, path, ajv);
        }
        return true;
    };
    const isInherentlyEnabled = (state, ownProps, uischema, schema, rootData, config) => {
        if (state?.jsonforms?.readonly) {
            return false;
        }
        if (uischema && hasEnableRule(uischema)) {
            return isEnabled(uischema, rootData, ownProps?.path, getAjv(state));
        }
        if (typeof uischema?.options?.readonly === 'boolean') {
            return !uischema.options.readonly;
        }
        if (typeof uischema?.options?.readOnly === 'boolean') {
            return !uischema.options.readOnly;
        }
        if (typeof config?.readonly === 'boolean') {
            return !config.readonly;
        }
        if (typeof config?.readOnly === 'boolean') {
            return !config.readOnly;
        }
        if (schema?.readOnly === true) {
            return false;
        }
        if (typeof ownProps?.enabled === 'boolean') {
            return ownProps.enabled;
        }
        return true;
    };
    const formatErrorMessage = (errors) => {
        if (errors === undefined || errors === null) {
            return '';
        }
        return errors.join('\n');
    };
    const hasType = (jsonSchema, expected) => {
        return includes_1(deriveTypes(jsonSchema), expected);
    };
    const deriveTypes = (jsonSchema) => {
        if (isEmpty_1(jsonSchema)) {
            return [];
        }
        if (!isEmpty_1(jsonSchema.type) && typeof jsonSchema.type === 'string') {
            return [jsonSchema.type];
        }
        if (isArray_1(jsonSchema.type)) {
            return jsonSchema.type;
        }
        if (!isEmpty_1(jsonSchema.properties) ||
            !isEmpty_1(jsonSchema.additionalProperties)) {
            return ['object'];
        }
        if (!isEmpty_1(jsonSchema.items)) {
            return ['array'];
        }
        if (!isEmpty_1(jsonSchema.allOf)) {
            const allOfType = find_1(jsonSchema.allOf, (schema) => deriveTypes(schema).length !== 0);
            if (allOfType) {
                return deriveTypes(allOfType);
            }
        }
        return [];
    };
    const Resolve = {
        schema: resolveSchema,
        data: resolveData
    };
    const fromScoped = (scopable) => toDataPathSegments(scopable.scope).join('.');
    const Paths = {
        compose: compose$1,
        fromScoped
    };

    const deriveLabel = (controlElement, schemaElement) => {
        if (schemaElement && typeof schemaElement.title === 'string') {
            return schemaElement.title;
        }
        if (typeof controlElement.scope === 'string') {
            const ref = controlElement.scope;
            const label = decode(ref.substr(ref.lastIndexOf('/') + 1));
            return startCase_1(label);
        }
        return '';
    };
    const createLabelDescriptionFrom = (withLabel, schema) => {
        const labelProperty = withLabel.label;
        if (typeof labelProperty === 'boolean') {
            return labelDescription(deriveLabel(withLabel, schema), labelProperty);
        }
        if (typeof labelProperty === 'string') {
            return labelDescription(labelProperty, true);
        }
        if (typeof labelProperty === 'object') {
            const label = typeof labelProperty.text === 'string'
                ? labelProperty.text
                : deriveLabel(withLabel, schema);
            const show = typeof labelProperty.show === 'boolean' ? labelProperty.show : true;
            return labelDescription(label, show);
        }
        return labelDescription(deriveLabel(withLabel, schema), true);
    };
    const labelDescription = (text, show) => ({
        text: text,
        show: show
    });

    const isRequired = (schema, schemaPath, rootSchema) => {
        const pathSegments = schemaPath.split('/');
        const lastSegment = pathSegments[pathSegments.length - 1];
        const nextHigherSchemaSegments = pathSegments.slice(0, pathSegments.length - 2);
        const nextHigherSchemaPath = nextHigherSchemaSegments.join('/');
        const nextHigherSchema = Resolve.schema(schema, nextHigherSchemaPath, rootSchema);
        return (nextHigherSchema !== undefined &&
            nextHigherSchema.required !== undefined &&
            nextHigherSchema.required.indexOf(lastSegment) !== -1);
    };
    const computeLabel = (label, required, hideRequiredAsterisk) => {
        return `${label ?? ''}${required && !hideRequiredAsterisk ? '*' : ''}`;
    };
    const showAsRequired = (required, hideRequiredAsterisk) => {
        return required && !hideRequiredAsterisk;
    };
    const createDefaultValue = (schema) => {
        switch (schema.type) {
            case 'string':
                if (schema.format === 'date-time' ||
                    schema.format === 'date' ||
                    schema.format === 'time') {
                    return new Date();
                }
                return '';
            case 'integer':
            case 'number':
                return 0;
            case 'boolean':
                return false;
            case 'array':
                return [];
            case 'null':
                return null;
            default:
                return {};
        }
    };
    const isDescriptionHidden = (visible, description, isFocused, showUnfocusedDescription) => {
        return (description === undefined ||
            (description !== undefined && !visible) ||
            (!showUnfocusedDescription && !isFocused));
    };
    const enumToEnumOptionMapper = (e, t, i18nKey) => {
        let label = typeof e === 'string' ? e : JSON.stringify(e);
        if (t) {
            if (i18nKey) {
                label = t(`${i18nKey}.${label}`, label);
            }
            else {
                label = t(label, label);
            }
        }
        return { label, value: e };
    };
    const oneOfToEnumOptionMapper = (e, t, fallbackI18nKey) => {
        let label = e.title ??
            (typeof e.const === 'string' ? e.const : JSON.stringify(e.const));
        if (t) {
            if (e.i18n) {
                label = t(e.i18n, label);
            }
            else if (fallbackI18nKey) {
                label = t(`${fallbackI18nKey}.${label}`, label);
            }
            else {
                label = t(label, label);
            }
        }
        return {
            label,
            value: e.const,
        };
    };
    const mapStateToControlProps = (state, ownProps) => {
        const { uischema } = ownProps;
        const rootData = getData$1(state);
        const path = composeWithUi(uischema, ownProps.path);
        const visible = ownProps.visible === undefined || hasShowRule(uischema)
            ? isVisible(uischema, rootData, ownProps.path, getAjv(state))
            : ownProps.visible;
        const controlElement = uischema;
        const id = ownProps.id;
        const rootSchema = getSchema(state);
        const required = controlElement.scope !== undefined &&
            isRequired(ownProps.schema, controlElement.scope, rootSchema);
        const resolvedSchema = Resolve.schema(ownProps.schema || rootSchema, controlElement.scope, rootSchema);
        const errors = getErrorAt(path, resolvedSchema)(state);
        const description = resolvedSchema !== undefined ? resolvedSchema.description : '';
        const data = Resolve.data(rootData, path);
        const labelDesc = createLabelDescriptionFrom(uischema, resolvedSchema);
        const label = labelDesc.show ? labelDesc.text : '';
        const config = getConfig(state);
        const enabled = isInherentlyEnabled(state, ownProps, uischema, resolvedSchema || rootSchema, rootData, config);
        const schema = resolvedSchema ?? rootSchema;
        const t = getTranslator()(state);
        const te = getErrorTranslator()(state);
        const i18nLabel = t(getI18nKey(schema, uischema, path, 'label'), label, { schema, uischema, path, errors });
        const i18nDescription = t(getI18nKey(schema, uischema, path, 'description'), description, { schema, uischema, path, errors });
        const i18nErrorMessage = getCombinedErrorMessage(errors, te, t, schema, uischema, path);
        return {
            data,
            description: i18nDescription,
            errors: i18nErrorMessage,
            label: i18nLabel,
            visible,
            enabled,
            id,
            path,
            required,
            uischema,
            schema,
            config: getConfig(state),
            cells: ownProps.cells || state.jsonforms.cells,
            rootSchema
        };
    };
    const mapDispatchToControlProps = (dispatch) => ({
        handleChange(path, value) {
            dispatch(update(path, () => value));
        }
    });
    const mapStateToEnumControlProps = (state, ownProps) => {
        const props = mapStateToControlProps(state, ownProps);
        const options = ownProps.options ||
            props.schema.enum?.map(e => enumToEnumOptionMapper(e, getTranslator()(state), getI18nKeyPrefix(props.schema, props.uischema, props.path))) ||
            (props.schema.const && [
                enumToEnumOptionMapper(props.schema.const, getTranslator()(state), getI18nKeyPrefix(props.schema, props.uischema, props.path))
            ]);
        return {
            ...props,
            options
        };
    };
    const mapStateToOneOfEnumControlProps = (state, ownProps) => {
        const props = mapStateToControlProps(state, ownProps);
        const options = ownProps.options ||
            props.schema.oneOf?.map(oneOfSubSchema => oneOfToEnumOptionMapper(oneOfSubSchema, getTranslator()(state), getI18nKeyPrefix(props.schema, props.uischema, props.path)));
        return {
            ...props,
            options
        };
    };
    const mapStateToMultiEnumControlProps = (state, ownProps) => {
        const props = mapStateToControlProps(state, ownProps);
        const items = props.schema.items;
        const options = ownProps.options ||
            (items?.oneOf &&
                items.oneOf.map(oneOfSubSchema => oneOfToEnumOptionMapper(oneOfSubSchema, state.jsonforms.i18n?.translate, getI18nKeyPrefix(props.schema, props.uischema, props.path)))) ||
            items?.enum?.map(e => enumToEnumOptionMapper(e, state.jsonforms.i18n?.translate, getI18nKeyPrefix(props.schema, props.uischema, props.path)));
        return {
            ...props,
            options
        };
    };
    const mapStateToMasterListItemProps = (state, ownProps) => {
        const { schema, path, index } = ownProps;
        const firstPrimitiveProp = schema.properties
            ? find_1(Object.keys(schema.properties), propName => {
                const prop = schema.properties[propName];
                return (prop.type === 'string' ||
                    prop.type === 'number' ||
                    prop.type === 'integer');
            })
            : undefined;
        const childPath = compose$1(path, `${index}`);
        const childData = Resolve.data(getData$1(state), childPath);
        const childLabel = firstPrimitiveProp ? childData[firstPrimitiveProp] : '';
        return {
            ...ownProps,
            childLabel
        };
    };
    const mapStateToControlWithDetailProps = (state, ownProps) => {
        const { ...props } = mapStateToControlProps(state, ownProps);
        return {
            ...props,
            uischemas: state.jsonforms.uischemas
        };
    };
    const mapDispatchToArrayControlProps = (dispatch) => ({
        addItem: (path, value) => () => {
            dispatch(update(path, array => {
                if (array === undefined || array === null) {
                    return [value];
                }
                array.push(value);
                return array;
            }));
        },
        removeItems: (path, toDelete) => () => {
            dispatch(update(path, array => {
                toDelete
                    .sort()
                    .reverse()
                    .forEach(s => array.splice(s, 1));
                return array;
            }));
        },
        moveUp: (path, toMove) => () => {
            dispatch(update(path, array => {
                moveUp(array, toMove);
                return array;
            }));
        },
        moveDown: (path, toMove) => () => {
            dispatch(update(path, array => {
                moveDown(array, toMove);
                return array;
            }));
        }
    });
    const mapDispatchToMultiEnumProps = (dispatch) => ({
        addItem: (path, value) => {
            dispatch(update(path, data => {
                if (data === undefined || data === null) {
                    return [value];
                }
                data.push(value);
                return data;
            }));
        },
        removeItem: (path, toDelete) => {
            dispatch(update(path, data => {
                const indexInData = data.indexOf(toDelete);
                data.splice(indexInData, 1);
                return data;
            }));
        }
    });
    const layoutDefaultProps = {
        visible: true,
        enabled: true,
        path: '',
        direction: 'column'
    };
    const getDirection = (uischema) => {
        if (uischema.type === 'HorizontalLayout') {
            return 'row';
        }
        if (uischema.type === 'VerticalLayout') {
            return 'column';
        }
        return layoutDefaultProps.direction;
    };
    const mapStateToLayoutProps = (state, ownProps) => {
        const rootData = getData$1(state);
        const { uischema } = ownProps;
        const visible = ownProps.visible === undefined || hasShowRule(uischema)
            ? isVisible(ownProps.uischema, rootData, ownProps.path, getAjv(state))
            : ownProps.visible;
        const data = Resolve.data(rootData, ownProps.path);
        const config = getConfig(state);
        const enabled = isInherentlyEnabled(state, ownProps, uischema, undefined,
        rootData, config);
        const t = getTranslator()(state);
        const label = isLabelable(uischema) ? deriveLabelForUISchemaElement(uischema, t) : undefined;
        return {
            ...layoutDefaultProps,
            renderers: ownProps.renderers || getRenderers(state),
            cells: ownProps.cells || getCells(state),
            visible,
            enabled,
            path: ownProps.path,
            data,
            uischema: ownProps.uischema,
            schema: ownProps.schema,
            direction: ownProps.direction ?? getDirection(uischema),
            config,
            label
        };
    };
    const mapStateToJsonFormsRendererProps = (state, ownProps) => {
        return {
            renderers: ownProps.renderers || get_1(state.jsonforms, 'renderers'),
            cells: ownProps.cells || get_1(state.jsonforms, 'cells'),
            schema: ownProps.schema || getSchema(state),
            rootSchema: getSchema(state),
            uischema: ownProps.uischema || getUiSchema(state),
            path: ownProps.path,
            enabled: ownProps.enabled,
            config: getConfig(state)
        };
    };
    const mapStateToCombinatorRendererProps = (state, ownProps, keyword) => {
        const { data, schema, rootSchema, ...props } = mapStateToControlProps(state, ownProps);
        const ajv = state.jsonforms.core.ajv;
        const structuralKeywords = [
            'required',
            'additionalProperties',
            'type',
            'enum',
            'const'
        ];
        const dataIsValid = (errors) => {
            return (!errors ||
                errors.length === 0 ||
                !errors.find(e => structuralKeywords.indexOf(e.keyword) !== -1));
        };
        let indexOfFittingSchema;
        for (let i = 0; i < schema[keyword]?.length; i++) {
            try {
                let _schema = schema[keyword][i];
                if (_schema.$ref) {
                    _schema = Resolve.schema(rootSchema, _schema.$ref, rootSchema);
                }
                const valFn = ajv.compile(_schema);
                valFn(data);
                if (dataIsValid(valFn.errors)) {
                    indexOfFittingSchema = i;
                    break;
                }
            }
            catch (error) {
                console.debug("Combinator subschema is not self contained, can't hand it over to AJV");
            }
        }
        return {
            data,
            schema,
            rootSchema,
            ...props,
            indexOfFittingSchema,
            uischemas: getUISchemas(state)
        };
    };
    const mapStateToAllOfProps = (state, ownProps) => mapStateToCombinatorRendererProps(state, ownProps, 'allOf');
    const mapStateToAnyOfProps = (state, ownProps) => {
        return mapStateToCombinatorRendererProps(state, ownProps, 'anyOf');
    };
    const mapStateToOneOfProps = (state, ownProps) => {
        return mapStateToCombinatorRendererProps(state, ownProps, 'oneOf');
    };
    const mapStateToArrayLayoutProps = (state, ownProps) => {
        const { path, schema, uischema, errors, ...props } = mapStateToControlWithDetailProps(state, ownProps);
        const resolvedSchema = Resolve.schema(schema, 'items', props.rootSchema);
        const childErrors = getCombinedErrorMessage(getSubErrorsAt(path, resolvedSchema)(state), getErrorTranslator()(state), getTranslator()(state), undefined, undefined, undefined);
        const allErrors = errors +
            (errors.length > 0 && childErrors.length > 0 ? '\n' : '') +
            childErrors;
        return {
            ...props,
            path,
            uischema,
            schema: resolvedSchema,
            data: props.data ? props.data.length : 0,
            errors: allErrors,
            minItems: schema.minItems
        };
    };
    const mapStateToLabelProps = (state, props) => {
        const { uischema } = props;
        const visible = props.visible === undefined || hasShowRule(uischema)
            ? isVisible(props.uischema, getData$1(state), props.path, getAjv(state))
            : props.visible;
        const text = uischema.text;
        const t = getTranslator()(state);
        const i18nKeyPrefix = getI18nKeyPrefixBySchema(undefined, uischema);
        const i18nKey = i18nKeyPrefix ? `${i18nKeyPrefix}.text` : text ?? '';
        const i18nText = t(i18nKey, text, { uischema });
        return {
            text: i18nText,
            visible,
            config: getConfig(state),
            renderers: props.renderers || getRenderers(state),
            cells: props.cells || getCells(state),
        };
    };

    const mapStateToCellProps = (state, ownProps) => {
        const { id, schema, path, uischema, renderers, cells } = ownProps;
        const rootData = getData$1(state);
        const visible = ownProps.visible !== undefined
            ? ownProps.visible
            : isVisible(uischema, rootData, undefined, getAjv(state));
        const rootSchema = getSchema(state);
        const config = getConfig(state);
        let enabled;
        if (state.jsonforms.readonly === true) {
            enabled = false;
        }
        else if (typeof ownProps.enabled === 'boolean') {
            enabled = ownProps.enabled;
        }
        else {
            enabled = isInherentlyEnabled(state, ownProps, uischema, schema || rootSchema, rootData, config);
        }
        const errors = formatErrorMessage(union_1(getErrorAt(path, schema)(state).map(error => error.message)));
        const isValid = isEmpty_1(errors);
        return {
            data: Resolve.data(rootData, path),
            visible,
            enabled,
            id,
            path,
            errors,
            isValid,
            schema,
            uischema,
            config: getConfig(state),
            rootSchema,
            renderers,
            cells
        };
    };
    const mapStateToDispatchCellProps = (state, ownProps) => {
        const props = mapStateToCellProps(state, ownProps);
        const { renderers, cells, ...otherOwnProps } = ownProps;
        return {
            ...props,
            ...otherOwnProps,
            cells: cells || state.jsonforms.cells || []
        };
    };
    const defaultMapStateToEnumCellProps = (state, ownProps) => {
        const props = mapStateToCellProps(state, ownProps);
        const options = ownProps.options ||
            props.schema.enum?.map(e => enumToEnumOptionMapper(e, getTranslator()(state), getI18nKeyPrefix(props.schema, props.uischema, props.path))) ||
            (props.schema.const && [
                enumToEnumOptionMapper(props.schema.const, getTranslator()(state), getI18nKeyPrefix(props.schema, props.uischema, props.path))
            ]);
        return {
            ...props,
            options
        };
    };
    const mapStateToOneOfEnumCellProps = (state, ownProps) => {
        const props = mapStateToCellProps(state, ownProps);
        const options = ownProps.options ||
            props.schema.oneOf?.map(oneOfSubSchema => oneOfToEnumOptionMapper(oneOfSubSchema, getTranslator()(state), getI18nKeyPrefix(props.schema, props.uischema, props.path)));
        return {
            ...props,
            options
        };
    };

    const createLabel = (subSchema, subSchemaIndex, keyword) => {
        if (subSchema.title) {
            return subSchema.title;
        }
        else {
            return keyword + '-' + subSchemaIndex;
        }
    };
    const createCombinatorRenderInfos$1 = (combinatorSubSchemas, rootSchema, keyword, control, path, uischemas) => combinatorSubSchemas.map((subSchema, subSchemaIndex) => {
        const schema = subSchema.$ref ? Resolve.schema(rootSchema, subSchema.$ref, rootSchema) : subSchema;
        return {
            schema,
            uischema: findUISchema(uischemas, schema, control.scope, path, undefined, control, rootSchema),
            label: createLabel(subSchema, subSchemaIndex, keyword)
        };
    });

    const usedIds = new Set();
    const makeId = (idBase, iteration) => iteration <= 1 ? idBase : idBase + iteration.toString();
    const isUniqueId = (idBase, iteration) => {
        const newID = makeId(idBase, iteration);
        return !usedIds.has(newID);
    };
    const createId = (proposedId) => {
        if (proposedId === undefined) {
            proposedId = 'undefined';
        }
        let tries = 0;
        while (!isUniqueId(proposedId, tries)) {
            tries++;
        }
        const newID = makeId(proposedId, tries);
        usedIds.add(newID);
        return newID;
    };
    const removeId = (id) => usedIds.delete(id);

    const getFirstPrimitiveProp = (schema) => {
        if (schema.properties) {
            return find_1(Object.keys(schema.properties), propName => {
                const prop = schema.properties[propName];
                return (prop.type === 'string' ||
                    prop.type === 'number' ||
                    prop.type === 'integer');
            });
        }
        return undefined;
    };

    const createAjv = (options) => {
        const ajv = new Ajv({
            allErrors: true,
            verbose: true,
            strict: false,
            ...options
        });
        addFormats(ajv);
        return ajv;
    };

    const createLayout = (layoutType) => ({
        type: layoutType,
        elements: []
    });
    const createControlElement = (ref) => ({
        type: 'Control',
        scope: ref
    });
    const wrapInLayoutIfNecessary = (uischema, layoutType) => {
        if (!isEmpty_1(uischema) && !isLayout$2(uischema)) {
            const verticalLayout = createLayout(layoutType);
            verticalLayout.elements.push(uischema);
            return verticalLayout;
        }
        return uischema;
    };
    const addLabel = (layout, labelName) => {
        if (!isEmpty_1(labelName)) {
            const fixedLabel = startCase_1(labelName);
            if (isGroup(layout)) {
                layout.label = fixedLabel;
            }
            else {
                const label = {
                    type: 'Label',
                    text: fixedLabel
                };
                layout.elements.push(label);
            }
        }
    };
    const isCombinator = (jsonSchema) => {
        return (!isEmpty_1(jsonSchema) &&
            (!isEmpty_1(jsonSchema.oneOf) ||
                !isEmpty_1(jsonSchema.anyOf) ||
                !isEmpty_1(jsonSchema.allOf)));
    };
    const generateUISchema = (jsonSchema, schemaElements, currentRef, schemaName, layoutType, rootSchema) => {
        if (!isEmpty_1(jsonSchema) && jsonSchema.$ref !== undefined) {
            return generateUISchema(resolveSchema(rootSchema, jsonSchema.$ref, rootSchema), schemaElements, currentRef, schemaName, layoutType, rootSchema);
        }
        if (isCombinator(jsonSchema)) {
            const controlObject = createControlElement(currentRef);
            schemaElements.push(controlObject);
            return controlObject;
        }
        const types = deriveTypes(jsonSchema);
        if (types.length === 0) {
            return null;
        }
        if (types.length > 1) {
            const controlObject = createControlElement(currentRef);
            schemaElements.push(controlObject);
            return controlObject;
        }
        if (currentRef === '#' && types[0] === 'object') {
            const layout = createLayout(layoutType);
            schemaElements.push(layout);
            if (jsonSchema.properties && keys_1(jsonSchema.properties).length > 1) {
                addLabel(layout, schemaName);
            }
            if (!isEmpty_1(jsonSchema.properties)) {
                const nextRef = currentRef + '/properties';
                Object.keys(jsonSchema.properties).map(propName => {
                    let value = jsonSchema.properties[propName];
                    const ref = `${nextRef}/${encode(propName)}`;
                    if (value.$ref !== undefined) {
                        value = resolveSchema(rootSchema, value.$ref, rootSchema);
                    }
                    generateUISchema(value, layout.elements, ref, propName, layoutType, rootSchema);
                });
            }
            return layout;
        }
        switch (types[0]) {
            case 'object':
            case 'array':
            case 'string':
            case 'number':
            case 'integer':
            case 'boolean':
                const controlObject = createControlElement(currentRef);
                schemaElements.push(controlObject);
                return controlObject;
            default:
                throw new Error('Unknown type: ' + JSON.stringify(jsonSchema));
        }
    };
    const generateDefaultUISchema = (jsonSchema, layoutType = 'VerticalLayout', prefix = '#', rootSchema = jsonSchema) => wrapInLayoutIfNecessary(generateUISchema(jsonSchema, [], prefix, '', layoutType, rootSchema), layoutType);

    const Generate = {
        jsonSchema: generateJsonSchema,
        uiSchema: generateDefaultUISchema,
        controlElement: createControlElement
    };

    const INIT = 'jsonforms/INIT';
    const UPDATE_CORE = `jsonforms/UPDATE_CORE`;
    const SET_AJV = 'jsonforms/SET_AJV';
    const UPDATE_DATA = 'jsonforms/UPDATE';
    const UPDATE_ERRORS = 'jsonforms/UPDATE_ERRORS';
    const VALIDATE = 'jsonforms/VALIDATE';
    const ADD_RENDERER = 'jsonforms/ADD_RENDERER';
    const REMOVE_RENDERER = 'jsonforms/REMOVE_RENDERER';
    const ADD_CELL = 'jsonforms/ADD_CELL';
    const REMOVE_CELL = 'jsonforms/REMOVE_CELL';
    const SET_CONFIG = 'jsonforms/SET_CONFIG';
    const ADD_UI_SCHEMA = `jsonforms/ADD_UI_SCHEMA`;
    const REMOVE_UI_SCHEMA = `jsonforms/REMOVE_UI_SCHEMA`;
    const SET_SCHEMA = `jsonforms/SET_SCHEMA`;
    const SET_UISCHEMA = `jsonforms/SET_UISCHEMA`;
    const SET_VALIDATION_MODE = 'jsonforms/SET_VALIDATION_MODE';
    const SET_LOCALE = `jsonforms/SET_LOCALE`;
    const SET_TRANSLATOR = 'jsonforms/SET_TRANSLATOR';
    const UPDATE_I18N = 'jsonforms/UPDATE_I18N';
    const ADD_DEFAULT_DATA = `jsonforms/ADD_DEFAULT_DATA`;
    const REMOVE_DEFAULT_DATA = `jsonforms/REMOVE_DEFAULT_DATA`;
    const init = (data, schema = generateJsonSchema(data), uischema, options) => ({
        type: INIT,
        data,
        schema,
        uischema: typeof uischema === 'object' ? uischema : generateDefaultUISchema(schema),
        options
    });
    const updateCore = (data, schema, uischema, options) => ({
        type: UPDATE_CORE,
        data,
        schema,
        uischema,
        options
    });
    const registerDefaultData = (schemaPath, data) => ({
        type: ADD_DEFAULT_DATA,
        schemaPath,
        data
    });
    const unregisterDefaultData = (schemaPath) => ({
        type: REMOVE_DEFAULT_DATA,
        schemaPath
    });
    const setAjv = (ajv) => ({
        type: SET_AJV,
        ajv
    });
    const update = (path, updater) => ({
        type: UPDATE_DATA,
        path,
        updater
    });
    const updateErrors = (errors) => ({
        type: UPDATE_ERRORS,
        errors
    });
    const registerRenderer = (tester, renderer) => ({
        type: ADD_RENDERER,
        tester,
        renderer
    });
    const registerCell = (tester, cell) => ({
        type: ADD_CELL,
        tester,
        cell
    });
    const unregisterCell = (tester, cell) => ({
        type: REMOVE_CELL,
        tester,
        cell
    });
    const unregisterRenderer = (tester, renderer) => ({
        type: REMOVE_RENDERER,
        tester,
        renderer
    });
    const setConfig = (config) => ({
        type: SET_CONFIG,
        config
    });
    const setValidationMode = (validationMode) => ({
        type: SET_VALIDATION_MODE,
        validationMode
    });
    const registerUISchema = (tester, uischema) => {
        return {
            type: ADD_UI_SCHEMA,
            tester,
            uischema
        };
    };
    const unregisterUISchema = (tester) => {
        return {
            type: REMOVE_UI_SCHEMA,
            tester
        };
    };
    const setLocale = (locale) => ({
        type: SET_LOCALE,
        locale
    });
    const setSchema = (schema) => ({
        type: SET_SCHEMA,
        schema
    });
    const setTranslator = (translator, errorTranslator) => ({
        type: SET_TRANSLATOR,
        translator,
        errorTranslator
    });
    const updateI18n = (locale, translator, errorTranslator) => ({
        type: UPDATE_I18N,
        locale,
        translator,
        errorTranslator
    });
    const setUISchema = (uischema) => ({
        type: SET_UISCHEMA,
        uischema
    });

    var index = /*#__PURE__*/Object.freeze({
      __proto__: null,
      INIT: INIT,
      UPDATE_CORE: UPDATE_CORE,
      SET_AJV: SET_AJV,
      UPDATE_DATA: UPDATE_DATA,
      UPDATE_ERRORS: UPDATE_ERRORS,
      VALIDATE: VALIDATE,
      ADD_RENDERER: ADD_RENDERER,
      REMOVE_RENDERER: REMOVE_RENDERER,
      ADD_CELL: ADD_CELL,
      REMOVE_CELL: REMOVE_CELL,
      SET_CONFIG: SET_CONFIG,
      ADD_UI_SCHEMA: ADD_UI_SCHEMA,
      REMOVE_UI_SCHEMA: REMOVE_UI_SCHEMA,
      SET_SCHEMA: SET_SCHEMA,
      SET_UISCHEMA: SET_UISCHEMA,
      SET_VALIDATION_MODE: SET_VALIDATION_MODE,
      SET_LOCALE: SET_LOCALE,
      SET_TRANSLATOR: SET_TRANSLATOR,
      UPDATE_I18N: UPDATE_I18N,
      ADD_DEFAULT_DATA: ADD_DEFAULT_DATA,
      REMOVE_DEFAULT_DATA: REMOVE_DEFAULT_DATA,
      init: init,
      updateCore: updateCore,
      registerDefaultData: registerDefaultData,
      unregisterDefaultData: unregisterDefaultData,
      setAjv: setAjv,
      update: update,
      updateErrors: updateErrors,
      registerRenderer: registerRenderer,
      registerCell: registerCell,
      unregisterCell: unregisterCell,
      unregisterRenderer: unregisterRenderer,
      setConfig: setConfig,
      setValidationMode: setValidationMode,
      registerUISchema: registerUISchema,
      unregisterUISchema: unregisterUISchema,
      setLocale: setLocale,
      setSchema: setSchema,
      setTranslator: setTranslator,
      updateI18n: updateI18n,
      setUISchema: setUISchema
    });

    var root = _root;

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now$1 = function() {
      return root.Date.now();
    };

    var now_1 = now$1;

    var isObject = isObject_1,
        now = now_1,
        toNumber$2 = toNumber_1;

    /** Error message constants. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax = Math.max,
        nativeMin = Math.min;

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce$2(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber$2(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber$2(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    var debounce_1 = debounce$2;

    class RendererComponent extends React__default["default"].Component {
        constructor(props) {
            super(props);
        }
    }

    class Control extends RendererComponent {
        constructor(props) {
            super(props);
            this.handleChange = (value) => {
                this.setState({ value });
                this.updateData(value);
            };
            this.onFocus = () => {
                this.setState({ isFocused: true });
            };
            this.onBlur = () => {
                this.setState({ isFocused: false });
            };
            this.updateData = (value) => {
                this.props.handleChange(this.props.path, value);
            };
            this.state = {
                value: props.data ? props.data : '',
                isFocused: false
            };
        }
    }

    class UnknownRenderer extends React.Component {
        render() {
            return (React__default["default"].createElement("div", { style: { color: 'red' } },
                "No applicable ",
                this.props.type,
                " found."));
        }
    }

    const initialCoreState = {
        data: {},
        schema: {},
        uischema: undefined,
        errors: [],
        additionalErrors: [],
        validator: undefined,
        ajv: undefined,
    };
    const JsonFormsContext = React__default["default"].createContext({
        core: initialCoreState,
        renderers: []
    });
    const useEffectAfterFirstRender = (effect, dependencies) => {
        const firstExecution = React.useRef(true);
        React.useEffect(() => {
            if (firstExecution.current) {
                firstExecution.current = false;
                return;
            }
            effect();
        }, dependencies);
    };
    const JsonFormsStateProvider = ({ children, initState, onChange }) => {
        const { data, schema, uischema, ajv, validationMode, additionalErrors } = initState.core;
        const [core, coreDispatch] = React.useReducer(coreReducer, undefined, () => coreReducer(initState.core, index.init(data, schema, uischema, { ajv, validationMode, additionalErrors })));
        React.useEffect(() => {
            coreDispatch(index.updateCore(data, schema, uischema, { ajv, validationMode, additionalErrors }));
        }, [data, schema, uischema, ajv, validationMode, additionalErrors]);
        const [config, configDispatch] = React.useReducer(configReducer, undefined, () => configReducer(undefined, index.setConfig(initState.config)));
        useEffectAfterFirstRender(() => {
            configDispatch(index.setConfig(initState.config));
        }, [initState.config]);
        const [i18n, i18nDispatch] = React.useReducer(i18nReducer, undefined, () => i18nReducer(initState.i18n, index.updateI18n(initState.i18n?.locale, initState.i18n?.translate, initState.i18n?.translateError)));
        React.useEffect(() => {
            i18nDispatch(index.updateI18n(initState.i18n?.locale, initState.i18n?.translate, initState.i18n?.translateError));
        }, [initState.i18n?.locale, initState.i18n?.translate, initState.i18n?.translateError]);
        const contextValue = React.useMemo(() => ({
            core,
            renderers: initState.renderers,
            cells: initState.cells,
            config: config,
            uischemas: initState.uischemas,
            readonly: initState.readonly,
            i18n: i18n,
            dispatch: coreDispatch,
        }), [core, initState.renderers, initState.cells, config, initState.uischemas, initState.readonly, i18n]);
        const onChangeRef = React.useRef(onChange);
        React.useEffect(() => {
            onChangeRef.current = onChange;
        }, [onChange]);
        const debouncedEmit = React.useCallback(debounce_1((...args) => onChangeRef.current?.(...args), 10), []);
        React.useEffect(() => {
            debouncedEmit({ data: core.data, errors: core.errors });
        }, [core.data, core.errors]);
        return (React__default["default"].createElement(JsonFormsContext.Provider, { value: contextValue }, children));
    };
    const useJsonForms = () => React.useContext(JsonFormsContext);
    const ctxToArrayLayoutProps = (ctx, props) => mapStateToArrayLayoutProps({ jsonforms: { ...ctx } }, props);
    const ctxToLayoutProps = (ctx, props) => mapStateToLayoutProps({ jsonforms: { ...ctx } }, props);
    const ctxToControlProps = (ctx, props) => mapStateToControlProps({ jsonforms: { ...ctx } }, props);
    const ctxToEnumControlProps = (ctx, props) => {
        const enumProps = mapStateToEnumControlProps({ jsonforms: { ...ctx } }, props);
        const options = React.useMemo(() => enumProps.options, [props.options, enumProps.schema, ctx.i18n?.translate]);
        return { ...enumProps, options };
    };
    const ctxToOneOfEnumControlProps = (ctx, props) => {
        const enumProps = mapStateToOneOfEnumControlProps({ jsonforms: { ...ctx } }, props);
        const options = React.useMemo(() => enumProps.options, [props.options, enumProps.schema, ctx.i18n?.translate]);
        return { ...enumProps, options };
    };
    const ctxToMultiEnumControlProps = (ctx, props) => {
        const enumProps = mapStateToMultiEnumControlProps({ jsonforms: { ...ctx } }, props);
        const options = React.useMemo(() => enumProps.options, [enumProps.schema, ctx.i18n?.translate]);
        return { ...enumProps, options };
    };
    const ctxToControlWithDetailProps = (ctx, props) => mapStateToControlWithDetailProps({ jsonforms: { ...ctx } }, props);
    const ctxToAllOfProps = (ctx, ownProps) => {
        const props = mapStateToAllOfProps({ jsonforms: { ...ctx } }, ownProps);
        return {
            ...props
        };
    };
    const ctxDispatchToControlProps = (dispatch) => React.useMemo(() => mapDispatchToControlProps(dispatch), [dispatch]);
    const ctxToAnyOfProps = (ctx, ownProps) => {
        const props = mapStateToAnyOfProps({ jsonforms: { ...ctx } }, ownProps);
        const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
        return {
            ...props,
            ...dispatchProps
        };
    };
    const ctxToOneOfProps = (ctx, ownProps) => {
        const props = mapStateToOneOfProps({ jsonforms: { ...ctx } }, ownProps);
        const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
        return {
            ...props,
            ...dispatchProps
        };
    };
    const ctxToJsonFormsRendererProps = (ctx, ownProps) => mapStateToJsonFormsRendererProps({ jsonforms: { ...ctx } }, ownProps);
    const ctxDispatchToArrayControlProps = (dispatch) => ({
        ...ctxDispatchToControlProps(dispatch),
        ...React.useMemo(() => mapDispatchToArrayControlProps(dispatch), [dispatch])
    });
    const ctxToMasterListItemProps = (ctx, ownProps) => mapStateToMasterListItemProps({ jsonforms: { ...ctx } }, ownProps);
    const ctxToCellProps = (ctx, ownProps) => {
        return mapStateToCellProps({ jsonforms: { ...ctx } }, ownProps);
    };
    const ctxToEnumCellProps = (ctx, ownProps) => {
        const cellProps = defaultMapStateToEnumCellProps({ jsonforms: { ...ctx } }, ownProps);
        const options = React.useMemo(() => cellProps.options, [ownProps.options, cellProps.schema, ctx.i18n?.translate]);
        return { ...cellProps, options };
    };
    const ctxToOneOfEnumCellProps = (ctx, props) => {
        const enumCellProps = mapStateToOneOfEnumCellProps({ jsonforms: { ...ctx } }, props);
        const options = React.useMemo(() => enumCellProps.options, [props.options, enumCellProps.schema, ctx.i18n?.translate]);
        return { ...enumCellProps, options };
    };
    const ctxToDispatchCellProps = (ctx, ownProps) => {
        return mapStateToDispatchCellProps({ jsonforms: { ...ctx } }, ownProps);
    };
    const ctxDispatchToMultiEnumProps = (dispatch) => ({
        ...ctxDispatchToControlProps(dispatch),
        ...React.useMemo(() => mapDispatchToMultiEnumProps(dispatch), [dispatch])
    });
    const ctxToLabelProps = (ctx, ownProps) => {
        return mapStateToLabelProps({ jsonforms: { ...ctx } }, ownProps);
    };
    const withJsonFormsContext = (Component) => (props) => {
        const ctx = useJsonForms();
        return React__default["default"].createElement(Component, { ctx: ctx, props: props });
    };
    const withContextToJsonFormsRendererProps = (Component) => ({ ctx, props }) => {
        const contextProps = ctxToJsonFormsRendererProps(ctx, props);
        return (React__default["default"].createElement(Component, Object.assign({}, props, contextProps)));
    };
    const withContextToControlProps = (Component) => ({ ctx, props }) => {
        const controlProps = ctxToControlProps(ctx, props);
        const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
        return (React__default["default"].createElement(Component, Object.assign({}, props, controlProps, dispatchProps)));
    };
    const withContextToLayoutProps = (Component) => ({ ctx, props }) => {
        const layoutProps = ctxToLayoutProps(ctx, props);
        return (React__default["default"].createElement(Component, Object.assign({}, props, layoutProps)));
    };
    const withContextToOneOfProps = (Component) => ({ ctx, props }) => {
        const oneOfProps = ctxToOneOfProps(ctx, props);
        const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
        return (React__default["default"].createElement(Component, Object.assign({}, props, oneOfProps, dispatchProps)));
    };
    const withContextToAnyOfProps = (Component) => ({ ctx, props }) => {
        const oneOfProps = ctxToAnyOfProps(ctx, props);
        const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
        return (React__default["default"].createElement(Component, Object.assign({}, props, oneOfProps, dispatchProps)));
    };
    const withContextToAllOfProps = (Component) => ({ ctx, props }) => {
        const allOfProps = ctxToAllOfProps(ctx, props);
        const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
        return (React__default["default"].createElement(Component, Object.assign({}, props, allOfProps, dispatchProps)));
    };
    const withContextToDetailProps = (Component) => ({ ctx, props }) => {
        const detailProps = ctxToControlWithDetailProps(ctx, props);
        return (React__default["default"].createElement(Component, Object.assign({}, props, detailProps)));
    };
    const withContextToArrayLayoutProps = (Component) => ({ ctx, props }) => {
        const arrayLayoutProps = ctxToArrayLayoutProps(ctx, props);
        const dispatchProps = ctxDispatchToArrayControlProps(ctx.dispatch);
        return (React__default["default"].createElement(Component, Object.assign({}, props, arrayLayoutProps, dispatchProps)));
    };
    const withContextToMasterListItemProps = (Component) => ({ ctx, props }) => {
        const stateProps = ctxToMasterListItemProps(ctx, props);
        return (React__default["default"].createElement(Component, Object.assign({}, props, stateProps)));
    };
    const withContextToCellProps = (Component) => ({ ctx, props }) => {
        const cellProps = ctxToCellProps(ctx, props);
        const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
        return (React__default["default"].createElement(Component, Object.assign({}, props, dispatchProps, cellProps)));
    };
    const withContextToDispatchCellProps = (Component) => ({ ctx, props }) => {
        const cellProps = ctxToDispatchCellProps(ctx, props);
        const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
        return React__default["default"].createElement(Component, Object.assign({}, props, dispatchProps, cellProps));
    };
    const withContextToEnumCellProps = (Component) => ({ ctx, props }) => {
        const cellProps = ctxToEnumCellProps(ctx, props);
        const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
        return (React__default["default"].createElement(Component, Object.assign({}, props, dispatchProps, cellProps)));
    };
    const withContextToEnumProps = (Component) => ({ ctx, props }) => {
        const stateProps = ctxToEnumControlProps(ctx, props);
        const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
        return (React__default["default"].createElement(Component, Object.assign({}, props, dispatchProps, stateProps)));
    };
    const withContextToOneOfEnumCellProps = (Component) => ({ ctx, props }) => {
        const cellProps = ctxToOneOfEnumCellProps(ctx, props);
        const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
        return (React__default["default"].createElement(Component, Object.assign({}, props, dispatchProps, cellProps)));
    };
    const withContextToOneOfEnumProps = (Component) => ({ ctx, props }) => {
        const stateProps = ctxToOneOfEnumControlProps(ctx, props);
        const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
        return (React__default["default"].createElement(Component, Object.assign({}, props, dispatchProps, stateProps)));
    };
    const withContextToMultiEnumProps = (Component) => ({ ctx, props }) => {
        const stateProps = ctxToMultiEnumControlProps(ctx, props);
        const dispatchProps = ctxDispatchToMultiEnumProps(ctx.dispatch);
        return (React__default["default"].createElement(Component, Object.assign({}, props, dispatchProps, stateProps)));
    };
    const withContextToLabelProps = (Component) => ({ ctx, props }) => {
        const stateProps = ctxToLabelProps(ctx, props);
        return (React__default["default"].createElement(Component, Object.assign({}, props, stateProps)));
    };
    const withJsonFormsRendererProps = (Component, memoize = true) => withJsonFormsContext(withContextToJsonFormsRendererProps(memoize ? React__default["default"].memo(Component) : Component));
    const withJsonFormsControlProps = (Component, memoize = true) => withJsonFormsContext(withContextToControlProps(memoize ? React__default["default"].memo(Component) : Component));
    const withJsonFormsLayoutProps = (Component, memoize = true) => withJsonFormsContext(withContextToLayoutProps(memoize ? React__default["default"].memo(Component) : Component));
    const withJsonFormsOneOfProps = (Component, memoize = true) => withJsonFormsContext(withContextToOneOfProps(memoize ? React__default["default"].memo(Component) : Component));
    const withJsonFormsAnyOfProps = (Component, memoize = true) => withJsonFormsContext(withContextToAnyOfProps(memoize ? React__default["default"].memo(Component) : Component));
    const withJsonFormsAllOfProps = (Component, memoize = true) => withJsonFormsContext(withContextToAllOfProps(memoize ? React__default["default"].memo(Component) : Component));
    const withJsonFormsDetailProps = (Component, memoize = true) => withJsonFormsContext(withContextToDetailProps(memoize ? React__default["default"].memo(Component) : Component));
    const withJsonFormsArrayLayoutProps = (Component, memoize = true) => withJsonFormsContext(withContextToArrayLayoutProps(memoize ? React__default["default"].memo(Component) : Component));
    const withJsonFormsMasterListItemProps = (Component, memoize = true) => withJsonFormsContext(withContextToMasterListItemProps(memoize ? React__default["default"].memo(Component) : Component));
    const withJsonFormsCellProps = (Component, memoize = true) => withJsonFormsContext(withContextToCellProps(memoize ? React__default["default"].memo(Component) : Component));
    const withJsonFormsDispatchCellProps = (Component, memoize = true) => withJsonFormsContext(withContextToDispatchCellProps(memoize ? React__default["default"].memo(Component) : Component));
    const withJsonFormsEnumCellProps = (Component, memoize = true) => withJsonFormsContext(withContextToEnumCellProps(memoize ? React__default["default"].memo(Component) : Component));
    const withJsonFormsEnumProps = (Component, memoize = true) => withJsonFormsContext(withContextToEnumProps(memoize ? React__default["default"].memo(Component) : Component));
    const withJsonFormsOneOfEnumCellProps = (Component, memoize = true) => withJsonFormsContext(withContextToOneOfEnumCellProps(memoize ? React__default["default"].memo(Component) : Component));
    const withJsonFormsOneOfEnumProps = (Component, memoize = true) => withJsonFormsContext(withContextToOneOfEnumProps(memoize ? React__default["default"].memo(Component) : Component));
    const withJsonFormsMultiEnumProps = (Component, memoize = true) => withJsonFormsContext(withContextToMultiEnumProps(memoize ? React__default["default"].memo(Component) : Component));
    const withJsonFormsLabelProps = (Component, memoize = true) => withJsonFormsContext(withContextToLabelProps(memoize ? React__default["default"].memo(Component) : Component));
    const withTranslateProps = (Component) => (props) => {
        const ctx = useJsonForms();
        const locale = ctx.i18n?.locale ?? defaultJsonFormsI18nState.locale;
        const t = ctx.i18n?.translate ?? defaultJsonFormsI18nState.translate;
        return (React__default["default"].createElement(Component, Object.assign({}, props, { locale: locale, t: t })));
    };

    class JsonFormsDispatchRenderer extends React__default["default"].Component {
        constructor(props) {
            super(props);
            this.state = {
                id: isControl(props.uischema)
                    ? createId(props.uischema.scope)
                    : undefined,
            };
        }
        componentWillUnmount() {
            if (isControl(this.props.uischema)) {
                removeId(this.state.id);
            }
        }
        render() {
            const { schema, rootSchema, uischema, path, enabled, renderers, cells, config } = this.props;
            return (React__default["default"].createElement(TestAndRender, { uischema: uischema, schema: schema, rootSchema: rootSchema, path: path, enabled: enabled, renderers: renderers, cells: cells, id: this.state.id, config: config }));
        }
    }
    const TestAndRender = React__default["default"].memo((props) => {
        const testerContext = React.useMemo(() => ({
            rootSchema: props.rootSchema,
            config: props.config
        }), [props.rootSchema, props.config]);
        const renderer = React.useMemo(() => maxBy_1(props.renderers, r => r.tester(props.uischema, props.schema, testerContext)), [props.renderers, props.uischema, props.schema, testerContext]);
        if (renderer === undefined ||
            renderer.tester(props.uischema, props.schema, testerContext) === -1) {
            return React__default["default"].createElement(UnknownRenderer, { type: 'renderer' });
        }
        else {
            const Render = renderer.renderer;
            return (React__default["default"].createElement(Render, { uischema: props.uischema, schema: props.schema, path: props.path, enabled: props.enabled, renderers: props.renderers, cells: props.cells, id: props.id }));
        }
    });
    class ResolvedJsonFormsDispatchRenderer extends JsonFormsDispatchRenderer {
        constructor(props) {
            super(props);
        }
    }
    const JsonFormsDispatch = withJsonFormsRendererProps(JsonFormsDispatchRenderer);
    withJsonFormsRendererProps(ResolvedJsonFormsDispatchRenderer);
    const JsonForms = (props) => {
        const { ajv, data, schema, uischema, renderers, cells, onChange, config, uischemas, readonly, validationMode, i18n, additionalErrors } = props;
        const schemaToUse = React.useMemo(() => (schema !== undefined ? schema : Generate.jsonSchema(data)), [schema, data]);
        const uischemaToUse = React.useMemo(() => typeof uischema === 'object' ? uischema : Generate.uiSchema(schemaToUse), [uischema, schemaToUse]);
        return (React__default["default"].createElement(JsonFormsStateProvider, { initState: {
                core: {
                    ajv,
                    data,
                    schema: schemaToUse,
                    uischema: uischemaToUse,
                    validationMode: validationMode,
                    additionalErrors: additionalErrors
                },
                config,
                uischemas,
                renderers,
                cells,
                readonly,
                i18n
            }, onChange: onChange },
            React__default["default"].createElement(JsonFormsDispatch, null)));
    };

    const Dispatch = ({ uischema, schema, rootSchema, path, cells, id, enabled, renderers, config }) => {
        const testerContext = React.useMemo(() => ({
            rootSchema: rootSchema,
            config: config
        }), [rootSchema, config]);
        const cell = React.useMemo(() => maxBy_1(cells, r => r.tester(uischema, schema, testerContext)), [cells, uischema, schema, testerContext]);
        if (cell === undefined || cell.tester(uischema, schema, testerContext) === -1) {
            return React__default["default"].createElement(UnknownRenderer, { type: 'cell' });
        }
        else {
            const Cell = cell.cell;
            return (React__default["default"].createElement(Cell, { uischema: uischema, schema: schema, enabled: enabled, path: path, id: id, renderers: renderers, cells: cells }));
        }
    };
    const DispatchCell = withJsonFormsDispatchCellProps(Dispatch);

    const common = {
      black: '#000',
      white: '#fff'
    };
    var common$1 = common;

    const red = {
      50: '#ffebee',
      100: '#ffcdd2',
      200: '#ef9a9a',
      300: '#e57373',
      400: '#ef5350',
      500: '#f44336',
      600: '#e53935',
      700: '#d32f2f',
      800: '#c62828',
      900: '#b71c1c',
      A100: '#ff8a80',
      A200: '#ff5252',
      A400: '#ff1744',
      A700: '#d50000'
    };
    var red$1 = red;

    const purple = {
      50: '#f3e5f5',
      100: '#e1bee7',
      200: '#ce93d8',
      300: '#ba68c8',
      400: '#ab47bc',
      500: '#9c27b0',
      600: '#8e24aa',
      700: '#7b1fa2',
      800: '#6a1b9a',
      900: '#4a148c',
      A100: '#ea80fc',
      A200: '#e040fb',
      A400: '#d500f9',
      A700: '#aa00ff'
    };
    var purple$1 = purple;

    const blue = {
      50: '#e3f2fd',
      100: '#bbdefb',
      200: '#90caf9',
      300: '#64b5f6',
      400: '#42a5f5',
      500: '#2196f3',
      600: '#1e88e5',
      700: '#1976d2',
      800: '#1565c0',
      900: '#0d47a1',
      A100: '#82b1ff',
      A200: '#448aff',
      A400: '#2979ff',
      A700: '#2962ff'
    };
    var blue$1 = blue;

    const lightBlue = {
      50: '#e1f5fe',
      100: '#b3e5fc',
      200: '#81d4fa',
      300: '#4fc3f7',
      400: '#29b6f6',
      500: '#03a9f4',
      600: '#039be5',
      700: '#0288d1',
      800: '#0277bd',
      900: '#01579b',
      A100: '#80d8ff',
      A200: '#40c4ff',
      A400: '#00b0ff',
      A700: '#0091ea'
    };
    var lightBlue$1 = lightBlue;

    const green = {
      50: '#e8f5e9',
      100: '#c8e6c9',
      200: '#a5d6a7',
      300: '#81c784',
      400: '#66bb6a',
      500: '#4caf50',
      600: '#43a047',
      700: '#388e3c',
      800: '#2e7d32',
      900: '#1b5e20',
      A100: '#b9f6ca',
      A200: '#69f0ae',
      A400: '#00e676',
      A700: '#00c853'
    };
    var green$1 = green;

    const orange = {
      50: '#fff3e0',
      100: '#ffe0b2',
      200: '#ffcc80',
      300: '#ffb74d',
      400: '#ffa726',
      500: '#ff9800',
      600: '#fb8c00',
      700: '#f57c00',
      800: '#ef6c00',
      900: '#e65100',
      A100: '#ffd180',
      A200: '#ffab40',
      A400: '#ff9100',
      A700: '#ff6d00'
    };
    var orange$1 = orange;

    const grey = {
      50: '#fafafa',
      100: '#f5f5f5',
      200: '#eeeeee',
      300: '#e0e0e0',
      400: '#bdbdbd',
      500: '#9e9e9e',
      600: '#757575',
      700: '#616161',
      800: '#424242',
      900: '#212121',
      A100: '#f5f5f5',
      A200: '#eeeeee',
      A400: '#bdbdbd',
      A700: '#616161'
    };
    var grey$1 = grey;

    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }

    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }

    function memoize$1(fn) {
      var cache = Object.create(null);
      return function (arg) {
        if (cache[arg] === undefined) cache[arg] = fn(arg);
        return cache[arg];
      };
    }

    var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

    var isPropValid = /* #__PURE__ */memoize$1(function (prop) {
      return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
      /* o */
      && prop.charCodeAt(1) === 110
      /* n */
      && prop.charCodeAt(2) < 91;
    }
    /* Z+1 */
    );

    var global$1 = (typeof global !== "undefined" ? global :
      typeof self !== "undefined" ? self :
      typeof window !== "undefined" ? window : {});

    /*

    Based off glamor's StyleSheet, thanks Sunil ❤️

    high performance StyleSheet for css-in-js systems

    - uses multiple style tags behind the scenes for millions of rules
    - uses `insertRule` for appending in production for *much* faster performance

    // usage

    import { StyleSheet } from '@emotion/sheet'

    let styleSheet = new StyleSheet({ key: '', container: document.head })

    styleSheet.insert('#box { border: 1px solid red; }')
    - appends a css rule into the stylesheet

    styleSheet.flush()
    - empties the stylesheet of all its contents

    */
    // $FlowFixMe
    function sheetForTag(tag) {
      if (tag.sheet) {
        // $FlowFixMe
        return tag.sheet;
      } // this weirdness brought to you by firefox

      /* istanbul ignore next */


      for (var i = 0; i < document.styleSheets.length; i++) {
        if (document.styleSheets[i].ownerNode === tag) {
          // $FlowFixMe
          return document.styleSheets[i];
        }
      }
    }

    function createStyleElement(options) {
      var tag = document.createElement('style');
      tag.setAttribute('data-emotion', options.key);

      if (options.nonce !== undefined) {
        tag.setAttribute('nonce', options.nonce);
      }

      tag.appendChild(document.createTextNode(''));
      tag.setAttribute('data-s', '');
      return tag;
    }

    var StyleSheet = /*#__PURE__*/function () {
      // Using Node instead of HTMLElement since container may be a ShadowRoot
      function StyleSheet(options) {
        var _this = this;

        this._insertTag = function (tag) {
          var before;

          if (_this.tags.length === 0) {
            if (_this.insertionPoint) {
              before = _this.insertionPoint.nextSibling;
            } else if (_this.prepend) {
              before = _this.container.firstChild;
            } else {
              before = _this.before;
            }
          } else {
            before = _this.tags[_this.tags.length - 1].nextSibling;
          }

          _this.container.insertBefore(tag, before);

          _this.tags.push(tag);
        };

        this.isSpeedy = options.speedy === undefined ? "development" === 'production' : options.speedy;
        this.tags = [];
        this.ctr = 0;
        this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

        this.key = options.key;
        this.container = options.container;
        this.prepend = options.prepend;
        this.insertionPoint = options.insertionPoint;
        this.before = null;
      }

      var _proto = StyleSheet.prototype;

      _proto.hydrate = function hydrate(nodes) {
        nodes.forEach(this._insertTag);
      };

      _proto.insert = function insert(rule) {
        // the max length is how many rules we have per style tag, it's 65000 in speedy mode
        // it's 1 in dev because we insert source maps that map a single rule to a location
        // and you can only have one source map per style tag
        if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
          this._insertTag(createStyleElement(this));
        }

        var tag = this.tags[this.tags.length - 1];

        {
          var isImportRule = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;

          if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) {
            // this would only cause problem in speedy mode
            // but we don't want enabling speedy to affect the observable behavior
            // so we report this error at all times
            console.error("You're attempting to insert the following rule:\n" + rule + '\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.');
          }
          this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule;
        }

        if (this.isSpeedy) {
          var sheet = sheetForTag(tag);

          try {
            // this is the ultrafast version, works across browsers
            // the big drawback is that the css won't be editable in devtools
            sheet.insertRule(rule, sheet.cssRules.length);
          } catch (e) {
            if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {
              console.error("There was a problem inserting the following rule: \"" + rule + "\"", e);
            }
          }
        } else {
          tag.appendChild(document.createTextNode(rule));
        }

        this.ctr++;
      };

      _proto.flush = function flush() {
        // $FlowFixMe
        this.tags.forEach(function (tag) {
          return tag.parentNode && tag.parentNode.removeChild(tag);
        });
        this.tags = [];
        this.ctr = 0;

        {
          this._alreadyInsertedOrderInsensitiveRule = false;
        }
      };

      return StyleSheet;
    }();

    var MS = '-ms-';
    var MOZ = '-moz-';
    var WEBKIT = '-webkit-';

    var COMMENT = 'comm';
    var RULESET = 'rule';
    var DECLARATION = 'decl';
    var IMPORT = '@import';
    var KEYFRAMES = '@keyframes';

    /**
     * @param {number}
     * @return {number}
     */
    var abs = Math.abs;

    /**
     * @param {number}
     * @return {string}
     */
    var from = String.fromCharCode;

    /**
     * @param {object}
     * @return {object}
     */
    var assign$1 = Object.assign;

    /**
     * @param {string} value
     * @param {number} length
     * @return {number}
     */
    function hash$2 (value, length) {
    	return charat(value, 0) ^ 45 ? (((((((length << 2) ^ charat(value, 0)) << 2) ^ charat(value, 1)) << 2) ^ charat(value, 2)) << 2) ^ charat(value, 3) : 0
    }

    /**
     * @param {string} value
     * @return {string}
     */
    function trim (value) {
    	return value.trim()
    }

    /**
     * @param {string} value
     * @param {RegExp} pattern
     * @return {string?}
     */
    function match (value, pattern) {
    	return (value = pattern.exec(value)) ? value[0] : value
    }

    /**
     * @param {string} value
     * @param {(string|RegExp)} pattern
     * @param {string} replacement
     * @return {string}
     */
    function replace (value, pattern, replacement) {
    	return value.replace(pattern, replacement)
    }

    /**
     * @param {string} value
     * @param {string} search
     * @return {number}
     */
    function indexof (value, search) {
    	return value.indexOf(search)
    }

    /**
     * @param {string} value
     * @param {number} index
     * @return {number}
     */
    function charat (value, index) {
    	return value.charCodeAt(index) | 0
    }

    /**
     * @param {string} value
     * @param {number} begin
     * @param {number} end
     * @return {string}
     */
    function substr (value, begin, end) {
    	return value.slice(begin, end)
    }

    /**
     * @param {string} value
     * @return {number}
     */
    function strlen (value) {
    	return value.length
    }

    /**
     * @param {any[]} value
     * @return {number}
     */
    function sizeof (value) {
    	return value.length
    }

    /**
     * @param {any} value
     * @param {any[]} array
     * @return {any}
     */
    function append (value, array) {
    	return array.push(value), value
    }

    /**
     * @param {string[]} array
     * @param {function} callback
     * @return {string}
     */
    function combine (array, callback) {
    	return array.map(callback).join('')
    }

    var line = 1;
    var column = 1;
    var length = 0;
    var position$1 = 0;
    var character = 0;
    var characters = '';

    /**
     * @param {string} value
     * @param {object | null} root
     * @param {object | null} parent
     * @param {string} type
     * @param {string[] | string} props
     * @param {object[] | string} children
     * @param {number} length
     */
    function node (value, root, parent, type, props, children, length) {
    	return {value: value, root: root, parent: parent, type: type, props: props, children: children, line: line, column: column, length: length, return: ''}
    }

    /**
     * @param {object} root
     * @param {object} props
     * @return {object}
     */
    function copy (root, props) {
    	return assign$1(node('', null, null, '', null, null, 0), root, {length: -root.length}, props)
    }

    /**
     * @return {number}
     */
    function char () {
    	return character
    }

    /**
     * @return {number}
     */
    function prev () {
    	character = position$1 > 0 ? charat(characters, --position$1) : 0;

    	if (column--, character === 10)
    		column = 1, line--;

    	return character
    }

    /**
     * @return {number}
     */
    function next () {
    	character = position$1 < length ? charat(characters, position$1++) : 0;

    	if (column++, character === 10)
    		column = 1, line++;

    	return character
    }

    /**
     * @return {number}
     */
    function peek () {
    	return charat(characters, position$1)
    }

    /**
     * @return {number}
     */
    function caret () {
    	return position$1
    }

    /**
     * @param {number} begin
     * @param {number} end
     * @return {string}
     */
    function slice (begin, end) {
    	return substr(characters, begin, end)
    }

    /**
     * @param {number} type
     * @return {number}
     */
    function token (type) {
    	switch (type) {
    		// \0 \t \n \r \s whitespace token
    		case 0: case 9: case 10: case 13: case 32:
    			return 5
    		// ! + , / > @ ~ isolate token
    		case 33: case 43: case 44: case 47: case 62: case 64: case 126:
    		// ; { } breakpoint token
    		case 59: case 123: case 125:
    			return 4
    		// : accompanied token
    		case 58:
    			return 3
    		// " ' ( [ opening delimit token
    		case 34: case 39: case 40: case 91:
    			return 2
    		// ) ] closing delimit token
    		case 41: case 93:
    			return 1
    	}

    	return 0
    }

    /**
     * @param {string} value
     * @return {any[]}
     */
    function alloc (value) {
    	return line = column = 1, length = strlen(characters = value), position$1 = 0, []
    }

    /**
     * @param {any} value
     * @return {any}
     */
    function dealloc (value) {
    	return characters = '', value
    }

    /**
     * @param {number} type
     * @return {string}
     */
    function delimit (type) {
    	return trim(slice(position$1 - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)))
    }

    /**
     * @param {number} type
     * @return {string}
     */
    function whitespace (type) {
    	while (character = peek())
    		if (character < 33)
    			next();
    		else
    			break

    	return token(type) > 2 || token(character) > 3 ? '' : ' '
    }

    /**
     * @param {number} index
     * @param {number} count
     * @return {string}
     */
    function escaping (index, count) {
    	while (--count && next())
    		// not 0-9 A-F a-f
    		if (character < 48 || character > 102 || (character > 57 && character < 65) || (character > 70 && character < 97))
    			break

    	return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32))
    }

    /**
     * @param {number} type
     * @return {number}
     */
    function delimiter (type) {
    	while (next())
    		switch (character) {
    			// ] ) " '
    			case type:
    				return position$1
    			// " '
    			case 34: case 39:
    				if (type !== 34 && type !== 39)
    					delimiter(character);
    				break
    			// (
    			case 40:
    				if (type === 41)
    					delimiter(type);
    				break
    			// \
    			case 92:
    				next();
    				break
    		}

    	return position$1
    }

    /**
     * @param {number} type
     * @param {number} index
     * @return {number}
     */
    function commenter (type, index) {
    	while (next())
    		// //
    		if (type + character === 47 + 10)
    			break
    		// /*
    		else if (type + character === 42 + 42 && peek() === 47)
    			break

    	return '/*' + slice(index, position$1 - 1) + '*' + from(type === 47 ? type : next())
    }

    /**
     * @param {number} index
     * @return {string}
     */
    function identifier (index) {
    	while (!token(peek()))
    		next();

    	return slice(index, position$1)
    }

    /**
     * @param {string} value
     * @return {object[]}
     */
    function compile (value) {
    	return dealloc(parse('', null, null, null, [''], value = alloc(value), 0, [0], value))
    }

    /**
     * @param {string} value
     * @param {object} root
     * @param {object?} parent
     * @param {string[]} rule
     * @param {string[]} rules
     * @param {string[]} rulesets
     * @param {number[]} pseudo
     * @param {number[]} points
     * @param {string[]} declarations
     * @return {object}
     */
    function parse (value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
    	var index = 0;
    	var offset = 0;
    	var length = pseudo;
    	var atrule = 0;
    	var property = 0;
    	var previous = 0;
    	var variable = 1;
    	var scanning = 1;
    	var ampersand = 1;
    	var character = 0;
    	var type = '';
    	var props = rules;
    	var children = rulesets;
    	var reference = rule;
    	var characters = type;

    	while (scanning)
    		switch (previous = character, character = next()) {
    			// (
    			case 40:
    				if (previous != 108 && charat(characters, length - 1) == 58) {
    					if (indexof(characters += replace(delimit(character), '&', '&\f'), '&\f') != -1)
    						ampersand = -1;
    					break
    				}
    			// " ' [
    			case 34: case 39: case 91:
    				characters += delimit(character);
    				break
    			// \t \n \r \s
    			case 9: case 10: case 13: case 32:
    				characters += whitespace(previous);
    				break
    			// \
    			case 92:
    				characters += escaping(caret() - 1, 7);
    				continue
    			// /
    			case 47:
    				switch (peek()) {
    					case 42: case 47:
    						append(comment(commenter(next(), caret()), root, parent), declarations);
    						break
    					default:
    						characters += '/';
    				}
    				break
    			// {
    			case 123 * variable:
    				points[index++] = strlen(characters) * ampersand;
    			// } ; \0
    			case 125 * variable: case 59: case 0:
    				switch (character) {
    					// \0 }
    					case 0: case 125: scanning = 0;
    					// ;
    					case 59 + offset:
    						if (property > 0 && (strlen(characters) - length))
    							append(property > 32 ? declaration(characters + ';', rule, parent, length - 1) : declaration(replace(characters, ' ', '') + ';', rule, parent, length - 2), declarations);
    						break
    					// @ ;
    					case 59: characters += ';';
    					// { rule/at-rule
    					default:
    						append(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets);

    						if (character === 123)
    							if (offset === 0)
    								parse(characters, root, reference, reference, props, rulesets, length, points, children);
    							else
    								switch (atrule === 99 && charat(characters, 3) === 110 ? 100 : atrule) {
    									// d m s
    									case 100: case 109: case 115:
    										parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children);
    										break
    									default:
    										parse(characters, reference, reference, reference, [''], children, 0, points, children);
    								}
    				}

    				index = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo;
    				break
    			// :
    			case 58:
    				length = 1 + strlen(characters), property = previous;
    			default:
    				if (variable < 1)
    					if (character == 123)
    						--variable;
    					else if (character == 125 && variable++ == 0 && prev() == 125)
    						continue

    				switch (characters += from(character), character * variable) {
    					// &
    					case 38:
    						ampersand = offset > 0 ? 1 : (characters += '\f', -1);
    						break
    					// ,
    					case 44:
    						points[index++] = (strlen(characters) - 1) * ampersand, ampersand = 1;
    						break
    					// @
    					case 64:
    						// -
    						if (peek() === 45)
    							characters += delimit(next());

    						atrule = peek(), offset = length = strlen(type = characters += identifier(caret())), character++;
    						break
    					// -
    					case 45:
    						if (previous === 45 && strlen(characters) == 2)
    							variable = 0;
    				}
    		}

    	return rulesets
    }

    /**
     * @param {string} value
     * @param {object} root
     * @param {object?} parent
     * @param {number} index
     * @param {number} offset
     * @param {string[]} rules
     * @param {number[]} points
     * @param {string} type
     * @param {string[]} props
     * @param {string[]} children
     * @param {number} length
     * @return {object}
     */
    function ruleset (value, root, parent, index, offset, rules, points, type, props, children, length) {
    	var post = offset - 1;
    	var rule = offset === 0 ? rules : [''];
    	var size = sizeof(rule);

    	for (var i = 0, j = 0, k = 0; i < index; ++i)
    		for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
    			if (z = trim(j > 0 ? rule[x] + ' ' + y : replace(y, /&\f/g, rule[x])))
    				props[k++] = z;

    	return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length)
    }

    /**
     * @param {number} value
     * @param {object} root
     * @param {object?} parent
     * @return {object}
     */
    function comment (value, root, parent) {
    	return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0)
    }

    /**
     * @param {string} value
     * @param {object} root
     * @param {object?} parent
     * @param {number} length
     * @return {object}
     */
    function declaration (value, root, parent, length) {
    	return node(value, root, parent, DECLARATION, substr(value, 0, length), substr(value, length + 1, -1), length)
    }

    /**
     * @param {object[]} children
     * @param {function} callback
     * @return {string}
     */
    function serialize (children, callback) {
    	var output = '';
    	var length = sizeof(children);

    	for (var i = 0; i < length; i++)
    		output += callback(children[i], i, children, callback) || '';

    	return output
    }

    /**
     * @param {object} element
     * @param {number} index
     * @param {object[]} children
     * @param {function} callback
     * @return {string}
     */
    function stringify (element, index, children, callback) {
    	switch (element.type) {
    		case IMPORT: case DECLARATION: return element.return = element.return || element.value
    		case COMMENT: return ''
    		case KEYFRAMES: return element.return = element.value + '{' + serialize(element.children, callback) + '}'
    		case RULESET: element.value = element.props.join(',');
    	}

    	return strlen(children = serialize(element.children, callback)) ? element.return = element.value + '{' + children + '}' : ''
    }

    /**
     * @param {function[]} collection
     * @return {function}
     */
    function middleware (collection) {
    	var length = sizeof(collection);

    	return function (element, index, children, callback) {
    		var output = '';

    		for (var i = 0; i < length; i++)
    			output += collection[i](element, index, children, callback) || '';

    		return output
    	}
    }

    var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
      var previous = 0;
      var character = 0;

      while (true) {
        previous = character;
        character = peek(); // &\f

        if (previous === 38 && character === 12) {
          points[index] = 1;
        }

        if (token(character)) {
          break;
        }

        next();
      }

      return slice(begin, position$1);
    };

    var toRules = function toRules(parsed, points) {
      // pretend we've started with a comma
      var index = -1;
      var character = 44;

      do {
        switch (token(character)) {
          case 0:
            // &\f
            if (character === 38 && peek() === 12) {
              // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
              // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
              // and when it should just concatenate the outer and inner selectors
              // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
              points[index] = 1;
            }

            parsed[index] += identifierWithPointTracking(position$1 - 1, points, index);
            break;

          case 2:
            parsed[index] += delimit(character);
            break;

          case 4:
            // comma
            if (character === 44) {
              // colon
              parsed[++index] = peek() === 58 ? '&\f' : '';
              points[index] = parsed[index].length;
              break;
            }

          // fallthrough

          default:
            parsed[index] += from(character);
        }
      } while (character = next());

      return parsed;
    };

    var getRules = function getRules(value, points) {
      return dealloc(toRules(alloc(value), points));
    }; // WeakSet would be more appropriate, but only WeakMap is supported in IE11


    var fixedElements = /* #__PURE__ */new WeakMap();
    var compat = function compat(element) {
      if (element.type !== 'rule' || !element.parent || // positive .length indicates that this rule contains pseudo
      // negative .length indicates that this rule has been already prefixed
      element.length < 1) {
        return;
      }

      var value = element.value,
          parent = element.parent;
      var isImplicitRule = element.column === parent.column && element.line === parent.line;

      while (parent.type !== 'rule') {
        parent = parent.parent;
        if (!parent) return;
      } // short-circuit for the simplest case


      if (element.props.length === 1 && value.charCodeAt(0) !== 58
      /* colon */
      && !fixedElements.get(parent)) {
        return;
      } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
      // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"


      if (isImplicitRule) {
        return;
      }

      fixedElements.set(element, true);
      var points = [];
      var rules = getRules(value, points);
      var parentRules = parent.props;

      for (var i = 0, k = 0; i < rules.length; i++) {
        for (var j = 0; j < parentRules.length; j++, k++) {
          element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
        }
      }
    };
    var removeLabel = function removeLabel(element) {
      if (element.type === 'decl') {
        var value = element.value;

        if ( // charcode for l
        value.charCodeAt(0) === 108 && // charcode for b
        value.charCodeAt(2) === 98) {
          // this ignores label
          element["return"] = '';
          element.value = '';
        }
      }
    };
    var ignoreFlag = 'emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason';

    var isIgnoringComment = function isIgnoringComment(element) {
      return element.type === 'comm' && element.children.indexOf(ignoreFlag) > -1;
    };

    var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm(cache) {
      return function (element, index, children) {
        if (element.type !== 'rule' || cache.compat) return;
        var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);

        if (unsafePseudoClasses) {
          var isNested = element.parent === children[0]; // in nested rules comments become children of the "auto-inserted" rule
          //
          // considering this input:
          // .a {
          //   .b /* comm */ {}
          //   color: hotpink;
          // }
          // we get output corresponding to this:
          // .a {
          //   & {
          //     /* comm */
          //     color: hotpink;
          //   }
          //   .b {}
          // }

          var commentContainer = isNested ? children[0].children : // global rule at the root level
          children;

          for (var i = commentContainer.length - 1; i >= 0; i--) {
            var node = commentContainer[i];

            if (node.line < element.line) {
              break;
            } // it is quite weird but comments are *usually* put at `column: element.column - 1`
            // so we seek *from the end* for the node that is earlier than the rule's `element` and check that
            // this will also match inputs like this:
            // .a {
            //   /* comm */
            //   .b {}
            // }
            //
            // but that is fine
            //
            // it would be the easiest to change the placement of the comment to be the first child of the rule:
            // .a {
            //   .b { /* comm */ }
            // }
            // with such inputs we wouldn't have to search for the comment at all
            // TODO: consider changing this comment placement in the next major version


            if (node.column < element.column) {
              if (isIgnoringComment(node)) {
                return;
              }

              break;
            }
          }

          unsafePseudoClasses.forEach(function (unsafePseudoClass) {
            console.error("The pseudo class \"" + unsafePseudoClass + "\" is potentially unsafe when doing server-side rendering. Try changing it to \"" + unsafePseudoClass.split('-child')[0] + "-of-type\".");
          });
        }
      };
    };

    var isImportRule = function isImportRule(element) {
      return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
    };

    var isPrependedWithRegularRules = function isPrependedWithRegularRules(index, children) {
      for (var i = index - 1; i >= 0; i--) {
        if (!isImportRule(children[i])) {
          return true;
        }
      }

      return false;
    }; // use this to remove incorrect elements from further processing
    // so they don't get handed to the `sheet` (or anything else)
    // as that could potentially lead to additional logs which in turn could be overhelming to the user


    var nullifyElement = function nullifyElement(element) {
      element.type = '';
      element.value = '';
      element["return"] = '';
      element.children = '';
      element.props = '';
    };

    var incorrectImportAlarm = function incorrectImportAlarm(element, index, children) {
      if (!isImportRule(element)) {
        return;
      }

      if (element.parent) {
        console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
        nullifyElement(element);
      } else if (isPrependedWithRegularRules(index, children)) {
        console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
        nullifyElement(element);
      }
    };

    /* eslint-disable no-fallthrough */

    function prefix(value, length) {
      switch (hash$2(value, length)) {
        // color-adjust
        case 5103:
          return WEBKIT + 'print-' + value + value;
        // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)

        case 5737:
        case 4201:
        case 3177:
        case 3433:
        case 1641:
        case 4457:
        case 2921: // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break

        case 5572:
        case 6356:
        case 5844:
        case 3191:
        case 6645:
        case 3005: // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,

        case 6391:
        case 5879:
        case 5623:
        case 6135:
        case 4599:
        case 4855: // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)

        case 4215:
        case 6389:
        case 5109:
        case 5365:
        case 5621:
        case 3829:
          return WEBKIT + value + value;
        // appearance, user-select, transform, hyphens, text-size-adjust

        case 5349:
        case 4246:
        case 4810:
        case 6968:
        case 2756:
          return WEBKIT + value + MOZ + value + MS + value + value;
        // flex, flex-direction

        case 6828:
        case 4268:
          return WEBKIT + value + MS + value + value;
        // order

        case 6165:
          return WEBKIT + value + MS + 'flex-' + value + value;
        // align-items

        case 5187:
          return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + 'box-$1$2' + MS + 'flex-$1$2') + value;
        // align-self

        case 5443:
          return WEBKIT + value + MS + 'flex-item-' + replace(value, /flex-|-self/, '') + value;
        // align-content

        case 4675:
          return WEBKIT + value + MS + 'flex-line-pack' + replace(value, /align-content|flex-|-self/, '') + value;
        // flex-shrink

        case 5548:
          return WEBKIT + value + MS + replace(value, 'shrink', 'negative') + value;
        // flex-basis

        case 5292:
          return WEBKIT + value + MS + replace(value, 'basis', 'preferred-size') + value;
        // flex-grow

        case 6060:
          return WEBKIT + 'box-' + replace(value, '-grow', '') + WEBKIT + value + MS + replace(value, 'grow', 'positive') + value;
        // transition

        case 4554:
          return WEBKIT + replace(value, /([^-])(transform)/g, '$1' + WEBKIT + '$2') + value;
        // cursor

        case 6187:
          return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + '$1'), /(image-set)/, WEBKIT + '$1'), value, '') + value;
        // background, background-image

        case 5495:
        case 3959:
          return replace(value, /(image-set\([^]*)/, WEBKIT + '$1' + '$`$1');
        // justify-content

        case 4968:
          return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + 'box-pack:$3' + MS + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + WEBKIT + value + value;
        // (margin|padding)-inline-(start|end)

        case 4095:
        case 3583:
        case 4068:
        case 2532:
          return replace(value, /(.+)-inline(.+)/, WEBKIT + '$1$2') + value;
        // (min|max)?(width|height|inline-size|block-size)

        case 8116:
        case 7059:
        case 5753:
        case 5535:
        case 5445:
        case 5701:
        case 4933:
        case 4677:
        case 5533:
        case 5789:
        case 5021:
        case 4765:
          // stretch, max-content, min-content, fill-available
          if (strlen(value) - 1 - length > 6) switch (charat(value, length + 1)) {
            // (m)ax-content, (m)in-content
            case 109:
              // -
              if (charat(value, length + 4) !== 45) break;
            // (f)ill-available, (f)it-content

            case 102:
              return replace(value, /(.+:)(.+)-([^]+)/, '$1' + WEBKIT + '$2-$3' + '$1' + MOZ + (charat(value, length + 3) == 108 ? '$3' : '$2-$3')) + value;
            // (s)tretch

            case 115:
              return ~indexof(value, 'stretch') ? prefix(replace(value, 'stretch', 'fill-available'), length) + value : value;
          }
          break;
        // position: sticky

        case 4949:
          // (s)ticky?
          if (charat(value, length + 1) !== 115) break;
        // display: (flex|inline-flex)

        case 6444:
          switch (charat(value, strlen(value) - 3 - (~indexof(value, '!important') && 10))) {
            // stic(k)y
            case 107:
              return replace(value, ':', ':' + WEBKIT) + value;
            // (inline-)?fl(e)x

            case 101:
              return replace(value, /(.+:)([^;!]+)(;|!.+)?/, '$1' + WEBKIT + (charat(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + WEBKIT + '$2$3' + '$1' + MS + '$2box$3') + value;
          }

          break;
        // writing-mode

        case 5936:
          switch (charat(value, length + 11)) {
            // vertical-l(r)
            case 114:
              return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb') + value;
            // vertical-r(l)

            case 108:
              return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value;
            // horizontal(-)tb

            case 45:
              return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'lr') + value;
          }

          return WEBKIT + value + MS + value + value;
      }

      return value;
    }

    var prefixer = function prefixer(element, index, children, callback) {
      if (element.length > -1) if (!element["return"]) switch (element.type) {
        case DECLARATION:
          element["return"] = prefix(element.value, element.length);
          break;

        case KEYFRAMES:
          return serialize([copy(element, {
            value: replace(element.value, '@', '@' + WEBKIT)
          })], callback);

        case RULESET:
          if (element.length) return combine(element.props, function (value) {
            switch (match(value, /(::plac\w+|:read-\w+)/)) {
              // :read-(only|write)
              case ':read-only':
              case ':read-write':
                return serialize([copy(element, {
                  props: [replace(value, /:(read-\w+)/, ':' + MOZ + '$1')]
                })], callback);
              // :placeholder

              case '::placeholder':
                return serialize([copy(element, {
                  props: [replace(value, /:(plac\w+)/, ':' + WEBKIT + 'input-$1')]
                }), copy(element, {
                  props: [replace(value, /:(plac\w+)/, ':' + MOZ + '$1')]
                }), copy(element, {
                  props: [replace(value, /:(plac\w+)/, MS + 'input-$1')]
                })], callback);
            }

            return '';
          });
      }
    };

    var defaultStylisPlugins = [prefixer];

    var createCache = function createCache(options) {
      var key = options.key;

      if (!key) {
        throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\n" + "If multiple caches share the same key they might \"fight\" for each other's style elements.");
      }

      if ( key === 'css') {
        var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
        // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
        // note this very very intentionally targets all style elements regardless of the key to ensure
        // that creating a cache works inside of render of a React component

        Array.prototype.forEach.call(ssrStyles, function (node) {
          // we want to only move elements which have a space in the data-emotion attribute value
          // because that indicates that it is an Emotion 11 server-side rendered style elements
          // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
          // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
          // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
          // will not result in the Emotion 10 styles being destroyed
          var dataEmotionAttribute = node.getAttribute('data-emotion');

          if (dataEmotionAttribute.indexOf(' ') === -1) {
            return;
          }
          document.head.appendChild(node);
          node.setAttribute('data-s', '');
        });
      }

      var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;

      {
        // $FlowFixMe
        if (/[^a-z-]/.test(key)) {
          throw new Error("Emotion key must only contain lower case alphabetical characters and - but \"" + key + "\" was passed");
        }
      }

      var inserted = {};
      var container;
      var nodesToHydrate = [];

      {
        container = options.container || document.head;
        Array.prototype.forEach.call( // this means we will ignore elements which don't have a space in them which
        // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
        document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function (node) {
          var attrib = node.getAttribute("data-emotion").split(' '); // $FlowFixMe

          for (var i = 1; i < attrib.length; i++) {
            inserted[attrib[i]] = true;
          }

          nodesToHydrate.push(node);
        });
      }

      var _insert;

      var omnipresentPlugins = [compat, removeLabel];

      {
        omnipresentPlugins.push(createUnsafeSelectorsAlarm({
          get compat() {
            return cache.compat;
          }

        }), incorrectImportAlarm);
      }

      {
        var currentSheet;
        var finalizingPlugins = [stringify, function (element) {
          if (!element.root) {
            if (element["return"]) {
              currentSheet.insert(element["return"]);
            } else if (element.value && element.type !== COMMENT) {
              // insert empty rule in non-production environments
              // so @emotion/jest can grab `key` from the (JS)DOM for caches without any rules inserted yet
              currentSheet.insert(element.value + "{}");
            }
          }
        } ];
        var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));

        var stylis = function stylis(styles) {
          return serialize(compile(styles), serializer);
        };

        _insert = function insert(selector, serialized, sheet, shouldCache) {
          currentSheet = sheet;

          if (serialized.map !== undefined) {
            currentSheet = {
              insert: function insert(rule) {
                sheet.insert(rule + serialized.map);
              }
            };
          }

          stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);

          if (shouldCache) {
            cache.inserted[serialized.name] = true;
          }
        };
      }

      var cache = {
        key: key,
        sheet: new StyleSheet({
          key: key,
          container: container,
          nonce: options.nonce,
          speedy: options.speedy,
          prepend: options.prepend,
          insertionPoint: options.insertionPoint
        }),
        nonce: options.nonce,
        inserted: inserted,
        registered: {},
        insert: _insert
      };
      cache.sheet.hydrate(nodesToHydrate);
      return cache;
    };

    var reactIs$3 = {exports: {}};

    var reactIs_development$2 = {};

    /** @license React v16.13.1
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */



    {
      (function() {

    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?

    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }

    function typeOf(object) {
      if (typeof object === 'object' && object !== null) {
        var $$typeof = object.$$typeof;

        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;

            switch (type) {
              case REACT_ASYNC_MODE_TYPE:
              case REACT_CONCURRENT_MODE_TYPE:
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
                return type;

              default:
                var $$typeofType = type && type.$$typeof;

                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;

                  default:
                    return $$typeof;
                }

            }

          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }

      return undefined;
    } // AsyncMode is deprecated along with isAsyncMode

    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
        }
      }

      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }

    reactIs_development$2.AsyncMode = AsyncMode;
    reactIs_development$2.ConcurrentMode = ConcurrentMode;
    reactIs_development$2.ContextConsumer = ContextConsumer;
    reactIs_development$2.ContextProvider = ContextProvider;
    reactIs_development$2.Element = Element;
    reactIs_development$2.ForwardRef = ForwardRef;
    reactIs_development$2.Fragment = Fragment;
    reactIs_development$2.Lazy = Lazy;
    reactIs_development$2.Memo = Memo;
    reactIs_development$2.Portal = Portal;
    reactIs_development$2.Profiler = Profiler;
    reactIs_development$2.StrictMode = StrictMode;
    reactIs_development$2.Suspense = Suspense;
    reactIs_development$2.isAsyncMode = isAsyncMode;
    reactIs_development$2.isConcurrentMode = isConcurrentMode;
    reactIs_development$2.isContextConsumer = isContextConsumer;
    reactIs_development$2.isContextProvider = isContextProvider;
    reactIs_development$2.isElement = isElement;
    reactIs_development$2.isForwardRef = isForwardRef;
    reactIs_development$2.isFragment = isFragment;
    reactIs_development$2.isLazy = isLazy;
    reactIs_development$2.isMemo = isMemo;
    reactIs_development$2.isPortal = isPortal;
    reactIs_development$2.isProfiler = isProfiler;
    reactIs_development$2.isStrictMode = isStrictMode;
    reactIs_development$2.isSuspense = isSuspense;
    reactIs_development$2.isValidElementType = isValidElementType;
    reactIs_development$2.typeOf = typeOf;
      })();
    }

    {
      reactIs$3.exports = reactIs_development$2;
    }

    var reactIs$2 = reactIs$3.exports;
    var FORWARD_REF_STATICS = {
      '$$typeof': true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      '$$typeof': true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs$2.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs$2.Memo] = MEMO_STATICS;

    var isBrowser$1 = "object" !== 'undefined';
    function getRegisteredStyles(registered, registeredStyles, classNames) {
      var rawClassName = '';
      classNames.split(' ').forEach(function (className) {
        if (registered[className] !== undefined) {
          registeredStyles.push(registered[className] + ";");
        } else {
          rawClassName += className + " ";
        }
      });
      return rawClassName;
    }
    var registerStyles = function registerStyles(cache, serialized, isStringTag) {
      var className = cache.key + "-" + serialized.name;

      if ( // we only need to add the styles to the registered cache if the
      // class name could be used further down
      // the tree but if it's a string tag, we know it won't
      // so we don't have to add it to registered cache.
      // this improves memory usage since we can avoid storing the whole style string
      (isStringTag === false || // we need to always store it if we're in compat mode and
      // in node since emotion-server relies on whether a style is in
      // the registered cache to know whether a style is global or not
      // also, note that this check will be dead code eliminated in the browser
      isBrowser$1 === false ) && cache.registered[className] === undefined) {
        cache.registered[className] = serialized.styles;
      }
    };
    var insertStyles = function insertStyles(cache, serialized, isStringTag) {
      registerStyles(cache, serialized, isStringTag);
      var className = cache.key + "-" + serialized.name;

      if (cache.inserted[serialized.name] === undefined) {
        var current = serialized;

        do {
          cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);

          current = current.next;
        } while (current !== undefined);
      }
    };

    /* eslint-disable */
    // Inspired by https://github.com/garycourt/murmurhash-js
    // Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
    function murmur2(str) {
      // 'm' and 'r' are mixing constants generated offline.
      // They're not really 'magic', they just happen to work well.
      // const m = 0x5bd1e995;
      // const r = 24;
      // Initialize the hash
      var h = 0; // Mix 4 bytes at a time into the hash

      var k,
          i = 0,
          len = str.length;

      for (; len >= 4; ++i, len -= 4) {
        k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
        k =
        /* Math.imul(k, m): */
        (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
        k ^=
        /* k >>> r: */
        k >>> 24;
        h =
        /* Math.imul(k, m): */
        (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
        /* Math.imul(h, m): */
        (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
      } // Handle the last few bytes of the input array


      switch (len) {
        case 3:
          h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

        case 2:
          h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

        case 1:
          h ^= str.charCodeAt(i) & 0xff;
          h =
          /* Math.imul(h, m): */
          (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
      } // Do a few final mixes of the hash to ensure the last few
      // bytes are well-incorporated.


      h ^= h >>> 13;
      h =
      /* Math.imul(h, m): */
      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
      return ((h ^ h >>> 15) >>> 0).toString(36);
    }

    var unitlessKeys = {
      animationIterationCount: 1,
      borderImageOutset: 1,
      borderImageSlice: 1,
      borderImageWidth: 1,
      boxFlex: 1,
      boxFlexGroup: 1,
      boxOrdinalGroup: 1,
      columnCount: 1,
      columns: 1,
      flex: 1,
      flexGrow: 1,
      flexPositive: 1,
      flexShrink: 1,
      flexNegative: 1,
      flexOrder: 1,
      gridRow: 1,
      gridRowEnd: 1,
      gridRowSpan: 1,
      gridRowStart: 1,
      gridColumn: 1,
      gridColumnEnd: 1,
      gridColumnSpan: 1,
      gridColumnStart: 1,
      msGridRow: 1,
      msGridRowSpan: 1,
      msGridColumn: 1,
      msGridColumnSpan: 1,
      fontWeight: 1,
      lineHeight: 1,
      opacity: 1,
      order: 1,
      orphans: 1,
      tabSize: 1,
      widows: 1,
      zIndex: 1,
      zoom: 1,
      WebkitLineClamp: 1,
      // SVG-related properties
      fillOpacity: 1,
      floodOpacity: 1,
      stopOpacity: 1,
      strokeDasharray: 1,
      strokeDashoffset: 1,
      strokeMiterlimit: 1,
      strokeOpacity: 1,
      strokeWidth: 1
    };

    var ILLEGAL_ESCAPE_SEQUENCE_ERROR$1 = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
    var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
    var hyphenateRegex = /[A-Z]|^ms/g;
    var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

    var isCustomProperty = function isCustomProperty(property) {
      return property.charCodeAt(1) === 45;
    };

    var isProcessableValue = function isProcessableValue(value) {
      return value != null && typeof value !== 'boolean';
    };

    var processStyleName = /* #__PURE__ */memoize$1(function (styleName) {
      return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
    });

    var processStyleValue = function processStyleValue(key, value) {
      switch (key) {
        case 'animation':
        case 'animationName':
          {
            if (typeof value === 'string') {
              return value.replace(animationRegex, function (match, p1, p2) {
                cursor = {
                  name: p1,
                  styles: p2,
                  next: cursor
                };
                return p1;
              });
            }
          }
      }

      if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
        return value + 'px';
      }

      return value;
    };

    {
      var contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
      var contentValues = ['normal', 'none', 'initial', 'inherit', 'unset'];
      var oldProcessStyleValue = processStyleValue;
      var msPattern = /^-ms-/;
      var hyphenPattern = /-(.)/g;
      var hyphenatedCache = {};

      processStyleValue = function processStyleValue(key, value) {
        if (key === 'content') {
          if (typeof value !== 'string' || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
            throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
          }
        }

        var processed = oldProcessStyleValue(key, value);

        if (processed !== '' && !isCustomProperty(key) && key.indexOf('-') !== -1 && hyphenatedCache[key] === undefined) {
          hyphenatedCache[key] = true;
          console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, 'ms-').replace(hyphenPattern, function (str, _char) {
            return _char.toUpperCase();
          }) + "?");
        }

        return processed;
      };
    }

    var noComponentSelectorMessage = 'Component selectors can only be used in conjunction with ' + '@emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware ' + 'compiler transform.';

    function handleInterpolation(mergedProps, registered, interpolation) {
      if (interpolation == null) {
        return '';
      }

      if (interpolation.__emotion_styles !== undefined) {
        if (interpolation.toString() === 'NO_COMPONENT_SELECTOR') {
          throw new Error(noComponentSelectorMessage);
        }

        return interpolation;
      }

      switch (typeof interpolation) {
        case 'boolean':
          {
            return '';
          }

        case 'object':
          {
            if (interpolation.anim === 1) {
              cursor = {
                name: interpolation.name,
                styles: interpolation.styles,
                next: cursor
              };
              return interpolation.name;
            }

            if (interpolation.styles !== undefined) {
              var next = interpolation.next;

              if (next !== undefined) {
                // not the most efficient thing ever but this is a pretty rare case
                // and there will be very few iterations of this generally
                while (next !== undefined) {
                  cursor = {
                    name: next.name,
                    styles: next.styles,
                    next: cursor
                  };
                  next = next.next;
                }
              }

              var styles = interpolation.styles + ";";

              if (interpolation.map !== undefined) {
                styles += interpolation.map;
              }

              return styles;
            }

            return createStringFromObject(mergedProps, registered, interpolation);
          }

        case 'function':
          {
            if (mergedProps !== undefined) {
              var previousCursor = cursor;
              var result = interpolation(mergedProps);
              cursor = previousCursor;
              return handleInterpolation(mergedProps, registered, result);
            } else {
              console.error('Functions that are interpolated in css calls will be stringified.\n' + 'If you want to have a css call based on props, create a function that returns a css call like this\n' + 'let dynamicStyle = (props) => css`color: ${props.color}`\n' + 'It can be called directly with props or interpolated in a styled call like this\n' + "let SomeComponent = styled('div')`${dynamicStyle}`");
            }

            break;
          }

        case 'string':
          {
            var matched = [];
            var replaced = interpolation.replace(animationRegex, function (match, p1, p2) {
              var fakeVarName = "animation" + matched.length;
              matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, '') + "`");
              return "${" + fakeVarName + "}";
            });

            if (matched.length) {
              console.error('`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\n' + 'Instead of doing this:\n\n' + [].concat(matched, ["`" + replaced + "`"]).join('\n') + '\n\nYou should wrap it with `css` like this:\n\n' + ("css`" + replaced + "`"));
            }
          }

          break;
      } // finalize string values (regular strings and functions interpolated into css calls)


      if (registered == null) {
        return interpolation;
      }

      var cached = registered[interpolation];
      return cached !== undefined ? cached : interpolation;
    }

    function createStringFromObject(mergedProps, registered, obj) {
      var string = '';

      if (Array.isArray(obj)) {
        for (var i = 0; i < obj.length; i++) {
          string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
        }
      } else {
        for (var _key in obj) {
          var value = obj[_key];

          if (typeof value !== 'object') {
            if (registered != null && registered[value] !== undefined) {
              string += _key + "{" + registered[value] + "}";
            } else if (isProcessableValue(value)) {
              string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
            }
          } else {
            if (_key === 'NO_COMPONENT_SELECTOR' && "development" !== 'production') {
              throw new Error(noComponentSelectorMessage);
            }

            if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
              for (var _i = 0; _i < value.length; _i++) {
                if (isProcessableValue(value[_i])) {
                  string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
                }
              }
            } else {
              var interpolated = handleInterpolation(mergedProps, registered, value);

              switch (_key) {
                case 'animation':
                case 'animationName':
                  {
                    string += processStyleName(_key) + ":" + interpolated + ";";
                    break;
                  }

                default:
                  {
                    if (_key === 'undefined') {
                      console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                    }

                    string += _key + "{" + interpolated + "}";
                  }
              }
            }
          }
        }
      }

      return string;
    }

    var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
    var sourceMapPattern;

    {
      sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
    } // this is the cursor for keyframes
    // keyframes are stored on the SerializedStyles object as a linked list


    var cursor;
    var serializeStyles = function serializeStyles(args, registered, mergedProps) {
      if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
        return args[0];
      }

      var stringMode = true;
      var styles = '';
      cursor = undefined;
      var strings = args[0];

      if (strings == null || strings.raw === undefined) {
        stringMode = false;
        styles += handleInterpolation(mergedProps, registered, strings);
      } else {
        if (strings[0] === undefined) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
        }

        styles += strings[0];
      } // we start at 1 since we've already handled the first arg


      for (var i = 1; i < args.length; i++) {
        styles += handleInterpolation(mergedProps, registered, args[i]);

        if (stringMode) {
          if (strings[i] === undefined) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
          }

          styles += strings[i];
        }
      }

      var sourceMap;

      {
        styles = styles.replace(sourceMapPattern, function (match) {
          sourceMap = match;
          return '';
        });
      } // using a global regex with .exec is stateful so lastIndex has to be reset each time


      labelPattern.lastIndex = 0;
      var identifierName = '';
      var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

      while ((match = labelPattern.exec(styles)) !== null) {
        identifierName += '-' + // $FlowFixMe we know it's not null
        match[1];
      }

      var name = murmur2(styles) + identifierName;

      {
        // $FlowFixMe SerializedStyles type doesn't have toString property (and we don't want to add it)
        return {
          name: name,
          styles: styles,
          map: sourceMap,
          next: cursor,
          toString: function toString() {
            return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
          }
        };
      }
    };

    var syncFallback = function syncFallback(create) {
      return create();
    };

    var useInsertionEffect = React__namespace['useInsertion' + 'Effect'] ? React__namespace['useInsertion' + 'Effect'] : false;
    var useInsertionEffectAlwaysWithSyncFallback =  useInsertionEffect || syncFallback;
    var useInsertionEffectWithLayoutFallback = useInsertionEffect || React.useLayoutEffect;

    var hasOwnProperty$1 = {}.hasOwnProperty;

    var EmotionCacheContext = /* #__PURE__ */React.createContext( // we're doing this to avoid preconstruct's dead code elimination in this one case
    // because this module is primarily intended for the browser and node
    // but it's also required in react native and similar environments sometimes
    // and we could have a special build just for that
    // but this is much easier and the native packages
    // might use a different theme context in the future anyway
    typeof HTMLElement !== 'undefined' ? /* #__PURE__ */createCache({
      key: 'css'
    }) : null);

    {
      EmotionCacheContext.displayName = 'EmotionCacheContext';
    }

    EmotionCacheContext.Provider;

    var withEmotionCache = function withEmotionCache(func) {
      // $FlowFixMe
      return /*#__PURE__*/React.forwardRef(function (props, ref) {
        // the cache will never be null in the browser
        var cache = React.useContext(EmotionCacheContext);
        return func(props, cache, ref);
      });
    };

    var ThemeContext$2 = /* #__PURE__ */React.createContext({});

    {
      ThemeContext$2.displayName = 'EmotionThemeContext';
    }

    var typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__';
    var labelPropName = '__EMOTION_LABEL_PLEASE_DO_NOT_USE__';

    var Insertion$2 = function Insertion(_ref) {
      var cache = _ref.cache,
          serialized = _ref.serialized,
          isStringTag = _ref.isStringTag;
      registerStyles(cache, serialized, isStringTag);
      useInsertionEffectAlwaysWithSyncFallback(function () {
        return insertStyles(cache, serialized, isStringTag);
      });

      return null;
    };

    var Emotion = /* #__PURE__ */withEmotionCache(function (props, cache, ref) {
      var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works
      // not passing the registered cache to serializeStyles because it would
      // make certain babel optimisations not possible

      if (typeof cssProp === 'string' && cache.registered[cssProp] !== undefined) {
        cssProp = cache.registered[cssProp];
      }

      var WrappedComponent = props[typePropName];
      var registeredStyles = [cssProp];
      var className = '';

      if (typeof props.className === 'string') {
        className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
      } else if (props.className != null) {
        className = props.className + " ";
      }

      var serialized = serializeStyles(registeredStyles, undefined, React.useContext(ThemeContext$2));

      if (serialized.name.indexOf('-') === -1) {
        var labelFromStack = props[labelPropName];

        if (labelFromStack) {
          serialized = serializeStyles([serialized, 'label:' + labelFromStack + ';']);
        }
      }

      className += cache.key + "-" + serialized.name;
      var newProps = {};

      for (var key in props) {
        if (hasOwnProperty$1.call(props, key) && key !== 'css' && key !== typePropName && (key !== labelPropName)) {
          newProps[key] = props[key];
        }
      }

      newProps.ref = ref;
      newProps.className = className;
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Insertion$2, {
        cache: cache,
        serialized: serialized,
        isStringTag: typeof WrappedComponent === 'string'
      }), /*#__PURE__*/React.createElement(WrappedComponent, newProps));
    });

    {
      Emotion.displayName = 'EmotionCssPropInternal';
    }

    var pkg = {
    	name: "@emotion/react",
    	version: "11.10.5",
    	main: "dist/emotion-react.cjs.js",
    	module: "dist/emotion-react.esm.js",
    	browser: {
    		"./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
    	},
    	exports: {
    		".": {
    			module: {
    				worker: "./dist/emotion-react.worker.esm.js",
    				browser: "./dist/emotion-react.browser.esm.js",
    				"default": "./dist/emotion-react.esm.js"
    			},
    			"default": "./dist/emotion-react.cjs.js"
    		},
    		"./jsx-runtime": {
    			module: {
    				worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
    				browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
    				"default": "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
    			},
    			"default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
    		},
    		"./_isolated-hnrs": {
    			module: {
    				worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
    				browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
    				"default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
    			},
    			"default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
    		},
    		"./jsx-dev-runtime": {
    			module: {
    				worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
    				browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
    				"default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
    			},
    			"default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
    		},
    		"./package.json": "./package.json",
    		"./types/css-prop": "./types/css-prop.d.ts",
    		"./macro": "./macro.js"
    	},
    	types: "types/index.d.ts",
    	files: [
    		"src",
    		"dist",
    		"jsx-runtime",
    		"jsx-dev-runtime",
    		"_isolated-hnrs",
    		"types/*.d.ts",
    		"macro.js",
    		"macro.d.ts",
    		"macro.js.flow"
    	],
    	sideEffects: false,
    	author: "Emotion Contributors",
    	license: "MIT",
    	scripts: {
    		"test:typescript": "dtslint types"
    	},
    	dependencies: {
    		"@babel/runtime": "^7.18.3",
    		"@emotion/babel-plugin": "^11.10.5",
    		"@emotion/cache": "^11.10.5",
    		"@emotion/serialize": "^1.1.1",
    		"@emotion/use-insertion-effect-with-fallbacks": "^1.0.0",
    		"@emotion/utils": "^1.2.0",
    		"@emotion/weak-memoize": "^0.3.0",
    		"hoist-non-react-statics": "^3.3.1"
    	},
    	peerDependencies: {
    		"@babel/core": "^7.0.0",
    		react: ">=16.8.0"
    	},
    	peerDependenciesMeta: {
    		"@babel/core": {
    			optional: true
    		},
    		"@types/react": {
    			optional: true
    		}
    	},
    	devDependencies: {
    		"@babel/core": "^7.18.5",
    		"@definitelytyped/dtslint": "0.0.112",
    		"@emotion/css": "11.10.5",
    		"@emotion/css-prettifier": "1.1.1",
    		"@emotion/server": "11.10.0",
    		"@emotion/styled": "11.10.5",
    		"html-tag-names": "^1.1.2",
    		react: "16.14.0",
    		"svg-tag-names": "^1.1.1",
    		typescript: "^4.5.5"
    	},
    	repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
    	publishConfig: {
    		access: "public"
    	},
    	"umd:main": "dist/emotion-react.umd.min.js",
    	preconstruct: {
    		entrypoints: [
    			"./index.js",
    			"./jsx-runtime.js",
    			"./jsx-dev-runtime.js",
    			"./_isolated-hnrs.js"
    		],
    		umdName: "emotionReact",
    		exports: {
    			envConditions: [
    				"browser",
    				"worker"
    			],
    			extra: {
    				"./types/css-prop": "./types/css-prop.d.ts",
    				"./macro": "./macro.js"
    			}
    		}
    	}
    };

    var warnedAboutCssPropForGlobal = false; // maintain place over rerenders.
    // initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
    // initial client-side render from SSR, use place of hydrating tag

    var Global = /* #__PURE__ */withEmotionCache(function (props, cache) {
      if (!warnedAboutCssPropForGlobal && ( // check for className as well since the user is
      // probably using the custom createElement which
      // means it will be turned into a className prop
      // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
      props.className || props.css)) {
        console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
        warnedAboutCssPropForGlobal = true;
      }

      var styles = props.styles;
      var serialized = serializeStyles([styles], undefined, React.useContext(ThemeContext$2));
      // but it is based on a constant that will never change at runtime
      // it's effectively like having two implementations and switching them out
      // so it's not actually breaking anything


      var sheetRef = React.useRef();
      useInsertionEffectWithLayoutFallback(function () {
        var key = cache.key + "-global"; // use case of https://github.com/emotion-js/emotion/issues/2675

        var sheet = new cache.sheet.constructor({
          key: key,
          nonce: cache.sheet.nonce,
          container: cache.sheet.container,
          speedy: cache.sheet.isSpeedy
        });
        var rehydrating = false; // $FlowFixMe

        var node = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");

        if (cache.sheet.tags.length) {
          sheet.before = cache.sheet.tags[0];
        }

        if (node !== null) {
          rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s

          node.setAttribute('data-emotion', key);
          sheet.hydrate([node]);
        }

        sheetRef.current = [sheet, rehydrating];
        return function () {
          sheet.flush();
        };
      }, [cache]);
      useInsertionEffectWithLayoutFallback(function () {
        var sheetRefCurrent = sheetRef.current;
        var sheet = sheetRefCurrent[0],
            rehydrating = sheetRefCurrent[1];

        if (rehydrating) {
          sheetRefCurrent[1] = false;
          return;
        }

        if (serialized.next !== undefined) {
          // insert keyframes
          insertStyles(cache, serialized.next, true);
        }

        if (sheet.tags.length) {
          // if this doesn't exist then it will be null so the style element will be appended
          var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
          sheet.before = element;
          sheet.flush();
        }

        cache.insert("", serialized, sheet, false);
      }, [cache, serialized.name]);
      return null;
    });

    {
      Global.displayName = 'EmotionGlobal';
    }

    function css() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return serializeStyles(args);
    }

    var keyframes = function keyframes() {
      var insertable = css.apply(void 0, arguments);
      var name = "animation-" + insertable.name; // $FlowFixMe

      return {
        name: name,
        styles: "@keyframes " + name + "{" + insertable.styles + "}",
        anim: 1,
        toString: function toString() {
          return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
        }
      };
    };

    var classnames = function classnames(args) {
      var len = args.length;
      var i = 0;
      var cls = '';

      for (; i < len; i++) {
        var arg = args[i];
        if (arg == null) continue;
        var toAdd = void 0;

        switch (typeof arg) {
          case 'boolean':
            break;

          case 'object':
            {
              if (Array.isArray(arg)) {
                toAdd = classnames(arg);
              } else {
                if (arg.styles !== undefined && arg.name !== undefined) {
                  console.error('You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n' + '`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.');
                }

                toAdd = '';

                for (var k in arg) {
                  if (arg[k] && k) {
                    toAdd && (toAdd += ' ');
                    toAdd += k;
                  }
                }
              }

              break;
            }

          default:
            {
              toAdd = arg;
            }
        }

        if (toAdd) {
          cls && (cls += ' ');
          cls += toAdd;
        }
      }

      return cls;
    };

    function merge$1(registered, css, className) {
      var registeredStyles = [];
      var rawClassName = getRegisteredStyles(registered, registeredStyles, className);

      if (registeredStyles.length < 2) {
        return className;
      }

      return rawClassName + css(registeredStyles);
    }

    var Insertion$1 = function Insertion(_ref) {
      var cache = _ref.cache,
          serializedArr = _ref.serializedArr;
      useInsertionEffectAlwaysWithSyncFallback(function () {

        for (var i = 0; i < serializedArr.length; i++) {
          insertStyles(cache, serializedArr[i], false);
        }
      });

      return null;
    };

    var ClassNames = /* #__PURE__ */withEmotionCache(function (props, cache) {
      var hasRendered = false;
      var serializedArr = [];

      var css = function css() {
        if (hasRendered && "development" !== 'production') {
          throw new Error('css can only be used during render');
        }

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var serialized = serializeStyles(args, cache.registered);
        serializedArr.push(serialized); // registration has to happen here as the result of this might get consumed by `cx`

        registerStyles(cache, serialized, false);
        return cache.key + "-" + serialized.name;
      };

      var cx = function cx() {
        if (hasRendered && "development" !== 'production') {
          throw new Error('cx can only be used during render');
        }

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return merge$1(cache.registered, css, classnames(args));
      };

      var content = {
        css: css,
        cx: cx,
        theme: React.useContext(ThemeContext$2)
      };
      var ele = props.children(content);
      hasRendered = true;
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Insertion$1, {
        cache: cache,
        serializedArr: serializedArr
      }), ele);
    });

    {
      ClassNames.displayName = 'EmotionClassNames';
    }

    {
      var isBrowser = "object" !== 'undefined'; // #1727, #2905 for some reason Jest and Vitest evaluate modules twice if some consuming module gets mocked

      var isTestEnv = typeof jest !== 'undefined' || typeof vi !== 'undefined';

      if (isBrowser && !isTestEnv) {
        // globalThis has wide browser support - https://caniuse.com/?search=globalThis, Node.js 12 and later
        var globalContext = // $FlowIgnore
        typeof globalThis !== 'undefined' ? globalThis // eslint-disable-line no-undef
        : isBrowser ? window : global$1;
        var globalKey = "__EMOTION_REACT_" + pkg.version.split('.')[0] + "__";

        if (globalContext[globalKey]) {
          console.warn('You are loading @emotion/react when it is already loaded. Running ' + 'multiple instances may cause problems. This can happen if multiple ' + 'versions are used, or if multiple builds of the same version are ' + 'used.');
        }

        globalContext[globalKey] = true;
      }
    }

    var testOmitPropsOnStringTag = isPropValid;

    var testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {
      return key !== 'theme';
    };

    var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {
      return typeof tag === 'string' && // 96 is one less than the char code
      // for "a" so this is checking that
      // it's a lowercase character
      tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
    };
    var composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {
      var shouldForwardProp;

      if (options) {
        var optionsShouldForwardProp = options.shouldForwardProp;
        shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function (propName) {
          return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
        } : optionsShouldForwardProp;
      }

      if (typeof shouldForwardProp !== 'function' && isReal) {
        shouldForwardProp = tag.__emotion_forwardProp;
      }

      return shouldForwardProp;
    };

    var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";

    var Insertion = function Insertion(_ref) {
      var cache = _ref.cache,
          serialized = _ref.serialized,
          isStringTag = _ref.isStringTag;
      registerStyles(cache, serialized, isStringTag);
      useInsertionEffectAlwaysWithSyncFallback(function () {
        return insertStyles(cache, serialized, isStringTag);
      });

      return null;
    };

    var createStyled$1 = function createStyled(tag, options) {
      {
        if (tag === undefined) {
          throw new Error('You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.');
        }
      }

      var isReal = tag.__emotion_real === tag;
      var baseTag = isReal && tag.__emotion_base || tag;
      var identifierName;
      var targetClassName;

      if (options !== undefined) {
        identifierName = options.label;
        targetClassName = options.target;
      }

      var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
      var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
      var shouldUseAs = !defaultShouldForwardProp('as');
      return function () {
        var args = arguments;
        var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];

        if (identifierName !== undefined) {
          styles.push("label:" + identifierName + ";");
        }

        if (args[0] == null || args[0].raw === undefined) {
          styles.push.apply(styles, args);
        } else {
          if (args[0][0] === undefined) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
          }

          styles.push(args[0][0]);
          var len = args.length;
          var i = 1;

          for (; i < len; i++) {
            if (args[0][i] === undefined) {
              console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            }

            styles.push(args[i], args[0][i]);
          }
        } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class


        var Styled = withEmotionCache(function (props, cache, ref) {
          var FinalTag = shouldUseAs && props.as || baseTag;
          var className = '';
          var classInterpolations = [];
          var mergedProps = props;

          if (props.theme == null) {
            mergedProps = {};

            for (var key in props) {
              mergedProps[key] = props[key];
            }

            mergedProps.theme = React.useContext(ThemeContext$2);
          }

          if (typeof props.className === 'string') {
            className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
          } else if (props.className != null) {
            className = props.className + " ";
          }

          var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
          className += cache.key + "-" + serialized.name;

          if (targetClassName !== undefined) {
            className += " " + targetClassName;
          }

          var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
          var newProps = {};

          for (var _key in props) {
            if (shouldUseAs && _key === 'as') continue;

            if ( // $FlowFixMe
            finalShouldForwardProp(_key)) {
              newProps[_key] = props[_key];
            }
          }

          newProps.className = className;
          newProps.ref = ref;
          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Insertion, {
            cache: cache,
            serialized: serialized,
            isStringTag: typeof FinalTag === 'string'
          }), /*#__PURE__*/React.createElement(FinalTag, newProps));
        });
        Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
        Styled.defaultProps = tag.defaultProps;
        Styled.__emotion_real = Styled;
        Styled.__emotion_base = baseTag;
        Styled.__emotion_styles = styles;
        Styled.__emotion_forwardProp = shouldForwardProp;
        Object.defineProperty(Styled, 'toString', {
          value: function value() {
            if (targetClassName === undefined && "development" !== 'production') {
              return 'NO_COMPONENT_SELECTOR';
            } // $FlowFixMe: coerce undefined to string


            return "." + targetClassName;
          }
        });

        Styled.withComponent = function (nextTag, nextOptions) {
          return createStyled(nextTag, _extends({}, options, nextOptions, {
            shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
          })).apply(void 0, styles);
        };

        return Styled;
      };
    };

    var tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG
    'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];

    var newStyled = createStyled$1.bind();
    tags.forEach(function (tagName) {
      // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type
      newStyled[tagName] = newStyled(tagName);
    });

    var emStyled = newStyled;

    var propTypes = {exports: {}};

    var reactIs$1 = {exports: {}};

    var reactIs_development$1 = {};

    /** @license React v16.13.1
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */



    {
      (function() {

    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?

    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }

    function typeOf(object) {
      if (typeof object === 'object' && object !== null) {
        var $$typeof = object.$$typeof;

        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;

            switch (type) {
              case REACT_ASYNC_MODE_TYPE:
              case REACT_CONCURRENT_MODE_TYPE:
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
                return type;

              default:
                var $$typeofType = type && type.$$typeof;

                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;

                  default:
                    return $$typeof;
                }

            }

          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }

      return undefined;
    } // AsyncMode is deprecated along with isAsyncMode

    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
        }
      }

      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }

    reactIs_development$1.AsyncMode = AsyncMode;
    reactIs_development$1.ConcurrentMode = ConcurrentMode;
    reactIs_development$1.ContextConsumer = ContextConsumer;
    reactIs_development$1.ContextProvider = ContextProvider;
    reactIs_development$1.Element = Element;
    reactIs_development$1.ForwardRef = ForwardRef;
    reactIs_development$1.Fragment = Fragment;
    reactIs_development$1.Lazy = Lazy;
    reactIs_development$1.Memo = Memo;
    reactIs_development$1.Portal = Portal;
    reactIs_development$1.Profiler = Profiler;
    reactIs_development$1.StrictMode = StrictMode;
    reactIs_development$1.Suspense = Suspense;
    reactIs_development$1.isAsyncMode = isAsyncMode;
    reactIs_development$1.isConcurrentMode = isConcurrentMode;
    reactIs_development$1.isContextConsumer = isContextConsumer;
    reactIs_development$1.isContextProvider = isContextProvider;
    reactIs_development$1.isElement = isElement;
    reactIs_development$1.isForwardRef = isForwardRef;
    reactIs_development$1.isFragment = isFragment;
    reactIs_development$1.isLazy = isLazy;
    reactIs_development$1.isMemo = isMemo;
    reactIs_development$1.isPortal = isPortal;
    reactIs_development$1.isProfiler = isProfiler;
    reactIs_development$1.isStrictMode = isStrictMode;
    reactIs_development$1.isSuspense = isSuspense;
    reactIs_development$1.isValidElementType = isValidElementType;
    reactIs_development$1.typeOf = typeOf;
      })();
    }

    {
      reactIs$1.exports = reactIs_development$1;
    }

    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;

    function toObject(val) {
    	if (val === null || val === undefined) {
    		throw new TypeError('Object.assign cannot be called with null or undefined');
    	}

    	return Object(val);
    }

    function shouldUseNative() {
    	try {
    		if (!Object.assign) {
    			return false;
    		}

    		// Detect buggy property enumeration order in older V8 versions.

    		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
    		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
    		test1[5] = 'de';
    		if (Object.getOwnPropertyNames(test1)[0] === '5') {
    			return false;
    		}

    		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
    		var test2 = {};
    		for (var i = 0; i < 10; i++) {
    			test2['_' + String.fromCharCode(i)] = i;
    		}
    		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
    			return test2[n];
    		});
    		if (order2.join('') !== '0123456789') {
    			return false;
    		}

    		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
    		var test3 = {};
    		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
    			test3[letter] = letter;
    		});
    		if (Object.keys(Object.assign({}, test3)).join('') !==
    				'abcdefghijklmnopqrst') {
    			return false;
    		}

    		return true;
    	} catch (err) {
    		// We don't expect any of the above to throw, but better to be safe.
    		return false;
    	}
    }

    var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
    	var from;
    	var to = toObject(target);
    	var symbols;

    	for (var s = 1; s < arguments.length; s++) {
    		from = Object(arguments[s]);

    		for (var key in from) {
    			if (hasOwnProperty.call(from, key)) {
    				to[key] = from[key];
    			}
    		}

    		if (getOwnPropertySymbols) {
    			symbols = getOwnPropertySymbols(from);
    			for (var i = 0; i < symbols.length; i++) {
    				if (propIsEnumerable.call(from, symbols[i])) {
    					to[symbols[i]] = from[symbols[i]];
    				}
    			}
    		}
    	}

    	return to;
    };

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var ReactPropTypesSecret$2 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

    var ReactPropTypesSecret_1 = ReactPropTypesSecret$2;

    var has$2 = Function.call.bind(Object.prototype.hasOwnProperty);

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var printWarning$1 = function() {};

    {
      var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
      var loggedTypeFailures = {};
      var has$1 = has$2;

      printWarning$1 = function(text) {
        var message = 'Warning: ' + text;
        if (typeof console !== 'undefined') {
          console.error(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) { /**/ }
      };
    }

    /**
     * Assert that the values match with the type specs.
     * Error messages are memorized and will only be shown once.
     *
     * @param {object} typeSpecs Map of name to a ReactPropType
     * @param {object} values Runtime values that need to be type-checked
     * @param {string} location e.g. "prop", "context", "child context"
     * @param {string} componentName Name of the component for error messages.
     * @param {?Function} getStack Returns the component stack.
     * @private
     */
    function checkPropTypes$1(typeSpecs, values, location, componentName, getStack) {
      {
        for (var typeSpecName in typeSpecs) {
          if (has$1(typeSpecs, typeSpecName)) {
            var error;
            // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
              // This is intentionally an invariant that gets caught. It's the same
              // behavior as without this statement except with a better message.
              if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error(
                  (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
                  'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' +
                  'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
                );
                err.name = 'Invariant Violation';
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning$1(
                (componentName || 'React class') + ': type specification of ' +
                location + ' `' + typeSpecName + '` is invalid; the type checker ' +
                'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
                'You may have forgotten to pass an argument to the type checker ' +
                'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
                'shape all require an argument).'
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              // Only monitor this failure once because there tends to be a lot of the
              // same error.
              loggedTypeFailures[error.message] = true;

              var stack = getStack ? getStack() : '';

              printWarning$1(
                'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
              );
            }
          }
        }
      }
    }

    /**
     * Resets warning cache when testing.
     *
     * @private
     */
    checkPropTypes$1.resetWarningCache = function() {
      {
        loggedTypeFailures = {};
      }
    };

    var checkPropTypes_1 = checkPropTypes$1;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var ReactIs$1 = reactIs$1.exports;
    var assign = objectAssign;

    var ReactPropTypesSecret = ReactPropTypesSecret_1;
    var has = has$2;
    var checkPropTypes = checkPropTypes_1;

    var printWarning = function() {};

    {
      printWarning = function(text) {
        var message = 'Warning: ' + text;
        if (typeof console !== 'undefined') {
          console.error(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };
    }

    function emptyFunctionThatReturnsNull() {
      return null;
    }

    var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
      /* global Symbol */
      var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

      /**
       * Returns the iterator method function contained on the iterable object.
       *
       * Be sure to invoke the function with the iterable as context:
       *
       *     var iteratorFn = getIteratorFn(myIterable);
       *     if (iteratorFn) {
       *       var iterator = iteratorFn.call(myIterable);
       *       ...
       *     }
       *
       * @param {?object} maybeIterable
       * @return {?function}
       */
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === 'function') {
          return iteratorFn;
        }
      }

      /**
       * Collection of methods that allow declaration and validation of props that are
       * supplied to React components. Example usage:
       *
       *   var Props = require('ReactPropTypes');
       *   var MyArticle = React.createClass({
       *     propTypes: {
       *       // An optional string prop named "description".
       *       description: Props.string,
       *
       *       // A required enum prop named "category".
       *       category: Props.oneOf(['News','Photos']).isRequired,
       *
       *       // A prop named "dialog" that requires an instance of Dialog.
       *       dialog: Props.instanceOf(Dialog).isRequired
       *     },
       *     render: function() { ... }
       *   });
       *
       * A more formal specification of how these methods are used:
       *
       *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
       *   decl := ReactPropTypes.{type}(.isRequired)?
       *
       * Each and every declaration produces a function with the same signature. This
       * allows the creation of custom validation functions. For example:
       *
       *  var MyLink = React.createClass({
       *    propTypes: {
       *      // An optional string or URI prop named "href".
       *      href: function(props, propName, componentName) {
       *        var propValue = props[propName];
       *        if (propValue != null && typeof propValue !== 'string' &&
       *            !(propValue instanceof URI)) {
       *          return new Error(
       *            'Expected a string or an URI for ' + propName + ' in ' +
       *            componentName
       *          );
       *        }
       *      }
       *    },
       *    render: function() {...}
       *  });
       *
       * @internal
       */

      var ANONYMOUS = '<<anonymous>>';

      // Important!
      // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bigint: createPrimitiveTypeChecker('bigint'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        symbol: createPrimitiveTypeChecker('symbol'),

        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker,
      };

      /**
       * inlined Object.is polyfill to avoid requiring consumers ship their own
       * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
       */
      /*eslint-disable no-self-compare*/
      function is(x, y) {
        // SameValue algorithm
        if (x === y) {
          // Steps 1-5, 7-10
          // Steps 6.b-6.e: +0 != -0
          return x !== 0 || 1 / x === 1 / y;
        } else {
          // Step 6.a: NaN == NaN
          return x !== x && y !== y;
        }
      }
      /*eslint-enable no-self-compare*/

      /**
       * We use an Error-like object for backward compatibility as people may call
       * PropTypes directly and inspect their output. However, we don't use real
       * Errors anymore. We don't inspect their stack anyway, and creating them
       * is prohibitively expensive if they are created too often, such as what
       * happens in oneOfType() for any type before the one that matched.
       */
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === 'object' ? data: {};
        this.stack = '';
      }
      // Make `instanceof Error` still work for returned errors.
      PropTypeError.prototype = Error.prototype;

      function createChainableTypeChecker(validate) {
        {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;

          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              // New behavior only for users of `prop-types` package
              var err = new Error(
                'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
                'Use `PropTypes.checkPropTypes()` to call them. ' +
                'Read more at http://fb.me/use-check-prop-types'
              );
              err.name = 'Invariant Violation';
              throw err;
            } else if (typeof console !== 'undefined') {
              // Old behavior for people using React.PropTypes
              var cacheKey = componentName + ':' + propName;
              if (
                !manualPropTypeCallCache[cacheKey] &&
                // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3
              ) {
                printWarning(
                  'You are manually calling a React.PropTypes validation ' +
                  'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' +
                  'and will throw in the standalone `prop-types` package. ' +
                  'You may be seeing this warning due to a third-party PropTypes ' +
                  'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
              }
              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }

        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);

        return chainedCheckType;
      }

      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            // `propValue` being instance of, say, date/regexp, pass the 'object'
            // check, but we can offer a more precise error message here rather than
            // 'of type `object`'.
            var preciseType = getPreciseType(propValue);

            return new PropTypeError(
              'Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'),
              {expectedType: expectedType}
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }

      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== 'function') {
            return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs$1.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          {
            if (arguments.length > 1) {
              printWarning(
                'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
                'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
              );
            } else {
              printWarning('Invalid argument supplied to oneOf, expected an array.');
            }
          }
          return emptyFunctionThatReturnsNull;
        }

        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }

          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === 'symbol') {
              return String(value);
            }
            return value;
          });
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
        }
        return createChainableTypeChecker(validate);
      }

      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== 'function') {
            return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== 'object') {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') ;
          return emptyFunctionThatReturnsNull;
        }

        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== 'function') {
            printWarning(
              'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
              'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
            );
            return emptyFunctionThatReturnsNull;
          }
        }

        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = (expectedTypes.length > 0) ? ', expected one of type [' + expectedTypes.join(', ') + ']': '';
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
        }
        return createChainableTypeChecker(validate);
      }

      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' +
          'it must be a function, usually from the `prop-types` package, but received `' + type + '`.'
        );
      }

      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== 'object') {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== 'function') {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== 'object') {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
          }
          // We need to check all keys in case some are required but missing from props.
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== 'function') {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
                '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
                '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  ')
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function isNode(propValue) {
        switch (typeof propValue) {
          case 'number':
          case 'string':
          case 'undefined':
            return true;
          case 'boolean':
            return !propValue;
          case 'object':
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }

            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                // Iterator will provide entry [k,v] tuples rather than values.
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }

            return true;
          default:
            return false;
        }
      }

      function isSymbol(propType, propValue) {
        // Native Symbol.
        if (propType === 'symbol') {
          return true;
        }

        // falsy value can't be a Symbol
        if (!propValue) {
          return false;
        }

        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
        if (propValue['@@toStringTag'] === 'Symbol') {
          return true;
        }

        // Fallback for non-spec compliant Symbols which are polyfilled.
        if (typeof Symbol === 'function' && propValue instanceof Symbol) {
          return true;
        }

        return false;
      }

      // Equivalent of `typeof` but with special handling for array and regexp.
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return 'array';
        }
        if (propValue instanceof RegExp) {
          // Old webkits (at least until Android 4.0) return 'function' rather than
          // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
          // passes PropTypes.object.
          return 'object';
        }
        if (isSymbol(propType, propValue)) {
          return 'symbol';
        }
        return propType;
      }

      // This handles more types than `getPropType`. Only used for error messages.
      // See `createPrimitiveTypeChecker`.
      function getPreciseType(propValue) {
        if (typeof propValue === 'undefined' || propValue === null) {
          return '' + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === 'object') {
          if (propValue instanceof Date) {
            return 'date';
          } else if (propValue instanceof RegExp) {
            return 'regexp';
          }
        }
        return propType;
      }

      // Returns a string that is postfixed to a warning about an invalid type.
      // For example, "undefined" or "of type array"
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case 'array':
          case 'object':
            return 'an ' + type;
          case 'boolean':
          case 'date':
          case 'regexp':
            return 'a ' + type;
          default:
            return type;
        }
      }

      // Returns class name of the object, if any.
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }

      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;

      return ReactPropTypes;
    };

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    {
      var ReactIs = reactIs$1.exports;

      // By explicitly using `prop-types` you are opting into new development behavior.
      // http://fb.me/prop-types-in-prod
      var throwOnDirectAccess = true;
      propTypes.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
    }

    var PropTypes = propTypes.exports;

    var jsxRuntime = {exports: {}};

    var reactJsxRuntime_development = {};

    /**
     * @license React
     * react-jsx-runtime.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    {
      (function() {

    var React = React__default["default"];

    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
    var REACT_MEMO_TYPE = Symbol.for('react.memo');
    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== 'object') {
        return null;
      }

      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }

      return null;
    }

    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

    function error(format) {
      {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          printWarning('error', format, args);
        }
      }
    }

    function printWarning(level, format, args) {
      // When changing this logic, you might want to also
      // update consoleWithStackDev.www.js as well.
      {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();

        if (stack !== '') {
          format += '%s';
          args = args.concat([stack]);
        } // eslint-disable-next-line react-internal/safe-string-coercion


        var argsWithFormat = args.map(function (item) {
          return String(item);
        }); // Careful: RN currently depends on this prefix

        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging

        Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }

    // -----------------------------------------------------------------------------

    var enableScopeAPI = false; // Experimental Create Event Handle API.
    var enableCacheElement = false;
    var enableTransitionTracing = false; // No known bugs, but needs performance testing

    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    // stuff. Intended to enable React core members to more easily debug scheduling
    // issues in DEV builds.

    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

    var REACT_MODULE_REFERENCE;

    {
      REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
    }

    function isValidElementType(type) {
      if (typeof type === 'string' || typeof type === 'function') {
        return true;
      } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
        return true;
      }

      if (typeof type === 'object' && type !== null) {
        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
        // types supported by any Flight configuration anywhere since
        // we don't know which Flight build this will end up being used
        // with.
        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
          return true;
        }
      }

      return false;
    }

    function getWrappedName(outerType, innerType, wrapperName) {
      var displayName = outerType.displayName;

      if (displayName) {
        return displayName;
      }

      var functionName = innerType.displayName || innerType.name || '';
      return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber


    function getContextName(type) {
      return type.displayName || 'Context';
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


    function getComponentNameFromType(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }

      {
        if (typeof type.tag === 'number') {
          error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }

      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }

      if (typeof type === 'string') {
        return type;
      }

      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return 'Fragment';

        case REACT_PORTAL_TYPE:
          return 'Portal';

        case REACT_PROFILER_TYPE:
          return 'Profiler';

        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';

        case REACT_SUSPENSE_TYPE:
          return 'Suspense';

        case REACT_SUSPENSE_LIST_TYPE:
          return 'SuspenseList';

      }

      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context = type;
            return getContextName(context) + '.Consumer';

          case REACT_PROVIDER_TYPE:
            var provider = type;
            return getContextName(provider._context) + '.Provider';

          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');

          case REACT_MEMO_TYPE:
            var outerName = type.displayName || null;

            if (outerName !== null) {
              return outerName;
            }

            return getComponentNameFromType(type.type) || 'Memo';

          case REACT_LAZY_TYPE:
            {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;

              try {
                return getComponentNameFromType(init(payload));
              } catch (x) {
                return null;
              }
            }

          // eslint-disable-next-line no-fallthrough
        }
      }

      return null;
    }

    var assign = Object.assign;

    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;

    function disabledLog() {}

    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
      {
        if (disabledDepth === 0) {
          /* eslint-disable react-internal/no-production-logging */
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          }; // $FlowFixMe Flow thinks console is immutable.

          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
          /* eslint-enable react-internal/no-production-logging */
        }

        disabledDepth++;
      }
    }
    function reenableLogs() {
      {
        disabledDepth--;

        if (disabledDepth === 0) {
          /* eslint-disable react-internal/no-production-logging */
          var props = {
            configurable: true,
            enumerable: true,
            writable: true
          }; // $FlowFixMe Flow thinks console is immutable.

          Object.defineProperties(console, {
            log: assign({}, props, {
              value: prevLog
            }),
            info: assign({}, props, {
              value: prevInfo
            }),
            warn: assign({}, props, {
              value: prevWarn
            }),
            error: assign({}, props, {
              value: prevError
            }),
            group: assign({}, props, {
              value: prevGroup
            }),
            groupCollapsed: assign({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: assign({}, props, {
              value: prevGroupEnd
            })
          });
          /* eslint-enable react-internal/no-production-logging */
        }

        if (disabledDepth < 0) {
          error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
        }
      }
    }

    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix === undefined) {
          // Extract the VM specific prefix used by each line.
          try {
            throw Error();
          } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
          }
        } // We use the prefix to ensure our stacks line up with native stack frames.


        return '\n' + prefix + name;
      }
    }
    var reentry = false;
    var componentFrameCache;

    {
      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap();
    }

    function describeNativeComponentFrame(fn, construct) {
      // If something asked for a stack inside a fake render, it should get ignored.
      if ( !fn || reentry) {
        return '';
      }

      {
        var frame = componentFrameCache.get(fn);

        if (frame !== undefined) {
          return frame;
        }
      }

      var control;
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

      Error.prepareStackTrace = undefined;
      var previousDispatcher;

      {
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.

        ReactCurrentDispatcher.current = null;
        disableLogs();
      }

      try {
        // This should throw.
        if (construct) {
          // Something should be setting the props in the constructor.
          var Fake = function () {
            throw Error();
          }; // $FlowFixMe


          Object.defineProperty(Fake.prototype, 'props', {
            set: function () {
              // We use a throwing setter instead of frozen or non-writable props
              // because that won't throw in a non-strict mode function.
              throw Error();
            }
          });

          if (typeof Reflect === 'object' && Reflect.construct) {
            // We construct a different control for this case to include any extra
            // frames added by the construct call.
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }

            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }

            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }

          fn();
        }
      } catch (sample) {
        // This is inlined manually because closure doesn't do it for us.
        if (sample && control && typeof sample.stack === 'string') {
          // This extracts the first frame from the sample that isn't also in the control.
          // Skipping one frame that we assume is the frame that calls the two.
          var sampleLines = sample.stack.split('\n');
          var controlLines = control.stack.split('\n');
          var s = sampleLines.length - 1;
          var c = controlLines.length - 1;

          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
            // We expect at least one stack frame to be shared.
            // Typically this will be the root most one. However, stack frames may be
            // cut off due to maximum stack limits. In this case, one maybe cut off
            // earlier than the other. We assume that the sample is longer or the same
            // and there for cut off earlier. So we should find the root most frame in
            // the sample somewhere in the control.
            c--;
          }

          for (; s >= 1 && c >= 0; s--, c--) {
            // Next we find the first one that isn't the same which should be the
            // frame that called our sample function and the control.
            if (sampleLines[s] !== controlLines[c]) {
              // In V8, the first line is describing the message but other VMs don't.
              // If we're about to return the first line, and the control is also on the same
              // line, that's a pretty good indicator that our sample threw at same line as
              // the control. I.e. before we entered the sample frame. So we ignore this result.
              // This can happen if you passed a class to function component, or non-function.
              if (s !== 1 || c !== 1) {
                do {
                  s--;
                  c--; // We may still have similar intermediate frames from the construct call.
                  // The next one that isn't the same should be our match though.

                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
                    // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                    var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                    // but we have a user-provided "displayName"
                    // splice it in to make the stack more readable.


                    if (fn.displayName && _frame.includes('<anonymous>')) {
                      _frame = _frame.replace('<anonymous>', fn.displayName);
                    }

                    {
                      if (typeof fn === 'function') {
                        componentFrameCache.set(fn, _frame);
                      }
                    } // Return the line we found.


                    return _frame;
                  }
                } while (s >= 1 && c >= 0);
              }

              break;
            }
          }
        }
      } finally {
        reentry = false;

        {
          ReactCurrentDispatcher.current = previousDispatcher;
          reenableLogs();
        }

        Error.prepareStackTrace = previousPrepareStackTrace;
      } // Fallback to just using the name if we couldn't make it throw.


      var name = fn ? fn.displayName || fn.name : '';
      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

      {
        if (typeof fn === 'function') {
          componentFrameCache.set(fn, syntheticFrame);
        }
      }

      return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
      {
        return describeNativeComponentFrame(fn, false);
      }
    }

    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }

    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

      if (type == null) {
        return '';
      }

      if (typeof type === 'function') {
        {
          return describeNativeComponentFrame(type, shouldConstruct(type));
        }
      }

      if (typeof type === 'string') {
        return describeBuiltInComponentFrame(type);
      }

      switch (type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame('Suspense');

        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame('SuspenseList');
      }

      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type.render);

          case REACT_MEMO_TYPE:
            // Memo may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

          case REACT_LAZY_TYPE:
            {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;

              try {
                // Lazy may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {}
            }
        }
      }

      return '';
    }

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

    function setCurrentlyValidatingElement(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame.setExtraStackFrame(null);
        }
      }
    }

    function checkPropTypes(typeSpecs, values, location, componentName, element) {
      {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);

        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.

            try {
              // This is intentionally an invariant that gets caught. It's the same
              // behavior as without this statement except with a better message.
              if (typeof typeSpecs[typeSpecName] !== 'function') {
                // eslint-disable-next-line react-internal/prod-error-codes
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                err.name = 'Invariant Violation';
                throw err;
              }

              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
              error$1 = ex;
            }

            if (error$1 && !(error$1 instanceof Error)) {
              setCurrentlyValidatingElement(element);

              error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

              setCurrentlyValidatingElement(null);
            }

            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
              // Only monitor this failure once because there tends to be a lot of the
              // same error.
              loggedTypeFailures[error$1.message] = true;
              setCurrentlyValidatingElement(element);

              error('Failed %s type: %s', location, error$1.message);

              setCurrentlyValidatingElement(null);
            }
          }
        }
      }
    }

    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

    function isArray(a) {
      return isArrayImpl(a);
    }

    /*
     * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
     * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
     *
     * The functions in this module will throw an easier-to-understand,
     * easier-to-debug exception with a clear errors message message explaining the
     * problem. (Instead of a confusing exception thrown inside the implementation
     * of the `value` object).
     */
    // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
      {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
        return type;
      }
    } // $FlowFixMe only called in DEV, so void return is not possible.


    function willCoercionThrow(value) {
      {
        try {
          testStringCoercion(value);
          return false;
        } catch (e) {
          return true;
        }
      }
    }

    function testStringCoercion(value) {
      // If you ended up here by following an exception call stack, here's what's
      // happened: you supplied an object or symbol value to React (as a prop, key,
      // DOM attribute, CSS property, string ref, etc.) and when React tried to
      // coerce it to a string using `'' + value`, an exception was thrown.
      //
      // The most common types that will cause this exception are `Symbol` instances
      // and Temporal objects like `Temporal.Instant`. But any object that has a
      // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
      // exception. (Library authors do this to prevent users from using built-in
      // numeric operators like `+` or comparison operators like `>=` because custom
      // methods are needed to perform accurate arithmetic or comparison.)
      //
      // To fix the problem, coerce this object or symbol value to a string before
      // passing it to React. The most reliable way is usually `String(value)`.
      //
      // To find which value is throwing, check the browser or debugger console.
      // Before this exception was thrown, there should be `console.error` output
      // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
      // problem and how that type was used: key, atrribute, input value prop, etc.
      // In most cases, this console output also shows the component and its
      // ancestor components where the exception happened.
      //
      // eslint-disable-next-line react-internal/safe-string-coercion
      return '' + value;
    }
    function checkKeyStringCoercion(value) {
      {
        if (willCoercionThrow(value)) {
          error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

          return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
      }
    }

    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;

    {
      didWarnAboutStringRefs = {};
    }

    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, 'ref')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }

      return config.ref !== undefined;
    }

    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, 'key')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }

      return config.key !== undefined;
    }

    function warnIfStringRefCannotBeAutoConverted(config, self) {
      {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);

          if (!didWarnAboutStringRefs[componentName]) {
            error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);

            didWarnAboutStringRefs[componentName] = true;
          }
        }
      }
    }

    function defineKeyPropWarningGetter(props, displayName) {
      {
        var warnAboutAccessingKey = function () {
          if (!specialPropKeyWarningShown) {
            specialPropKeyWarningShown = true;

            error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
          }
        };

        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
    }

    function defineRefPropWarningGetter(props, displayName) {
      {
        var warnAboutAccessingRef = function () {
          if (!specialPropRefWarningShown) {
            specialPropRefWarningShown = true;

            error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
          }
        };

        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
    }
    /**
     * Factory method to create a new React element. This no longer adheres to
     * the class pattern, so do not use new to call it. Also, instanceof check
     * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
     * if something is a React Element.
     *
     * @param {*} type
     * @param {*} props
     * @param {*} key
     * @param {string|object} ref
     * @param {*} owner
     * @param {*} self A *temporary* helper to detect places where `this` is
     * different from the `owner` when React.createElement is called, so that we
     * can warn. We want to get rid of owner and replace string `ref`s with arrow
     * functions, and as long as `this` and owner are the same, there will be no
     * change in behavior.
     * @param {*} source An annotation object (added by a transpiler or otherwise)
     * indicating filename, line number, and/or other information.
     * @internal
     */


    var ReactElement = function (type, key, ref, self, source, owner, props) {
      var element = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE,
        // Built-in properties that belong on the element
        type: type,
        key: key,
        ref: ref,
        props: props,
        // Record the component responsible for creating this element.
        _owner: owner
      };

      {
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.

        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        }); // self and source are DEV only properties.

        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.

        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });

        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }

      return element;
    };
    /**
     * https://github.com/reactjs/rfcs/pull/107
     * @param {*} type
     * @param {object} props
     * @param {string} key
     */

    function jsxDEV(type, config, maybeKey, source, self) {
      {
        var propName; // Reserved names are extracted

        var props = {};
        var key = null;
        var ref = null; // Currently, key can be spread in as a prop. This causes a potential
        // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
        // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
        // but as an intermediary step, we will use jsxDEV for everything except
        // <div {...props} key="Hi" />, because we aren't currently able to tell if
        // key is explicitly declared to be undefined or not.

        if (maybeKey !== undefined) {
          {
            checkKeyStringCoercion(maybeKey);
          }

          key = '' + maybeKey;
        }

        if (hasValidKey(config)) {
          {
            checkKeyStringCoercion(config.key);
          }

          key = '' + config.key;
        }

        if (hasValidRef(config)) {
          ref = config.ref;
          warnIfStringRefCannotBeAutoConverted(config, self);
        } // Remaining properties are added to a new props object


        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        } // Resolve default props


        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;

          for (propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
        }

        if (key || ref) {
          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }

          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }

        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
      }
    }

    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

    function setCurrentlyValidatingElement$1(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
        }
      }
    }

    var propTypesMisspellWarningShown;

    {
      propTypesMisspellWarningShown = false;
    }
    /**
     * Verifies the object is a ReactElement.
     * See https://reactjs.org/docs/react-api.html#isvalidelement
     * @param {?object} object
     * @return {boolean} True if `object` is a ReactElement.
     * @final
     */


    function isValidElement(object) {
      {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
    }

    function getDeclarationErrorAddendum() {
      {
        if (ReactCurrentOwner$1.current) {
          var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);

          if (name) {
            return '\n\nCheck the render method of `' + name + '`.';
          }
        }

        return '';
      }
    }

    function getSourceInfoErrorAddendum(source) {
      {
        if (source !== undefined) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, '');
          var lineNumber = source.lineNumber;
          return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }

        return '';
      }
    }
    /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */


    var ownerHasKeyUseWarning = {};

    function getCurrentComponentErrorInfo(parentType) {
      {
        var info = getDeclarationErrorAddendum();

        if (!info) {
          var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

          if (parentName) {
            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
          }
        }

        return info;
      }
    }
    /**
     * Warn if the element doesn't have an explicit key assigned to it.
     * This element is in an array. The array could grow and shrink or be
     * reordered. All children that haven't already been validated are required to
     * have a "key" property assigned to it. Error statuses are cached so a warning
     * will only be shown once.
     *
     * @internal
     * @param {ReactElement} element Element that requires a key.
     * @param {*} parentType element's parent's type.
     */


    function validateExplicitKey(element, parentType) {
      {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }

        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }

        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.

        var childOwner = '';

        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
          // Give the component that originally created this child.
          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        }

        setCurrentlyValidatingElement$1(element);

        error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

        setCurrentlyValidatingElement$1(null);
      }
    }
    /**
     * Ensure that every element either is passed in a static location, in an
     * array with an explicit keys property defined, or in an object literal
     * with valid key property.
     *
     * @internal
     * @param {ReactNode} node Statically passed child of any type.
     * @param {*} parentType node's parent's type.
     */


    function validateChildKeys(node, parentType) {
      {
        if (typeof node !== 'object') {
          return;
        }

        if (isArray(node)) {
          for (var i = 0; i < node.length; i++) {
            var child = node[i];

            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          // This element was passed in a valid location.
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);

          if (typeof iteratorFn === 'function') {
            // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;

              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
    }
    /**
     * Given an element, validate that its props follow the propTypes definition,
     * provided by the type.
     *
     * @param {ReactElement} element
     */


    function validatePropTypes(element) {
      {
        var type = element.type;

        if (type === null || type === undefined || typeof type === 'string') {
          return;
        }

        var propTypes;

        if (typeof type === 'function') {
          propTypes = type.propTypes;
        } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) {
          propTypes = type.propTypes;
        } else {
          return;
        }

        if (propTypes) {
          // Intentionally inside to avoid triggering lazy initializers:
          var name = getComponentNameFromType(type);
          checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

          var _name = getComponentNameFromType(type);

          error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }

        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
          error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
        }
      }
    }
    /**
     * Given a fragment, validate that it can only be provided with fragment props
     * @param {ReactElement} fragment
     */


    function validateFragmentProps(fragment) {
      {
        var keys = Object.keys(fragment.props);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];

          if (key !== 'children' && key !== 'key') {
            setCurrentlyValidatingElement$1(fragment);

            error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

            setCurrentlyValidatingElement$1(null);
            break;
          }
        }

        if (fragment.ref !== null) {
          setCurrentlyValidatingElement$1(fragment);

          error('Invalid attribute `ref` supplied to `React.Fragment`.');

          setCurrentlyValidatingElement$1(null);
        }
      }
    }

    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
      {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.

        if (!validType) {
          var info = '';

          if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
            info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
          }

          var sourceInfo = getSourceInfoErrorAddendum(source);

          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }

          var typeString;

          if (type === null) {
            typeString = 'null';
          } else if (isArray(type)) {
            typeString = 'array';
          } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
            typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
            info = ' Did you accidentally export a JSX literal instead of a component?';
          } else {
            typeString = typeof type;
          }

          error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
        }

        var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.

        if (element == null) {
          return element;
        } // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)


        if (validType) {
          var children = props.children;

          if (children !== undefined) {
            if (isStaticChildren) {
              if (isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  validateChildKeys(children[i], type);
                }

                if (Object.freeze) {
                  Object.freeze(children);
                }
              } else {
                error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
              }
            } else {
              validateChildKeys(children, type);
            }
          }
        }

        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }

        return element;
      }
    } // These two functions exist to still get child warnings in dev
    // even with the prod transform. This means that jsxDEV is purely
    // opt-in behavior for better messages but that we won't stop
    // giving you warnings if you use production apis.

    function jsxWithValidationStatic(type, props, key) {
      {
        return jsxWithValidation(type, props, key, true);
      }
    }
    function jsxWithValidationDynamic(type, props, key) {
      {
        return jsxWithValidation(type, props, key, false);
      }
    }

    var jsx =  jsxWithValidationDynamic ; // we may want to special case jsxs internally to take advantage of static children.
    // for now we can ship identical prod functions

    var jsxs =  jsxWithValidationStatic ;

    reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
    reactJsxRuntime_development.jsx = jsx;
    reactJsxRuntime_development.jsxs = jsxs;
      })();
    }

    {
      jsxRuntime.exports = reactJsxRuntime_development;
    }

    function isEmpty$4(obj) {
      return obj === undefined || obj === null || Object.keys(obj).length === 0;
    }
    function GlobalStyles$1(props) {
      const {
        styles,
        defaultTheme = {}
      } = props;
      const globalStyles = typeof styles === 'function' ? themeInput => styles(isEmpty$4(themeInput) ? defaultTheme : themeInput) : styles;
      return /*#__PURE__*/jsxRuntime.exports.jsx(Global, {
        styles: globalStyles
      });
    }
    GlobalStyles$1.propTypes = {
      defaultTheme: PropTypes.object,
      styles: PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.func])
    } ;

    /** @license MUI v5.10.16
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    function styled$2(tag, options) {
      const stylesFactory = emStyled(tag, options);
      {
        return (...styles) => {
          const component = typeof tag === 'string' ? `"${tag}"` : 'component';
          if (styles.length === 0) {
            console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join('\n'));
          } else if (styles.some(style => style === undefined)) {
            console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
          }
          return stylesFactory(...styles);
        };
      }
    }

    // eslint-disable-next-line @typescript-eslint/naming-convention
    const internal_processStyles = (tag, processor) => {
      // Emotion attaches all the styles as `__emotion_styles`.
      // Ref: https://github.com/emotion-js/emotion/blob/16d971d0da229596d6bcc39d282ba9753c9ee7cf/packages/styled/src/base.js#L186
      if (Array.isArray(tag.__emotion_styles)) {
        tag.__emotion_styles = processor(tag.__emotion_styles);
      }
    };

    const responsivePropType = PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.object, PropTypes.array]) ;
    var responsivePropType$1 = responsivePropType;

    function chainPropTypes(propType1, propType2) {
      return function validate(...args) {
        return propType1(...args) || propType2(...args);
      };
    }

    function isPlainObject$1(item) {
      return item !== null && typeof item === 'object' && item.constructor === Object;
    }
    function deepmerge(target, source, options = {
      clone: true
    }) {
      const output = options.clone ? _extends({}, target) : target;
      if (isPlainObject$1(target) && isPlainObject$1(source)) {
        Object.keys(source).forEach(key => {
          // Avoid prototype pollution
          if (key === '__proto__') {
            return;
          }
          if (isPlainObject$1(source[key]) && key in target && isPlainObject$1(target[key])) {
            // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.
            output[key] = deepmerge(target[key], source[key], options);
          } else {
            output[key] = source[key];
          }
        });
      }
      return output;
    }

    function isClassComponent$1(elementType) {
      // elementType.prototype?.isReactComponent
      const {
        prototype = {}
      } = elementType;
      return Boolean(prototype.isReactComponent);
    }
    function acceptingRef(props, propName, componentName, location, propFullName) {
      const element = props[propName];
      const safePropName = propFullName || propName;
      if (element == null ||
      // When server-side rendering React doesn't warn either.
      // This is not an accurate check for SSR.
      // This is only in place for Emotion compat.
      // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
      typeof window === 'undefined') {
        return null;
      }
      let warningHint;
      const elementType = element.type;
      /**
       * Blacklisting instead of whitelisting
       *
       * Blacklisting will miss some components, such as React.Fragment. Those will at least
       * trigger a warning in React.
       * We can't whitelist because there is no safe way to detect React.forwardRef
       * or class components. "Safe" means there's no public API.
       *
       */
      if (typeof elementType === 'function' && !isClassComponent$1(elementType)) {
        warningHint = 'Did you accidentally use a plain function component for an element instead?';
      }
      if (warningHint !== undefined) {
        return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an element that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');
      }
      return null;
    }
    const elementAcceptingRef = chainPropTypes(PropTypes.element, acceptingRef);
    elementAcceptingRef.isRequired = chainPropTypes(PropTypes.element.isRequired, acceptingRef);
    var elementAcceptingRef$1 = elementAcceptingRef;

    function isClassComponent(elementType) {
      // elementType.prototype?.isReactComponent
      const {
        prototype = {}
      } = elementType;
      return Boolean(prototype.isReactComponent);
    }
    function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
      const propValue = props[propName];
      const safePropName = propFullName || propName;
      if (propValue == null ||
      // When server-side rendering React doesn't warn either.
      // This is not an accurate check for SSR.
      // This is only in place for emotion compat.
      // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
      typeof window === 'undefined') {
        return null;
      }
      let warningHint;

      /**
       * Blacklisting instead of whitelisting
       *
       * Blacklisting will miss some components, such as React.Fragment. Those will at least
       * trigger a warning in React.
       * We can't whitelist because there is no safe way to detect React.forwardRef
       * or class components. "Safe" means there's no public API.
       *
       */
      if (typeof propValue === 'function' && !isClassComponent(propValue)) {
        warningHint = 'Did you accidentally provide a plain function component instead?';
      }
      if (warningHint !== undefined) {
        return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an element type that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');
      }
      return null;
    }
    var elementTypeAcceptingRef$1 = chainPropTypes(PropTypes.elementType, elementTypeAcceptingRef);

    // This module is based on https://github.com/airbnb/prop-types-exact repository.
    // However, in order to reduce the number of dependencies and to remove some extra safe checks
    // the module was forked.

    const specialProperty = 'exact-prop: \u200b';
    function exactProp(propTypes) {
      return _extends({}, propTypes, {
        [specialProperty]: props => {
          const unsupportedProps = Object.keys(props).filter(prop => !propTypes.hasOwnProperty(prop));
          if (unsupportedProps.length > 0) {
            return new Error(`The following props are not supported: ${unsupportedProps.map(prop => `\`${prop}\``).join(', ')}. Please remove them.`);
          }
          return null;
        }
      });
    }

    var reactIs = {exports: {}};

    var reactIs_development = {};

    /**
     * @license React
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    {
      (function() {

    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
    var REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');
    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
    var REACT_MEMO_TYPE = Symbol.for('react.memo');
    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');

    // -----------------------------------------------------------------------------

    var enableScopeAPI = false; // Experimental Create Event Handle API.
    var enableCacheElement = false;
    var enableTransitionTracing = false; // No known bugs, but needs performance testing

    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    // stuff. Intended to enable React core members to more easily debug scheduling
    // issues in DEV builds.

    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

    var REACT_MODULE_REFERENCE;

    {
      REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
    }

    function isValidElementType(type) {
      if (typeof type === 'string' || typeof type === 'function') {
        return true;
      } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
        return true;
      }

      if (typeof type === 'object' && type !== null) {
        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
        // types supported by any Flight configuration anywhere since
        // we don't know which Flight build this will end up being used
        // with.
        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
          return true;
        }
      }

      return false;
    }

    function typeOf(object) {
      if (typeof object === 'object' && object !== null) {
        var $$typeof = object.$$typeof;

        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;

            switch (type) {
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
              case REACT_SUSPENSE_LIST_TYPE:
                return type;

              default:
                var $$typeofType = type && type.$$typeof;

                switch ($$typeofType) {
                  case REACT_SERVER_CONTEXT_TYPE:
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;

                  default:
                    return $$typeof;
                }

            }

          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }

      return undefined;
    }
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false;
    var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
        }
      }

      return false;
    }
    function isConcurrentMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
          hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

          console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
        }
      }

      return false;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    function isSuspenseList(object) {
      return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
    }

    reactIs_development.ContextConsumer = ContextConsumer;
    reactIs_development.ContextProvider = ContextProvider;
    reactIs_development.Element = Element;
    reactIs_development.ForwardRef = ForwardRef;
    reactIs_development.Fragment = Fragment;
    reactIs_development.Lazy = Lazy;
    reactIs_development.Memo = Memo;
    reactIs_development.Portal = Portal;
    reactIs_development.Profiler = Profiler;
    reactIs_development.StrictMode = StrictMode;
    reactIs_development.Suspense = Suspense;
    reactIs_development.SuspenseList = SuspenseList;
    reactIs_development.isAsyncMode = isAsyncMode;
    reactIs_development.isConcurrentMode = isConcurrentMode;
    reactIs_development.isContextConsumer = isContextConsumer;
    reactIs_development.isContextProvider = isContextProvider;
    reactIs_development.isElement = isElement;
    reactIs_development.isForwardRef = isForwardRef;
    reactIs_development.isFragment = isFragment;
    reactIs_development.isLazy = isLazy;
    reactIs_development.isMemo = isMemo;
    reactIs_development.isPortal = isPortal;
    reactIs_development.isProfiler = isProfiler;
    reactIs_development.isStrictMode = isStrictMode;
    reactIs_development.isSuspense = isSuspense;
    reactIs_development.isSuspenseList = isSuspenseList;
    reactIs_development.isValidElementType = isValidElementType;
    reactIs_development.typeOf = typeOf;
      })();
    }

    {
      reactIs.exports = reactIs_development;
    }

    // Simplified polyfill for IE11 support
    // https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3
    const fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
    function getFunctionName(fn) {
      const match = `${fn}`.match(fnNameMatchRegex);
      const name = match && match[1];
      return name || '';
    }
    function getFunctionComponentName(Component, fallback = '') {
      return Component.displayName || Component.name || getFunctionName(Component) || fallback;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      const functionName = getFunctionComponentName(innerType);
      return outerType.displayName || (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName);
    }

    /**
     * cherry-pick from
     * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js
     * originally forked from recompose/getDisplayName with added IE11 support
     */
    function getDisplayName(Component) {
      if (Component == null) {
        return undefined;
      }
      if (typeof Component === 'string') {
        return Component;
      }
      if (typeof Component === 'function') {
        return getFunctionComponentName(Component, 'Component');
      }

      // TypeScript can't have components as objects but they exist in the form of `memo` or `Suspense`
      if (typeof Component === 'object') {
        switch (Component.$$typeof) {
          case reactIs.exports.ForwardRef:
            return getWrappedName(Component, Component.render, 'ForwardRef');
          case reactIs.exports.Memo:
            return getWrappedName(Component, Component.type, 'memo');
          default:
            return undefined;
        }
      }
      return undefined;
    }

    function HTMLElementType(props, propName, componentName, location, propFullName) {
      const propValue = props[propName];
      const safePropName = propFullName || propName;
      if (propValue == null) {
        return null;
      }
      if (propValue && propValue.nodeType !== 1) {
        return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an HTMLElement.`);
      }
      return null;
    }

    const refType = PropTypes.oneOfType([PropTypes.func, PropTypes.object]);
    var refType$1 = refType;

    // It should to be noted that this function isn't equivalent to `text-transform: capitalize`.
    //
    // A strict capitalization should uppercase the first letter of each word in the sentence.
    // We only handle the first word.
    function capitalize(string) {
      if (typeof string !== 'string') {
        throw new Error(`MUI: \`capitalize(string)\` expects a string argument.` );
      }
      return string.charAt(0).toUpperCase() + string.slice(1);
    }

    /**
     * Safe chained function.
     *
     * Will only create a new function if needed,
     * otherwise will pass back existing functions or null.
     */
    function createChainedFunction(...funcs) {
      return funcs.reduce((acc, func) => {
        if (func == null) {
          return acc;
        }
        return function chainedFunction(...args) {
          acc.apply(this, args);
          func.apply(this, args);
        };
      }, () => {});
    }

    // Corresponds to 10 frames at 60 Hz.
    // A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.
    function debounce$1(func, wait = 166) {
      let timeout;
      function debounced(...args) {
        const later = () => {
          func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      }
      debounced.clear = () => {
        clearTimeout(timeout);
      };
      return debounced;
    }

    function deprecatedPropType(validator, reason) {
      return (props, propName, componentName, location, propFullName) => {
        const componentNameSafe = componentName || '<<anonymous>>';
        const propFullNameSafe = propFullName || propName;
        if (typeof props[propName] !== 'undefined') {
          return new Error(`The ${location} \`${propFullNameSafe}\` of ` + `\`${componentNameSafe}\` is deprecated. ${reason}`);
        }
        return null;
      };
    }

    function isMuiElement(element, muiNames) {
      return /*#__PURE__*/React__namespace.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
    }

    function ownerDocument(node) {
      return node && node.ownerDocument || document;
    }

    function ownerWindow(node) {
      const doc = ownerDocument(node);
      return doc.defaultView || window;
    }

    function requirePropFactory(componentNameInError, Component) {

      // eslint-disable-next-line react/forbid-foreign-prop-types
      const prevPropTypes = Component ? _extends({}, Component.propTypes) : null;
      const requireProp = requiredProp => (props, propName, componentName, location, propFullName, ...args) => {
        const propFullNameSafe = propFullName || propName;
        const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];
        if (defaultTypeChecker) {
          const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);
          if (typeCheckerResult) {
            return typeCheckerResult;
          }
        }
        if (typeof props[propName] !== 'undefined' && !props[requiredProp]) {
          return new Error(`The prop \`${propFullNameSafe}\` of ` + `\`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
        }
        return null;
      };
      return requireProp;
    }

    /**
     * TODO v5: consider making it private
     *
     * passes {value} to {ref}
     *
     * WARNING: Be sure to only call this inside a callback that is passed as a ref.
     * Otherwise, make sure to cleanup the previous {ref} if it changes. See
     * https://github.com/mui/material-ui/issues/13539
     *
     * Useful if you want to expose the ref of an inner component to the public API
     * while still using it inside the component.
     * @param ref A ref callback or ref object. If anything falsy, this is a no-op.
     */
    function setRef(ref, value) {
      if (typeof ref === 'function') {
        ref(value);
      } else if (ref) {
        ref.current = value;
      }
    }

    const useEnhancedEffect = typeof window !== 'undefined' ? React__namespace.useLayoutEffect : React__namespace.useEffect;
    var useEnhancedEffect$1 = useEnhancedEffect;

    let globalId = 0;
    function useGlobalId(idOverride) {
      const [defaultId, setDefaultId] = React__namespace.useState(idOverride);
      const id = idOverride || defaultId;
      React__namespace.useEffect(() => {
        if (defaultId == null) {
          // Fallback to this default id when possible.
          // Use the incrementing value for client-side rendering only.
          // We can't use it server-side.
          // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem
          globalId += 1;
          setDefaultId(`mui-${globalId}`);
        }
      }, [defaultId]);
      return id;
    }

    // eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814
    const maybeReactUseId = React__namespace['useId' + ''];
    /**
     *
     * @example <div id={useId()} />
     * @param idOverride
     * @returns {string}
     */
    function useId(idOverride) {
      if (maybeReactUseId !== undefined) {
        const reactId = maybeReactUseId();
        return idOverride != null ? idOverride : reactId;
      }
      // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.
      return useGlobalId(idOverride);
    }

    function unsupportedProp(props, propName, componentName, location, propFullName) {
      const propFullNameSafe = propFullName || propName;
      if (typeof props[propName] !== 'undefined') {
        return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
      }
      return null;
    }

    /* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */
    function useControlled({
      controlled,
      default: defaultProp,
      name,
      state = 'value'
    }) {
      // isControlled is ignored in the hook dependency lists as it should never change.
      const {
        current: isControlled
      } = React__namespace.useRef(controlled !== undefined);
      const [valueState, setValue] = React__namespace.useState(defaultProp);
      const value = isControlled ? controlled : valueState;
      {
        React__namespace.useEffect(() => {
          if (isControlled !== (controlled !== undefined)) {
            console.error([`MUI: A component is changing the ${isControlled ? '' : 'un'}controlled ${state} state of ${name} to be ${isControlled ? 'un' : ''}controlled.`, 'Elements should not switch from uncontrolled to controlled (or vice versa).', `Decide between using a controlled or uncontrolled ${name} ` + 'element for the lifetime of the component.', "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", 'More info: https://fb.me/react-controlled-components'].join('\n'));
          }
        }, [state, name, controlled]);
        const {
          current: defaultValue
        } = React__namespace.useRef(defaultProp);
        React__namespace.useEffect(() => {
          if (!isControlled && defaultValue !== defaultProp) {
            console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. ` + `To suppress this warning opt to use a controlled ${name}.`].join('\n'));
          }
        }, [JSON.stringify(defaultProp)]);
      }
      const setValueIfUncontrolled = React__namespace.useCallback(newValue => {
        if (!isControlled) {
          setValue(newValue);
        }
      }, []);
      return [value, setValueIfUncontrolled];
    }

    /**
     * https://github.com/facebook/react/issues/14099#issuecomment-440013892
     */
    function useEventCallback(fn) {
      const ref = React__namespace.useRef(fn);
      useEnhancedEffect$1(() => {
        ref.current = fn;
      });
      return React__namespace.useCallback((...args) =>
      // @ts-expect-error hide `this`
      // tslint:disable-next-line:ban-comma-operator
      (0, ref.current)(...args), []);
    }

    function useForkRef(...refs) {
      /**
       * This will create a new function if the refs passed to this hook change and are all defined.
       * This means react will call the old forkRef with `null` and the new forkRef
       * with the ref. Cleanup naturally emerges from this behavior.
       */
      return React__namespace.useMemo(() => {
        if (refs.every(ref => ref == null)) {
          return null;
        }
        return instance => {
          refs.forEach(ref => {
            setRef(ref, instance);
          });
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
      }, refs);
    }

    // based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js
    let hadKeyboardEvent = true;
    let hadFocusVisibleRecently = false;
    let hadFocusVisibleRecentlyTimeout;
    const inputTypesWhitelist = {
      text: true,
      search: true,
      url: true,
      tel: true,
      email: true,
      password: true,
      number: true,
      date: true,
      month: true,
      week: true,
      time: true,
      datetime: true,
      'datetime-local': true
    };

    /**
     * Computes whether the given element should automatically trigger the
     * `focus-visible` class being added, i.e. whether it should always match
     * `:focus-visible` when focused.
     * @param {Element} node
     * @returns {boolean}
     */
    function focusTriggersKeyboardModality(node) {
      const {
        type,
        tagName
      } = node;
      if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {
        return true;
      }
      if (tagName === 'TEXTAREA' && !node.readOnly) {
        return true;
      }
      if (node.isContentEditable) {
        return true;
      }
      return false;
    }

    /**
     * Keep track of our keyboard modality state with `hadKeyboardEvent`.
     * If the most recent user interaction was via the keyboard;
     * and the key press did not include a meta, alt/option, or control key;
     * then the modality is keyboard. Otherwise, the modality is not keyboard.
     * @param {KeyboardEvent} event
     */
    function handleKeyDown(event) {
      if (event.metaKey || event.altKey || event.ctrlKey) {
        return;
      }
      hadKeyboardEvent = true;
    }

    /**
     * If at any point a user clicks with a pointing device, ensure that we change
     * the modality away from keyboard.
     * This avoids the situation where a user presses a key on an already focused
     * element, and then clicks on a different element, focusing it with a
     * pointing device, while we still think we're in keyboard modality.
     */
    function handlePointerDown() {
      hadKeyboardEvent = false;
    }
    function handleVisibilityChange() {
      if (this.visibilityState === 'hidden') {
        // If the tab becomes active again, the browser will handle calling focus
        // on the element (Safari actually calls it twice).
        // If this tab change caused a blur on an element with focus-visible,
        // re-apply the class when the user switches back to the tab.
        if (hadFocusVisibleRecently) {
          hadKeyboardEvent = true;
        }
      }
    }
    function prepare(doc) {
      doc.addEventListener('keydown', handleKeyDown, true);
      doc.addEventListener('mousedown', handlePointerDown, true);
      doc.addEventListener('pointerdown', handlePointerDown, true);
      doc.addEventListener('touchstart', handlePointerDown, true);
      doc.addEventListener('visibilitychange', handleVisibilityChange, true);
    }
    function isFocusVisible(event) {
      const {
        target
      } = event;
      try {
        return target.matches(':focus-visible');
      } catch (error) {
        // Browsers not implementing :focus-visible will throw a SyntaxError.
        // We use our own heuristic for those browsers.
        // Rethrow might be better if it's not the expected error but do we really
        // want to crash if focus-visible malfunctioned?
      }

      // No need for validFocusTarget check. The user does that by attaching it to
      // focusable events only.
      return hadKeyboardEvent || focusTriggersKeyboardModality(target);
    }
    function useIsFocusVisible() {
      const ref = React__namespace.useCallback(node => {
        if (node != null) {
          prepare(node.ownerDocument);
        }
      }, []);
      const isFocusVisibleRef = React__namespace.useRef(false);

      /**
       * Should be called if a blur event is fired
       */
      function handleBlurVisible() {
        // checking against potential state variable does not suffice if we focus and blur synchronously.
        // React wouldn't have time to trigger a re-render so `focusVisible` would be stale.
        // Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.
        // This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751
        // TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).
        if (isFocusVisibleRef.current) {
          // To detect a tab/window switch, we look for a blur event followed
          // rapidly by a visibility change.
          // If we don't see a visibility change within 100ms, it's probably a
          // regular focus change.
          hadFocusVisibleRecently = true;
          window.clearTimeout(hadFocusVisibleRecentlyTimeout);
          hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
            hadFocusVisibleRecently = false;
          }, 100);
          isFocusVisibleRef.current = false;
          return true;
        }
        return false;
      }

      /**
       * Should be called if a blur event is fired
       */
      function handleFocusVisible(event) {
        if (isFocusVisible(event)) {
          isFocusVisibleRef.current = true;
          return true;
        }
        return false;
      }
      return {
        isFocusVisibleRef,
        onFocus: handleFocusVisible,
        onBlur: handleBlurVisible,
        ref
      };
    }

    // A change of the browser zoom change the scrollbar size.
    // Credit https://github.com/twbs/bootstrap/blob/488fd8afc535ca3a6ad4dc581f5e89217b6a36ac/js/src/util/scrollbar.js#L14-L18
    function getScrollbarSize(doc) {
      // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
      const documentWidth = doc.documentElement.clientWidth;
      return Math.abs(window.innerWidth - documentWidth);
    }

    // Source from https://github.com/alitaheri/normalize-scroll-left
    let cachedType;

    /**
     * Based on the jquery plugin https://github.com/othree/jquery.rtl-scroll-type
     *
     * Types of scrollLeft, assuming scrollWidth=100 and direction is rtl.
     *
     * Type             | <- Most Left | Most Right -> | Initial
     * ---------------- | ------------ | ------------- | -------
     * default          | 0            | 100           | 100
     * negative (spec*) | -100         | 0             | 0
     * reverse          | 100          | 0             | 0
     *
     * Edge 85: default
     * Safari 14: negative
     * Chrome 85: negative
     * Firefox 81: negative
     * IE11: reverse
     *
     * spec* https://drafts.csswg.org/cssom-view/#dom-window-scroll
     */
    function detectScrollType() {
      if (cachedType) {
        return cachedType;
      }
      const dummy = document.createElement('div');
      const container = document.createElement('div');
      container.style.width = '10px';
      container.style.height = '1px';
      dummy.appendChild(container);
      dummy.dir = 'rtl';
      dummy.style.fontSize = '14px';
      dummy.style.width = '4px';
      dummy.style.height = '1px';
      dummy.style.position = 'absolute';
      dummy.style.top = '-1000px';
      dummy.style.overflow = 'scroll';
      document.body.appendChild(dummy);
      cachedType = 'reverse';
      if (dummy.scrollLeft > 0) {
        cachedType = 'default';
      } else {
        dummy.scrollLeft = 1;
        if (dummy.scrollLeft === 0) {
          cachedType = 'negative';
        }
      }
      document.body.removeChild(dummy);
      return cachedType;
    }

    // Based on https://stackoverflow.com/a/24394376
    function getNormalizedScrollLeft(element, direction) {
      const scrollLeft = element.scrollLeft;

      // Perform the calculations only when direction is rtl to avoid messing up the ltr behavior
      if (direction !== 'rtl') {
        return scrollLeft;
      }
      const type = detectScrollType();
      switch (type) {
        case 'negative':
          return element.scrollWidth - element.clientWidth + scrollLeft;
        case 'reverse':
          return element.scrollWidth - element.clientWidth - scrollLeft;
        default:
          return scrollLeft;
      }
    }

    const usePreviousProps = value => {
      const ref = React__namespace.useRef({});
      React__namespace.useEffect(() => {
        ref.current = value;
      });
      return ref.current;
    };
    var usePreviousProps$1 = usePreviousProps;

    const visuallyHidden = {
      border: 0,
      clip: 'rect(0 0 0 0)',
      height: '1px',
      margin: -1,
      overflow: 'hidden',
      padding: 0,
      position: 'absolute',
      whiteSpace: 'nowrap',
      width: '1px'
    };
    var visuallyHidden$1 = visuallyHidden;

    function getTypeByValue(value) {
      const valueType = typeof value;
      switch (valueType) {
        case 'number':
          if (Number.isNaN(value)) {
            return 'NaN';
          }
          if (!Number.isFinite(value)) {
            return 'Infinity';
          }
          if (value !== Math.floor(value)) {
            return 'float';
          }
          return 'number';
        case 'object':
          if (value === null) {
            return 'null';
          }
          return value.constructor.name;
        default:
          return valueType;
      }
    }

    // IE 11 support
    function ponyfillIsInteger(x) {
      // eslint-disable-next-line no-restricted-globals
      return typeof x === 'number' && isFinite(x) && Math.floor(x) === x;
    }
    const isInteger = Number.isInteger || ponyfillIsInteger;
    function requiredInteger(props, propName, componentName, location) {
      const propValue = props[propName];
      if (propValue == null || !isInteger(propValue)) {
        const propType = getTypeByValue(propValue);
        return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
      }
      return null;
    }
    function validator(props, propName, ...other) {
      const propValue = props[propName];
      if (propValue === undefined) {
        return null;
      }
      return requiredInteger(props, propName, ...other);
    }
    function validatorNoop() {
      return null;
    }
    validator.isRequired = requiredInteger;
    validatorNoop.isRequired = validatorNoop;
    var integerPropType = validator;

    /**
     * Add keys, values of `defaultProps` that does not exist in `props`
     * @param {object} defaultProps
     * @param {object} props
     * @returns {object} resolved props
     */
    function resolveProps(defaultProps, props) {
      const output = _extends({}, props);
      Object.keys(defaultProps).forEach(propName => {
        if (output[propName] === undefined) {
          output[propName] = defaultProps[propName];
        }
      });
      return output;
    }

    function composeClasses(slots, getUtilityClass, classes) {
      const output = {};
      Object.keys(slots).forEach(
      // `Objet.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
      // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
      slot => {
        output[slot] = slots[slot].reduce((acc, key) => {
          if (key) {
            acc.push(getUtilityClass(key));
            if (classes && classes[key]) {
              acc.push(classes[key]);
            }
          }
          return acc;
        }, []).join(' ');
      });
      return output;
    }

    const defaultGenerator = componentName => componentName;
    const createClassNameGenerator = () => {
      let generate = defaultGenerator;
      return {
        configure(generator) {
          generate = generator;
        },
        generate(componentName) {
          return generate(componentName);
        },
        reset() {
          generate = defaultGenerator;
        }
      };
    };
    const ClassNameGenerator = createClassNameGenerator();
    var ClassNameGenerator$1 = ClassNameGenerator;

    const globalStateClassesMapping = {
      active: 'active',
      checked: 'checked',
      completed: 'completed',
      disabled: 'disabled',
      error: 'error',
      expanded: 'expanded',
      focused: 'focused',
      focusVisible: 'focusVisible',
      required: 'required',
      selected: 'selected'
    };
    function generateUtilityClass(componentName, slot, globalStatePrefix = 'Mui') {
      const globalStateClass = globalStateClassesMapping[slot];
      return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator$1.generate(componentName)}-${slot}`;
    }

    function generateUtilityClasses(componentName, slots, globalStatePrefix = 'Mui') {
      const result = {};
      slots.forEach(slot => {
        result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
      });
      return result;
    }

    function merge(acc, item) {
      if (!item) {
        return acc;
      }
      return deepmerge(acc, item, {
        clone: false // No need to clone deep, it's way faster.
      });
    }

    // The breakpoint **start** at this value.
    // For instance with the first breakpoint xs: [xs, sm[.
    const values$1 = {
      xs: 0,
      // phone
      sm: 600,
      // tablet
      md: 900,
      // small laptop
      lg: 1200,
      // desktop
      xl: 1536 // large screen
    };

    const defaultBreakpoints = {
      // Sorted ASC by size. That's important.
      // It can't be configured as it's used statically for propTypes.
      keys: ['xs', 'sm', 'md', 'lg', 'xl'],
      up: key => `@media (min-width:${values$1[key]}px)`
    };
    function handleBreakpoints(props, propValue, styleFromPropValue) {
      const theme = props.theme || {};
      if (Array.isArray(propValue)) {
        const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
        return propValue.reduce((acc, item, index) => {
          acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
          return acc;
        }, {});
      }
      if (typeof propValue === 'object') {
        const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
        return Object.keys(propValue).reduce((acc, breakpoint) => {
          // key is breakpoint
          if (Object.keys(themeBreakpoints.values || values$1).indexOf(breakpoint) !== -1) {
            const mediaKey = themeBreakpoints.up(breakpoint);
            acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
          } else {
            const cssKey = breakpoint;
            acc[cssKey] = propValue[cssKey];
          }
          return acc;
        }, {});
      }
      const output = styleFromPropValue(propValue);
      return output;
    }
    function createEmptyBreakpointObject(breakpointsInput = {}) {
      var _breakpointsInput$key;
      const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
        const breakpointStyleKey = breakpointsInput.up(key);
        acc[breakpointStyleKey] = {};
        return acc;
      }, {});
      return breakpointsInOrder || {};
    }
    function removeUnusedBreakpoints(breakpointKeys, style) {
      return breakpointKeys.reduce((acc, key) => {
        const breakpointOutput = acc[key];
        const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
        if (isBreakpointUnused) {
          delete acc[key];
        }
        return acc;
      }, style);
    }

    // compute base for responsive values; e.g.,
    // [1,2,3] => {xs: true, sm: true, md: true}
    // {xs: 1, sm: 2, md: 3} => {xs: true, sm: true, md: true}
    function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
      // fixed value
      if (typeof breakpointValues !== 'object') {
        return {};
      }
      const base = {};
      const breakpointsKeys = Object.keys(themeBreakpoints);
      if (Array.isArray(breakpointValues)) {
        breakpointsKeys.forEach((breakpoint, i) => {
          if (i < breakpointValues.length) {
            base[breakpoint] = true;
          }
        });
      } else {
        breakpointsKeys.forEach(breakpoint => {
          if (breakpointValues[breakpoint] != null) {
            base[breakpoint] = true;
          }
        });
      }
      return base;
    }
    function resolveBreakpointValues({
      values: breakpointValues,
      breakpoints: themeBreakpoints,
      base: customBase
    }) {
      const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
      const keys = Object.keys(base);
      if (keys.length === 0) {
        return breakpointValues;
      }
      let previous;
      return keys.reduce((acc, breakpoint, i) => {
        if (Array.isArray(breakpointValues)) {
          acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
          previous = i;
        } else if (typeof breakpointValues === 'object') {
          acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
          previous = breakpoint;
        } else {
          acc[breakpoint] = breakpointValues;
        }
        return acc;
      }, {});
    }

    function getPath(obj, path, checkVars = true) {
      if (!path || typeof path !== 'string') {
        return null;
      }

      // Check if CSS variables are used
      if (obj && obj.vars && checkVars) {
        const val = `vars.${path}`.split('.').reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
        if (val != null) {
          return val;
        }
      }
      return path.split('.').reduce((acc, item) => {
        if (acc && acc[item] != null) {
          return acc[item];
        }
        return null;
      }, obj);
    }
    function getStyleValue$1(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
      let value;
      if (typeof themeMapping === 'function') {
        value = themeMapping(propValueFinal);
      } else if (Array.isArray(themeMapping)) {
        value = themeMapping[propValueFinal] || userValue;
      } else {
        value = getPath(themeMapping, propValueFinal) || userValue;
      }
      if (transform) {
        value = transform(value, userValue);
      }
      return value;
    }
    function style$3(options) {
      const {
        prop,
        cssProperty = options.prop,
        themeKey,
        transform
      } = options;
      const fn = props => {
        if (props[prop] == null) {
          return null;
        }
        const propValue = props[prop];
        const theme = props.theme;
        const themeMapping = getPath(theme, themeKey) || {};
        const styleFromPropValue = propValueFinal => {
          let value = getStyleValue$1(themeMapping, transform, propValueFinal);
          if (propValueFinal === value && typeof propValueFinal === 'string') {
            // Haven't found value
            value = getStyleValue$1(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : capitalize(propValueFinal)}`, propValueFinal);
          }
          if (cssProperty === false) {
            return value;
          }
          return {
            [cssProperty]: value
          };
        };
        return handleBreakpoints(props, propValue, styleFromPropValue);
      };
      fn.propTypes = {
        [prop]: responsivePropType$1
      } ;
      fn.filterProps = [prop];
      return fn;
    }

    function compose(...styles) {
      const handlers = styles.reduce((acc, style) => {
        style.filterProps.forEach(prop => {
          acc[prop] = style;
        });
        return acc;
      }, {});
      const fn = props => {
        return Object.keys(props).reduce((acc, prop) => {
          if (handlers[prop]) {
            return merge(acc, handlers[prop](props));
          }
          return acc;
        }, {});
      };
      fn.propTypes = styles.reduce((acc, style) => Object.assign(acc, style.propTypes), {}) ;
      fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);
      return fn;
    }

    function memoize(fn) {
      const cache = {};
      return arg => {
        if (cache[arg] === undefined) {
          cache[arg] = fn(arg);
        }
        return cache[arg];
      };
    }

    const properties = {
      m: 'margin',
      p: 'padding'
    };
    const directions = {
      t: 'Top',
      r: 'Right',
      b: 'Bottom',
      l: 'Left',
      x: ['Left', 'Right'],
      y: ['Top', 'Bottom']
    };
    const aliases = {
      marginX: 'mx',
      marginY: 'my',
      paddingX: 'px',
      paddingY: 'py'
    };

    // memoize() impact:
    // From 300,000 ops/sec
    // To 350,000 ops/sec
    const getCssProperties = memoize(prop => {
      // It's not a shorthand notation.
      if (prop.length > 2) {
        if (aliases[prop]) {
          prop = aliases[prop];
        } else {
          return [prop];
        }
      }
      const [a, b] = prop.split('');
      const property = properties[a];
      const direction = directions[b] || '';
      return Array.isArray(direction) ? direction.map(dir => property + dir) : [property + direction];
    });
    const marginKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'marginInline', 'marginInlineStart', 'marginInlineEnd', 'marginBlock', 'marginBlockStart', 'marginBlockEnd'];
    const paddingKeys = ['p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY', 'paddingInline', 'paddingInlineStart', 'paddingInlineEnd', 'paddingBlock', 'paddingBlockStart', 'paddingBlockEnd'];
    const spacingKeys = [...marginKeys, ...paddingKeys];
    function createUnaryUnit(theme, themeKey, defaultValue, propName) {
      var _getPath;
      const themeSpacing = (_getPath = getPath(theme, themeKey, false)) != null ? _getPath : defaultValue;
      if (typeof themeSpacing === 'number') {
        return abs => {
          if (typeof abs === 'string') {
            return abs;
          }
          {
            if (typeof abs !== 'number') {
              console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs}.`);
            }
          }
          return themeSpacing * abs;
        };
      }
      if (Array.isArray(themeSpacing)) {
        return abs => {
          if (typeof abs === 'string') {
            return abs;
          }
          {
            if (!Number.isInteger(abs)) {
              console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.` + `You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join('\n'));
            } else if (abs > themeSpacing.length - 1) {
              console.error([`MUI: The value provided (${abs}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs} > ${themeSpacing.length - 1}, you need to add the missing values.`].join('\n'));
            }
          }
          return themeSpacing[abs];
        };
      }
      if (typeof themeSpacing === 'function') {
        return themeSpacing;
      }
      {
        console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, 'It should be a number, an array or a function.'].join('\n'));
      }
      return () => undefined;
    }
    function createUnarySpacing(theme) {
      return createUnaryUnit(theme, 'spacing', 8, 'spacing');
    }
    function getValue(transformer, propValue) {
      if (typeof propValue === 'string' || propValue == null) {
        return propValue;
      }
      const abs = Math.abs(propValue);
      const transformed = transformer(abs);
      if (propValue >= 0) {
        return transformed;
      }
      if (typeof transformed === 'number') {
        return -transformed;
      }
      return `-${transformed}`;
    }
    function getStyleFromPropValue(cssProperties, transformer) {
      return propValue => cssProperties.reduce((acc, cssProperty) => {
        acc[cssProperty] = getValue(transformer, propValue);
        return acc;
      }, {});
    }
    function resolveCssProperty(props, keys, prop, transformer) {
      // Using a hash computation over an array iteration could be faster, but with only 28 items,
      // it's doesn't worth the bundle size.
      if (keys.indexOf(prop) === -1) {
        return null;
      }
      const cssProperties = getCssProperties(prop);
      const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
      const propValue = props[prop];
      return handleBreakpoints(props, propValue, styleFromPropValue);
    }
    function style$2(props, keys) {
      const transformer = createUnarySpacing(props.theme);
      return Object.keys(props).map(prop => resolveCssProperty(props, keys, prop, transformer)).reduce(merge, {});
    }
    marginKeys.reduce((obj, key) => {
      obj[key] = responsivePropType$1;
      return obj;
    }, {}) ;
    paddingKeys.reduce((obj, key) => {
      obj[key] = responsivePropType$1;
      return obj;
    }, {}) ;
    function spacing(props) {
      return style$2(props, spacingKeys);
    }
    spacing.propTypes = spacingKeys.reduce((obj, key) => {
      obj[key] = responsivePropType$1;
      return obj;
    }, {}) ;
    spacing.filterProps = spacingKeys;

    function getBorder(value) {
      if (typeof value !== 'number') {
        return value;
      }
      return `${value}px solid`;
    }
    const border = style$3({
      prop: 'border',
      themeKey: 'borders',
      transform: getBorder
    });
    const borderTop = style$3({
      prop: 'borderTop',
      themeKey: 'borders',
      transform: getBorder
    });
    const borderRight = style$3({
      prop: 'borderRight',
      themeKey: 'borders',
      transform: getBorder
    });
    const borderBottom = style$3({
      prop: 'borderBottom',
      themeKey: 'borders',
      transform: getBorder
    });
    const borderLeft = style$3({
      prop: 'borderLeft',
      themeKey: 'borders',
      transform: getBorder
    });
    const borderColor = style$3({
      prop: 'borderColor',
      themeKey: 'palette'
    });
    const borderTopColor = style$3({
      prop: 'borderTopColor',
      themeKey: 'palette'
    });
    const borderRightColor = style$3({
      prop: 'borderRightColor',
      themeKey: 'palette'
    });
    const borderBottomColor = style$3({
      prop: 'borderBottomColor',
      themeKey: 'palette'
    });
    const borderLeftColor = style$3({
      prop: 'borderLeftColor',
      themeKey: 'palette'
    });
    const borderRadius = props => {
      if (props.borderRadius !== undefined && props.borderRadius !== null) {
        const transformer = createUnaryUnit(props.theme, 'shape.borderRadius', 4, 'borderRadius');
        const styleFromPropValue = propValue => ({
          borderRadius: getValue(transformer, propValue)
        });
        return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
      }
      return null;
    };
    borderRadius.propTypes = {
      borderRadius: responsivePropType$1
    } ;
    borderRadius.filterProps = ['borderRadius'];
    const borders = compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);
    var borders$1 = borders;

    const displayPrint = style$3({
      prop: 'displayPrint',
      cssProperty: false,
      transform: value => ({
        '@media print': {
          display: value
        }
      })
    });
    const displayRaw = style$3({
      prop: 'display'
    });
    const overflow = style$3({
      prop: 'overflow'
    });
    const textOverflow = style$3({
      prop: 'textOverflow'
    });
    const visibility = style$3({
      prop: 'visibility'
    });
    const whiteSpace = style$3({
      prop: 'whiteSpace'
    });
    var display = compose(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);

    const flexBasis = style$3({
      prop: 'flexBasis'
    });
    const flexDirection = style$3({
      prop: 'flexDirection'
    });
    const flexWrap = style$3({
      prop: 'flexWrap'
    });
    const justifyContent = style$3({
      prop: 'justifyContent'
    });
    const alignItems = style$3({
      prop: 'alignItems'
    });
    const alignContent = style$3({
      prop: 'alignContent'
    });
    const order$1 = style$3({
      prop: 'order'
    });
    const flex = style$3({
      prop: 'flex'
    });
    const flexGrow = style$3({
      prop: 'flexGrow'
    });
    const flexShrink = style$3({
      prop: 'flexShrink'
    });
    const alignSelf = style$3({
      prop: 'alignSelf'
    });
    const justifyItems = style$3({
      prop: 'justifyItems'
    });
    const justifySelf = style$3({
      prop: 'justifySelf'
    });
    const flexbox = compose(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order$1, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
    var flexbox$1 = flexbox;

    const gap = props => {
      if (props.gap !== undefined && props.gap !== null) {
        const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'gap');
        const styleFromPropValue = propValue => ({
          gap: getValue(transformer, propValue)
        });
        return handleBreakpoints(props, props.gap, styleFromPropValue);
      }
      return null;
    };
    gap.propTypes = {
      gap: responsivePropType$1
    } ;
    gap.filterProps = ['gap'];
    const columnGap = props => {
      if (props.columnGap !== undefined && props.columnGap !== null) {
        const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'columnGap');
        const styleFromPropValue = propValue => ({
          columnGap: getValue(transformer, propValue)
        });
        return handleBreakpoints(props, props.columnGap, styleFromPropValue);
      }
      return null;
    };
    columnGap.propTypes = {
      columnGap: responsivePropType$1
    } ;
    columnGap.filterProps = ['columnGap'];
    const rowGap = props => {
      if (props.rowGap !== undefined && props.rowGap !== null) {
        const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'rowGap');
        const styleFromPropValue = propValue => ({
          rowGap: getValue(transformer, propValue)
        });
        return handleBreakpoints(props, props.rowGap, styleFromPropValue);
      }
      return null;
    };
    rowGap.propTypes = {
      rowGap: responsivePropType$1
    } ;
    rowGap.filterProps = ['rowGap'];
    const gridColumn = style$3({
      prop: 'gridColumn'
    });
    const gridRow = style$3({
      prop: 'gridRow'
    });
    const gridAutoFlow = style$3({
      prop: 'gridAutoFlow'
    });
    const gridAutoColumns = style$3({
      prop: 'gridAutoColumns'
    });
    const gridAutoRows = style$3({
      prop: 'gridAutoRows'
    });
    const gridTemplateColumns = style$3({
      prop: 'gridTemplateColumns'
    });
    const gridTemplateRows = style$3({
      prop: 'gridTemplateRows'
    });
    const gridTemplateAreas = style$3({
      prop: 'gridTemplateAreas'
    });
    const gridArea = style$3({
      prop: 'gridArea'
    });
    const grid = compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
    var grid$1 = grid;

    function transform$1(value, userValue) {
      if (userValue === 'grey') {
        return userValue;
      }
      return value;
    }
    const color = style$3({
      prop: 'color',
      themeKey: 'palette',
      transform: transform$1
    });
    const bgcolor = style$3({
      prop: 'bgcolor',
      cssProperty: 'backgroundColor',
      themeKey: 'palette',
      transform: transform$1
    });
    const backgroundColor = style$3({
      prop: 'backgroundColor',
      themeKey: 'palette',
      transform: transform$1
    });
    const palette = compose(color, bgcolor, backgroundColor);
    var palette$1 = palette;

    const position = style$3({
      prop: 'position'
    });
    const zIndex$2 = style$3({
      prop: 'zIndex',
      themeKey: 'zIndex'
    });
    const top$1 = style$3({
      prop: 'top'
    });
    const right$1 = style$3({
      prop: 'right'
    });
    const bottom$1 = style$3({
      prop: 'bottom'
    });
    const left$1 = style$3({
      prop: 'left'
    });
    var positions = compose(position, zIndex$2, top$1, right$1, bottom$1, left$1);

    const boxShadow = style$3({
      prop: 'boxShadow',
      themeKey: 'shadows'
    });
    var shadows$2 = boxShadow;

    function transform(value) {
      return value <= 1 && value !== 0 ? `${value * 100}%` : value;
    }
    const width = style$3({
      prop: 'width',
      transform
    });
    const maxWidth = props => {
      if (props.maxWidth !== undefined && props.maxWidth !== null) {
        const styleFromPropValue = propValue => {
          var _props$theme, _props$theme$breakpoi, _props$theme$breakpoi2;
          const breakpoint = ((_props$theme = props.theme) == null ? void 0 : (_props$theme$breakpoi = _props$theme.breakpoints) == null ? void 0 : (_props$theme$breakpoi2 = _props$theme$breakpoi.values) == null ? void 0 : _props$theme$breakpoi2[propValue]) || values$1[propValue];
          return {
            maxWidth: breakpoint || transform(propValue)
          };
        };
        return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
      }
      return null;
    };
    maxWidth.filterProps = ['maxWidth'];
    const minWidth = style$3({
      prop: 'minWidth',
      transform
    });
    const height = style$3({
      prop: 'height',
      transform
    });
    const maxHeight = style$3({
      prop: 'maxHeight',
      transform
    });
    const minHeight = style$3({
      prop: 'minHeight',
      transform
    });
    style$3({
      prop: 'size',
      cssProperty: 'width',
      transform
    });
    style$3({
      prop: 'size',
      cssProperty: 'height',
      transform
    });
    const boxSizing = style$3({
      prop: 'boxSizing'
    });
    const sizing = compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
    var sizing$1 = sizing;

    const fontFamily = style$3({
      prop: 'fontFamily',
      themeKey: 'typography'
    });
    const fontSize = style$3({
      prop: 'fontSize',
      themeKey: 'typography'
    });
    const fontStyle = style$3({
      prop: 'fontStyle',
      themeKey: 'typography'
    });
    const fontWeight = style$3({
      prop: 'fontWeight',
      themeKey: 'typography'
    });
    const letterSpacing = style$3({
      prop: 'letterSpacing'
    });
    const textTransform = style$3({
      prop: 'textTransform'
    });
    const lineHeight = style$3({
      prop: 'lineHeight'
    });
    const textAlign = style$3({
      prop: 'textAlign'
    });
    const typographyVariant = style$3({
      prop: 'typography',
      cssProperty: false,
      themeKey: 'typography'
    });
    const typography = compose(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign, textTransform);
    var typography$1 = typography;

    const filterPropsMapping = {
      borders: borders$1.filterProps,
      display: display.filterProps,
      flexbox: flexbox$1.filterProps,
      grid: grid$1.filterProps,
      positions: positions.filterProps,
      palette: palette$1.filterProps,
      shadows: shadows$2.filterProps,
      sizing: sizing$1.filterProps,
      spacing: spacing.filterProps,
      typography: typography$1.filterProps
    };
    const styleFunctionMapping = {
      borders: borders$1,
      display,
      flexbox: flexbox$1,
      grid: grid$1,
      positions,
      palette: palette$1,
      shadows: shadows$2,
      sizing: sizing$1,
      spacing,
      typography: typography$1
    };
    const propToStyleFunction = Object.keys(filterPropsMapping).reduce((acc, styleFnName) => {
      filterPropsMapping[styleFnName].forEach(propName => {
        acc[propName] = styleFunctionMapping[styleFnName];
      });
      return acc;
    }, {});

    function objectsHaveSameKeys(...objects) {
      const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
      const union = new Set(allKeys);
      return objects.every(object => union.size === Object.keys(object).length);
    }
    function callIfFn(maybeFn, arg) {
      return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;
    }

    // eslint-disable-next-line @typescript-eslint/naming-convention
    function unstable_createStyleFunctionSx(styleFunctionMapping$1 = styleFunctionMapping) {
      const propToStyleFunction = Object.keys(styleFunctionMapping$1).reduce((acc, styleFnName) => {
        styleFunctionMapping$1[styleFnName].filterProps.forEach(propName => {
          acc[propName] = styleFunctionMapping$1[styleFnName];
        });
        return acc;
      }, {});
      function getThemeValue(prop, value, theme) {
        const inputProps = {
          [prop]: value,
          theme
        };
        const styleFunction = propToStyleFunction[prop];
        return styleFunction ? styleFunction(inputProps) : {
          [prop]: value
        };
      }
      function styleFunctionSx(props) {
        const {
          sx,
          theme = {}
        } = props || {};
        if (!sx) {
          return null; // Emotion & styled-components will neglect null
        }

        /*
         * Receive `sxInput` as object or callback
         * and then recursively check keys & values to create media query object styles.
         * (the result will be used in `styled`)
         */
        function traverse(sxInput) {
          let sxObject = sxInput;
          if (typeof sxInput === 'function') {
            sxObject = sxInput(theme);
          } else if (typeof sxInput !== 'object') {
            // value
            return sxInput;
          }
          if (!sxObject) {
            return null;
          }
          const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
          const breakpointsKeys = Object.keys(emptyBreakpoints);
          let css = emptyBreakpoints;
          Object.keys(sxObject).forEach(styleKey => {
            const value = callIfFn(sxObject[styleKey], theme);
            if (value !== null && value !== undefined) {
              if (typeof value === 'object') {
                if (propToStyleFunction[styleKey]) {
                  css = merge(css, getThemeValue(styleKey, value, theme));
                } else {
                  const breakpointsValues = handleBreakpoints({
                    theme
                  }, value, x => ({
                    [styleKey]: x
                  }));
                  if (objectsHaveSameKeys(breakpointsValues, value)) {
                    css[styleKey] = styleFunctionSx({
                      sx: value,
                      theme
                    });
                  } else {
                    css = merge(css, breakpointsValues);
                  }
                }
              } else {
                css = merge(css, getThemeValue(styleKey, value, theme));
              }
            }
          });
          return removeUnusedBreakpoints(breakpointsKeys, css);
        }
        return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
      }
      return styleFunctionSx;
    }
    const styleFunctionSx = unstable_createStyleFunctionSx();
    styleFunctionSx.filterProps = ['sx'];
    var defaultStyleFunctionSx = styleFunctionSx;

    const _excluded$1_ = ["sx"];
    const splitProps = props => {
      const result = {
        systemProps: {},
        otherProps: {}
      };
      Object.keys(props).forEach(prop => {
        if (propToStyleFunction[prop]) {
          result.systemProps[prop] = props[prop];
        } else {
          result.otherProps[prop] = props[prop];
        }
      });
      return result;
    };
    function extendSxProp(props) {
      const {
          sx: inSx
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1_);
      const {
        systemProps,
        otherProps
      } = splitProps(other);
      let finalSx;
      if (Array.isArray(inSx)) {
        finalSx = [systemProps, ...inSx];
      } else if (typeof inSx === 'function') {
        finalSx = (...args) => {
          const result = inSx(...args);
          if (!isPlainObject$1(result)) {
            return systemProps;
          }
          return _extends({}, systemProps, result);
        };
      } else {
        finalSx = _extends({}, systemProps, inSx);
      }
      return _extends({}, otherProps, {
        sx: finalSx
      });
    }

    function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);else for(t in e)e[t]&&(n&&(n+=" "),n+=t);return n}function clsx(){for(var e,t,f=0,n="";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}

    const _excluded$1Z = ["values", "unit", "step"];
    const sortBreakpointsValues = values => {
      const breakpointsAsArray = Object.keys(values).map(key => ({
        key,
        val: values[key]
      })) || [];
      // Sort in ascending order
      breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
      return breakpointsAsArray.reduce((acc, obj) => {
        return _extends({}, acc, {
          [obj.key]: obj.val
        });
      }, {});
    };

    // Keep in mind that @media is inclusive by the CSS specification.
    function createBreakpoints(breakpoints) {
      const {
          // The breakpoint **start** at this value.
          // For instance with the first breakpoint xs: [xs, sm).
          values = {
            xs: 0,
            // phone
            sm: 600,
            // tablet
            md: 900,
            // small laptop
            lg: 1200,
            // desktop
            xl: 1536 // large screen
          },

          unit = 'px',
          step = 5
        } = breakpoints,
        other = _objectWithoutPropertiesLoose(breakpoints, _excluded$1Z);
      const sortedValues = sortBreakpointsValues(values);
      const keys = Object.keys(sortedValues);
      function up(key) {
        const value = typeof values[key] === 'number' ? values[key] : key;
        return `@media (min-width:${value}${unit})`;
      }
      function down(key) {
        const value = typeof values[key] === 'number' ? values[key] : key;
        return `@media (max-width:${value - step / 100}${unit})`;
      }
      function between(start, end) {
        const endIndex = keys.indexOf(end);
        return `@media (min-width:${typeof values[start] === 'number' ? values[start] : start}${unit}) and ` + `(max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === 'number' ? values[keys[endIndex]] : end) - step / 100}${unit})`;
      }
      function only(key) {
        if (keys.indexOf(key) + 1 < keys.length) {
          return between(key, keys[keys.indexOf(key) + 1]);
        }
        return up(key);
      }
      function not(key) {
        // handle first and last key separately, for better readability
        const keyIndex = keys.indexOf(key);
        if (keyIndex === 0) {
          return up(keys[1]);
        }
        if (keyIndex === keys.length - 1) {
          return down(keys[keyIndex]);
        }
        return between(key, keys[keys.indexOf(key) + 1]).replace('@media', '@media not all and');
      }
      return _extends({
        keys,
        values: sortedValues,
        up,
        down,
        between,
        only,
        not,
        unit
      }, other);
    }

    const shape = {
      borderRadius: 4
    };
    var shape$1 = shape;

    /* tslint:enable:unified-signatures */

    function createSpacing(spacingInput = 8) {
      // Already transformed.
      if (spacingInput.mui) {
        return spacingInput;
      }

      // Material Design layouts are visually balanced. Most measurements align to an 8dp grid, which aligns both spacing and the overall layout.
      // Smaller components, such as icons, can align to a 4dp grid.
      // https://m2.material.io/design/layout/understanding-layout.html
      const transform = createUnarySpacing({
        spacing: spacingInput
      });
      const spacing = (...argsInput) => {
        {
          if (!(argsInput.length <= 4)) {
            console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
          }
        }
        const args = argsInput.length === 0 ? [1] : argsInput;
        return args.map(argument => {
          const output = transform(argument);
          return typeof output === 'number' ? `${output}px` : output;
        }).join(' ');
      };
      spacing.mui = true;
      return spacing;
    }

    const _excluded$1Y = ["breakpoints", "palette", "spacing", "shape"];
    function createTheme$1(options = {}, ...args) {
      const {
          breakpoints: breakpointsInput = {},
          palette: paletteInput = {},
          spacing: spacingInput,
          shape: shapeInput = {}
        } = options,
        other = _objectWithoutPropertiesLoose(options, _excluded$1Y);
      const breakpoints = createBreakpoints(breakpointsInput);
      const spacing = createSpacing(spacingInput);
      let muiTheme = deepmerge({
        breakpoints,
        direction: 'ltr',
        components: {},
        // Inject component definitions.
        palette: _extends({
          mode: 'light'
        }, paletteInput),
        spacing,
        shape: _extends({}, shape$1, shapeInput)
      }, other);
      muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
      return muiTheme;
    }

    const ThemeContext = /*#__PURE__*/React__namespace.createContext(null);
    {
      ThemeContext.displayName = 'ThemeContext';
    }
    var ThemeContext$1 = ThemeContext;

    function useTheme$3() {
      const theme = React__namespace.useContext(ThemeContext$1);
      {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__namespace.useDebugValue(theme);
      }
      return theme;
    }

    const hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var nested = hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';

    function mergeOuterLocalTheme(outerTheme, localTheme) {
      if (typeof localTheme === 'function') {
        const mergedTheme = localTheme(outerTheme);
        {
          if (!mergedTheme) {
            console.error(['MUI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\n'));
          }
        }
        return mergedTheme;
      }
      return _extends({}, outerTheme, localTheme);
    }

    /**
     * This component takes a `theme` prop.
     * It makes the `theme` available down the React tree thanks to React context.
     * This component should preferably be used at **the root of your component tree**.
     */
    function ThemeProvider$1(props) {
      const {
        children,
        theme: localTheme
      } = props;
      const outerTheme = useTheme$3();
      {
        if (outerTheme === null && typeof localTheme === 'function') {
          console.error(['MUI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\n'));
        }
      }
      const theme = React__namespace.useMemo(() => {
        const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
        if (output != null) {
          output[nested] = outerTheme !== null;
        }
        return output;
      }, [localTheme, outerTheme]);
      return /*#__PURE__*/jsxRuntime.exports.jsx(ThemeContext$1.Provider, {
        value: theme,
        children: children
      });
    }
    ThemeProvider$1.propTypes = {
      /**
       * Your component tree.
       */
      children: PropTypes.node,
      /**
       * A theme object. You can provide a function to extend the outer theme.
       */
      theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired
    } ;
    {
      ThemeProvider$1.propTypes = exactProp(ThemeProvider$1.propTypes) ;
    }

    function isObjectEmpty(obj) {
      return Object.keys(obj).length === 0;
    }
    function useTheme$2(defaultTheme = null) {
      const contextTheme = useTheme$3();
      return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme : contextTheme;
    }

    const systemDefaultTheme$1 = createTheme$1();
    function useTheme$1(defaultTheme = systemDefaultTheme$1) {
      return useTheme$2(defaultTheme);
    }

    const _excluded$1X = ["className", "component"];
    function createBox(options = {}) {
      const {
        defaultTheme,
        defaultClassName = 'MuiBox-root',
        generateClassName,
        styleFunctionSx = defaultStyleFunctionSx
      } = options;
      const BoxRoot = styled$2('div', {
        shouldForwardProp: prop => prop !== 'theme' && prop !== 'sx' && prop !== 'as'
      })(styleFunctionSx);
      const Box = /*#__PURE__*/React__namespace.forwardRef(function Box(inProps, ref) {
        const theme = useTheme$1(defaultTheme);
        const _extendSxProp = extendSxProp(inProps),
          {
            className,
            component = 'div'
          } = _extendSxProp,
          other = _objectWithoutPropertiesLoose(_extendSxProp, _excluded$1X);
        return /*#__PURE__*/jsxRuntime.exports.jsx(BoxRoot, _extends({
          as: component,
          ref: ref,
          className: clsx(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
          theme: theme
        }, other));
      });
      return Box;
    }

    const _excluded$1W = ["variant"];
    function isEmpty$3(string) {
      return string.length === 0;
    }

    /**
     * Generates string classKey based on the properties provided. It starts with the
     * variant if defined, and then it appends all other properties in alphabetical order.
     * @param {object} props - the properties for which the classKey should be created.
     */
    function propsToClassKey(props) {
      const {
          variant
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1W);
      let classKey = variant || '';
      Object.keys(other).sort().forEach(key => {
        if (key === 'color') {
          classKey += isEmpty$3(classKey) ? props[key] : capitalize(props[key]);
        } else {
          classKey += `${isEmpty$3(classKey) ? key : capitalize(key)}${capitalize(props[key].toString())}`;
        }
      });
      return classKey;
    }

    const _excluded$1V = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"],
      _excluded2$4 = ["theme"],
      _excluded3 = ["theme"];
    function isEmpty$2(obj) {
      return Object.keys(obj).length === 0;
    }

    // https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40
    function isStringTag(tag) {
      return typeof tag === 'string' &&
      // 96 is one less than the char code
      // for "a" so this is checking that
      // it's a lowercase character
      tag.charCodeAt(0) > 96;
    }
    const getStyleOverrides = (name, theme) => {
      if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
        return theme.components[name].styleOverrides;
      }
      return null;
    };
    const getVariantStyles = (name, theme) => {
      let variants = [];
      if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
        variants = theme.components[name].variants;
      }
      const variantsStyles = {};
      variants.forEach(definition => {
        const key = propsToClassKey(definition.props);
        variantsStyles[key] = definition.style;
      });
      return variantsStyles;
    };
    const variantsResolver = (props, styles, theme, name) => {
      var _theme$components, _theme$components$nam;
      const {
        ownerState = {}
      } = props;
      const variantsStyles = [];
      const themeVariants = theme == null ? void 0 : (_theme$components = theme.components) == null ? void 0 : (_theme$components$nam = _theme$components[name]) == null ? void 0 : _theme$components$nam.variants;
      if (themeVariants) {
        themeVariants.forEach(themeVariant => {
          let isMatch = true;
          Object.keys(themeVariant.props).forEach(key => {
            if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
              isMatch = false;
            }
          });
          if (isMatch) {
            variantsStyles.push(styles[propsToClassKey(themeVariant.props)]);
          }
        });
      }
      return variantsStyles;
    };

    // Update /system/styled/#api in case if this changes
    function shouldForwardProp(prop) {
      return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
    }
    const systemDefaultTheme = createTheme$1();
    const lowercaseFirstLetter = string => {
      return string.charAt(0).toLowerCase() + string.slice(1);
    };
    function createStyled(input = {}) {
      const {
        defaultTheme = systemDefaultTheme,
        rootShouldForwardProp = shouldForwardProp,
        slotShouldForwardProp = shouldForwardProp,
        styleFunctionSx = defaultStyleFunctionSx
      } = input;
      const systemSx = props => {
        const theme = isEmpty$2(props.theme) ? defaultTheme : props.theme;
        return styleFunctionSx(_extends({}, props, {
          theme
        }));
      };
      systemSx.__mui_systemSx = true;
      return (tag, inputOptions = {}) => {
        // Filter out the `sx` style function from the previous styled component to prevent unnecessary styles generated by the composite components.
        internal_processStyles(tag, styles => styles.filter(style => !(style != null && style.__mui_systemSx)));
        const {
            name: componentName,
            slot: componentSlot,
            skipVariantsResolver: inputSkipVariantsResolver,
            skipSx: inputSkipSx,
            overridesResolver
          } = inputOptions,
          options = _objectWithoutPropertiesLoose(inputOptions, _excluded$1V);

        // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
        const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver : componentSlot && componentSlot !== 'Root' || false;
        const skipSx = inputSkipSx || false;
        let label;
        {
          if (componentName) {
            label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;
          }
        }
        let shouldForwardPropOption = shouldForwardProp;
        if (componentSlot === 'Root') {
          shouldForwardPropOption = rootShouldForwardProp;
        } else if (componentSlot) {
          // any other slot specified
          shouldForwardPropOption = slotShouldForwardProp;
        } else if (isStringTag(tag)) {
          // for string (html) tag, preserve the behavior in emotion & styled-components.
          shouldForwardPropOption = undefined;
        }
        const defaultStyledResolver = styled$2(tag, _extends({
          shouldForwardProp: shouldForwardPropOption,
          label
        }, options));
        const muiStyledResolver = (styleArg, ...expressions) => {
          const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {
            // On the server Emotion doesn't use React.forwardRef for creating components, so the created
            // component stays as a function. This condition makes sure that we do not interpolate functions
            // which are basically components used as a selectors.
            return typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg ? _ref => {
              let {
                  theme: themeInput
                } = _ref,
                other = _objectWithoutPropertiesLoose(_ref, _excluded2$4);
              return stylesArg(_extends({
                theme: isEmpty$2(themeInput) ? defaultTheme : themeInput
              }, other));
            } : stylesArg;
          }) : [];
          let transformedStyleArg = styleArg;
          if (componentName && overridesResolver) {
            expressionsWithDefaultTheme.push(props => {
              const theme = isEmpty$2(props.theme) ? defaultTheme : props.theme;
              const styleOverrides = getStyleOverrides(componentName, theme);
              if (styleOverrides) {
                const resolvedStyleOverrides = {};
                Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
                  resolvedStyleOverrides[slotKey] = typeof slotStyle === 'function' ? slotStyle(_extends({}, props, {
                    theme
                  })) : slotStyle;
                });
                return overridesResolver(props, resolvedStyleOverrides);
              }
              return null;
            });
          }
          if (componentName && !skipVariantsResolver) {
            expressionsWithDefaultTheme.push(props => {
              const theme = isEmpty$2(props.theme) ? defaultTheme : props.theme;
              return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
            });
          }
          if (!skipSx) {
            expressionsWithDefaultTheme.push(systemSx);
          }
          const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
          if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
            const placeholders = new Array(numOfCustomFnsApplied).fill('');
            // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.
            transformedStyleArg = [...styleArg, ...placeholders];
            transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
          } else if (typeof styleArg === 'function' &&
          // On the server Emotion doesn't use React.forwardRef for creating components, so the created
          // component stays as a function. This condition makes sure that we do not interpolate functions
          // which are basically components used as a selectors.
          styleArg.__emotion_real !== styleArg) {
            // If the type is function, we need to define the default theme.
            transformedStyleArg = _ref2 => {
              let {
                  theme: themeInput
                } = _ref2,
                other = _objectWithoutPropertiesLoose(_ref2, _excluded3);
              return styleArg(_extends({
                theme: isEmpty$2(themeInput) ? defaultTheme : themeInput
              }, other));
            };
          }
          const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
          {
            let displayName;
            if (componentName) {
              displayName = `${componentName}${componentSlot || ''}`;
            }
            if (displayName === undefined) {
              displayName = `Styled(${getDisplayName(tag)})`;
            }
            Component.displayName = displayName;
          }
          return Component;
        };
        if (defaultStyledResolver.withConfig) {
          muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
        }
        return muiStyledResolver;
      };
    }

    function getThemeProps(params) {
      const {
        theme,
        name,
        props
      } = params;
      if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
        return props;
      }
      return resolveProps(theme.components[name].defaultProps, props);
    }

    function useThemeProps$1({
      props,
      name,
      defaultTheme
    }) {
      const theme = useTheme$1(defaultTheme);
      const mergedProps = getThemeProps({
        theme,
        name,
        props
      });
      return mergedProps;
    }

    /**
     * Returns a number whose value is limited to the given range.
     * @param {number} value The value to be clamped
     * @param {number} min The lower boundary of the output range
     * @param {number} max The upper boundary of the output range
     * @returns {number} A number in the range [min, max]
     */
    function clamp$1(value, min = 0, max = 1) {
      {
        if (value < min || value > max) {
          console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
        }
      }
      return Math.min(Math.max(min, value), max);
    }

    /**
     * Converts a color from CSS hex format to CSS rgb format.
     * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
     * @returns {string} A CSS rgb color string
     */
    function hexToRgb(color) {
      color = color.slice(1);
      const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');
      let colors = color.match(re);
      if (colors && colors[0].length === 1) {
        colors = colors.map(n => n + n);
      }
      return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {
    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
  }).join(', ')})` : '';
    }

    /**
     * Returns an object with the type and values of a color.
     *
     * Note: Does not support rgb % values.
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
     * @returns {object} - A MUI color object: {type: string, values: number[]}
     */
    function decomposeColor(color) {
      // Idempotent
      if (color.type) {
        return color;
      }
      if (color.charAt(0) === '#') {
        return decomposeColor(hexToRgb(color));
      }
      const marker = color.indexOf('(');
      const type = color.substring(0, marker);
      if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {
        throw new Error(`MUI: Unsupported \`${color}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` );
      }
      let values = color.substring(marker + 1, color.length - 1);
      let colorSpace;
      if (type === 'color') {
        values = values.split(' ');
        colorSpace = values.shift();
        if (values.length === 4 && values[3].charAt(0) === '/') {
          values[3] = values[3].slice(1);
        }
        if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {
          throw new Error(`MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` );
        }
      } else {
        values = values.split(',');
      }
      values = values.map(value => parseFloat(value));
      return {
        type,
        values,
        colorSpace
      };
    }

    /**
     * Converts a color object with type and values to a string.
     * @param {object} color - Decomposed color
     * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'
     * @param {array} color.values - [n,n,n] or [n,n,n,n]
     * @returns {string} A CSS color string
     */
    function recomposeColor(color) {
      const {
        type,
        colorSpace
      } = color;
      let {
        values
      } = color;
      if (type.indexOf('rgb') !== -1) {
        // Only convert the first 3 values to int (i.e. not alpha)
        values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);
      } else if (type.indexOf('hsl') !== -1) {
        values[1] = `${values[1]}%`;
        values[2] = `${values[2]}%`;
      }
      if (type.indexOf('color') !== -1) {
        values = `${colorSpace} ${values.join(' ')}`;
      } else {
        values = `${values.join(', ')}`;
      }
      return `${type}(${values})`;
    }

    /**
     * Converts a color from hsl format to rgb format.
     * @param {string} color - HSL color values
     * @returns {string} rgb color values
     */
    function hslToRgb(color) {
      color = decomposeColor(color);
      const {
        values
      } = color;
      const h = values[0];
      const s = values[1] / 100;
      const l = values[2] / 100;
      const a = s * Math.min(l, 1 - l);
      const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
      let type = 'rgb';
      const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
      if (color.type === 'hsla') {
        type += 'a';
        rgb.push(values[3]);
      }
      return recomposeColor({
        type,
        values: rgb
      });
    }
    /**
     * The relative brightness of any point in a color space,
     * normalized to 0 for darkest black and 1 for lightest white.
     *
     * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
     * @returns {number} The relative brightness of the color in the range 0 - 1
     */
    function getLuminance(color) {
      color = decomposeColor(color);
      let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;
      rgb = rgb.map(val => {
        if (color.type !== 'color') {
          val /= 255; // normalized
        }

        return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
      });

      // Truncate at 3 digits
      return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
    }

    /**
     * Calculates the contrast ratio between two colors.
     *
     * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
     * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @returns {number} A contrast ratio value in the range 0 - 21.
     */
    function getContrastRatio(foreground, background) {
      const lumA = getLuminance(foreground);
      const lumB = getLuminance(background);
      return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
    }

    /**
     * Sets the absolute transparency of a color.
     * Any existing alpha values are overwritten.
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
     * @param {number} value - value to set the alpha channel to in the range 0 - 1
     * @returns {string} A CSS color string. Hex input values are returned as rgb
     */
    function alpha(color, value) {
      color = decomposeColor(color);
      value = clamp$1(value);
      if (color.type === 'rgb' || color.type === 'hsl') {
        color.type += 'a';
      }
      if (color.type === 'color') {
        color.values[3] = `/${value}`;
      } else {
        color.values[3] = value;
      }
      return recomposeColor(color);
    }

    /**
     * Darkens a color.
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
     * @param {number} coefficient - multiplier in the range 0 - 1
     * @returns {string} A CSS color string. Hex input values are returned as rgb
     */
    function darken(color, coefficient) {
      color = decomposeColor(color);
      coefficient = clamp$1(coefficient);
      if (color.type.indexOf('hsl') !== -1) {
        color.values[2] *= 1 - coefficient;
      } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {
        for (let i = 0; i < 3; i += 1) {
          color.values[i] *= 1 - coefficient;
        }
      }
      return recomposeColor(color);
    }

    /**
     * Lightens a color.
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
     * @param {number} coefficient - multiplier in the range 0 - 1
     * @returns {string} A CSS color string. Hex input values are returned as rgb
     */
    function lighten(color, coefficient) {
      color = decomposeColor(color);
      coefficient = clamp$1(coefficient);
      if (color.type.indexOf('hsl') !== -1) {
        color.values[2] += (100 - color.values[2]) * coefficient;
      } else if (color.type.indexOf('rgb') !== -1) {
        for (let i = 0; i < 3; i += 1) {
          color.values[i] += (255 - color.values[i]) * coefficient;
        }
      } else if (color.type.indexOf('color') !== -1) {
        for (let i = 0; i < 3; i += 1) {
          color.values[i] += (1 - color.values[i]) * coefficient;
        }
      }
      return recomposeColor(color);
    }

    const EMPTY_THEME = {};
    function InnerThemeProvider(props) {
      const theme = useTheme$1();
      return /*#__PURE__*/jsxRuntime.exports.jsx(ThemeContext$2.Provider, {
        value: typeof theme === 'object' ? theme : EMPTY_THEME,
        children: props.children
      });
    }
    InnerThemeProvider.propTypes = {
      /**
       * Your component tree.
       */
      children: PropTypes.node
    } ;

    /**
     * This component makes the `theme` available down the React tree.
     * It should preferably be used at **the root of your component tree**.
     */
    function ThemeProvider(props) {
      const {
        children,
        theme: localTheme
      } = props;
      return /*#__PURE__*/jsxRuntime.exports.jsx(ThemeProvider$1, {
        theme: localTheme,
        children: /*#__PURE__*/jsxRuntime.exports.jsx(InnerThemeProvider, {
          children: children
        })
      });
    }
    ThemeProvider.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * Your component tree.
       */
      children: PropTypes.node,
      /**
       * A theme object. You can provide a function to extend the outer theme.
       */
      theme: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired
    } ;
    {
      ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) ;
    }

    function createMixins(breakpoints, mixins) {
      return _extends({
        toolbar: {
          minHeight: 56,
          [breakpoints.up('xs')]: {
            '@media (orientation: landscape)': {
              minHeight: 48
            }
          },
          [breakpoints.up('sm')]: {
            minHeight: 64
          }
        }
      }, mixins);
    }

    const _excluded$1U = ["mode", "contrastThreshold", "tonalOffset"];
    const light = {
      // The colors used to style the text.
      text: {
        // The most important text.
        primary: 'rgba(0, 0, 0, 0.87)',
        // Secondary text.
        secondary: 'rgba(0, 0, 0, 0.6)',
        // Disabled text have even lower visual prominence.
        disabled: 'rgba(0, 0, 0, 0.38)'
      },
      // The color used to divide different elements.
      divider: 'rgba(0, 0, 0, 0.12)',
      // The background colors used to style the surfaces.
      // Consistency between these values is important.
      background: {
        paper: common$1.white,
        default: common$1.white
      },
      // The colors used to style the action elements.
      action: {
        // The color of an active action like an icon button.
        active: 'rgba(0, 0, 0, 0.54)',
        // The color of an hovered action.
        hover: 'rgba(0, 0, 0, 0.04)',
        hoverOpacity: 0.04,
        // The color of a selected action.
        selected: 'rgba(0, 0, 0, 0.08)',
        selectedOpacity: 0.08,
        // The color of a disabled action.
        disabled: 'rgba(0, 0, 0, 0.26)',
        // The background color of a disabled action.
        disabledBackground: 'rgba(0, 0, 0, 0.12)',
        disabledOpacity: 0.38,
        focus: 'rgba(0, 0, 0, 0.12)',
        focusOpacity: 0.12,
        activatedOpacity: 0.12
      }
    };
    const dark = {
      text: {
        primary: common$1.white,
        secondary: 'rgba(255, 255, 255, 0.7)',
        disabled: 'rgba(255, 255, 255, 0.5)',
        icon: 'rgba(255, 255, 255, 0.5)'
      },
      divider: 'rgba(255, 255, 255, 0.12)',
      background: {
        paper: '#121212',
        default: '#121212'
      },
      action: {
        active: common$1.white,
        hover: 'rgba(255, 255, 255, 0.08)',
        hoverOpacity: 0.08,
        selected: 'rgba(255, 255, 255, 0.16)',
        selectedOpacity: 0.16,
        disabled: 'rgba(255, 255, 255, 0.3)',
        disabledBackground: 'rgba(255, 255, 255, 0.12)',
        disabledOpacity: 0.38,
        focus: 'rgba(255, 255, 255, 0.12)',
        focusOpacity: 0.12,
        activatedOpacity: 0.24
      }
    };
    function addLightOrDark(intent, direction, shade, tonalOffset) {
      const tonalOffsetLight = tonalOffset.light || tonalOffset;
      const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
      if (!intent[direction]) {
        if (intent.hasOwnProperty(shade)) {
          intent[direction] = intent[shade];
        } else if (direction === 'light') {
          intent.light = lighten(intent.main, tonalOffsetLight);
        } else if (direction === 'dark') {
          intent.dark = darken(intent.main, tonalOffsetDark);
        }
      }
    }
    function getDefaultPrimary(mode = 'light') {
      if (mode === 'dark') {
        return {
          main: blue$1[200],
          light: blue$1[50],
          dark: blue$1[400]
        };
      }
      return {
        main: blue$1[700],
        light: blue$1[400],
        dark: blue$1[800]
      };
    }
    function getDefaultSecondary(mode = 'light') {
      if (mode === 'dark') {
        return {
          main: purple$1[200],
          light: purple$1[50],
          dark: purple$1[400]
        };
      }
      return {
        main: purple$1[500],
        light: purple$1[300],
        dark: purple$1[700]
      };
    }
    function getDefaultError(mode = 'light') {
      if (mode === 'dark') {
        return {
          main: red$1[500],
          light: red$1[300],
          dark: red$1[700]
        };
      }
      return {
        main: red$1[700],
        light: red$1[400],
        dark: red$1[800]
      };
    }
    function getDefaultInfo(mode = 'light') {
      if (mode === 'dark') {
        return {
          main: lightBlue$1[400],
          light: lightBlue$1[300],
          dark: lightBlue$1[700]
        };
      }
      return {
        main: lightBlue$1[700],
        light: lightBlue$1[500],
        dark: lightBlue$1[900]
      };
    }
    function getDefaultSuccess(mode = 'light') {
      if (mode === 'dark') {
        return {
          main: green$1[400],
          light: green$1[300],
          dark: green$1[700]
        };
      }
      return {
        main: green$1[800],
        light: green$1[500],
        dark: green$1[900]
      };
    }
    function getDefaultWarning(mode = 'light') {
      if (mode === 'dark') {
        return {
          main: orange$1[400],
          light: orange$1[300],
          dark: orange$1[700]
        };
      }
      return {
        main: '#ed6c02',
        // closest to orange[800] that pass 3:1.
        light: orange$1[500],
        dark: orange$1[900]
      };
    }
    function createPalette(palette) {
      const {
          mode = 'light',
          contrastThreshold = 3,
          tonalOffset = 0.2
        } = palette,
        other = _objectWithoutPropertiesLoose(palette, _excluded$1U);
      const primary = palette.primary || getDefaultPrimary(mode);
      const secondary = palette.secondary || getDefaultSecondary(mode);
      const error = palette.error || getDefaultError(mode);
      const info = palette.info || getDefaultInfo(mode);
      const success = palette.success || getDefaultSuccess(mode);
      const warning = palette.warning || getDefaultWarning(mode);

      // Use the same logic as
      // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
      // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54
      function getContrastText(background) {
        const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
        {
          const contrast = getContrastRatio(background, contrastText);
          if (contrast < 3) {
            console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\n'));
          }
        }
        return contrastText;
      }
      const augmentColor = ({
        color,
        name,
        mainShade = 500,
        lightShade = 300,
        darkShade = 700
      }) => {
        color = _extends({}, color);
        if (!color.main && color[mainShade]) {
          color.main = color[mainShade];
        }
        if (!color.hasOwnProperty('main')) {
          throw new Error(`MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` );
        }
        if (typeof color.main !== 'string') {
          throw new Error(`MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` );
        }
        addLightOrDark(color, 'light', lightShade, tonalOffset);
        addLightOrDark(color, 'dark', darkShade, tonalOffset);
        if (!color.contrastText) {
          color.contrastText = getContrastText(color.main);
        }
        return color;
      };
      const modes = {
        dark,
        light
      };
      {
        if (!modes[mode]) {
          console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
        }
      }
      const paletteOutput = deepmerge(_extends({
        // A collection of common colors.
        common: _extends({}, common$1),
        // prevent mutable object.
        // The palette mode, can be light or dark.
        mode,
        // The colors used to represent primary interface elements for a user.
        primary: augmentColor({
          color: primary,
          name: 'primary'
        }),
        // The colors used to represent secondary interface elements for a user.
        secondary: augmentColor({
          color: secondary,
          name: 'secondary',
          mainShade: 'A400',
          lightShade: 'A200',
          darkShade: 'A700'
        }),
        // The colors used to represent interface elements that the user should be made aware of.
        error: augmentColor({
          color: error,
          name: 'error'
        }),
        // The colors used to represent potentially dangerous actions or important messages.
        warning: augmentColor({
          color: warning,
          name: 'warning'
        }),
        // The colors used to present information to the user that is neutral and not necessarily important.
        info: augmentColor({
          color: info,
          name: 'info'
        }),
        // The colors used to indicate the successful completion of an action that user triggered.
        success: augmentColor({
          color: success,
          name: 'success'
        }),
        // The grey colors.
        grey: grey$1,
        // Used by `getContrastText()` to maximize the contrast between
        // the background and the text.
        contrastThreshold,
        // Takes a background color and returns the text color that maximizes the contrast.
        getContrastText,
        // Generate a rich color object.
        augmentColor,
        // Used by the functions below to shift a color's luminance by approximately
        // two indexes within its tonal palette.
        // E.g., shift from Red 500 to Red 300 or Red 700.
        tonalOffset
      }, modes[mode]), other);
      return paletteOutput;
    }

    const _excluded$1T = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
    function round$2(value) {
      return Math.round(value * 1e5) / 1e5;
    }
    const caseAllCaps = {
      textTransform: 'uppercase'
    };
    const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';

    /**
     * @see @link{https://m2.material.io/design/typography/the-type-system.html}
     * @see @link{https://m2.material.io/design/typography/understanding-typography.html}
     */
    function createTypography(palette, typography) {
      const _ref = typeof typography === 'function' ? typography(palette) : typography,
        {
          fontFamily = defaultFontFamily,
          // The default font size of the Material Specification.
          fontSize = 14,
          // px
          fontWeightLight = 300,
          fontWeightRegular = 400,
          fontWeightMedium = 500,
          fontWeightBold = 700,
          // Tell MUI what's the font-size on the html element.
          // 16px is the default font-size used by browsers.
          htmlFontSize = 16,
          // Apply the CSS properties to all the variants.
          allVariants,
          pxToRem: pxToRem2
        } = _ref,
        other = _objectWithoutPropertiesLoose(_ref, _excluded$1T);
      {
        if (typeof fontSize !== 'number') {
          console.error('MUI: `fontSize` is required to be a number.');
        }
        if (typeof htmlFontSize !== 'number') {
          console.error('MUI: `htmlFontSize` is required to be a number.');
        }
      }
      const coef = fontSize / 14;
      const pxToRem = pxToRem2 || (size => `${size / htmlFontSize * coef}rem`);
      const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends({
        fontFamily,
        fontWeight,
        fontSize: pxToRem(size),
        // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
        lineHeight
      }, fontFamily === defaultFontFamily ? {
        letterSpacing: `${round$2(letterSpacing / size)}em`
      } : {}, casing, allVariants);
      const variants = {
        h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
        h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
        h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
        h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
        h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
        h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
        subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
        subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
        body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
        body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
        button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
        caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
        overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
      };
      return deepmerge(_extends({
        htmlFontSize,
        pxToRem,
        fontFamily,
        fontSize,
        fontWeightLight,
        fontWeightRegular,
        fontWeightMedium,
        fontWeightBold
      }, variants), other, {
        clone: false // No need to clone deep
      });
    }

    const shadowKeyUmbraOpacity = 0.2;
    const shadowKeyPenumbraOpacity = 0.14;
    const shadowAmbientShadowOpacity = 0.12;
    function createShadow(...px) {
      return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(',');
    }

    // Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss
    const shadows = ['none', createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
    var shadows$1 = shadows;

    const _excluded$1S = ["duration", "easing", "delay"];
    // Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
    // to learn the context in which each easing should be used.
    const easing = {
      // This is the most common easing curve.
      easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
      // Objects enter the screen at full velocity from off-screen and
      // slowly decelerate to a resting point.
      easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
      // Objects leave the screen at full velocity. They do not decelerate when off-screen.
      easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
      // The sharp curve is used by objects that may return to the screen at any time.
      sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
    };

    // Follow https://m2.material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
    // to learn when use what timing
    const duration = {
      shortest: 150,
      shorter: 200,
      short: 250,
      // most basic recommended timing
      standard: 300,
      // this is to be used in complex animations
      complex: 375,
      // recommended when something is entering screen
      enteringScreen: 225,
      // recommended when something is leaving screen
      leavingScreen: 195
    };
    function formatMs(milliseconds) {
      return `${Math.round(milliseconds)}ms`;
    }
    function getAutoHeightDuration(height) {
      if (!height) {
        return 0;
      }
      const constant = height / 36;

      // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10
      return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
    }
    function createTransitions(inputTransitions) {
      const mergedEasing = _extends({}, easing, inputTransitions.easing);
      const mergedDuration = _extends({}, duration, inputTransitions.duration);
      const create = (props = ['all'], options = {}) => {
        const {
            duration: durationOption = mergedDuration.standard,
            easing: easingOption = mergedEasing.easeInOut,
            delay = 0
          } = options,
          other = _objectWithoutPropertiesLoose(options, _excluded$1S);
        {
          const isString = value => typeof value === 'string';
          // IE11 support, replace with Number.isNaN
          // eslint-disable-next-line no-restricted-globals
          const isNumber = value => !isNaN(parseFloat(value));
          if (!isString(props) && !Array.isArray(props)) {
            console.error('MUI: Argument "props" must be a string or Array.');
          }
          if (!isNumber(durationOption) && !isString(durationOption)) {
            console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
          }
          if (!isString(easingOption)) {
            console.error('MUI: Argument "easing" must be a string.');
          }
          if (!isNumber(delay) && !isString(delay)) {
            console.error('MUI: Argument "delay" must be a number or a string.');
          }
          if (Object.keys(other).length !== 0) {
            console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(',')}].`);
          }
        }
        return (Array.isArray(props) ? props : [props]).map(animatedProp => `${animatedProp} ${typeof durationOption === 'string' ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`).join(',');
      };
      return _extends({
        getAutoHeightDuration,
        create
      }, inputTransitions, {
        easing: mergedEasing,
        duration: mergedDuration
      });
    }

    // We need to centralize the zIndex definitions as they work
    // like global values in the browser.
    const zIndex = {
      mobileStepper: 1000,
      fab: 1050,
      speedDial: 1050,
      appBar: 1100,
      drawer: 1200,
      modal: 1300,
      snackbar: 1400,
      tooltip: 1500
    };
    var zIndex$1 = zIndex;

    const _excluded$1R = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
    function createTheme(options = {}, ...args) {
      const {
          mixins: mixinsInput = {},
          palette: paletteInput = {},
          transitions: transitionsInput = {},
          typography: typographyInput = {}
        } = options,
        other = _objectWithoutPropertiesLoose(options, _excluded$1R);
      if (options.vars) {
        throw new Error(`MUI: \`vars\` is a private field used for CSS variables support.
Please use another name.` );
      }
      const palette = createPalette(paletteInput);
      const systemTheme = createTheme$1(options);
      let muiTheme = deepmerge(systemTheme, {
        mixins: createMixins(systemTheme.breakpoints, mixinsInput),
        palette,
        // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
        shadows: shadows$1.slice(),
        typography: createTypography(palette, typographyInput),
        transitions: createTransitions(transitionsInput),
        zIndex: _extends({}, zIndex$1)
      });
      muiTheme = deepmerge(muiTheme, other);
      muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
      {
        const stateClasses = ['active', 'checked', 'completed', 'disabled', 'error', 'expanded', 'focused', 'focusVisible', 'required', 'selected'];
        const traverse = (node, component) => {
          let key;

          // eslint-disable-next-line guard-for-in, no-restricted-syntax
          for (key in node) {
            const child = node[key];
            if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
              {
                const stateClass = generateUtilityClass('', key);
                console.error([`MUI: The \`${component}\` component increases ` + `the CSS specificity of the \`${key}\` internal state.`, 'You can not override it like this: ', JSON.stringify(node, null, 2), '', `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                  root: {
                    [`&.${stateClass}`]: child
                  }
                }, null, 2), '', 'https://mui.com/r/state-classes-guide'].join('\n'));
              }
              // Remove the style to prevent global conflicts.
              node[key] = {};
            }
          }
        };
        Object.keys(muiTheme.components).forEach(component => {
          const styleOverrides = muiTheme.components[component].styleOverrides;
          if (styleOverrides && component.indexOf('Mui') === 0) {
            traverse(styleOverrides, component);
          }
        });
      }
      return muiTheme;
    }

    const defaultTheme$1 = createTheme();
    var defaultTheme$2 = defaultTheme$1;

    function useTheme() {
      const theme = useTheme$1(defaultTheme$2);
      {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__namespace.useDebugValue(theme);
      }
      return theme;
    }

    function useThemeProps({
      props,
      name
    }) {
      return useThemeProps$1({
        props,
        name,
        defaultTheme: defaultTheme$2
      });
    }

    const rootShouldForwardProp = prop => shouldForwardProp(prop) && prop !== 'classes';
    const slotShouldForwardProp = shouldForwardProp;
    const styled = createStyled({
      defaultTheme: defaultTheme$2,
      rootShouldForwardProp
    });
    var styled$1 = styled;

    // Inspired by https://github.com/material-components/material-components-ios/blob/bca36107405594d5b7b16265a5b0ed698f85a5ee/components/Elevation/src/UIColor%2BMaterialElevation.m#L61
    const getOverlayAlpha = elevation => {
      let alphaValue;
      if (elevation < 1) {
        alphaValue = 5.11916 * elevation ** 2;
      } else {
        alphaValue = 4.5 * Math.log(elevation + 1) + 2;
      }
      return (alphaValue / 100).toFixed(2);
    };
    var getOverlayAlpha$1 = getOverlayAlpha;

    /**
     * Determines if a given element is a DOM element name (i.e. not a React component).
     */
    function isHostComponent(element) {
      return typeof element === 'string';
    }

    /**
     * Type of the ownerState based on the type of an element it applies to.
     * This resolves to the provided OwnerState for React components and `undefined` for host components.
     * Falls back to `OwnerState | undefined` when the exact type can't be determined in development time.
     */

    /**
     * Appends the ownerState object to the props, merging with the existing one if necessary.
     *
     * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node or undefined, `ownerState` is not applied.
     * @param otherProps Props of the element.
     * @param ownerState
     */
    function appendOwnerState(elementType, otherProps, ownerState) {
      if (elementType === undefined || isHostComponent(elementType)) {
        return otherProps;
      }
      return _extends({}, otherProps, {
        ownerState: _extends({}, otherProps.ownerState, ownerState)
      });
    }

    /**
     * Extracts event handlers from a given object.
     * A prop is considered an event handler if it is a function and its name starts with `on`.
     *
     * @param object An object to extract event handlers from.
     * @param excludeKeys An array of keys to exclude from the returned object.
     */
    function extractEventHandlers(object, excludeKeys = []) {
      if (object === undefined) {
        return {};
      }
      const result = {};
      Object.keys(object).filter(prop => prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)).forEach(prop => {
        result[prop] = object[prop];
      });
      return result;
    }

    /**
     * If `componentProps` is a function, calls it with the provided `ownerState`.
     * Otherwise, just returns `componentProps`.
     */
    function resolveComponentProps(componentProps, ownerState) {
      if (typeof componentProps === 'function') {
        return componentProps(ownerState);
      }
      return componentProps;
    }

    /**
     * Removes event handlers from the given object.
     * A field is considered an event handler if it is a function with a name beginning with `on`.
     *
     * @param object Object to remove event handlers from.
     * @returns Object with event handlers removed.
     */
    function omitEventHandlers(object) {
      if (object === undefined) {
        return {};
      }
      const result = {};
      Object.keys(object).filter(prop => !(prop.match(/^on[A-Z]/) && typeof object[prop] === 'function')).forEach(prop => {
        result[prop] = object[prop];
      });
      return result;
    }

    /**
     * Merges the slot component internal props (usually coming from a hook)
     * with the externally provided ones.
     *
     * The merge order is (the latter overrides the former):
     * 1. The internal props (specified as a getter function to work with get*Props hook result)
     * 2. Additional props (specified internally on an unstyled component)
     * 3. External props specified on the owner component. These should only be used on a root slot.
     * 4. External props specified in the `slotProps.*` prop.
     * 5. The `className` prop - combined from all the above.
     * @param parameters
     * @returns
     */
    function mergeSlotProps(parameters) {
      const {
        getSlotProps,
        additionalProps,
        externalSlotProps,
        externalForwardedProps,
        className
      } = parameters;
      if (!getSlotProps) {
        // The simpler case - getSlotProps is not defined, so no internal event handlers are defined,
        // so we can simply merge all the props without having to worry about extracting event handlers.
        const joinedClasses = clsx(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className, additionalProps == null ? void 0 : additionalProps.className);
        const mergedStyle = _extends({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
        const props = _extends({}, additionalProps, externalForwardedProps, externalSlotProps);
        if (joinedClasses.length > 0) {
          props.className = joinedClasses;
        }
        if (Object.keys(mergedStyle).length > 0) {
          props.style = mergedStyle;
        }
        return {
          props,
          internalRef: undefined
        };
      }

      // In this case, getSlotProps is responsible for calling the external event handlers.
      // We don't need to include them in the merged props because of this.

      const eventHandlers = extractEventHandlers(_extends({}, externalForwardedProps, externalSlotProps));
      const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);
      const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);
      const internalSlotProps = getSlotProps(eventHandlers);

      // The order of classes is important here.
      // Emotion (that we use in libraries consuming MUI Base) depends on this order
      // to properly override style. It requires the most important classes to be last
      // (see https://github.com/mui/material-ui/pull/33205) for the related discussion.
      const joinedClasses = clsx(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
      const mergedStyle = _extends({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
      const props = _extends({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
      if (joinedClasses.length > 0) {
        props.className = joinedClasses;
      }
      if (Object.keys(mergedStyle).length > 0) {
        props.style = mergedStyle;
      }
      return {
        props,
        internalRef: internalSlotProps.ref
      };
    }

    const _excluded$1Q = ["elementType", "externalSlotProps", "ownerState"];
    /**
     * Builds the props to be passed into the slot of an unstyled component.
     * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.
     * If the slot component is not a host component, it also merges in the `ownerState`.
     *
     * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.
     */
    function useSlotProps(parameters) {
      var _parameters$additiona;
      const {
          elementType,
          externalSlotProps,
          ownerState
        } = parameters,
        rest = _objectWithoutPropertiesLoose(parameters, _excluded$1Q);
      const resolvedComponentsProps = resolveComponentProps(externalSlotProps, ownerState);
      const {
        props: mergedProps,
        internalRef
      } = mergeSlotProps(_extends({}, rest, {
        externalSlotProps: resolvedComponentsProps
      }));
      const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
      const props = appendOwnerState(elementType, _extends({}, mergedProps, {
        ref
      }), ownerState);
      return props;
    }

    // https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript
    // Give up on IE11 support for this feature
    function stripDiacritics(string) {
      return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\u0300-\u036f]/g, '') : string;
    }
    function createFilterOptions(config = {}) {
      const {
        ignoreAccents = true,
        ignoreCase = true,
        limit,
        matchFrom = 'any',
        stringify,
        trim = false
      } = config;
      return (options, {
        inputValue,
        getOptionLabel
      }) => {
        let input = trim ? inputValue.trim() : inputValue;
        if (ignoreCase) {
          input = input.toLowerCase();
        }
        if (ignoreAccents) {
          input = stripDiacritics(input);
        }
        const filteredOptions = !input ? options : options.filter(option => {
          let candidate = (stringify || getOptionLabel)(option);
          if (ignoreCase) {
            candidate = candidate.toLowerCase();
          }
          if (ignoreAccents) {
            candidate = stripDiacritics(candidate);
          }
          return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
        });
        return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;
      };
    }

    // To replace with .findIndex() once we stop IE11 support.
    function findIndex(array, comp) {
      for (let i = 0; i < array.length; i += 1) {
        if (comp(array[i])) {
          return i;
        }
      }
      return -1;
    }
    const defaultFilterOptions = createFilterOptions();

    // Number of options to jump in list box when pageup and pagedown keys are used.
    const pageSize = 5;
    const defaultIsActiveElementInListbox = listboxRef => {
      var _listboxRef$current$p;
      return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));
    };
    function useAutocomplete(props) {
      const {
        // eslint-disable-next-line @typescript-eslint/naming-convention
        unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,
        // eslint-disable-next-line @typescript-eslint/naming-convention
        unstable_classNamePrefix = 'Mui',
        autoComplete = false,
        autoHighlight = false,
        autoSelect = false,
        blurOnSelect = false,
        clearOnBlur = !props.freeSolo,
        clearOnEscape = false,
        componentName = 'useAutocomplete',
        defaultValue = props.multiple ? [] : null,
        disableClearable = false,
        disableCloseOnSelect = false,
        disabled: disabledProp,
        disabledItemsFocusable = false,
        disableListWrap = false,
        filterOptions = defaultFilterOptions,
        filterSelectedOptions = false,
        freeSolo = false,
        getOptionDisabled,
        getOptionLabel: getOptionLabelProp = option => {
          var _option$label;
          return (_option$label = option.label) != null ? _option$label : option;
        },
        groupBy,
        handleHomeEndKeys = !props.freeSolo,
        id: idProp,
        includeInputInList = false,
        inputValue: inputValueProp,
        isOptionEqualToValue = (option, value) => option === value,
        multiple = false,
        onChange,
        onClose,
        onHighlightChange,
        onInputChange,
        onOpen,
        open: openProp,
        openOnFocus = false,
        options,
        readOnly = false,
        selectOnFocus = !props.freeSolo,
        value: valueProp
      } = props;
      const id = useId(idProp);
      let getOptionLabel = getOptionLabelProp;
      getOptionLabel = option => {
        const optionLabel = getOptionLabelProp(option);
        if (typeof optionLabel !== 'string') {
          {
            const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;
            console.error(`MUI: The \`getOptionLabel\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);
          }
          return String(optionLabel);
        }
        return optionLabel;
      };
      const ignoreFocus = React__namespace.useRef(false);
      const firstFocus = React__namespace.useRef(true);
      const inputRef = React__namespace.useRef(null);
      const listboxRef = React__namespace.useRef(null);
      const [anchorEl, setAnchorEl] = React__namespace.useState(null);
      const [focusedTag, setFocusedTag] = React__namespace.useState(-1);
      const defaultHighlighted = autoHighlight ? 0 : -1;
      const highlightedIndexRef = React__namespace.useRef(defaultHighlighted);
      const [value, setValueState] = useControlled({
        controlled: valueProp,
        default: defaultValue,
        name: componentName
      });
      const [inputValue, setInputValueState] = useControlled({
        controlled: inputValueProp,
        default: '',
        name: componentName,
        state: 'inputValue'
      });
      const [focused, setFocused] = React__namespace.useState(false);
      const resetInputValue = React__namespace.useCallback((event, newValue) => {
        // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false
        // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item
        const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;
        if (!isOptionSelected && !clearOnBlur) {
          return;
        }
        let newInputValue;
        if (multiple) {
          newInputValue = '';
        } else if (newValue == null) {
          newInputValue = '';
        } else {
          const optionLabel = getOptionLabel(newValue);
          newInputValue = typeof optionLabel === 'string' ? optionLabel : '';
        }
        if (inputValue === newInputValue) {
          return;
        }
        setInputValueState(newInputValue);
        if (onInputChange) {
          onInputChange(event, newInputValue, 'reset');
        }
      }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);
      const prevValue = React__namespace.useRef();
      React__namespace.useEffect(() => {
        const valueChange = value !== prevValue.current;
        prevValue.current = value;
        if (focused && !valueChange) {
          return;
        }

        // Only reset the input's value when freeSolo if the component's value changes.
        if (freeSolo && !valueChange) {
          return;
        }
        resetInputValue(null, value);
      }, [value, resetInputValue, focused, prevValue, freeSolo]);
      const [open, setOpenState] = useControlled({
        controlled: openProp,
        default: false,
        name: componentName,
        state: 'open'
      });
      const [inputPristine, setInputPristine] = React__namespace.useState(true);
      const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
      const popupOpen = open && !readOnly;
      const filteredOptions = popupOpen ? filterOptions(options.filter(option => {
        if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {
          return false;
        }
        return true;
      }),
      // we use the empty string to manipulate `filterOptions` to not filter any options
      // i.e. the filter predicate always returns true
      {
        inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,
        getOptionLabel
      }) : [];
      const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;
      {
        if (value !== null && !freeSolo && options.length > 0) {
          const missingValue = (multiple ? value : [value]).filter(value2 => !options.some(option => isOptionEqualToValue(option, value2)));
          if (missingValue.length > 0) {
            console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\`.`, 'You can use the `isOptionEqualToValue` prop to customize the equality test.'].join('\n'));
          }
        }
      }
      const focusTag = useEventCallback(tagToFocus => {
        if (tagToFocus === -1) {
          inputRef.current.focus();
        } else {
          anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
        }
      });

      // Ensure the focusedTag is never inconsistent
      React__namespace.useEffect(() => {
        if (multiple && focusedTag > value.length - 1) {
          setFocusedTag(-1);
          focusTag(-1);
        }
      }, [value, multiple, focusedTag, focusTag]);
      function validOptionIndex(index, direction) {
        if (!listboxRef.current || index === -1) {
          return -1;
        }
        let nextFocus = index;
        while (true) {
          // Out of range
          if (direction === 'next' && nextFocus === filteredOptions.length || direction === 'previous' && nextFocus === -1) {
            return -1;
          }
          const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`);

          // Same logic as MenuList.js
          const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';
          if (option && !option.hasAttribute('tabindex') || nextFocusDisabled) {
            // Move to the next element.
            nextFocus += direction === 'next' ? 1 : -1;
          } else {
            return nextFocus;
          }
        }
      }
      const setHighlightedIndex = useEventCallback(({
        event,
        index,
        reason = 'auto'
      }) => {
        highlightedIndexRef.current = index;

        // does the index exist?
        if (index === -1) {
          inputRef.current.removeAttribute('aria-activedescendant');
        } else {
          inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);
        }
        if (onHighlightChange) {
          onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);
        }
        if (!listboxRef.current) {
          return;
        }
        const prev = listboxRef.current.querySelector(`[role="option"].${unstable_classNamePrefix}-focused`);
        if (prev) {
          prev.classList.remove(`${unstable_classNamePrefix}-focused`);
          prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);
        }
        const listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]');

        // "No results"
        if (!listboxNode) {
          return;
        }
        if (index === -1) {
          listboxNode.scrollTop = 0;
          return;
        }
        const option = listboxRef.current.querySelector(`[data-option-index="${index}"]`);
        if (!option) {
          return;
        }
        option.classList.add(`${unstable_classNamePrefix}-focused`);
        if (reason === 'keyboard') {
          option.classList.add(`${unstable_classNamePrefix}-focusVisible`);
        }

        // Scroll active descendant into view.
        // Logic copied from https://www.w3.org/WAI/ARIA/apg/example-index/combobox/js/select-only.js
        //
        // Consider this API instead once it has a better browser support:
        // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });
        if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse') {
          const element = option;
          const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
          const elementBottom = element.offsetTop + element.offsetHeight;
          if (elementBottom > scrollBottom) {
            listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
          } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
            listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
          }
        }
      });
      const changeHighlightedIndex = useEventCallback(({
        event,
        diff,
        direction = 'next',
        reason = 'auto'
      }) => {
        if (!popupOpen) {
          return;
        }
        const getNextIndex = () => {
          const maxIndex = filteredOptions.length - 1;
          if (diff === 'reset') {
            return defaultHighlighted;
          }
          if (diff === 'start') {
            return 0;
          }
          if (diff === 'end') {
            return maxIndex;
          }
          const newIndex = highlightedIndexRef.current + diff;
          if (newIndex < 0) {
            if (newIndex === -1 && includeInputInList) {
              return -1;
            }
            if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {
              return 0;
            }
            return maxIndex;
          }
          if (newIndex > maxIndex) {
            if (newIndex === maxIndex + 1 && includeInputInList) {
              return -1;
            }
            if (disableListWrap || Math.abs(diff) > 1) {
              return maxIndex;
            }
            return 0;
          }
          return newIndex;
        };
        const nextIndex = validOptionIndex(getNextIndex(), direction);
        setHighlightedIndex({
          index: nextIndex,
          reason,
          event
        });

        // Sync the content of the input with the highlighted option.
        if (autoComplete && diff !== 'reset') {
          if (nextIndex === -1) {
            inputRef.current.value = inputValue;
          } else {
            const option = getOptionLabel(filteredOptions[nextIndex]);
            inputRef.current.value = option;

            // The portion of the selected suggestion that has not been typed by the user,
            // a completion string, appears inline after the input cursor in the textbox.
            const index = option.toLowerCase().indexOf(inputValue.toLowerCase());
            if (index === 0 && inputValue.length > 0) {
              inputRef.current.setSelectionRange(inputValue.length, option.length);
            }
          }
        }
      });
      const syncHighlightedIndex = React__namespace.useCallback(() => {
        if (!popupOpen) {
          return;
        }
        const valueItem = multiple ? value[0] : value;

        // The popup is empty, reset
        if (filteredOptions.length === 0 || valueItem == null) {
          changeHighlightedIndex({
            diff: 'reset'
          });
          return;
        }
        if (!listboxRef.current) {
          return;
        }

        // Synchronize the value with the highlighted index
        if (valueItem != null) {
          const currentOption = filteredOptions[highlightedIndexRef.current];

          // Keep the current highlighted index if possible
          if (multiple && currentOption && findIndex(value, val => isOptionEqualToValue(currentOption, val)) !== -1) {
            return;
          }
          const itemIndex = findIndex(filteredOptions, optionItem => isOptionEqualToValue(optionItem, valueItem));
          if (itemIndex === -1) {
            changeHighlightedIndex({
              diff: 'reset'
            });
          } else {
            setHighlightedIndex({
              index: itemIndex
            });
          }
          return;
        }

        // Prevent the highlighted index to leak outside the boundaries.
        if (highlightedIndexRef.current >= filteredOptions.length - 1) {
          setHighlightedIndex({
            index: filteredOptions.length - 1
          });
          return;
        }

        // Restore the focus to the previous index.
        setHighlightedIndex({
          index: highlightedIndexRef.current
        });
        // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position
        // eslint-disable-next-line react-hooks/exhaustive-deps
      }, [
      // Only sync the highlighted index when the option switch between empty and not
      filteredOptions.length,
      // Don't sync the highlighted index with the value when multiple
      // eslint-disable-next-line react-hooks/exhaustive-deps
      multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);
      const handleListboxRef = useEventCallback(node => {
        setRef(listboxRef, node);
        if (!node) {
          return;
        }
        syncHighlightedIndex();
      });
      {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__namespace.useEffect(() => {
          if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {
            if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {
              console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (e.g. enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\n'));
            } else {
              console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have binded getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\n'));
            }
          }
        }, [componentName]);
      }
      React__namespace.useEffect(() => {
        syncHighlightedIndex();
      }, [syncHighlightedIndex]);
      const handleOpen = event => {
        if (open) {
          return;
        }
        setOpenState(true);
        setInputPristine(true);
        if (onOpen) {
          onOpen(event);
        }
      };
      const handleClose = (event, reason) => {
        if (!open) {
          return;
        }
        setOpenState(false);
        if (onClose) {
          onClose(event, reason);
        }
      };
      const handleValue = (event, newValue, reason, details) => {
        if (multiple) {
          if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {
            return;
          }
        } else if (value === newValue) {
          return;
        }
        if (onChange) {
          onChange(event, newValue, reason, details);
        }
        setValueState(newValue);
      };
      const isTouch = React__namespace.useRef(false);
      const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {
        let reason = reasonProp;
        let newValue = option;
        if (multiple) {
          newValue = Array.isArray(value) ? value.slice() : [];
          {
            const matches = newValue.filter(val => isOptionEqualToValue(option, val));
            if (matches.length > 1) {
              console.error([`MUI: The \`isOptionEqualToValue\` method of ${componentName} do not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\n'));
            }
          }
          const itemIndex = findIndex(newValue, valueItem => isOptionEqualToValue(option, valueItem));
          if (itemIndex === -1) {
            newValue.push(option);
          } else if (origin !== 'freeSolo') {
            newValue.splice(itemIndex, 1);
            reason = 'removeOption';
          }
        }
        resetInputValue(event, newValue);
        handleValue(event, newValue, reason, {
          option
        });
        if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {
          handleClose(event, reason);
        }
        if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {
          inputRef.current.blur();
        }
      };
      function validTagIndex(index, direction) {
        if (index === -1) {
          return -1;
        }
        let nextFocus = index;
        while (true) {
          // Out of range
          if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {
            return -1;
          }
          const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`);

          // Same logic as MenuList.js
          if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {
            nextFocus += direction === 'next' ? 1 : -1;
          } else {
            return nextFocus;
          }
        }
      }
      const handleFocusTag = (event, direction) => {
        if (!multiple) {
          return;
        }
        if (inputValue === '') {
          handleClose(event, 'toggleInput');
        }
        let nextTag = focusedTag;
        if (focusedTag === -1) {
          if (inputValue === '' && direction === 'previous') {
            nextTag = value.length - 1;
          }
        } else {
          nextTag += direction === 'next' ? 1 : -1;
          if (nextTag < 0) {
            nextTag = 0;
          }
          if (nextTag === value.length) {
            nextTag = -1;
          }
        }
        nextTag = validTagIndex(nextTag, direction);
        setFocusedTag(nextTag);
        focusTag(nextTag);
      };
      const handleClear = event => {
        ignoreFocus.current = true;
        setInputValueState('');
        if (onInputChange) {
          onInputChange(event, '', 'clear');
        }
        handleValue(event, multiple ? [] : null, 'clear');
      };
      const handleKeyDown = other => event => {
        if (other.onKeyDown) {
          other.onKeyDown(event);
        }
        if (event.defaultMuiPrevented) {
          return;
        }
        if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {
          setFocusedTag(-1);
          focusTag(-1);
        }

        // Wait until IME is settled.
        if (event.which !== 229) {
          switch (event.key) {
            case 'Home':
              if (popupOpen && handleHomeEndKeys) {
                // Prevent scroll of the page
                event.preventDefault();
                changeHighlightedIndex({
                  diff: 'start',
                  direction: 'next',
                  reason: 'keyboard',
                  event
                });
              }
              break;
            case 'End':
              if (popupOpen && handleHomeEndKeys) {
                // Prevent scroll of the page
                event.preventDefault();
                changeHighlightedIndex({
                  diff: 'end',
                  direction: 'previous',
                  reason: 'keyboard',
                  event
                });
              }
              break;
            case 'PageUp':
              // Prevent scroll of the page
              event.preventDefault();
              changeHighlightedIndex({
                diff: -pageSize,
                direction: 'previous',
                reason: 'keyboard',
                event
              });
              handleOpen(event);
              break;
            case 'PageDown':
              // Prevent scroll of the page
              event.preventDefault();
              changeHighlightedIndex({
                diff: pageSize,
                direction: 'next',
                reason: 'keyboard',
                event
              });
              handleOpen(event);
              break;
            case 'ArrowDown':
              // Prevent cursor move
              event.preventDefault();
              changeHighlightedIndex({
                diff: 1,
                direction: 'next',
                reason: 'keyboard',
                event
              });
              handleOpen(event);
              break;
            case 'ArrowUp':
              // Prevent cursor move
              event.preventDefault();
              changeHighlightedIndex({
                diff: -1,
                direction: 'previous',
                reason: 'keyboard',
                event
              });
              handleOpen(event);
              break;
            case 'ArrowLeft':
              handleFocusTag(event, 'previous');
              break;
            case 'ArrowRight':
              handleFocusTag(event, 'next');
              break;
            case 'Enter':
              if (highlightedIndexRef.current !== -1 && popupOpen) {
                const option = filteredOptions[highlightedIndexRef.current];
                const disabled = getOptionDisabled ? getOptionDisabled(option) : false;

                // Avoid early form validation, let the end-users continue filling the form.
                event.preventDefault();
                if (disabled) {
                  return;
                }
                selectNewValue(event, option, 'selectOption');

                // Move the selection to the end.
                if (autoComplete) {
                  inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
                }
              } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {
                if (multiple) {
                  // Allow people to add new values before they submit the form.
                  event.preventDefault();
                }
                selectNewValue(event, inputValue, 'createOption', 'freeSolo');
              }
              break;
            case 'Escape':
              if (popupOpen) {
                // Avoid Opera to exit fullscreen mode.
                event.preventDefault();
                // Avoid the Modal to handle the event.
                event.stopPropagation();
                handleClose(event, 'escape');
              } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {
                // Avoid Opera to exit fullscreen mode.
                event.preventDefault();
                // Avoid the Modal to handle the event.
                event.stopPropagation();
                handleClear(event);
              }
              break;
            case 'Backspace':
              if (multiple && !readOnly && inputValue === '' && value.length > 0) {
                const index = focusedTag === -1 ? value.length - 1 : focusedTag;
                const newValue = value.slice();
                newValue.splice(index, 1);
                handleValue(event, newValue, 'removeOption', {
                  option: value[index]
                });
              }
              break;
            case 'Delete':
              if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedTag !== -1) {
                const index = focusedTag;
                const newValue = value.slice();
                newValue.splice(index, 1);
                handleValue(event, newValue, 'removeOption', {
                  option: value[index]
                });
              }
              break;
          }
        }
      };
      const handleFocus = event => {
        setFocused(true);
        if (openOnFocus && !ignoreFocus.current) {
          handleOpen(event);
        }
      };
      const handleBlur = event => {
        // Ignore the event when using the scrollbar with IE11
        if (unstable_isActiveElementInListbox(listboxRef)) {
          inputRef.current.focus();
          return;
        }
        setFocused(false);
        firstFocus.current = true;
        ignoreFocus.current = false;
        if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
          selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');
        } else if (autoSelect && freeSolo && inputValue !== '') {
          selectNewValue(event, inputValue, 'blur', 'freeSolo');
        } else if (clearOnBlur) {
          resetInputValue(event, value);
        }
        handleClose(event, 'blur');
      };
      const handleInputChange = event => {
        const newValue = event.target.value;
        if (inputValue !== newValue) {
          setInputValueState(newValue);
          setInputPristine(false);
          if (onInputChange) {
            onInputChange(event, newValue, 'input');
          }
        }
        if (newValue === '') {
          if (!disableClearable && !multiple) {
            handleValue(event, null, 'clear');
          }
        } else {
          handleOpen(event);
        }
      };
      const handleOptionMouseOver = event => {
        setHighlightedIndex({
          event,
          index: Number(event.currentTarget.getAttribute('data-option-index')),
          reason: 'mouse'
        });
      };
      const handleOptionTouchStart = () => {
        isTouch.current = true;
      };
      const handleOptionClick = event => {
        const index = Number(event.currentTarget.getAttribute('data-option-index'));
        selectNewValue(event, filteredOptions[index], 'selectOption');
        isTouch.current = false;
      };
      const handleTagDelete = index => event => {
        const newValue = value.slice();
        newValue.splice(index, 1);
        handleValue(event, newValue, 'removeOption', {
          option: value[index]
        });
      };
      const handlePopupIndicator = event => {
        if (open) {
          handleClose(event, 'toggleInput');
        } else {
          handleOpen(event);
        }
      };

      // Prevent input blur when interacting with the combobox
      const handleMouseDown = event => {
        if (event.target.getAttribute('id') !== id) {
          event.preventDefault();
        }
      };

      // Focus the input when interacting with the combobox
      const handleClick = () => {
        inputRef.current.focus();
        if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
          inputRef.current.select();
        }
        firstFocus.current = false;
      };
      const handleInputMouseDown = event => {
        if (inputValue === '' || !open) {
          handlePopupIndicator(event);
        }
      };
      let dirty = freeSolo && inputValue.length > 0;
      dirty = dirty || (multiple ? value.length > 0 : value !== null);
      let groupedOptions = filteredOptions;
      if (groupBy) {
        // used to keep track of key and indexes in the result array
        const indexBy = new Map();
        let warn = false;
        groupedOptions = filteredOptions.reduce((acc, option, index) => {
          const group = groupBy(option);
          if (acc.length > 0 && acc[acc.length - 1].group === group) {
            acc[acc.length - 1].options.push(option);
          } else {
            {
              if (indexBy.get(group) && !warn) {
                console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');
                warn = true;
              }
              indexBy.set(group, true);
            }
            acc.push({
              key: index,
              index,
              group,
              options: [option]
            });
          }
          return acc;
        }, []);
      }
      if (disabledProp && focused) {
        handleBlur();
      }
      return {
        getRootProps: (other = {}) => _extends({
          'aria-owns': listboxAvailable ? `${id}-listbox` : null
        }, other, {
          onKeyDown: handleKeyDown(other),
          onMouseDown: handleMouseDown,
          onClick: handleClick
        }),
        getInputLabelProps: () => ({
          id: `${id}-label`,
          htmlFor: id
        }),
        getInputProps: () => ({
          id,
          value: inputValue,
          onBlur: handleBlur,
          onFocus: handleFocus,
          onChange: handleInputChange,
          onMouseDown: handleInputMouseDown,
          // if open then this is handled imperativeley so don't let react override
          // only have an opinion about this when closed
          'aria-activedescendant': popupOpen ? '' : null,
          'aria-autocomplete': autoComplete ? 'both' : 'list',
          'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,
          'aria-expanded': listboxAvailable,
          // Disable browser's suggestion that might overlap with the popup.
          // Handle autocomplete but not autofill.
          autoComplete: 'off',
          ref: inputRef,
          autoCapitalize: 'none',
          spellCheck: 'false',
          role: 'combobox'
        }),
        getClearProps: () => ({
          tabIndex: -1,
          onClick: handleClear
        }),
        getPopupIndicatorProps: () => ({
          tabIndex: -1,
          onClick: handlePopupIndicator
        }),
        getTagProps: ({
          index
        }) => _extends({
          key: index,
          'data-tag-index': index,
          tabIndex: -1
        }, !readOnly && {
          onDelete: handleTagDelete(index)
        }),
        getListboxProps: () => ({
          role: 'listbox',
          id: `${id}-listbox`,
          'aria-labelledby': `${id}-label`,
          ref: handleListboxRef,
          onMouseDown: event => {
            // Prevent blur
            event.preventDefault();
          }
        }),
        getOptionProps: ({
          index,
          option
        }) => {
          const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));
          const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
          return {
            key: getOptionLabel(option),
            tabIndex: -1,
            role: 'option',
            id: `${id}-option-${index}`,
            onMouseOver: handleOptionMouseOver,
            onClick: handleOptionClick,
            onTouchStart: handleOptionTouchStart,
            'data-option-index': index,
            'aria-disabled': disabled,
            'aria-selected': selected
          };
        },
        id,
        inputValue,
        value,
        dirty,
        popupOpen,
        focused: focused || focusedTag !== -1,
        anchorEl,
        setAnchorEl,
        focusedTag,
        groupedOptions
      };
    }

    function useBadge(parameters) {
      const {
        badgeContent: badgeContentProp,
        invisible: invisibleProp = false,
        max: maxProp = 99,
        showZero = false
      } = parameters;
      const prevProps = usePreviousProps$1({
        badgeContent: badgeContentProp,
        max: maxProp
      });
      let invisible = invisibleProp;
      if (invisibleProp === false && badgeContentProp === 0 && !showZero) {
        invisible = true;
      }
      const {
        badgeContent,
        max = maxProp
      } = invisible ? prevProps : parameters;
      const displayValue = badgeContent && Number(badgeContent) > max ? `${max}+` : badgeContent;
      return {
        badgeContent,
        invisible,
        max,
        displayValue
      };
    }

    function getBadgeUnstyledUtilityClass(slot) {
      return generateUtilityClass('MuiBadge', slot);
    }
    generateUtilityClasses('MuiBadge', ['root', 'badge', 'invisible']);

    const _excluded$1P = ["badgeContent", "component", "children", "invisible", "max", "slotProps", "slots", "showZero"];
    const useUtilityClasses$1x = ownerState => {
      const {
        invisible
      } = ownerState;
      const slots = {
        root: ['root'],
        badge: ['badge', invisible && 'invisible']
      };
      return composeClasses(slots, getBadgeUnstyledUtilityClass, undefined);
    };
    /**
     *
     * Demos:
     *
     * - [Unstyled badge](https://mui.com/base/react-badge/)
     *
     * API:
     *
     * - [BadgeUnstyled API](https://mui.com/base/api/badge-unstyled/)
     */
    const BadgeUnstyled = /*#__PURE__*/React__namespace.forwardRef(function BadgeUnstyled(props, ref) {
      const {
          component,
          children,
          max: maxProp = 99,
          slotProps = {},
          slots = {},
          showZero = false
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1P);
      const {
        badgeContent,
        max,
        displayValue,
        invisible
      } = useBadge(_extends({}, props, {
        max: maxProp
      }));
      const ownerState = _extends({}, props, {
        badgeContent,
        invisible,
        max,
        showZero
      });
      const classes = useUtilityClasses$1x(ownerState);
      const Root = component || slots.root || 'span';
      const rootProps = useSlotProps({
        elementType: Root,
        externalSlotProps: slotProps.root,
        externalForwardedProps: other,
        additionalProps: {
          ref
        },
        ownerState,
        className: classes.root
      });
      const Badge = slots.badge || 'span';
      const badgeProps = useSlotProps({
        elementType: Badge,
        externalSlotProps: slotProps.badge,
        ownerState,
        className: classes.badge
      });
      return /*#__PURE__*/jsxRuntime.exports.jsxs(Root, _extends({}, rootProps, {
        children: [children, /*#__PURE__*/jsxRuntime.exports.jsx(Badge, _extends({}, badgeProps, {
          children: displayValue
        }))]
      }));
    });
    BadgeUnstyled.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------
      /**
       * The content rendered within the badge.
       */
      badgeContent: PropTypes.node,
      /**
       * The badge will be added relative to this node.
       */
      children: PropTypes.node,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * If `true`, the badge is invisible.
       * @default false
       */
      invisible: PropTypes.bool,
      /**
       * Max count to show.
       * @default 99
       */
      max: PropTypes.number,
      /**
       * Controls whether the badge is hidden when `badgeContent` is zero.
       * @default false
       */
      showZero: PropTypes.bool,
      /**
       * The props used for each slot inside the Badge.
       * @default {}
       */
      slotProps: PropTypes.shape({
        badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
      }),
      /**
       * The components used for each slot inside the Badge.
       * Either a string to use a HTML element or a component.
       * @default {}
       */
      slots: PropTypes.shape({
        badge: PropTypes.elementType,
        root: PropTypes.elementType
      })
    } ;
    var BadgeUnstyled$1 = BadgeUnstyled;

    /* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex */
    const candidatesSelector = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])'].join(',');
    function getTabIndex(node) {
      const tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);
      if (!Number.isNaN(tabindexAttr)) {
        return tabindexAttr;
      }

      // Browsers do not return `tabIndex` correctly for contentEditable nodes;
      // https://bugs.chromium.org/p/chromium/issues/detail?id=661108&q=contenteditable%20tabindex&can=2
      // so if they don't have a tabindex attribute specifically set, assume it's 0.
      // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default
      //  `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,
      //  yet they are still part of the regular tab order; in FF, they get a default
      //  `tabIndex` of 0; since Chrome still puts those elements in the regular tab
      //  order, consider their tab index to be 0.
      if (node.contentEditable === 'true' || (node.nodeName === 'AUDIO' || node.nodeName === 'VIDEO' || node.nodeName === 'DETAILS') && node.getAttribute('tabindex') === null) {
        return 0;
      }
      return node.tabIndex;
    }
    function isNonTabbableRadio(node) {
      if (node.tagName !== 'INPUT' || node.type !== 'radio') {
        return false;
      }
      if (!node.name) {
        return false;
      }
      const getRadio = selector => node.ownerDocument.querySelector(`input[type="radio"]${selector}`);
      let roving = getRadio(`[name="${node.name}"]:checked`);
      if (!roving) {
        roving = getRadio(`[name="${node.name}"]`);
      }
      return roving !== node;
    }
    function isNodeMatchingSelectorFocusable(node) {
      if (node.disabled || node.tagName === 'INPUT' && node.type === 'hidden' || isNonTabbableRadio(node)) {
        return false;
      }
      return true;
    }
    function defaultGetTabbable(root) {
      const regularTabNodes = [];
      const orderedTabNodes = [];
      Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i) => {
        const nodeTabIndex = getTabIndex(node);
        if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {
          return;
        }
        if (nodeTabIndex === 0) {
          regularTabNodes.push(node);
        } else {
          orderedTabNodes.push({
            documentOrder: i,
            tabIndex: nodeTabIndex,
            node
          });
        }
      });
      return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map(a => a.node).concat(regularTabNodes);
    }
    function defaultIsEnabled() {
      return true;
    }

    /**
     * Utility component that locks focus inside the component.
     */
    function FocusTrap(props) {
      const {
        children,
        disableAutoFocus = false,
        disableEnforceFocus = false,
        disableRestoreFocus = false,
        getTabbable = defaultGetTabbable,
        isEnabled = defaultIsEnabled,
        open
      } = props;
      const ignoreNextEnforceFocus = React__namespace.useRef();
      const sentinelStart = React__namespace.useRef(null);
      const sentinelEnd = React__namespace.useRef(null);
      const nodeToRestore = React__namespace.useRef(null);
      const reactFocusEventTarget = React__namespace.useRef(null);
      // This variable is useful when disableAutoFocus is true.
      // It waits for the active element to move into the component to activate.
      const activated = React__namespace.useRef(false);
      const rootRef = React__namespace.useRef(null);
      const handleRef = useForkRef(children.ref, rootRef);
      const lastKeydown = React__namespace.useRef(null);
      React__namespace.useEffect(() => {
        // We might render an empty child.
        if (!open || !rootRef.current) {
          return;
        }
        activated.current = !disableAutoFocus;
      }, [disableAutoFocus, open]);
      React__namespace.useEffect(() => {
        // We might render an empty child.
        if (!open || !rootRef.current) {
          return;
        }
        const doc = ownerDocument(rootRef.current);
        if (!rootRef.current.contains(doc.activeElement)) {
          if (!rootRef.current.hasAttribute('tabIndex')) {
            {
              console.error(['MUI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to "-1".'].join('\n'));
            }
            rootRef.current.setAttribute('tabIndex', -1);
          }
          if (activated.current) {
            rootRef.current.focus();
          }
        }
        return () => {
          // restoreLastFocus()
          if (!disableRestoreFocus) {
            // In IE11 it is possible for document.activeElement to be null resulting
            // in nodeToRestore.current being null.
            // Not all elements in IE11 have a focus method.
            // Once IE11 support is dropped the focus() call can be unconditional.
            if (nodeToRestore.current && nodeToRestore.current.focus) {
              ignoreNextEnforceFocus.current = true;
              nodeToRestore.current.focus();
            }
            nodeToRestore.current = null;
          }
        };
        // Missing `disableRestoreFocus` which is fine.
        // We don't support changing that prop on an open FocusTrap
        // eslint-disable-next-line react-hooks/exhaustive-deps
      }, [open]);
      React__namespace.useEffect(() => {
        // We might render an empty child.
        if (!open || !rootRef.current) {
          return;
        }
        const doc = ownerDocument(rootRef.current);
        const contain = nativeEvent => {
          const {
            current: rootElement
          } = rootRef;
          // Cleanup functions are executed lazily in React 17.
          // Contain can be called between the component being unmounted and its cleanup function being run.
          if (rootElement === null) {
            return;
          }
          if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
            ignoreNextEnforceFocus.current = false;
            return;
          }
          if (!rootElement.contains(doc.activeElement)) {
            // if the focus event is not coming from inside the children's react tree, reset the refs
            if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {
              reactFocusEventTarget.current = null;
            } else if (reactFocusEventTarget.current !== null) {
              return;
            }
            if (!activated.current) {
              return;
            }
            let tabbable = [];
            if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
              tabbable = getTabbable(rootRef.current);
            }
            if (tabbable.length > 0) {
              var _lastKeydown$current, _lastKeydown$current2;
              const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === 'Tab');
              const focusNext = tabbable[0];
              const focusPrevious = tabbable[tabbable.length - 1];
              if (isShiftTab) {
                focusPrevious.focus();
              } else {
                focusNext.focus();
              }
            } else {
              rootElement.focus();
            }
          }
        };
        const loopFocus = nativeEvent => {
          lastKeydown.current = nativeEvent;
          if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== 'Tab') {
            return;
          }

          // Make sure the next tab starts from the right place.
          // doc.activeElement referes to the origin.
          if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
            // We need to ignore the next contain as
            // it will try to move the focus back to the rootRef element.
            ignoreNextEnforceFocus.current = true;
            sentinelEnd.current.focus();
          }
        };
        doc.addEventListener('focusin', contain);
        doc.addEventListener('keydown', loopFocus, true);

        // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area.
        // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.
        // Instead, we can look if the active element was restored on the BODY element.
        //
        // The whatwg spec defines how the browser should behave but does not explicitly mention any events:
        // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.
        const interval = setInterval(() => {
          if (doc.activeElement.tagName === 'BODY') {
            contain();
          }
        }, 50);
        return () => {
          clearInterval(interval);
          doc.removeEventListener('focusin', contain);
          doc.removeEventListener('keydown', loopFocus, true);
        };
      }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
      const onFocus = event => {
        if (nodeToRestore.current === null) {
          nodeToRestore.current = event.relatedTarget;
        }
        activated.current = true;
        reactFocusEventTarget.current = event.target;
        const childrenPropsHandler = children.props.onFocus;
        if (childrenPropsHandler) {
          childrenPropsHandler(event);
        }
      };
      const handleFocusSentinel = event => {
        if (nodeToRestore.current === null) {
          nodeToRestore.current = event.relatedTarget;
        }
        activated.current = true;
      };
      return /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
        children: [/*#__PURE__*/jsxRuntime.exports.jsx("div", {
          tabIndex: open ? 0 : -1,
          onFocus: handleFocusSentinel,
          ref: sentinelStart,
          "data-testid": "sentinelStart"
        }), /*#__PURE__*/React__namespace.cloneElement(children, {
          ref: handleRef,
          onFocus
        }), /*#__PURE__*/jsxRuntime.exports.jsx("div", {
          tabIndex: open ? 0 : -1,
          onFocus: handleFocusSentinel,
          ref: sentinelEnd,
          "data-testid": "sentinelEnd"
        })]
      });
    }
    FocusTrap.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * A single child content element.
       */
      children: elementAcceptingRef$1,
      /**
       * If `true`, the focus trap will not automatically shift focus to itself when it opens, and
       * replace it to the last focused element when it closes.
       * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.
       *
       * Generally this should never be set to `true` as it makes the focus trap less
       * accessible to assistive technologies, like screen readers.
       * @default false
       */
      disableAutoFocus: PropTypes.bool,
      /**
       * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.
       *
       * Generally this should never be set to `true` as it makes the focus trap less
       * accessible to assistive technologies, like screen readers.
       * @default false
       */
      disableEnforceFocus: PropTypes.bool,
      /**
       * If `true`, the focus trap will not restore focus to previously focused element once
       * focus trap is hidden or unmounted.
       * @default false
       */
      disableRestoreFocus: PropTypes.bool,
      /**
       * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
       * For instance, you can provide the "tabbable" npm dependency.
       * @param {HTMLElement} root
       */
      getTabbable: PropTypes.func,
      /**
       * This prop extends the `open` prop.
       * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
       * This prop should be memoized.
       * It can be used to support multiple focus trap mounted at the same time.
       * @default function defaultIsEnabled() {
       *   return true;
       * }
       */
      isEnabled: PropTypes.func,
      /**
       * If `true`, focus is locked.
       */
      open: PropTypes.bool.isRequired
    } ;
    {
      // eslint-disable-next-line
      FocusTrap['propTypes' + ''] = exactProp(FocusTrap.propTypes);
    }

    var top = 'top';
    var bottom = 'bottom';
    var right = 'right';
    var left = 'left';
    var auto = 'auto';
    var basePlacements = [top, bottom, right, left];
    var start = 'start';
    var end = 'end';
    var clippingParents = 'clippingParents';
    var viewport = 'viewport';
    var popper = 'popper';
    var reference = 'reference';
    var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
      return acc.concat([placement + "-" + start, placement + "-" + end]);
    }, []);
    var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
      return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
    }, []); // modifiers that need to read the DOM

    var beforeRead = 'beforeRead';
    var read = 'read';
    var afterRead = 'afterRead'; // pure-logic modifiers

    var beforeMain = 'beforeMain';
    var main = 'main';
    var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

    var beforeWrite = 'beforeWrite';
    var write = 'write';
    var afterWrite = 'afterWrite';
    var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

    function getNodeName(element) {
      return element ? (element.nodeName || '').toLowerCase() : null;
    }

    function getWindow(node) {
      if (node == null) {
        return window;
      }

      if (node.toString() !== '[object Window]') {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
      }

      return node;
    }

    function isElement(node) {
      var OwnElement = getWindow(node).Element;
      return node instanceof OwnElement || node instanceof Element;
    }

    function isHTMLElement(node) {
      var OwnElement = getWindow(node).HTMLElement;
      return node instanceof OwnElement || node instanceof HTMLElement;
    }

    function isShadowRoot(node) {
      // IE 11 has no ShadowRoot
      if (typeof ShadowRoot === 'undefined') {
        return false;
      }

      var OwnElement = getWindow(node).ShadowRoot;
      return node instanceof OwnElement || node instanceof ShadowRoot;
    }

    // and applies them to the HTMLElements such as popper and arrow

    function applyStyles(_ref) {
      var state = _ref.state;
      Object.keys(state.elements).forEach(function (name) {
        var style = state.styles[name] || {};
        var attributes = state.attributes[name] || {};
        var element = state.elements[name]; // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        } // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe[cannot-write]


        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (name) {
          var value = attributes[name];

          if (value === false) {
            element.removeAttribute(name);
          } else {
            element.setAttribute(name, value === true ? '' : value);
          }
        });
      });
    }

    function effect$2(_ref2) {
      var state = _ref2.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: '0',
          top: '0',
          margin: '0'
        },
        arrow: {
          position: 'absolute'
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;

      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      }

      return function () {
        Object.keys(state.elements).forEach(function (name) {
          var element = state.elements[name];
          var attributes = state.attributes[name] || {};
          var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

          var style = styleProperties.reduce(function (style, property) {
            style[property] = '';
            return style;
          }, {}); // arrow is optional + virtual elements

          if (!isHTMLElement(element) || !getNodeName(element)) {
            return;
          }

          Object.assign(element.style, style);
          Object.keys(attributes).forEach(function (attribute) {
            element.removeAttribute(attribute);
          });
        });
      };
    } // eslint-disable-next-line import/no-unused-modules


    var applyStyles$1 = {
      name: 'applyStyles',
      enabled: true,
      phase: 'write',
      fn: applyStyles,
      effect: effect$2,
      requires: ['computeStyles']
    };

    function getBasePlacement(placement) {
      return placement.split('-')[0];
    }

    var max = Math.max;
    var min = Math.min;
    var round$1 = Math.round;

    function getUAString() {
      var uaData = navigator.userAgentData;

      if (uaData != null && uaData.brands) {
        return uaData.brands.map(function (item) {
          return item.brand + "/" + item.version;
        }).join(' ');
      }

      return navigator.userAgent;
    }

    function isLayoutViewport() {
      return !/^((?!chrome|android).)*safari/i.test(getUAString());
    }

    function getBoundingClientRect(element, includeScale, isFixedStrategy) {
      if (includeScale === void 0) {
        includeScale = false;
      }

      if (isFixedStrategy === void 0) {
        isFixedStrategy = false;
      }

      var clientRect = element.getBoundingClientRect();
      var scaleX = 1;
      var scaleY = 1;

      if (includeScale && isHTMLElement(element)) {
        scaleX = element.offsetWidth > 0 ? round$1(clientRect.width) / element.offsetWidth || 1 : 1;
        scaleY = element.offsetHeight > 0 ? round$1(clientRect.height) / element.offsetHeight || 1 : 1;
      }

      var _ref = isElement(element) ? getWindow(element) : window,
          visualViewport = _ref.visualViewport;

      var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
      var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
      var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
      var width = clientRect.width / scaleX;
      var height = clientRect.height / scaleY;
      return {
        width: width,
        height: height,
        top: y,
        right: x + width,
        bottom: y + height,
        left: x,
        x: x,
        y: y
      };
    }

    // means it doesn't take into account transforms.

    function getLayoutRect(element) {
      var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
      // Fixes https://github.com/popperjs/popper-core/issues/1223

      var width = element.offsetWidth;
      var height = element.offsetHeight;

      if (Math.abs(clientRect.width - width) <= 1) {
        width = clientRect.width;
      }

      if (Math.abs(clientRect.height - height) <= 1) {
        height = clientRect.height;
      }

      return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width,
        height: height
      };
    }

    function contains(parent, child) {
      var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

      if (parent.contains(child)) {
        return true;
      } // then fallback to custom implementation with Shadow DOM support
      else if (rootNode && isShadowRoot(rootNode)) {
          var next = child;

          do {
            if (next && parent.isSameNode(next)) {
              return true;
            } // $FlowFixMe[prop-missing]: need a better way to handle this...


            next = next.parentNode || next.host;
          } while (next);
        } // Give up, the result is false


      return false;
    }

    function getComputedStyle(element) {
      return getWindow(element).getComputedStyle(element);
    }

    function isTableElement(element) {
      return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
    }

    function getDocumentElement(element) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
      element.document) || window.document).documentElement;
    }

    function getParentNode(element) {
      if (getNodeName(element) === 'html') {
        return element;
      }

      return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
        // $FlowFixMe[incompatible-return]
        // $FlowFixMe[prop-missing]
        element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
        element.parentNode || ( // DOM Element detected
        isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
        // $FlowFixMe[incompatible-call]: HTMLElement is a Node
        getDocumentElement(element) // fallback

      );
    }

    function getTrueOffsetParent(element) {
      if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
      getComputedStyle(element).position === 'fixed') {
        return null;
      }

      return element.offsetParent;
    } // `.offsetParent` reports `null` for fixed elements, while absolute elements
    // return the containing block


    function getContainingBlock(element) {
      var isFirefox = /firefox/i.test(getUAString());
      var isIE = /Trident/i.test(getUAString());

      if (isIE && isHTMLElement(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = getComputedStyle(element);

        if (elementCss.position === 'fixed') {
          return null;
        }
      }

      var currentNode = getParentNode(element);

      if (isShadowRoot(currentNode)) {
        currentNode = currentNode.host;
      }

      while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
        var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

        if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
          return currentNode;
        } else {
          currentNode = currentNode.parentNode;
        }
      }

      return null;
    } // Gets the closest ancestor positioned element. Handles some edge cases,
    // such as table ancestors and cross browser bugs.


    function getOffsetParent(element) {
      var window = getWindow(element);
      var offsetParent = getTrueOffsetParent(element);

      while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
        offsetParent = getTrueOffsetParent(offsetParent);
      }

      if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
        return window;
      }

      return offsetParent || getContainingBlock(element) || window;
    }

    function getMainAxisFromPlacement(placement) {
      return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
    }

    function within(min$1, value, max$1) {
      return max(min$1, min(value, max$1));
    }
    function withinMaxClamp(min, value, max) {
      var v = within(min, value, max);
      return v > max ? max : v;
    }

    function getFreshSideObject() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }

    function mergePaddingObject(paddingObject) {
      return Object.assign({}, getFreshSideObject(), paddingObject);
    }

    function expandToHashMap(value, keys) {
      return keys.reduce(function (hashMap, key) {
        hashMap[key] = value;
        return hashMap;
      }, {});
    }

    var toPaddingObject = function toPaddingObject(padding, state) {
      padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
        placement: state.placement
      })) : padding;
      return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    };

    function arrow(_ref) {
      var _state$modifiersData$;

      var state = _ref.state,
          name = _ref.name,
          options = _ref.options;
      var arrowElement = state.elements.arrow;
      var popperOffsets = state.modifiersData.popperOffsets;
      var basePlacement = getBasePlacement(state.placement);
      var axis = getMainAxisFromPlacement(basePlacement);
      var isVertical = [left, right].indexOf(basePlacement) >= 0;
      var len = isVertical ? 'height' : 'width';

      if (!arrowElement || !popperOffsets) {
        return;
      }

      var paddingObject = toPaddingObject(options.padding, state);
      var arrowRect = getLayoutRect(arrowElement);
      var minProp = axis === 'y' ? top : left;
      var maxProp = axis === 'y' ? bottom : right;
      var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
      var startDiff = popperOffsets[axis] - state.rects.reference[axis];
      var arrowOffsetParent = getOffsetParent(arrowElement);
      var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
      var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
      // outside of the popper bounds

      var min = paddingObject[minProp];
      var max = clientSize - arrowRect[len] - paddingObject[maxProp];
      var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
      var offset = within(min, center, max); // Prevents breaking syntax highlighting...

      var axisProp = axis;
      state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
    }

    function effect$1(_ref2) {
      var state = _ref2.state,
          options = _ref2.options;
      var _options$element = options.element,
          arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

      if (arrowElement == null) {
        return;
      } // CSS selector


      if (typeof arrowElement === 'string') {
        arrowElement = state.elements.popper.querySelector(arrowElement);

        if (!arrowElement) {
          return;
        }
      }

      {
        if (!isHTMLElement(arrowElement)) {
          console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
        }
      }

      if (!contains(state.elements.popper, arrowElement)) {
        {
          console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
        }

        return;
      }

      state.elements.arrow = arrowElement;
    } // eslint-disable-next-line import/no-unused-modules


    var arrow$1 = {
      name: 'arrow',
      enabled: true,
      phase: 'main',
      fn: arrow,
      effect: effect$1,
      requires: ['popperOffsets'],
      requiresIfExists: ['preventOverflow']
    };

    function getVariation(placement) {
      return placement.split('-')[1];
    }

    var unsetSides = {
      top: 'auto',
      right: 'auto',
      bottom: 'auto',
      left: 'auto'
    }; // Round the offsets to the nearest suitable subpixel based on the DPR.
    // Zooming can change the DPR, but it seems to report a value that will
    // cleanly divide the values into the appropriate subpixels.

    function roundOffsetsByDPR(_ref) {
      var x = _ref.x,
          y = _ref.y;
      var win = window;
      var dpr = win.devicePixelRatio || 1;
      return {
        x: round$1(x * dpr) / dpr || 0,
        y: round$1(y * dpr) / dpr || 0
      };
    }

    function mapToStyles(_ref2) {
      var _Object$assign2;

      var popper = _ref2.popper,
          popperRect = _ref2.popperRect,
          placement = _ref2.placement,
          variation = _ref2.variation,
          offsets = _ref2.offsets,
          position = _ref2.position,
          gpuAcceleration = _ref2.gpuAcceleration,
          adaptive = _ref2.adaptive,
          roundOffsets = _ref2.roundOffsets,
          isFixed = _ref2.isFixed;
      var _offsets$x = offsets.x,
          x = _offsets$x === void 0 ? 0 : _offsets$x,
          _offsets$y = offsets.y,
          y = _offsets$y === void 0 ? 0 : _offsets$y;

      var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
        x: x,
        y: y
      }) : {
        x: x,
        y: y
      };

      x = _ref3.x;
      y = _ref3.y;
      var hasX = offsets.hasOwnProperty('x');
      var hasY = offsets.hasOwnProperty('y');
      var sideX = left;
      var sideY = top;
      var win = window;

      if (adaptive) {
        var offsetParent = getOffsetParent(popper);
        var heightProp = 'clientHeight';
        var widthProp = 'clientWidth';

        if (offsetParent === getWindow(popper)) {
          offsetParent = getDocumentElement(popper);

          if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {
            heightProp = 'scrollHeight';
            widthProp = 'scrollWidth';
          }
        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


        offsetParent = offsetParent;

        if (placement === top || (placement === left || placement === right) && variation === end) {
          sideY = bottom;
          var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
          offsetParent[heightProp];
          y -= offsetY - popperRect.height;
          y *= gpuAcceleration ? 1 : -1;
        }

        if (placement === left || (placement === top || placement === bottom) && variation === end) {
          sideX = right;
          var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
          offsetParent[widthProp];
          x -= offsetX - popperRect.width;
          x *= gpuAcceleration ? 1 : -1;
        }
      }

      var commonStyles = Object.assign({
        position: position
      }, adaptive && unsetSides);

      var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
        x: x,
        y: y
      }) : {
        x: x,
        y: y
      };

      x = _ref4.x;
      y = _ref4.y;

      if (gpuAcceleration) {
        var _Object$assign;

        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
      }

      return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
    }

    function computeStyles(_ref5) {
      var state = _ref5.state,
          options = _ref5.options;
      var _options$gpuAccelerat = options.gpuAcceleration,
          gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
          _options$adaptive = options.adaptive,
          adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
          _options$roundOffsets = options.roundOffsets,
          roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

      {
        var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || '';

        if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
          return transitionProperty.indexOf(property) >= 0;
        })) {
          console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
        }
      }

      var commonStyles = {
        placement: getBasePlacement(state.placement),
        variation: getVariation(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration,
        isFixed: state.options.strategy === 'fixed'
      };

      if (state.modifiersData.popperOffsets != null) {
        state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.popperOffsets,
          position: state.options.strategy,
          adaptive: adaptive,
          roundOffsets: roundOffsets
        })));
      }

      if (state.modifiersData.arrow != null) {
        state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.arrow,
          position: 'absolute',
          adaptive: false,
          roundOffsets: roundOffsets
        })));
      }

      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-placement': state.placement
      });
    } // eslint-disable-next-line import/no-unused-modules


    var computeStyles$1 = {
      name: 'computeStyles',
      enabled: true,
      phase: 'beforeWrite',
      fn: computeStyles,
      data: {}
    };

    var passive = {
      passive: true
    };

    function effect(_ref) {
      var state = _ref.state,
          instance = _ref.instance,
          options = _ref.options;
      var _options$scroll = options.scroll,
          scroll = _options$scroll === void 0 ? true : _options$scroll,
          _options$resize = options.resize,
          resize = _options$resize === void 0 ? true : _options$resize;
      var window = getWindow(state.elements.popper);
      var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.addEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.addEventListener('resize', instance.update, passive);
      }

      return function () {
        if (scroll) {
          scrollParents.forEach(function (scrollParent) {
            scrollParent.removeEventListener('scroll', instance.update, passive);
          });
        }

        if (resize) {
          window.removeEventListener('resize', instance.update, passive);
        }
      };
    } // eslint-disable-next-line import/no-unused-modules


    var eventListeners = {
      name: 'eventListeners',
      enabled: true,
      phase: 'write',
      fn: function fn() {},
      effect: effect,
      data: {}
    };

    var hash$1 = {
      left: 'right',
      right: 'left',
      bottom: 'top',
      top: 'bottom'
    };
    function getOppositePlacement(placement) {
      return placement.replace(/left|right|bottom|top/g, function (matched) {
        return hash$1[matched];
      });
    }

    var hash = {
      start: 'end',
      end: 'start'
    };
    function getOppositeVariationPlacement(placement) {
      return placement.replace(/start|end/g, function (matched) {
        return hash[matched];
      });
    }

    function getWindowScroll(node) {
      var win = getWindow(node);
      var scrollLeft = win.pageXOffset;
      var scrollTop = win.pageYOffset;
      return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      };
    }

    function getWindowScrollBarX(element) {
      // If <html> has a CSS width greater than the viewport, then this will be
      // incorrect for RTL.
      // Popper 1 is broken in this case and never had a bug report so let's assume
      // it's not an issue. I don't think anyone ever specifies width on <html>
      // anyway.
      // Browsers where the left scrollbar doesn't cause an issue report `0` for
      // this (e.g. Edge 2019, IE11, Safari)
      return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
    }

    function getViewportRect(element, strategy) {
      var win = getWindow(element);
      var html = getDocumentElement(element);
      var visualViewport = win.visualViewport;
      var width = html.clientWidth;
      var height = html.clientHeight;
      var x = 0;
      var y = 0;

      if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height;
        var layoutViewport = isLayoutViewport();

        if (layoutViewport || !layoutViewport && strategy === 'fixed') {
          x = visualViewport.offsetLeft;
          y = visualViewport.offsetTop;
        }
      }

      return {
        width: width,
        height: height,
        x: x + getWindowScrollBarX(element),
        y: y
      };
    }

    // of the `<html>` and `<body>` rect bounds if horizontally scrollable

    function getDocumentRect(element) {
      var _element$ownerDocumen;

      var html = getDocumentElement(element);
      var winScroll = getWindowScroll(element);
      var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
      var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
      var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
      var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
      var y = -winScroll.scrollTop;

      if (getComputedStyle(body || html).direction === 'rtl') {
        x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
      }

      return {
        width: width,
        height: height,
        x: x,
        y: y
      };
    }

    function isScrollParent(element) {
      // Firefox wants us to check `-x` and `-y` variations as well
      var _getComputedStyle = getComputedStyle(element),
          overflow = _getComputedStyle.overflow,
          overflowX = _getComputedStyle.overflowX,
          overflowY = _getComputedStyle.overflowY;

      return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
    }

    function getScrollParent(node) {
      if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
        // $FlowFixMe[incompatible-return]: assume body is always available
        return node.ownerDocument.body;
      }

      if (isHTMLElement(node) && isScrollParent(node)) {
        return node;
      }

      return getScrollParent(getParentNode(node));
    }

    /*
    given a DOM element, return the list of all scroll parents, up the list of ancesors
    until we get to the top window object. This list is what we attach scroll listeners
    to, because if any of these parent elements scroll, we'll need to re-calculate the
    reference element's position.
    */

    function listScrollParents(element, list) {
      var _element$ownerDocumen;

      if (list === void 0) {
        list = [];
      }

      var scrollParent = getScrollParent(element);
      var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
      var win = getWindow(scrollParent);
      var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
      var updatedList = list.concat(target);
      return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents(getParentNode(target)));
    }

    function rectToClientRect(rect) {
      return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
      });
    }

    function getInnerBoundingClientRect(element, strategy) {
      var rect = getBoundingClientRect(element, false, strategy === 'fixed');
      rect.top = rect.top + element.clientTop;
      rect.left = rect.left + element.clientLeft;
      rect.bottom = rect.top + element.clientHeight;
      rect.right = rect.left + element.clientWidth;
      rect.width = element.clientWidth;
      rect.height = element.clientHeight;
      rect.x = rect.left;
      rect.y = rect.top;
      return rect;
    }

    function getClientRectFromMixedType(element, clippingParent, strategy) {
      return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
    } // A "clipping parent" is an overflowable container with the characteristic of
    // clipping (or hiding) overflowing elements with a position different from
    // `initial`


    function getClippingParents(element) {
      var clippingParents = listScrollParents(getParentNode(element));
      var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
      var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

      if (!isElement(clipperElement)) {
        return [];
      } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


      return clippingParents.filter(function (clippingParent) {
        return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
      });
    } // Gets the maximum area that the element is visible in due to any number of
    // clipping parents


    function getClippingRect(element, boundary, rootBoundary, strategy) {
      var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
      var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
      var firstClippingParent = clippingParents[0];
      var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent, strategy);
        accRect.top = max(rect.top, accRect.top);
        accRect.right = min(rect.right, accRect.right);
        accRect.bottom = min(rect.bottom, accRect.bottom);
        accRect.left = max(rect.left, accRect.left);
        return accRect;
      }, getClientRectFromMixedType(element, firstClippingParent, strategy));
      clippingRect.width = clippingRect.right - clippingRect.left;
      clippingRect.height = clippingRect.bottom - clippingRect.top;
      clippingRect.x = clippingRect.left;
      clippingRect.y = clippingRect.top;
      return clippingRect;
    }

    function computeOffsets(_ref) {
      var reference = _ref.reference,
          element = _ref.element,
          placement = _ref.placement;
      var basePlacement = placement ? getBasePlacement(placement) : null;
      var variation = placement ? getVariation(placement) : null;
      var commonX = reference.x + reference.width / 2 - element.width / 2;
      var commonY = reference.y + reference.height / 2 - element.height / 2;
      var offsets;

      switch (basePlacement) {
        case top:
          offsets = {
            x: commonX,
            y: reference.y - element.height
          };
          break;

        case bottom:
          offsets = {
            x: commonX,
            y: reference.y + reference.height
          };
          break;

        case right:
          offsets = {
            x: reference.x + reference.width,
            y: commonY
          };
          break;

        case left:
          offsets = {
            x: reference.x - element.width,
            y: commonY
          };
          break;

        default:
          offsets = {
            x: reference.x,
            y: reference.y
          };
      }

      var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

      if (mainAxis != null) {
        var len = mainAxis === 'y' ? 'height' : 'width';

        switch (variation) {
          case start:
            offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
            break;

          case end:
            offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
            break;
        }
      }

      return offsets;
    }

    function detectOverflow(state, options) {
      if (options === void 0) {
        options = {};
      }

      var _options = options,
          _options$placement = _options.placement,
          placement = _options$placement === void 0 ? state.placement : _options$placement,
          _options$strategy = _options.strategy,
          strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
          _options$boundary = _options.boundary,
          boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
          _options$rootBoundary = _options.rootBoundary,
          rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
          _options$elementConte = _options.elementContext,
          elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
          _options$altBoundary = _options.altBoundary,
          altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
          _options$padding = _options.padding,
          padding = _options$padding === void 0 ? 0 : _options$padding;
      var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
      var altContext = elementContext === popper ? reference : popper;
      var popperRect = state.rects.popper;
      var element = state.elements[altBoundary ? altContext : elementContext];
      var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
      var referenceClientRect = getBoundingClientRect(state.elements.reference);
      var popperOffsets = computeOffsets({
        reference: referenceClientRect,
        element: popperRect,
        strategy: 'absolute',
        placement: placement
      });
      var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
      var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
      // 0 or negative = within the clipping rect

      var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
      };
      var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

      if (elementContext === popper && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function (key) {
          var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
          var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
          overflowOffsets[key] += offset[axis] * multiply;
        });
      }

      return overflowOffsets;
    }

    function computeAutoPlacement(state, options) {
      if (options === void 0) {
        options = {};
      }

      var _options = options,
          placement = _options.placement,
          boundary = _options.boundary,
          rootBoundary = _options.rootBoundary,
          padding = _options.padding,
          flipVariations = _options.flipVariations,
          _options$allowedAutoP = _options.allowedAutoPlacements,
          allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
      var variation = getVariation(placement);
      var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
        return getVariation(placement) === variation;
      }) : basePlacements;
      var allowedPlacements = placements$1.filter(function (placement) {
        return allowedAutoPlacements.indexOf(placement) >= 0;
      });

      if (allowedPlacements.length === 0) {
        allowedPlacements = placements$1;

        {
          console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
        }
      } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


      var overflows = allowedPlacements.reduce(function (acc, placement) {
        acc[placement] = detectOverflow(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding
        })[getBasePlacement(placement)];
        return acc;
      }, {});
      return Object.keys(overflows).sort(function (a, b) {
        return overflows[a] - overflows[b];
      });
    }

    function getExpandedFallbackPlacements(placement) {
      if (getBasePlacement(placement) === auto) {
        return [];
      }

      var oppositePlacement = getOppositePlacement(placement);
      return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
    }

    function flip(_ref) {
      var state = _ref.state,
          options = _ref.options,
          name = _ref.name;

      if (state.modifiersData[name]._skip) {
        return;
      }

      var _options$mainAxis = options.mainAxis,
          checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
          specifiedFallbackPlacements = options.fallbackPlacements,
          padding = options.padding,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          _options$flipVariatio = options.flipVariations,
          flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
          allowedAutoPlacements = options.allowedAutoPlacements;
      var preferredPlacement = state.options.placement;
      var basePlacement = getBasePlacement(preferredPlacement);
      var isBasePlacement = basePlacement === preferredPlacement;
      var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
      var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
        return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding,
          flipVariations: flipVariations,
          allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
      }, []);
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var checksMap = new Map();
      var makeFallbackChecks = true;
      var firstFittingPlacement = placements[0];

      for (var i = 0; i < placements.length; i++) {
        var placement = placements[i];

        var _basePlacement = getBasePlacement(placement);

        var isStartVariation = getVariation(placement) === start;
        var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
        var len = isVertical ? 'width' : 'height';
        var overflow = detectOverflow(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          altBoundary: altBoundary,
          padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

        if (referenceRect[len] > popperRect[len]) {
          mainVariationSide = getOppositePlacement(mainVariationSide);
        }

        var altVariationSide = getOppositePlacement(mainVariationSide);
        var checks = [];

        if (checkMainAxis) {
          checks.push(overflow[_basePlacement] <= 0);
        }

        if (checkAltAxis) {
          checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        }

        if (checks.every(function (check) {
          return check;
        })) {
          firstFittingPlacement = placement;
          makeFallbackChecks = false;
          break;
        }

        checksMap.set(placement, checks);
      }

      if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;

        var _loop = function _loop(_i) {
          var fittingPlacement = placements.find(function (placement) {
            var checks = checksMap.get(placement);

            if (checks) {
              return checks.slice(0, _i).every(function (check) {
                return check;
              });
            }
          });

          if (fittingPlacement) {
            firstFittingPlacement = fittingPlacement;
            return "break";
          }
        };

        for (var _i = numberOfChecks; _i > 0; _i--) {
          var _ret = _loop(_i);

          if (_ret === "break") break;
        }
      }

      if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
      }
    } // eslint-disable-next-line import/no-unused-modules


    var flip$1 = {
      name: 'flip',
      enabled: true,
      phase: 'main',
      fn: flip,
      requiresIfExists: ['offset'],
      data: {
        _skip: false
      }
    };

    function getSideOffsets(overflow, rect, preventedOffsets) {
      if (preventedOffsets === void 0) {
        preventedOffsets = {
          x: 0,
          y: 0
        };
      }

      return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
      };
    }

    function isAnySideFullyClipped(overflow) {
      return [top, right, bottom, left].some(function (side) {
        return overflow[side] >= 0;
      });
    }

    function hide(_ref) {
      var state = _ref.state,
          name = _ref.name;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var preventedOffsets = state.modifiersData.preventOverflow;
      var referenceOverflow = detectOverflow(state, {
        elementContext: 'reference'
      });
      var popperAltOverflow = detectOverflow(state, {
        altBoundary: true
      });
      var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
      var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
      var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
      var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
      state.modifiersData[name] = {
        referenceClippingOffsets: referenceClippingOffsets,
        popperEscapeOffsets: popperEscapeOffsets,
        isReferenceHidden: isReferenceHidden,
        hasPopperEscaped: hasPopperEscaped
      };
      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-reference-hidden': isReferenceHidden,
        'data-popper-escaped': hasPopperEscaped
      });
    } // eslint-disable-next-line import/no-unused-modules


    var hide$1 = {
      name: 'hide',
      enabled: true,
      phase: 'main',
      requiresIfExists: ['preventOverflow'],
      fn: hide
    };

    function distanceAndSkiddingToXY(placement, rects, offset) {
      var basePlacement = getBasePlacement(placement);
      var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

      var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
        placement: placement
      })) : offset,
          skidding = _ref[0],
          distance = _ref[1];

      skidding = skidding || 0;
      distance = (distance || 0) * invertDistance;
      return [left, right].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
      } : {
        x: skidding,
        y: distance
      };
    }

    function offset(_ref2) {
      var state = _ref2.state,
          options = _ref2.options,
          name = _ref2.name;
      var _options$offset = options.offset,
          offset = _options$offset === void 0 ? [0, 0] : _options$offset;
      var data = placements.reduce(function (acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
        return acc;
      }, {});
      var _data$state$placement = data[state.placement],
          x = _data$state$placement.x,
          y = _data$state$placement.y;

      if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
      }

      state.modifiersData[name] = data;
    } // eslint-disable-next-line import/no-unused-modules


    var offset$1 = {
      name: 'offset',
      enabled: true,
      phase: 'main',
      requires: ['popperOffsets'],
      fn: offset
    };

    function popperOffsets(_ref) {
      var state = _ref.state,
          name = _ref.name;
      // Offsets are the actual position the popper needs to have to be
      // properly positioned near its reference element
      // This is the most basic placement, and will be adjusted by
      // the modifiers in the next step
      state.modifiersData[name] = computeOffsets({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: 'absolute',
        placement: state.placement
      });
    } // eslint-disable-next-line import/no-unused-modules


    var popperOffsets$1 = {
      name: 'popperOffsets',
      enabled: true,
      phase: 'read',
      fn: popperOffsets,
      data: {}
    };

    function getAltAxis(axis) {
      return axis === 'x' ? 'y' : 'x';
    }

    function preventOverflow(_ref) {
      var state = _ref.state,
          options = _ref.options,
          name = _ref.name;
      var _options$mainAxis = options.mainAxis,
          checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          padding = options.padding,
          _options$tether = options.tether,
          tether = _options$tether === void 0 ? true : _options$tether,
          _options$tetherOffset = options.tetherOffset,
          tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
      var overflow = detectOverflow(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
      });
      var basePlacement = getBasePlacement(state.placement);
      var variation = getVariation(state.placement);
      var isBasePlacement = !variation;
      var mainAxis = getMainAxisFromPlacement(basePlacement);
      var altAxis = getAltAxis(mainAxis);
      var popperOffsets = state.modifiersData.popperOffsets;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
      })) : tetherOffset;
      var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
      } : Object.assign({
        mainAxis: 0,
        altAxis: 0
      }, tetherOffsetValue);
      var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
      var data = {
        x: 0,
        y: 0
      };

      if (!popperOffsets) {
        return;
      }

      if (checkMainAxis) {
        var _offsetModifierState$;

        var mainSide = mainAxis === 'y' ? top : left;
        var altSide = mainAxis === 'y' ? bottom : right;
        var len = mainAxis === 'y' ? 'height' : 'width';
        var offset = popperOffsets[mainAxis];
        var min$1 = offset + overflow[mainSide];
        var max$1 = offset - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === start ? referenceRect[len] : popperRect[len];
        var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds

        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
          width: 0,
          height: 0
        };
        var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)

        var arrowLen = within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset + maxOffset - offsetModifierValue;
        var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
        popperOffsets[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset;
      }

      if (checkAltAxis) {
        var _offsetModifierState$2;

        var _mainSide = mainAxis === 'x' ? top : left;

        var _altSide = mainAxis === 'x' ? bottom : right;

        var _offset = popperOffsets[altAxis];

        var _len = altAxis === 'y' ? 'height' : 'width';

        var _min = _offset + overflow[_mainSide];

        var _max = _offset - overflow[_altSide];

        var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

        var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

        popperOffsets[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
      }

      state.modifiersData[name] = data;
    } // eslint-disable-next-line import/no-unused-modules


    var preventOverflow$1 = {
      name: 'preventOverflow',
      enabled: true,
      phase: 'main',
      fn: preventOverflow,
      requiresIfExists: ['offset']
    };

    function getHTMLElementScroll(element) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }

    function getNodeScroll(node) {
      if (node === getWindow(node) || !isHTMLElement(node)) {
        return getWindowScroll(node);
      } else {
        return getHTMLElementScroll(node);
      }
    }

    function isElementScaled(element) {
      var rect = element.getBoundingClientRect();
      var scaleX = round$1(rect.width) / element.offsetWidth || 1;
      var scaleY = round$1(rect.height) / element.offsetHeight || 1;
      return scaleX !== 1 || scaleY !== 1;
    } // Returns the composite rect of an element relative to its offsetParent.
    // Composite means it takes into account transforms as well as layout.


    function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
      if (isFixed === void 0) {
        isFixed = false;
      }

      var isOffsetParentAnElement = isHTMLElement(offsetParent);
      var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
      var documentElement = getDocumentElement(offsetParent);
      var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
      var scroll = {
        scrollLeft: 0,
        scrollTop: 0
      };
      var offsets = {
        x: 0,
        y: 0
      };

      if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
        isScrollParent(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }

        if (isHTMLElement(offsetParent)) {
          offsets = getBoundingClientRect(offsetParent, true);
          offsets.x += offsetParent.clientLeft;
          offsets.y += offsetParent.clientTop;
        } else if (documentElement) {
          offsets.x = getWindowScrollBarX(documentElement);
        }
      }

      return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
      };
    }

    function order(modifiers) {
      var map = new Map();
      var visited = new Set();
      var result = [];
      modifiers.forEach(function (modifier) {
        map.set(modifier.name, modifier);
      }); // On visiting object, check for its dependencies and visit them recursively

      function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function (dep) {
          if (!visited.has(dep)) {
            var depModifier = map.get(dep);

            if (depModifier) {
              sort(depModifier);
            }
          }
        });
        result.push(modifier);
      }

      modifiers.forEach(function (modifier) {
        if (!visited.has(modifier.name)) {
          // check for visited object
          sort(modifier);
        }
      });
      return result;
    }

    function orderModifiers(modifiers) {
      // order based on dependencies
      var orderedModifiers = order(modifiers); // order based on phase

      return modifierPhases.reduce(function (acc, phase) {
        return acc.concat(orderedModifiers.filter(function (modifier) {
          return modifier.phase === phase;
        }));
      }, []);
    }

    function debounce(fn) {
      var pending;
      return function () {
        if (!pending) {
          pending = new Promise(function (resolve) {
            Promise.resolve().then(function () {
              pending = undefined;
              resolve(fn());
            });
          });
        }

        return pending;
      };
    }

    function format(str) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return [].concat(args).reduce(function (p, c) {
        return p.replace(/%s/, c);
      }, str);
    }

    var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
    var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
    var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
    function validateModifiers(modifiers) {
      modifiers.forEach(function (modifier) {
        [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
        .filter(function (value, index, self) {
          return self.indexOf(value) === index;
        }).forEach(function (key) {
          switch (key) {
            case 'name':
              if (typeof modifier.name !== 'string') {
                console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
              }

              break;

            case 'enabled':
              if (typeof modifier.enabled !== 'boolean') {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
              }

              break;

            case 'phase':
              if (modifierPhases.indexOf(modifier.phase) < 0) {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
              }

              break;

            case 'fn':
              if (typeof modifier.fn !== 'function') {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
              }

              break;

            case 'effect':
              if (modifier.effect != null && typeof modifier.effect !== 'function') {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
              }

              break;

            case 'requires':
              if (modifier.requires != null && !Array.isArray(modifier.requires)) {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
              }

              break;

            case 'requiresIfExists':
              if (!Array.isArray(modifier.requiresIfExists)) {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
              }

              break;

            case 'options':
            case 'data':
              break;

            default:
              console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
                return "\"" + s + "\"";
              }).join(', ') + "; but \"" + key + "\" was provided.");
          }

          modifier.requires && modifier.requires.forEach(function (requirement) {
            if (modifiers.find(function (mod) {
              return mod.name === requirement;
            }) == null) {
              console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
            }
          });
        });
      });
    }

    function uniqueBy(arr, fn) {
      var identifiers = new Set();
      return arr.filter(function (item) {
        var identifier = fn(item);

        if (!identifiers.has(identifier)) {
          identifiers.add(identifier);
          return true;
        }
      });
    }

    function mergeByName(modifiers) {
      var merged = modifiers.reduce(function (merged, current) {
        var existing = merged[current.name];
        merged[current.name] = existing ? Object.assign({}, existing, current, {
          options: Object.assign({}, existing.options, current.options),
          data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged;
      }, {}); // IE11 does not support Object.values

      return Object.keys(merged).map(function (key) {
        return merged[key];
      });
    }

    var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
    var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
    var DEFAULT_OPTIONS = {
      placement: 'bottom',
      modifiers: [],
      strategy: 'absolute'
    };

    function areValidElements() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return !args.some(function (element) {
        return !(element && typeof element.getBoundingClientRect === 'function');
      });
    }

    function popperGenerator(generatorOptions) {
      if (generatorOptions === void 0) {
        generatorOptions = {};
      }

      var _generatorOptions = generatorOptions,
          _generatorOptions$def = _generatorOptions.defaultModifiers,
          defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
          _generatorOptions$def2 = _generatorOptions.defaultOptions,
          defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
      return function createPopper(reference, popper, options) {
        if (options === void 0) {
          options = defaultOptions;
        }

        var state = {
          placement: 'bottom',
          orderedModifiers: [],
          options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
          modifiersData: {},
          elements: {
            reference: reference,
            popper: popper
          },
          attributes: {},
          styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
          state: state,
          setOptions: function setOptions(setOptionsAction) {
            var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
            cleanupModifierEffects();
            state.options = Object.assign({}, defaultOptions, state.options, options);
            state.scrollParents = {
              reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
              popper: listScrollParents(popper)
            }; // Orders the modifiers based on their dependencies and `phase`
            // properties

            var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

            state.orderedModifiers = orderedModifiers.filter(function (m) {
              return m.enabled;
            }); // Validate the provided modifiers so that the consumer will get warned
            // if one of the modifiers is invalid for any reason

            {
              var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
                var name = _ref.name;
                return name;
              });
              validateModifiers(modifiers);

              if (getBasePlacement(state.options.placement) === auto) {
                var flipModifier = state.orderedModifiers.find(function (_ref2) {
                  var name = _ref2.name;
                  return name === 'flip';
                });

                if (!flipModifier) {
                  console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
                }
              }

              var _getComputedStyle = getComputedStyle(popper),
                  marginTop = _getComputedStyle.marginTop,
                  marginRight = _getComputedStyle.marginRight,
                  marginBottom = _getComputedStyle.marginBottom,
                  marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
              // cause bugs with positioning, so we'll warn the consumer


              if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
                return parseFloat(margin);
              })) {
                console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
              }
            }

            runModifierEffects();
            return instance.update();
          },
          // Sync update – it will always be executed, even if not necessary. This
          // is useful for low frequency updates where sync behavior simplifies the
          // logic.
          // For high frequency updates (e.g. `resize` and `scroll` events), always
          // prefer the async Popper#update method
          forceUpdate: function forceUpdate() {
            if (isDestroyed) {
              return;
            }

            var _state$elements = state.elements,
                reference = _state$elements.reference,
                popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
            // anymore

            if (!areValidElements(reference, popper)) {
              {
                console.error(INVALID_ELEMENT_ERROR);
              }

              return;
            } // Store the reference and popper rects to be read by modifiers


            state.rects = {
              reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
              popper: getLayoutRect(popper)
            }; // Modifiers have the ability to reset the current update cycle. The
            // most common use case for this is the `flip` modifier changing the
            // placement, which then needs to re-run all the modifiers, because the
            // logic was previously ran for the previous placement and is therefore
            // stale/incorrect

            state.reset = false;
            state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
            // is filled with the initial data specified by the modifier. This means
            // it doesn't persist and is fresh on each update.
            // To ensure persistent data, use `${name}#persistent`

            state.orderedModifiers.forEach(function (modifier) {
              return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
            });
            var __debug_loops__ = 0;

            for (var index = 0; index < state.orderedModifiers.length; index++) {
              {
                __debug_loops__ += 1;

                if (__debug_loops__ > 100) {
                  console.error(INFINITE_LOOP_ERROR);
                  break;
                }
              }

              if (state.reset === true) {
                state.reset = false;
                index = -1;
                continue;
              }

              var _state$orderedModifie = state.orderedModifiers[index],
                  fn = _state$orderedModifie.fn,
                  _state$orderedModifie2 = _state$orderedModifie.options,
                  _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                  name = _state$orderedModifie.name;

              if (typeof fn === 'function') {
                state = fn({
                  state: state,
                  options: _options,
                  name: name,
                  instance: instance
                }) || state;
              }
            }
          },
          // Async and optimistically optimized update – it will not be executed if
          // not necessary (debounced to run at most once-per-tick)
          update: debounce(function () {
            return new Promise(function (resolve) {
              instance.forceUpdate();
              resolve(state);
            });
          }),
          destroy: function destroy() {
            cleanupModifierEffects();
            isDestroyed = true;
          }
        };

        if (!areValidElements(reference, popper)) {
          {
            console.error(INVALID_ELEMENT_ERROR);
          }

          return instance;
        }

        instance.setOptions(options).then(function (state) {
          if (!isDestroyed && options.onFirstUpdate) {
            options.onFirstUpdate(state);
          }
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.

        function runModifierEffects() {
          state.orderedModifiers.forEach(function (_ref3) {
            var name = _ref3.name,
                _ref3$options = _ref3.options,
                options = _ref3$options === void 0 ? {} : _ref3$options,
                effect = _ref3.effect;

            if (typeof effect === 'function') {
              var cleanupFn = effect({
                state: state,
                name: name,
                instance: instance,
                options: options
              });

              var noopFn = function noopFn() {};

              effectCleanupFns.push(cleanupFn || noopFn);
            }
          });
        }

        function cleanupModifierEffects() {
          effectCleanupFns.forEach(function (fn) {
            return fn();
          });
          effectCleanupFns = [];
        }

        return instance;
      };
    }

    var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
    var createPopper = /*#__PURE__*/popperGenerator({
      defaultModifiers: defaultModifiers
    }); // eslint-disable-next-line import/no-unused-modules

    function getContainer$1(container) {
      return typeof container === 'function' ? container() : container;
    }

    /**
     * Portals provide a first-class way to render children into a DOM node
     * that exists outside the DOM hierarchy of the parent component.
     */
    const Portal = /*#__PURE__*/React__namespace.forwardRef(function Portal(props, ref) {
      const {
        children,
        container,
        disablePortal = false
      } = props;
      const [mountNode, setMountNode] = React__namespace.useState(null);
      const handleRef = useForkRef( /*#__PURE__*/React__namespace.isValidElement(children) ? children.ref : null, ref);
      useEnhancedEffect$1(() => {
        if (!disablePortal) {
          setMountNode(getContainer$1(container) || document.body);
        }
      }, [container, disablePortal]);
      useEnhancedEffect$1(() => {
        if (mountNode && !disablePortal) {
          setRef(ref, mountNode);
          return () => {
            setRef(ref, null);
          };
        }
        return undefined;
      }, [ref, mountNode, disablePortal]);
      if (disablePortal) {
        if ( /*#__PURE__*/React__namespace.isValidElement(children)) {
          return /*#__PURE__*/React__namespace.cloneElement(children, {
            ref: handleRef
          });
        }
        return children;
      }
      return /*#__PURE__*/jsxRuntime.exports.jsx(React__namespace.Fragment, {
        children: mountNode ? /*#__PURE__*/ReactDOM__namespace.createPortal(children, mountNode) : mountNode
      });
    });
    Portal.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The children to render into the `container`.
       */
      children: PropTypes.node,
      /**
       * An HTML element or function that returns one.
       * The `container` will have the portal children appended to it.
       *
       * By default, it uses the body of the top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),
      /**
       * The `children` will be under the DOM hierarchy of the parent component.
       * @default false
       */
      disablePortal: PropTypes.bool
    } ;
    {
      // eslint-disable-next-line
      Portal['propTypes' + ''] = exactProp(Portal.propTypes);
    }
    var Portal$1 = Portal;

    function getPopperUnstyledUtilityClass(slot) {
      return generateUtilityClass('MuiPopperUnstyled', slot);
    }
    generateUtilityClasses('MuiPopperUnstyled', ['root']);

    const _excluded$1O = ["anchorEl", "children", "component", "direction", "disablePortal", "modifiers", "open", "ownerState", "placement", "popperOptions", "popperRef", "slotProps", "slots", "TransitionProps"],
      _excluded2$3 = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition"];
    function flipPlacement(placement, direction) {
      if (direction === 'ltr') {
        return placement;
      }
      switch (placement) {
        case 'bottom-end':
          return 'bottom-start';
        case 'bottom-start':
          return 'bottom-end';
        case 'top-end':
          return 'top-start';
        case 'top-start':
          return 'top-end';
        default:
          return placement;
      }
    }
    function resolveAnchorEl$1(anchorEl) {
      return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
    }
    const useUtilityClasses$1w = () => {
      const slots = {
        root: ['root']
      };
      return composeClasses(slots, getPopperUnstyledUtilityClass, {});
    };
    const defaultPopperOptions = {};

    /* eslint-disable react/prop-types */
    const PopperTooltip = /*#__PURE__*/React__namespace.forwardRef(function PopperTooltip(props, ref) {
      var _ref;
      const {
          anchorEl,
          children,
          component,
          direction,
          disablePortal,
          modifiers,
          open,
          ownerState,
          placement: initialPlacement,
          popperOptions,
          popperRef: popperRefProp,
          slotProps = {},
          slots = {},
          TransitionProps
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1O);
      const tooltipRef = React__namespace.useRef(null);
      const ownRef = useForkRef(tooltipRef, ref);
      const popperRef = React__namespace.useRef(null);
      const handlePopperRef = useForkRef(popperRef, popperRefProp);
      const handlePopperRefRef = React__namespace.useRef(handlePopperRef);
      useEnhancedEffect$1(() => {
        handlePopperRefRef.current = handlePopperRef;
      }, [handlePopperRef]);
      React__namespace.useImperativeHandle(popperRefProp, () => popperRef.current, []);
      const rtlPlacement = flipPlacement(initialPlacement, direction);
      /**
       * placement initialized from prop but can change during lifetime if modifiers.flip.
       * modifiers.flip is essentially a flip for controlled/uncontrolled behavior
       */
      const [placement, setPlacement] = React__namespace.useState(rtlPlacement);
      React__namespace.useEffect(() => {
        if (popperRef.current) {
          popperRef.current.forceUpdate();
        }
      });
      useEnhancedEffect$1(() => {
        if (!anchorEl || !open) {
          return undefined;
        }
        const handlePopperUpdate = data => {
          setPlacement(data.placement);
        };
        const resolvedAnchorEl = resolveAnchorEl$1(anchorEl);
        {
          if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
            const box = resolvedAnchorEl.getBoundingClientRect();
            if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
              console.warn(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
            }
          }
        }
        let popperModifiers = [{
          name: 'preventOverflow',
          options: {
            altBoundary: disablePortal
          }
        }, {
          name: 'flip',
          options: {
            altBoundary: disablePortal
          }
        }, {
          name: 'onUpdate',
          enabled: true,
          phase: 'afterWrite',
          fn: ({
            state
          }) => {
            handlePopperUpdate(state);
          }
        }];
        if (modifiers != null) {
          popperModifiers = popperModifiers.concat(modifiers);
        }
        if (popperOptions && popperOptions.modifiers != null) {
          popperModifiers = popperModifiers.concat(popperOptions.modifiers);
        }
        const popper = createPopper(resolveAnchorEl$1(anchorEl), tooltipRef.current, _extends({
          placement: rtlPlacement
        }, popperOptions, {
          modifiers: popperModifiers
        }));
        handlePopperRefRef.current(popper);
        return () => {
          popper.destroy();
          handlePopperRefRef.current(null);
        };
      }, [anchorEl, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
      const childProps = {
        placement
      };
      if (TransitionProps !== null) {
        childProps.TransitionProps = TransitionProps;
      }
      const classes = useUtilityClasses$1w();
      const Root = (_ref = component != null ? component : slots.root) != null ? _ref : 'div';
      const rootProps = useSlotProps({
        elementType: Root,
        externalSlotProps: slotProps.root,
        externalForwardedProps: other,
        additionalProps: {
          role: 'tooltip',
          ref: ownRef
        },
        ownerState: _extends({}, props, ownerState),
        className: classes.root
      });
      return /*#__PURE__*/jsxRuntime.exports.jsx(Root, _extends({}, rootProps, {
        children: typeof children === 'function' ? children(childProps) : children
      }));
    });
    /* eslint-enable react/prop-types */

    /**
     * Poppers rely on the 3rd party library [Popper.js](https://popper.js.org/docs/v2/) for positioning.
     */
    const PopperUnstyled = /*#__PURE__*/React__namespace.forwardRef(function PopperUnstyled(props, ref) {
      const {
          anchorEl,
          children,
          container: containerProp,
          direction = 'ltr',
          disablePortal = false,
          keepMounted = false,
          modifiers,
          open,
          placement = 'bottom',
          popperOptions = defaultPopperOptions,
          popperRef,
          style,
          transition = false
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded2$3);
      const [exited, setExited] = React__namespace.useState(true);
      const handleEnter = () => {
        setExited(false);
      };
      const handleExited = () => {
        setExited(true);
      };
      if (!keepMounted && !open && (!transition || exited)) {
        return null;
      }

      // If the container prop is provided, use that
      // If the anchorEl prop is provided, use its parent body element as the container
      // If neither are provided let the Modal take care of choosing the container
      const container = containerProp || (anchorEl ? ownerDocument(resolveAnchorEl$1(anchorEl)).body : undefined);
      return /*#__PURE__*/jsxRuntime.exports.jsx(Portal$1, {
        disablePortal: disablePortal,
        container: container,
        children: /*#__PURE__*/jsxRuntime.exports.jsx(PopperTooltip, _extends({
          anchorEl: anchorEl,
          direction: direction,
          disablePortal: disablePortal,
          modifiers: modifiers,
          ref: ref,
          open: transition ? !exited : open,
          placement: placement,
          popperOptions: popperOptions,
          popperRef: popperRef
        }, other, {
          style: _extends({
            // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
            position: 'fixed',
            // Fix Popper.js display issue
            top: 0,
            left: 0,
            display: !open && keepMounted && (!transition || exited) ? 'none' : null
          }, style),
          TransitionProps: transition ? {
            in: open,
            onEnter: handleEnter,
            onExited: handleExited
          } : null,
          children: children
        }))
      });
    });
    PopperUnstyled.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
       * or a function that returns either.
       * It's used to set the position of the popper.
       * The return value will passed as the reference object of the Popper instance.
       */
      anchorEl: chainPropTypes(PropTypes.oneOfType([HTMLElementType, PropTypes.object, PropTypes.func]), props => {
        if (props.open) {
          const resolvedAnchorEl = resolveAnchorEl$1(props.anchorEl);
          if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
            const box = resolvedAnchorEl.getBoundingClientRect();
            if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
              return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
            }
          } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== 'function' || resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {
            return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', 'It should be an HTML element instance or a virtualElement ', '(https://popper.js.org/docs/v2/virtual-elements/).'].join('\n'));
          }
        }
        return null;
      }),
      /**
       * Popper render function or node.
       */
      children: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.node, PropTypes.func]),
      /**
       * An HTML element or function that returns one.
       * The `container` will have the portal children appended to it.
       *
       * By default, it uses the body of the top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),
      /**
       * Direction of the text.
       * @default 'ltr'
       */
      direction: PropTypes.oneOf(['ltr', 'rtl']),
      /**
       * The `children` will be under the DOM hierarchy of the parent component.
       * @default false
       */
      disablePortal: PropTypes.bool,
      /**
       * Always keep the children in the DOM.
       * This prop can be useful in SEO situation or
       * when you want to maximize the responsiveness of the Popper.
       * @default false
       */
      keepMounted: PropTypes.bool,
      /**
       * Popper.js is based on a "plugin-like" architecture,
       * most of its features are fully encapsulated "modifiers".
       *
       * A modifier is a function that is called each time Popper.js needs to
       * compute the position of the popper.
       * For this reason, modifiers should be very performant to avoid bottlenecks.
       * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
       */
      modifiers: PropTypes.arrayOf(PropTypes.shape({
        data: PropTypes.object,
        effect: PropTypes.func,
        enabled: PropTypes.bool,
        fn: PropTypes.func,
        name: PropTypes.any,
        options: PropTypes.object,
        phase: PropTypes.oneOf(['afterMain', 'afterRead', 'afterWrite', 'beforeMain', 'beforeRead', 'beforeWrite', 'main', 'read', 'write']),
        requires: PropTypes.arrayOf(PropTypes.string),
        requiresIfExists: PropTypes.arrayOf(PropTypes.string)
      })),
      /**
       * If `true`, the component is shown.
       */
      open: PropTypes.bool.isRequired,
      /**
       * Popper placement.
       * @default 'bottom'
       */
      placement: PropTypes.oneOf(['auto-end', 'auto-start', 'auto', 'bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),
      /**
       * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
       * @default {}
       */
      popperOptions: PropTypes.shape({
        modifiers: PropTypes.array,
        onFirstUpdate: PropTypes.func,
        placement: PropTypes.oneOf(['auto-end', 'auto-start', 'auto', 'bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),
        strategy: PropTypes.oneOf(['absolute', 'fixed'])
      }),
      /**
       * A ref that points to the used popper instance.
       */
      popperRef: refType$1,
      /**
       * The props used for each slot inside the Popper.
       * @default {}
       */
      slotProps: PropTypes.shape({
        root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
      }),
      /**
       * The components used for each slot inside the Popper.
       * Either a string to use a HTML element or a component.
       * @default {}
       */
      slots: PropTypes.shape({
        root: PropTypes.elementType
      }),
      /**
       * @ignore
       */
      style: PropTypes.object,
      /**
       * Help supporting a react-transition-group/Transition component.
       * @default false
       */
      transition: PropTypes.bool
    } ;
    var PopperUnstyled$1 = PopperUnstyled;

    // Is a vertical scrollbar displayed?
    function isOverflowing(container) {
      const doc = ownerDocument(container);
      if (doc.body === container) {
        return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
      }
      return container.scrollHeight > container.clientHeight;
    }
    function ariaHidden(element, show) {
      if (show) {
        element.setAttribute('aria-hidden', 'true');
      } else {
        element.removeAttribute('aria-hidden');
      }
    }
    function getPaddingRight(element) {
      return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
    }
    function isAriaHiddenForbiddenOnElement(element) {
      // The forbidden HTML tags are the ones from ARIA specification that
      // can be children of body and can't have aria-hidden attribute.
      // cf. https://www.w3.org/TR/html-aria/#docconformance
      const forbiddenTagNames = ['TEMPLATE', 'SCRIPT', 'STYLE', 'LINK', 'MAP', 'META', 'NOSCRIPT', 'PICTURE', 'COL', 'COLGROUP', 'PARAM', 'SLOT', 'SOURCE', 'TRACK'];
      const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
      const isInputHidden = element.tagName === 'INPUT' && element.getAttribute('type') === 'hidden';
      return isForbiddenTagName || isInputHidden;
    }
    function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {
      const blacklist = [mountElement, currentElement, ...elementsToExclude];
      [].forEach.call(container.children, element => {
        const isNotExcludedElement = blacklist.indexOf(element) === -1;
        const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
        if (isNotExcludedElement && isNotForbiddenElement) {
          ariaHidden(element, show);
        }
      });
    }
    function findIndexOf(items, callback) {
      let idx = -1;
      items.some((item, index) => {
        if (callback(item)) {
          idx = index;
          return true;
        }
        return false;
      });
      return idx;
    }
    function handleContainer(containerInfo, props) {
      const restoreStyle = [];
      const container = containerInfo.container;
      if (!props.disableScrollLock) {
        if (isOverflowing(container)) {
          // Compute the size before applying overflow hidden to avoid any scroll jumps.
          const scrollbarSize = getScrollbarSize(ownerDocument(container));
          restoreStyle.push({
            value: container.style.paddingRight,
            property: 'padding-right',
            el: container
          });
          // Use computed style, here to get the real padding to add our scrollbar width.
          container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;

          // .mui-fixed is a global helper.
          const fixedElements = ownerDocument(container).querySelectorAll('.mui-fixed');
          [].forEach.call(fixedElements, element => {
            restoreStyle.push({
              value: element.style.paddingRight,
              property: 'padding-right',
              el: element
            });
            element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
          });
        }
        let scrollContainer;
        if (container.parentNode instanceof DocumentFragment) {
          scrollContainer = ownerDocument(container).body;
        } else {
          // Improve Gatsby support
          // https://css-tricks.com/snippets/css/force-vertical-scrollbar/
          const parent = container.parentElement;
          const containerWindow = ownerWindow(container);
          scrollContainer = (parent == null ? void 0 : parent.nodeName) === 'HTML' && containerWindow.getComputedStyle(parent).overflowY === 'scroll' ? parent : container;
        }

        // Block the scroll even if no scrollbar is visible to account for mobile keyboard
        // screensize shrink.
        restoreStyle.push({
          value: scrollContainer.style.overflow,
          property: 'overflow',
          el: scrollContainer
        }, {
          value: scrollContainer.style.overflowX,
          property: 'overflow-x',
          el: scrollContainer
        }, {
          value: scrollContainer.style.overflowY,
          property: 'overflow-y',
          el: scrollContainer
        });
        scrollContainer.style.overflow = 'hidden';
      }
      const restore = () => {
        restoreStyle.forEach(({
          value,
          el,
          property
        }) => {
          if (value) {
            el.style.setProperty(property, value);
          } else {
            el.style.removeProperty(property);
          }
        });
      };
      return restore;
    }
    function getHiddenSiblings(container) {
      const hiddenSiblings = [];
      [].forEach.call(container.children, element => {
        if (element.getAttribute('aria-hidden') === 'true') {
          hiddenSiblings.push(element);
        }
      });
      return hiddenSiblings;
    }
    /**
     * @ignore - do not document.
     *
     * Proper state management for containers and the modals in those containers.
     * Simplified, but inspired by react-overlay's ModalManager class.
     * Used by the Modal to ensure proper styling of containers.
     */
    class ModalManager {
      constructor() {
        this.containers = void 0;
        this.modals = void 0;
        this.modals = [];
        this.containers = [];
      }
      add(modal, container) {
        let modalIndex = this.modals.indexOf(modal);
        if (modalIndex !== -1) {
          return modalIndex;
        }
        modalIndex = this.modals.length;
        this.modals.push(modal);

        // If the modal we are adding is already in the DOM.
        if (modal.modalRef) {
          ariaHidden(modal.modalRef, false);
        }
        const hiddenSiblings = getHiddenSiblings(container);
        ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
        const containerIndex = findIndexOf(this.containers, item => item.container === container);
        if (containerIndex !== -1) {
          this.containers[containerIndex].modals.push(modal);
          return modalIndex;
        }
        this.containers.push({
          modals: [modal],
          container,
          restore: null,
          hiddenSiblings
        });
        return modalIndex;
      }
      mount(modal, props) {
        const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
        const containerInfo = this.containers[containerIndex];
        if (!containerInfo.restore) {
          containerInfo.restore = handleContainer(containerInfo, props);
        }
      }
      remove(modal, ariaHiddenState = true) {
        const modalIndex = this.modals.indexOf(modal);
        if (modalIndex === -1) {
          return modalIndex;
        }
        const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
        const containerInfo = this.containers[containerIndex];
        containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
        this.modals.splice(modalIndex, 1);

        // If that was the last modal in a container, clean up the container.
        if (containerInfo.modals.length === 0) {
          // The modal might be closed before it had the chance to be mounted in the DOM.
          if (containerInfo.restore) {
            containerInfo.restore();
          }
          if (modal.modalRef) {
            // In case the modal wasn't in the DOM yet.
            ariaHidden(modal.modalRef, ariaHiddenState);
          }
          ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
          this.containers.splice(containerIndex, 1);
        } else {
          // Otherwise make sure the next top modal is visible to a screen reader.
          const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
          // as soon as a modal is adding its modalRef is undefined. it can't set
          // aria-hidden because the dom element doesn't exist either
          // when modal was unmounted before modalRef gets null
          if (nextTop.modalRef) {
            ariaHidden(nextTop.modalRef, false);
          }
        }
        return modalIndex;
      }
      isTopModal(modal) {
        return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
      }
    }

    function getModalUtilityClass(slot) {
      return generateUtilityClass('MuiModal', slot);
    }
    generateUtilityClasses('MuiModal', ['root', 'hidden']);

    const _excluded$1N = ["children", "classes", "closeAfterTransition", "component", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onKeyDown", "open", "onTransitionEnter", "onTransitionExited", "slotProps", "slots"];
    const useUtilityClasses$1v = ownerState => {
      const {
        open,
        exited,
        classes
      } = ownerState;
      const slots = {
        root: ['root', !open && exited && 'hidden']
      };
      return composeClasses(slots, getModalUtilityClass, classes);
    };
    function getContainer(container) {
      return typeof container === 'function' ? container() : container;
    }
    function getHasTransition(props) {
      return props.children ? props.children.props.hasOwnProperty('in') : false;
    }

    // A modal manager used to track and manage the state of open Modals.
    // Modals don't open on the server so this won't conflict with concurrent requests.
    const defaultManager = new ModalManager();

    /**
     * Modal is a lower-level construct that is leveraged by the following components:
     *
     * - [Dialog](/material-ui/api/dialog/)
     * - [Drawer](/material-ui/api/drawer/)
     * - [Menu](/material-ui/api/menu/)
     * - [Popover](/material-ui/api/popover/)
     *
     * If you are creating a modal dialog, you probably want to use the [Dialog](/material-ui/api/dialog/) component
     * rather than directly using Modal.
     *
     * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
     */
    const ModalUnstyled = /*#__PURE__*/React__namespace.forwardRef(function ModalUnstyled(props, ref) {
      var _props$ariaHidden, _ref;
      const {
          children,
          classes: classesProp,
          closeAfterTransition = false,
          component,
          container,
          disableAutoFocus = false,
          disableEnforceFocus = false,
          disableEscapeKeyDown = false,
          disablePortal = false,
          disableRestoreFocus = false,
          disableScrollLock = false,
          hideBackdrop = false,
          keepMounted = false,
          // private
          // eslint-disable-next-line react/prop-types
          manager = defaultManager,
          onBackdropClick,
          onClose,
          onKeyDown,
          open,
          /* eslint-disable react/prop-types */
          onTransitionEnter,
          onTransitionExited,
          slotProps = {},
          slots = {}
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1N);
      const [exited, setExited] = React__namespace.useState(true);
      const modal = React__namespace.useRef({});
      const mountNodeRef = React__namespace.useRef(null);
      const modalRef = React__namespace.useRef(null);
      const handleRef = useForkRef(modalRef, ref);
      const hasTransition = getHasTransition(props);
      const ariaHiddenProp = (_props$ariaHidden = props['aria-hidden']) != null ? _props$ariaHidden : true;
      const getDoc = () => ownerDocument(mountNodeRef.current);
      const getModal = () => {
        modal.current.modalRef = modalRef.current;
        modal.current.mountNode = mountNodeRef.current;
        return modal.current;
      };
      const handleMounted = () => {
        manager.mount(getModal(), {
          disableScrollLock
        });

        // Fix a bug on Chrome where the scroll isn't initially 0.
        modalRef.current.scrollTop = 0;
      };
      const handleOpen = useEventCallback(() => {
        const resolvedContainer = getContainer(container) || getDoc().body;
        manager.add(getModal(), resolvedContainer);

        // The element was already mounted.
        if (modalRef.current) {
          handleMounted();
        }
      });
      const isTopModal = React__namespace.useCallback(() => manager.isTopModal(getModal()), [manager]);
      const handlePortalRef = useEventCallback(node => {
        mountNodeRef.current = node;
        if (!node) {
          return;
        }
        if (open && isTopModal()) {
          handleMounted();
        } else {
          ariaHidden(modalRef.current, ariaHiddenProp);
        }
      });
      const handleClose = React__namespace.useCallback(() => {
        manager.remove(getModal(), ariaHiddenProp);
      }, [manager, ariaHiddenProp]);
      React__namespace.useEffect(() => {
        return () => {
          handleClose();
        };
      }, [handleClose]);
      React__namespace.useEffect(() => {
        if (open) {
          handleOpen();
        } else if (!hasTransition || !closeAfterTransition) {
          handleClose();
        }
      }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
      const ownerState = _extends({}, props, {
        classes: classesProp,
        closeAfterTransition,
        disableAutoFocus,
        disableEnforceFocus,
        disableEscapeKeyDown,
        disablePortal,
        disableRestoreFocus,
        disableScrollLock,
        exited,
        hideBackdrop,
        keepMounted
      });
      const classes = useUtilityClasses$1v(ownerState);
      const handleEnter = () => {
        setExited(false);
        if (onTransitionEnter) {
          onTransitionEnter();
        }
      };
      const handleExited = () => {
        setExited(true);
        if (onTransitionExited) {
          onTransitionExited();
        }
        if (closeAfterTransition) {
          handleClose();
        }
      };
      const handleBackdropClick = event => {
        if (event.target !== event.currentTarget) {
          return;
        }
        if (onBackdropClick) {
          onBackdropClick(event);
        }
        if (onClose) {
          onClose(event, 'backdropClick');
        }
      };
      const handleKeyDown = event => {
        if (onKeyDown) {
          onKeyDown(event);
        }

        // The handler doesn't take event.defaultPrevented into account:
        //
        // event.preventDefault() is meant to stop default behaviors like
        // clicking a checkbox to check it, hitting a button to submit a form,
        // and hitting left arrow to move the cursor in a text input etc.
        // Only special HTML elements have these default behaviors.
        if (event.key !== 'Escape' || !isTopModal()) {
          return;
        }
        if (!disableEscapeKeyDown) {
          // Swallow the event, in case someone is listening for the escape key on the body.
          event.stopPropagation();
          if (onClose) {
            onClose(event, 'escapeKeyDown');
          }
        }
      };
      const childProps = {};
      if (children.props.tabIndex === undefined) {
        childProps.tabIndex = '-1';
      }

      // It's a Transition like component
      if (hasTransition) {
        childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);
        childProps.onExited = createChainedFunction(handleExited, children.props.onExited);
      }
      const Root = (_ref = component != null ? component : slots.root) != null ? _ref : 'div';
      const rootProps = useSlotProps({
        elementType: Root,
        externalSlotProps: slotProps.root,
        externalForwardedProps: other,
        additionalProps: {
          ref: handleRef,
          role: 'presentation',
          onKeyDown: handleKeyDown
        },
        className: classes.root,
        ownerState
      });
      const BackdropComponent = slots.backdrop;
      const backdropProps = useSlotProps({
        elementType: BackdropComponent,
        externalSlotProps: slotProps.backdrop,
        additionalProps: {
          'aria-hidden': true,
          onClick: handleBackdropClick,
          open
        },
        className: classes.backdrop,
        ownerState
      });
      if (!keepMounted && !open && (!hasTransition || exited)) {
        return null;
      }
      return /*#__PURE__*/jsxRuntime.exports.jsx(Portal$1, {
        ref: handlePortalRef,
        container: container,
        disablePortal: disablePortal,
        children: /*#__PURE__*/jsxRuntime.exports.jsxs(Root, _extends({}, rootProps, {
          children: [!hideBackdrop && BackdropComponent ? /*#__PURE__*/jsxRuntime.exports.jsx(BackdropComponent, _extends({}, backdropProps)) : null, /*#__PURE__*/jsxRuntime.exports.jsx(FocusTrap, {
            disableEnforceFocus: disableEnforceFocus,
            disableAutoFocus: disableAutoFocus,
            disableRestoreFocus: disableRestoreFocus,
            isEnabled: isTopModal,
            open: open,
            children: /*#__PURE__*/React__namespace.cloneElement(children, childProps)
          })]
        }))
      });
    });
    ModalUnstyled.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * A single child content element.
       */
      children: elementAcceptingRef$1.isRequired,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * When set to true the Modal waits until a nested Transition is completed before closing.
       * @default false
       */
      closeAfterTransition: PropTypes.bool,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * An HTML element or function that returns one.
       * The `container` will have the portal children appended to it.
       *
       * By default, it uses the body of the top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),
      /**
       * If `true`, the modal will not automatically shift focus to itself when it opens, and
       * replace it to the last focused element when it closes.
       * This also works correctly with any modal children that have the `disableAutoFocus` prop.
       *
       * Generally this should never be set to `true` as it makes the modal less
       * accessible to assistive technologies, like screen readers.
       * @default false
       */
      disableAutoFocus: PropTypes.bool,
      /**
       * If `true`, the modal will not prevent focus from leaving the modal while open.
       *
       * Generally this should never be set to `true` as it makes the modal less
       * accessible to assistive technologies, like screen readers.
       * @default false
       */
      disableEnforceFocus: PropTypes.bool,
      /**
       * If `true`, hitting escape will not fire the `onClose` callback.
       * @default false
       */
      disableEscapeKeyDown: PropTypes.bool,
      /**
       * The `children` will be under the DOM hierarchy of the parent component.
       * @default false
       */
      disablePortal: PropTypes.bool,
      /**
       * If `true`, the modal will not restore focus to previously focused element once
       * modal is hidden or unmounted.
       * @default false
       */
      disableRestoreFocus: PropTypes.bool,
      /**
       * Disable the scroll lock behavior.
       * @default false
       */
      disableScrollLock: PropTypes.bool,
      /**
       * If `true`, the backdrop is not rendered.
       * @default false
       */
      hideBackdrop: PropTypes.bool,
      /**
       * Always keep the children in the DOM.
       * This prop can be useful in SEO situation or
       * when you want to maximize the responsiveness of the Modal.
       * @default false
       */
      keepMounted: PropTypes.bool,
      /**
       * Callback fired when the backdrop is clicked.
       * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
       */
      onBackdropClick: PropTypes.func,
      /**
       * Callback fired when the component requests to be closed.
       * The `reason` parameter can optionally be used to control the response to `onClose`.
       *
       * @param {object} event The event source of the callback.
       * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
       */
      onClose: PropTypes.func,
      /**
       * @ignore
       */
      onKeyDown: PropTypes.func,
      /**
       * If `true`, the component is shown.
       */
      open: PropTypes.bool.isRequired,
      /**
       * The props used for each slot inside the Modal.
       * @default {}
       */
      slotProps: PropTypes.shape({
        backdrop: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
      }),
      /**
       * The components used for each slot inside the Modal.
       * Either a string to use a HTML element or a component.
       * @default {}
       */
      slots: PropTypes.shape({
        backdrop: PropTypes.elementType,
        root: PropTypes.elementType
      })
    } ;
    var ModalUnstyled$1 = ModalUnstyled;

    function getSliderUtilityClass(slot) {
      return generateUtilityClass('MuiSlider', slot);
    }
    const sliderUnstyledClasses = generateUtilityClasses('MuiSlider', ['root', 'active', 'focusVisible', 'disabled', 'dragging', 'marked', 'vertical', 'trackInverted', 'trackFalse', 'rail', 'track', 'mark', 'markActive', 'markLabel', 'markLabelActive', 'thumb', 'valueLabel', 'valueLabelOpen', 'valueLabelCircle', 'valueLabelLabel']);
    var sliderUnstyledClasses$1 = sliderUnstyledClasses;

    const useValueLabelClasses = props => {
      const {
        open
      } = props;
      const utilityClasses = {
        offset: clsx(open && sliderUnstyledClasses$1.valueLabelOpen),
        circle: sliderUnstyledClasses$1.valueLabelCircle,
        label: sliderUnstyledClasses$1.valueLabelLabel
      };
      return utilityClasses;
    };

    /**
     * @ignore - internal component.
     */
    function SliderValueLabelUnstyled(props) {
      const {
        children,
        className,
        value
      } = props;
      const classes = useValueLabelClasses(props);
      return /*#__PURE__*/React__namespace.cloneElement(children, {
        className: clsx(children.props.className)
      }, /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
        children: [children.props.children, /*#__PURE__*/jsxRuntime.exports.jsx("span", {
          className: clsx(classes.offset, className),
          "aria-hidden": true,
          children: /*#__PURE__*/jsxRuntime.exports.jsx("span", {
            className: classes.circle,
            children: /*#__PURE__*/jsxRuntime.exports.jsx("span", {
              className: classes.label,
              children: value
            })
          })
        })]
      }));
    }
    SliderValueLabelUnstyled.propTypes = {
      children: PropTypes.element.isRequired,
      className: PropTypes.string,
      theme: PropTypes.any,
      value: PropTypes.node
    } ;

    const INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;
    function asc(a, b) {
      return a - b;
    }
    function clamp(value, min, max) {
      if (value == null) {
        return min;
      }
      return Math.min(Math.max(min, value), max);
    }
    function findClosest(values, currentValue) {
      var _values$reduce;
      const {
        index: closestIndex
      } = (_values$reduce = values.reduce((acc, value, index) => {
        const distance = Math.abs(currentValue - value);
        if (acc === null || distance < acc.distance || distance === acc.distance) {
          return {
            distance,
            index
          };
        }
        return acc;
      }, null)) != null ? _values$reduce : {};
      return closestIndex;
    }
    function trackFinger(event, touchId) {
      // The event is TouchEvent
      if (touchId.current !== undefined && event.changedTouches) {
        const touchEvent = event;
        for (let i = 0; i < touchEvent.changedTouches.length; i += 1) {
          const touch = touchEvent.changedTouches[i];
          if (touch.identifier === touchId.current) {
            return {
              x: touch.clientX,
              y: touch.clientY
            };
          }
        }
        return false;
      }

      // The event is MouseEvent
      return {
        x: event.clientX,
        y: event.clientY
      };
    }
    function valueToPercent(value, min, max) {
      return (value - min) * 100 / (max - min);
    }
    function percentToValue(percent, min, max) {
      return (max - min) * percent + min;
    }
    function getDecimalPrecision(num) {
      // This handles the case when num is very small (0.00000001), js will turn this into 1e-8.
      // When num is bigger than 1 or less than -1 it won't get converted to this notation so it's fine.
      if (Math.abs(num) < 1) {
        const parts = num.toExponential().split('e-');
        const matissaDecimalPart = parts[0].split('.')[1];
        return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
      }
      const decimalPart = num.toString().split('.')[1];
      return decimalPart ? decimalPart.length : 0;
    }
    function roundValueToStep(value, step, min) {
      const nearest = Math.round((value - min) / step) * step + min;
      return Number(nearest.toFixed(getDecimalPrecision(step)));
    }
    function setValueIndex({
      values,
      newValue,
      index
    }) {
      const output = values.slice();
      output[index] = newValue;
      return output.sort(asc);
    }
    function focusThumb({
      sliderRef,
      activeIndex,
      setActive
    }) {
      var _sliderRef$current, _doc$activeElement;
      const doc = ownerDocument(sliderRef.current);
      if (!((_sliderRef$current = sliderRef.current) != null && _sliderRef$current.contains(doc.activeElement)) || Number(doc == null ? void 0 : (_doc$activeElement = doc.activeElement) == null ? void 0 : _doc$activeElement.getAttribute('data-index')) !== activeIndex) {
        var _sliderRef$current2;
        (_sliderRef$current2 = sliderRef.current) == null ? void 0 : _sliderRef$current2.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus();
      }
      if (setActive) {
        setActive(activeIndex);
      }
    }
    const axisProps = {
      horizontal: {
        offset: percent => ({
          left: `${percent}%`
        }),
        leap: percent => ({
          width: `${percent}%`
        })
      },
      'horizontal-reverse': {
        offset: percent => ({
          right: `${percent}%`
        }),
        leap: percent => ({
          width: `${percent}%`
        })
      },
      vertical: {
        offset: percent => ({
          bottom: `${percent}%`
        }),
        leap: percent => ({
          height: `${percent}%`
        })
      }
    };
    const Identity$1 = x => x;

    // TODO: remove support for Safari < 13.
    // https://caniuse.com/#search=touch-action
    //
    // Safari, on iOS, supports touch action since v13.
    // Over 80% of the iOS phones are compatible
    // in August 2020.
    // Utilizing the CSS.supports method to check if touch-action is supported.
    // Since CSS.supports is supported on all but Edge@12 and IE and touch-action
    // is supported on both Edge@12 and IE if CSS.supports is not available that means that
    // touch-action will be supported
    let cachedSupportsTouchActionNone;
    function doesSupportTouchActionNone() {
      if (cachedSupportsTouchActionNone === undefined) {
        if (typeof CSS !== 'undefined' && typeof CSS.supports === 'function') {
          cachedSupportsTouchActionNone = CSS.supports('touch-action', 'none');
        } else {
          cachedSupportsTouchActionNone = true;
        }
      }
      return cachedSupportsTouchActionNone;
    }
    function useSlider(parameters) {
      const {
        'aria-labelledby': ariaLabelledby,
        defaultValue,
        disabled = false,
        disableSwap = false,
        isRtl = false,
        marks: marksProp = false,
        max = 100,
        min = 0,
        name,
        onChange,
        onChangeCommitted,
        orientation = 'horizontal',
        ref,
        scale = Identity$1,
        step = 1,
        tabIndex,
        value: valueProp
      } = parameters;
      const touchId = React__namespace.useRef();
      // We can't use the :active browser pseudo-classes.
      // - The active state isn't triggered when clicking on the rail.
      // - The active state isn't transferred when inversing a range slider.
      const [active, setActive] = React__namespace.useState(-1);
      const [open, setOpen] = React__namespace.useState(-1);
      const [dragging, setDragging] = React__namespace.useState(false);
      const moveCount = React__namespace.useRef(0);
      const [valueDerived, setValueState] = useControlled({
        controlled: valueProp,
        default: defaultValue != null ? defaultValue : min,
        name: 'Slider'
      });
      const handleChange = onChange && ((event, value, thumbIndex) => {
        // Redefine target to allow name and value to be read.
        // This allows seamless integration with the most popular form libraries.
        // https://github.com/mui/material-ui/issues/13485#issuecomment-676048492
        // Clone the event to not override `target` of the original event.
        const nativeEvent = event.nativeEvent || event;
        // @ts-ignore The nativeEvent is function, not object
        const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
        Object.defineProperty(clonedEvent, 'target', {
          writable: true,
          value: {
            value,
            name
          }
        });
        onChange(clonedEvent, value, thumbIndex);
      });
      const range = Array.isArray(valueDerived);
      let values = range ? valueDerived.slice().sort(asc) : [valueDerived];
      values = values.map(value => clamp(value, min, max));
      const marks = marksProp === true && step !== null ? [...Array(Math.floor((max - min) / step) + 1)].map((_, index) => ({
        value: min + step * index
      })) : marksProp || [];
      const marksValues = marks.map(mark => mark.value);
      const {
        isFocusVisibleRef,
        onBlur: handleBlurVisible,
        onFocus: handleFocusVisible,
        ref: focusVisibleRef
      } = useIsFocusVisible();
      const [focusedThumbIndex, setFocusedThumbIndex] = React__namespace.useState(-1);
      const sliderRef = React__namespace.useRef();
      const handleFocusRef = useForkRef(focusVisibleRef, sliderRef);
      const handleRef = useForkRef(ref, handleFocusRef);
      const createHandleHiddenInputFocus = otherHandlers => event => {
        var _otherHandlers$onFocu;
        const index = Number(event.currentTarget.getAttribute('data-index'));
        handleFocusVisible(event);
        if (isFocusVisibleRef.current === true) {
          setFocusedThumbIndex(index);
        }
        setOpen(index);
        otherHandlers == null ? void 0 : (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
      };
      const createHandleHiddenInputBlur = otherHandlers => event => {
        var _otherHandlers$onBlur;
        handleBlurVisible(event);
        if (isFocusVisibleRef.current === false) {
          setFocusedThumbIndex(-1);
        }
        setOpen(-1);
        otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
      };
      useEnhancedEffect$1(() => {
        if (disabled && sliderRef.current.contains(document.activeElement)) {
          var _document$activeEleme;
          // This is necessary because Firefox and Safari will keep focus
          // on a disabled element:
          // https://codesandbox.io/s/mui-pr-22247-forked-h151h?file=/src/App.js
          // @ts-ignore
          (_document$activeEleme = document.activeElement) == null ? void 0 : _document$activeEleme.blur();
        }
      }, [disabled]);
      if (disabled && active !== -1) {
        setActive(-1);
      }
      if (disabled && focusedThumbIndex !== -1) {
        setFocusedThumbIndex(-1);
      }
      const createHandleHiddenInputChange = otherHandlers => event => {
        var _otherHandlers$onChan;
        (_otherHandlers$onChan = otherHandlers.onChange) == null ? void 0 : _otherHandlers$onChan.call(otherHandlers, event);
        const index = Number(event.currentTarget.getAttribute('data-index'));
        const value = values[index];
        const marksIndex = marksValues.indexOf(value);

        // @ts-ignore
        let newValue = event.target.valueAsNumber;
        if (marks && step == null) {
          newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];
        }
        newValue = clamp(newValue, min, max);
        if (marks && step == null) {
          const currentMarkIndex = marksValues.indexOf(values[index]);
          newValue = newValue < values[index] ? marksValues[currentMarkIndex - 1] : marksValues[currentMarkIndex + 1];
        }
        if (range) {
          // Bound the new value to the thumb's neighbours.
          if (disableSwap) {
            newValue = clamp(newValue, values[index - 1] || -Infinity, values[index + 1] || Infinity);
          }
          const previousValue = newValue;
          newValue = setValueIndex({
            values,
            newValue,
            index
          });
          let activeIndex = index;

          // Potentially swap the index if needed.
          if (!disableSwap) {
            activeIndex = newValue.indexOf(previousValue);
          }
          focusThumb({
            sliderRef,
            activeIndex
          });
        }
        setValueState(newValue);
        setFocusedThumbIndex(index);
        if (handleChange) {
          handleChange(event, newValue, index);
        }
        if (onChangeCommitted) {
          onChangeCommitted(event, newValue);
        }
      };
      const previousIndex = React__namespace.useRef();
      let axis = orientation;
      if (isRtl && orientation === 'horizontal') {
        axis += '-reverse';
      }
      const getFingerNewValue = ({
        finger,
        move = false
      }) => {
        const {
          current: slider
        } = sliderRef;
        const {
          width,
          height,
          bottom,
          left
        } = slider.getBoundingClientRect();
        let percent;
        if (axis.indexOf('vertical') === 0) {
          percent = (bottom - finger.y) / height;
        } else {
          percent = (finger.x - left) / width;
        }
        if (axis.indexOf('-reverse') !== -1) {
          percent = 1 - percent;
        }
        let newValue;
        newValue = percentToValue(percent, min, max);
        if (step) {
          newValue = roundValueToStep(newValue, step, min);
        } else {
          const closestIndex = findClosest(marksValues, newValue);
          newValue = marksValues[closestIndex];
        }
        newValue = clamp(newValue, min, max);
        let activeIndex = 0;
        if (range) {
          if (!move) {
            activeIndex = findClosest(values, newValue);
          } else {
            activeIndex = previousIndex.current;
          }

          // Bound the new value to the thumb's neighbours.
          if (disableSwap) {
            newValue = clamp(newValue, values[activeIndex - 1] || -Infinity, values[activeIndex + 1] || Infinity);
          }
          const previousValue = newValue;
          newValue = setValueIndex({
            values,
            newValue,
            index: activeIndex
          });

          // Potentially swap the index if needed.
          if (!(disableSwap && move)) {
            activeIndex = newValue.indexOf(previousValue);
            previousIndex.current = activeIndex;
          }
        }
        return {
          newValue,
          activeIndex
        };
      };
      const handleTouchMove = useEventCallback(nativeEvent => {
        const finger = trackFinger(nativeEvent, touchId);
        if (!finger) {
          return;
        }
        moveCount.current += 1;

        // Cancel move in case some other element consumed a mouseup event and it was not fired.
        // @ts-ignore buttons doesn't not exists on touch event
        if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {
          // eslint-disable-next-line @typescript-eslint/no-use-before-define
          handleTouchEnd(nativeEvent);
          return;
        }
        const {
          newValue,
          activeIndex
        } = getFingerNewValue({
          finger,
          move: true
        });
        focusThumb({
          sliderRef,
          activeIndex,
          setActive
        });
        setValueState(newValue);
        if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {
          setDragging(true);
        }
        if (handleChange && newValue !== valueDerived) {
          handleChange(nativeEvent, newValue, activeIndex);
        }
      });
      const handleTouchEnd = useEventCallback(nativeEvent => {
        const finger = trackFinger(nativeEvent, touchId);
        setDragging(false);
        if (!finger) {
          return;
        }
        const {
          newValue
        } = getFingerNewValue({
          finger,
          move: true
        });
        setActive(-1);
        if (nativeEvent.type === 'touchend') {
          setOpen(-1);
        }
        if (onChangeCommitted) {
          onChangeCommitted(nativeEvent, newValue);
        }
        touchId.current = undefined;

        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        stopListening();
      });
      const handleTouchStart = useEventCallback(nativeEvent => {
        if (disabled) {
          return;
        }
        // If touch-action: none; is not supported we need to prevent the scroll manually.
        if (!doesSupportTouchActionNone()) {
          nativeEvent.preventDefault();
        }
        const touch = nativeEvent.changedTouches[0];
        if (touch != null) {
          // A number that uniquely identifies the current finger in the touch session.
          touchId.current = touch.identifier;
        }
        const finger = trackFinger(nativeEvent, touchId);
        if (finger !== false) {
          const {
            newValue,
            activeIndex
          } = getFingerNewValue({
            finger
          });
          focusThumb({
            sliderRef,
            activeIndex,
            setActive
          });
          setValueState(newValue);
          if (handleChange) {
            handleChange(nativeEvent, newValue, activeIndex);
          }
        }
        moveCount.current = 0;
        const doc = ownerDocument(sliderRef.current);
        doc.addEventListener('touchmove', handleTouchMove);
        doc.addEventListener('touchend', handleTouchEnd);
      });
      const stopListening = React__namespace.useCallback(() => {
        const doc = ownerDocument(sliderRef.current);
        doc.removeEventListener('mousemove', handleTouchMove);
        doc.removeEventListener('mouseup', handleTouchEnd);
        doc.removeEventListener('touchmove', handleTouchMove);
        doc.removeEventListener('touchend', handleTouchEnd);
      }, [handleTouchEnd, handleTouchMove]);
      React__namespace.useEffect(() => {
        const {
          current: slider
        } = sliderRef;
        slider.addEventListener('touchstart', handleTouchStart, {
          passive: doesSupportTouchActionNone()
        });
        return () => {
          // @ts-ignore
          slider.removeEventListener('touchstart', handleTouchStart, {
            passive: doesSupportTouchActionNone()
          });
          stopListening();
        };
      }, [stopListening, handleTouchStart]);
      React__namespace.useEffect(() => {
        if (disabled) {
          stopListening();
        }
      }, [disabled, stopListening]);
      const createHandleMouseDown = otherHandlers => event => {
        var _otherHandlers$onMous;
        (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
        if (disabled) {
          return;
        }
        if (event.defaultPrevented) {
          return;
        }

        // Only handle left clicks
        if (event.button !== 0) {
          return;
        }

        // Avoid text selection
        event.preventDefault();
        const finger = trackFinger(event, touchId);
        if (finger !== false) {
          const {
            newValue,
            activeIndex
          } = getFingerNewValue({
            finger
          });
          focusThumb({
            sliderRef,
            activeIndex,
            setActive
          });
          setValueState(newValue);
          if (handleChange) {
            handleChange(event, newValue, activeIndex);
          }
        }
        moveCount.current = 0;
        const doc = ownerDocument(sliderRef.current);
        doc.addEventListener('mousemove', handleTouchMove);
        doc.addEventListener('mouseup', handleTouchEnd);
      };
      const trackOffset = valueToPercent(range ? values[0] : min, min, max);
      const trackLeap = valueToPercent(values[values.length - 1], min, max) - trackOffset;
      const getRootProps = (otherHandlers = {}) => {
        const ownEventHandlers = {
          onMouseDown: createHandleMouseDown(otherHandlers || {})
        };
        const mergedEventHandlers = _extends({}, otherHandlers, ownEventHandlers);
        return _extends({
          ref: handleRef
        }, mergedEventHandlers);
      };
      const createHandleMouseOver = otherHandlers => event => {
        var _otherHandlers$onMous2;
        (_otherHandlers$onMous2 = otherHandlers.onMouseOver) == null ? void 0 : _otherHandlers$onMous2.call(otherHandlers, event);
        const index = Number(event.currentTarget.getAttribute('data-index'));
        setOpen(index);
      };
      const createHandleMouseLeave = otherHandlers => event => {
        var _otherHandlers$onMous3;
        (_otherHandlers$onMous3 = otherHandlers.onMouseLeave) == null ? void 0 : _otherHandlers$onMous3.call(otherHandlers, event);
        setOpen(-1);
      };
      const getThumbProps = (otherHandlers = {}) => {
        const ownEventHandlers = {
          onMouseOver: createHandleMouseOver(otherHandlers || {}),
          onMouseLeave: createHandleMouseLeave(otherHandlers || {})
        };
        return _extends({}, otherHandlers, ownEventHandlers);
      };
      const getHiddenInputProps = (otherHandlers = {}) => {
        var _parameters$step;
        const ownEventHandlers = {
          onChange: createHandleHiddenInputChange(otherHandlers || {}),
          onFocus: createHandleHiddenInputFocus(otherHandlers || {}),
          onBlur: createHandleHiddenInputBlur(otherHandlers || {})
        };
        const mergedEventHandlers = _extends({}, otherHandlers, ownEventHandlers);
        return _extends({
          tabIndex,
          'aria-labelledby': ariaLabelledby,
          'aria-orientation': orientation,
          'aria-valuemax': scale(max),
          'aria-valuemin': scale(min),
          name,
          type: 'range',
          min: parameters.min,
          max: parameters.max,
          step: (_parameters$step = parameters.step) != null ? _parameters$step : undefined,
          disabled
        }, mergedEventHandlers, {
          style: _extends({}, visuallyHidden$1, {
            direction: isRtl ? 'rtl' : 'ltr',
            // So that VoiceOver's focus indicator matches the thumb's dimensions
            width: '100%',
            height: '100%'
          })
        });
      };
      return {
        active,
        axis: axis,
        axisProps,
        dragging,
        focusedThumbIndex,
        getHiddenInputProps,
        getRootProps,
        getThumbProps,
        marks: marks,
        open,
        range,
        trackLeap,
        trackOffset,
        values
      };
    }

    const _excluded$1M = ["aria-label", "aria-valuetext", "aria-labelledby", "className", "component", "classes", "disableSwap", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "orientation", "scale", "step", "tabIndex", "track", "value", "valueLabelDisplay", "valueLabelFormat", "isRtl", "slotProps", "slots"];
    const Identity = x => x;
    const useUtilityClasses$1u = ownerState => {
      const {
        disabled,
        dragging,
        marked,
        orientation,
        track,
        classes
      } = ownerState;
      const slots = {
        root: ['root', disabled && 'disabled', dragging && 'dragging', marked && 'marked', orientation === 'vertical' && 'vertical', track === 'inverted' && 'trackInverted', track === false && 'trackFalse'],
        rail: ['rail'],
        track: ['track'],
        mark: ['mark'],
        markActive: ['markActive'],
        markLabel: ['markLabel'],
        markLabelActive: ['markLabelActive'],
        valueLabel: ['valueLabel'],
        thumb: ['thumb', disabled && 'disabled'],
        active: ['active'],
        disabled: ['disabled'],
        focusVisible: ['focusVisible']
      };
      return composeClasses(slots, getSliderUtilityClass, classes);
    };
    const Forward = ({
      children
    }) => children;
    const SliderUnstyled = /*#__PURE__*/React__namespace.forwardRef(function SliderUnstyled(props, ref) {
      var _ref, _slots$rail, _slots$track, _slots$thumb, _slots$valueLabel, _slots$mark, _slots$markLabel;
      const {
          'aria-label': ariaLabel,
          'aria-valuetext': ariaValuetext,
          'aria-labelledby': ariaLabelledby,
          className,
          component,
          classes: classesProp,
          disableSwap = false,
          disabled = false,
          getAriaLabel,
          getAriaValueText,
          marks: marksProp = false,
          max = 100,
          min = 0,
          orientation = 'horizontal',
          scale = Identity,
          step = 1,
          track = 'normal',
          valueLabelDisplay = 'off',
          valueLabelFormat = Identity,
          isRtl = false,
          slotProps = {},
          slots = {}
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1M);

      // all props with defaults
      // consider extracting to hook an reusing the lint rule for the variants
      const ownerState = _extends({}, props, {
        marks: marksProp,
        classes: classesProp,
        disabled,
        isRtl,
        max,
        min,
        orientation,
        scale,
        step,
        track,
        valueLabelDisplay,
        valueLabelFormat
      });
      const {
        axisProps,
        getRootProps,
        getHiddenInputProps,
        getThumbProps,
        open,
        active,
        axis,
        range,
        focusedThumbIndex,
        dragging,
        marks,
        values,
        trackOffset,
        trackLeap
      } = useSlider(_extends({}, ownerState, {
        ref
      }));
      ownerState.marked = marks.length > 0 && marks.some(mark => mark.label);
      ownerState.dragging = dragging;
      ownerState.focusedThumbIndex = focusedThumbIndex;
      const classes = useUtilityClasses$1u(ownerState);
      const Root = (_ref = component != null ? component : slots.root) != null ? _ref : 'span';
      const rootProps = useSlotProps({
        elementType: Root,
        getSlotProps: getRootProps,
        externalSlotProps: slotProps.root,
        externalForwardedProps: other,
        ownerState,
        className: [classes.root, className]
      });
      const Rail = (_slots$rail = slots.rail) != null ? _slots$rail : 'span';
      const railProps = useSlotProps({
        elementType: Rail,
        externalSlotProps: slotProps.rail,
        ownerState,
        className: classes.rail
      });
      const Track = (_slots$track = slots.track) != null ? _slots$track : 'span';
      const trackProps = useSlotProps({
        elementType: Track,
        externalSlotProps: slotProps.track,
        additionalProps: {
          style: _extends({}, axisProps[axis].offset(trackOffset), axisProps[axis].leap(trackLeap))
        },
        ownerState,
        className: classes.track
      });
      const Thumb = (_slots$thumb = slots.thumb) != null ? _slots$thumb : 'span';
      const thumbProps = useSlotProps({
        elementType: Thumb,
        getSlotProps: getThumbProps,
        externalSlotProps: slotProps.thumb,
        ownerState
      });
      const ValueLabel = (_slots$valueLabel = slots.valueLabel) != null ? _slots$valueLabel : SliderValueLabelUnstyled;
      const valueLabelProps = useSlotProps({
        elementType: ValueLabel,
        externalSlotProps: slotProps.valueLabel,
        ownerState
      });
      const Mark = (_slots$mark = slots.mark) != null ? _slots$mark : 'span';
      const markProps = useSlotProps({
        elementType: Mark,
        externalSlotProps: slotProps.mark,
        ownerState,
        className: classes.mark
      });
      const MarkLabel = (_slots$markLabel = slots.markLabel) != null ? _slots$markLabel : 'span';
      const markLabelProps = useSlotProps({
        elementType: MarkLabel,
        externalSlotProps: slotProps.markLabel,
        ownerState
      });
      const Input = slots.input || 'input';
      const inputProps = useSlotProps({
        elementType: Input,
        getSlotProps: getHiddenInputProps,
        externalSlotProps: slotProps.input,
        ownerState
      });
      return /*#__PURE__*/jsxRuntime.exports.jsxs(Root, _extends({}, rootProps, {
        children: [/*#__PURE__*/jsxRuntime.exports.jsx(Rail, _extends({}, railProps)), /*#__PURE__*/jsxRuntime.exports.jsx(Track, _extends({}, trackProps)), marks.filter(mark => mark.value >= min && mark.value <= max).map((mark, index) => {
          const percent = valueToPercent(mark.value, min, max);
          const style = axisProps[axis].offset(percent);
          let markActive;
          if (track === false) {
            markActive = values.indexOf(mark.value) !== -1;
          } else {
            markActive = track === 'normal' && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === 'inverted' && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);
          }
          return /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
            children: [/*#__PURE__*/jsxRuntime.exports.jsx(Mark, _extends({
              "data-index": index
            }, markProps, !isHostComponent(Mark) && {
              markActive
            }, {
              style: _extends({}, style, markProps.style),
              className: clsx(markProps.className, markActive && classes.markActive)
            })), mark.label != null ? /*#__PURE__*/jsxRuntime.exports.jsx(MarkLabel, _extends({
              "aria-hidden": true,
              "data-index": index
            }, markLabelProps, !isHostComponent(MarkLabel) && {
              markLabelActive: markActive
            }, {
              style: _extends({}, style, markLabelProps.style),
              className: clsx(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
              children: mark.label
            })) : null]
          }, index);
        }), values.map((value, index) => {
          const percent = valueToPercent(value, min, max);
          const style = axisProps[axis].offset(percent);
          const ValueLabelComponent = valueLabelDisplay === 'off' ? Forward : ValueLabel;
          return /*#__PURE__*/jsxRuntime.exports.jsx(React__namespace.Fragment, {
            children: /*#__PURE__*/jsxRuntime.exports.jsx(ValueLabelComponent, _extends({}, !isHostComponent(ValueLabelComponent) && {
              valueLabelFormat,
              valueLabelDisplay,
              value: typeof valueLabelFormat === 'function' ? valueLabelFormat(scale(value), index) : valueLabelFormat,
              index,
              open: open === index || active === index || valueLabelDisplay === 'on',
              disabled
            }, valueLabelProps, {
              className: clsx(classes.valueLabel, valueLabelProps.className),
              children: /*#__PURE__*/jsxRuntime.exports.jsx(Thumb, _extends({
                "data-index": index,
                "data-focusvisible": focusedThumbIndex === index
              }, thumbProps, {
                className: clsx(classes.thumb, thumbProps.className, active === index && classes.active, focusedThumbIndex === index && classes.focusVisible),
                style: _extends({}, style, {
                  pointerEvents: disableSwap && active !== index ? 'none' : undefined
                }, thumbProps.style),
                children: /*#__PURE__*/jsxRuntime.exports.jsx(Input, _extends({
                  "data-index": index,
                  "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
                  "aria-valuenow": scale(value),
                  "aria-labelledby": ariaLabelledby,
                  "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,
                  value: values[index]
                }, inputProps))
              }))
            }))
          }, index);
        })]
      }));
    });
    SliderUnstyled.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The label of the slider.
       */
      'aria-label': chainPropTypes(PropTypes.string, props => {
        const range = Array.isArray(props.value || props.defaultValue);
        if (range && props['aria-label'] != null) {
          return new Error('MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.');
        }
        return null;
      }),
      /**
       * The id of the element containing a label for the slider.
       */
      'aria-labelledby': PropTypes.string,
      /**
       * A string value that provides a user-friendly name for the current value of the slider.
       */
      'aria-valuetext': chainPropTypes(PropTypes.string, props => {
        const range = Array.isArray(props.value || props.defaultValue);
        if (range && props['aria-valuetext'] != null) {
          return new Error('MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.');
        }
        return null;
      }),
      /**
       * @ignore
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * The default value. Use when the component is not controlled.
       */
      defaultValue: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
       * @default false
       */
      disableSwap: PropTypes.bool,
      /**
       * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
       * This is important for screen reader users.
       * @param {number} index The thumb label's index to format.
       * @returns {string}
       */
      getAriaLabel: PropTypes.func,
      /**
       * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
       * This is important for screen reader users.
       * @param {number} value The thumb label's value to format.
       * @param {number} index The thumb label's index to format.
       * @returns {string}
       */
      getAriaValueText: PropTypes.func,
      /**
       * Indicates whether the theme context has rtl direction. It is set automatically.
       * @default false
       */
      isRtl: PropTypes.bool,
      /**
       * Marks indicate predetermined values to which the user can move the slider.
       * If `true` the marks are spaced according the value of the `step` prop.
       * If an array, it should contain objects with `value` and an optional `label` keys.
       * @default false
       */
      marks: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape({
        label: PropTypes.node,
        value: PropTypes.number.isRequired
      })), PropTypes.bool]),
      /**
       * The maximum allowed value of the slider.
       * Should not be equal to min.
       * @default 100
       */
      max: PropTypes.number,
      /**
       * The minimum allowed value of the slider.
       * Should not be equal to max.
       * @default 0
       */
      min: PropTypes.number,
      /**
       * Name attribute of the hidden `input` element.
       */
      name: PropTypes.string,
      /**
       * Callback function that is fired when the slider's value changed.
       *
       * @param {Event} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (any).
       * **Warning**: This is a generic event not a change event.
       * @param {number | number[]} value The new value.
       * @param {number} activeThumb Index of the currently moved thumb.
       */
      onChange: PropTypes.func,
      /**
       * Callback function that is fired when the `mouseup` is triggered.
       *
       * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
       * @param {number | number[]} value The new value.
       */
      onChangeCommitted: PropTypes.func,
      /**
       * The component orientation.
       * @default 'horizontal'
       */
      orientation: PropTypes.oneOf(['horizontal', 'vertical']),
      /**
       * A transformation function, to change the scale of the slider.
       * @default (x) => x
       */
      scale: PropTypes.func,
      /**
       * The props used for each slot inside the Slider.
       * @default {}
       */
      slotProps: PropTypes.shape({
        input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        mark: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        markLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        rail: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        thumb: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        track: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        valueLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
          children: PropTypes.element,
          className: PropTypes.string,
          open: PropTypes.bool,
          style: PropTypes.object,
          value: PropTypes.number,
          valueLabelDisplay: PropTypes.oneOf(['auto', 'off', 'on'])
        })])
      }),
      /**
       * The components used for each slot inside the Slider.
       * Either a string to use a HTML element or a component.
       * @default {}
       */
      slots: PropTypes.shape({
        input: PropTypes.elementType,
        mark: PropTypes.elementType,
        markLabel: PropTypes.elementType,
        rail: PropTypes.elementType,
        root: PropTypes.elementType,
        thumb: PropTypes.elementType,
        track: PropTypes.elementType,
        valueLabel: PropTypes.elementType
      }),
      /**
       * The granularity with which the slider can step through values. (A "discrete" slider.)
       * The `min` prop serves as the origin for the valid values.
       * We recommend (max - min) to be evenly divisible by the step.
       *
       * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
       * @default 1
       */
      step: PropTypes.number,
      /**
       * Tab index attribute of the hidden `input` element.
       */
      tabIndex: PropTypes.number,
      /**
       * The track presentation:
       *
       * - `normal` the track will render a bar representing the slider value.
       * - `inverted` the track will render a bar representing the remaining slider value.
       * - `false` the track will render without a bar.
       * @default 'normal'
       */
      track: PropTypes.oneOf(['inverted', 'normal', false]),
      /**
       * The value of the slider.
       * For ranged sliders, provide an array with two values.
       */
      value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),
      /**
       * Controls when the value label is displayed:
       *
       * - `auto` the value label will display when the thumb is hovered or focused.
       * - `on` will display persistently.
       * - `off` will never display.
       * @default 'off'
       */
      valueLabelDisplay: PropTypes.oneOf(['auto', 'off', 'on']),
      /**
       * The format function the value label's value.
       *
       * When a function is provided, it should have the following signature:
       *
       * - {number} value The value label's value to format
       * - {number} index The value label's index to format
       * @default (x) => x
       */
      valueLabelFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string])
    } ;
    var SliderUnstyled$1 = SliderUnstyled;

    const _excluded$1L = ["onChange", "maxRows", "minRows", "style", "value"];
    function getStyleValue(computedStyle, property) {
      return parseInt(computedStyle[property], 10) || 0;
    }
    const styles$5 = {
      shadow: {
        // Visibility needed to hide the extra text area on iPads
        visibility: 'hidden',
        // Remove from the content flow
        position: 'absolute',
        // Ignore the scrollbar width
        overflow: 'hidden',
        height: 0,
        top: 0,
        left: 0,
        // Create a new layer, increase the isolation of the computed values
        transform: 'translateZ(0)'
      }
    };
    function isEmpty$1(obj) {
      return obj === undefined || obj === null || Object.keys(obj).length === 0;
    }
    const TextareaAutosize = /*#__PURE__*/React__namespace.forwardRef(function TextareaAutosize(props, ref) {
      const {
          onChange,
          maxRows,
          minRows = 1,
          style,
          value
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1L);
      const {
        current: isControlled
      } = React__namespace.useRef(value != null);
      const inputRef = React__namespace.useRef(null);
      const handleRef = useForkRef(ref, inputRef);
      const shadowRef = React__namespace.useRef(null);
      const renders = React__namespace.useRef(0);
      const [state, setState] = React__namespace.useState({});
      const getUpdatedState = React__namespace.useCallback(() => {
        const input = inputRef.current;
        const containerWindow = ownerWindow(input);
        const computedStyle = containerWindow.getComputedStyle(input);

        // If input's width is shrunk and it's not visible, don't sync height.
        if (computedStyle.width === '0px') {
          return {};
        }
        const inputShallow = shadowRef.current;
        inputShallow.style.width = computedStyle.width;
        inputShallow.value = input.value || props.placeholder || 'x';
        if (inputShallow.value.slice(-1) === '\n') {
          // Certain fonts which overflow the line height will cause the textarea
          // to report a different scrollHeight depending on whether the last line
          // is empty. Make it non-empty to avoid this issue.
          inputShallow.value += ' ';
        }
        const boxSizing = computedStyle['box-sizing'];
        const padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');
        const border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width');

        // The height of the inner content
        const innerHeight = inputShallow.scrollHeight;

        // Measure height of a textarea with a single row
        inputShallow.value = 'x';
        const singleRowHeight = inputShallow.scrollHeight;

        // The height of the outer content
        let outerHeight = innerHeight;
        if (minRows) {
          outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
        }
        if (maxRows) {
          outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
        }
        outerHeight = Math.max(outerHeight, singleRowHeight);

        // Take the box sizing into account for applying this value as a style.
        const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);
        const overflow = Math.abs(outerHeight - innerHeight) <= 1;
        return {
          outerHeightStyle,
          overflow
        };
      }, [maxRows, minRows, props.placeholder]);
      const updateState = (prevState, newState) => {
        const {
          outerHeightStyle,
          overflow
        } = newState;
        // Need a large enough difference to update the height.
        // This prevents infinite rendering loop.
        if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
          renders.current += 1;
          return {
            overflow,
            outerHeightStyle
          };
        }
        {
          if (renders.current === 20) {
            console.error(['MUI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\n'));
          }
        }
        return prevState;
      };
      const syncHeight = React__namespace.useCallback(() => {
        const newState = getUpdatedState();
        if (isEmpty$1(newState)) {
          return;
        }
        setState(prevState => {
          return updateState(prevState, newState);
        });
      }, [getUpdatedState]);
      const syncHeightWithFlushSycn = () => {
        const newState = getUpdatedState();
        if (isEmpty$1(newState)) {
          return;
        }

        // In React 18, state updates in a ResizeObserver's callback are happening after the paint which causes flickering
        // when doing some visual updates in it. Using flushSync ensures that the dom will be painted after the states updates happen
        // Related issue - https://github.com/facebook/react/issues/24331
        ReactDOM.flushSync(() => {
          setState(prevState => {
            return updateState(prevState, newState);
          });
        });
      };
      React__namespace.useEffect(() => {
        const handleResize = debounce$1(() => {
          renders.current = 0;

          // If the TextareaAutosize component is replaced by Suspense with a fallback, the last
          // ResizeObserver's handler that runs because of the change in the layout is trying to
          // access a dom node that is no longer there (as the fallback component is being shown instead).
          // See https://github.com/mui/material-ui/issues/32640
          if (inputRef.current) {
            syncHeightWithFlushSycn();
          }
        });
        const containerWindow = ownerWindow(inputRef.current);
        containerWindow.addEventListener('resize', handleResize);
        let resizeObserver;
        if (typeof ResizeObserver !== 'undefined') {
          resizeObserver = new ResizeObserver(handleResize);
          resizeObserver.observe(inputRef.current);
        }
        return () => {
          handleResize.clear();
          containerWindow.removeEventListener('resize', handleResize);
          if (resizeObserver) {
            resizeObserver.disconnect();
          }
        };
      });
      useEnhancedEffect$1(() => {
        syncHeight();
      });
      React__namespace.useEffect(() => {
        renders.current = 0;
      }, [value]);
      const handleChange = event => {
        renders.current = 0;
        if (!isControlled) {
          syncHeight();
        }
        if (onChange) {
          onChange(event);
        }
      };
      return /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
        children: [/*#__PURE__*/jsxRuntime.exports.jsx("textarea", _extends({
          value: value,
          onChange: handleChange,
          ref: handleRef
          // Apply the rows prop to get a "correct" first SSR paint
          ,
          rows: minRows,
          style: _extends({
            height: state.outerHeightStyle,
            // Need a large enough difference to allow scrolling.
            // This prevents infinite rendering loop.
            overflow: state.overflow ? 'hidden' : null
          }, style)
        }, other)), /*#__PURE__*/jsxRuntime.exports.jsx("textarea", {
          "aria-hidden": true,
          className: props.className,
          readOnly: true,
          ref: shadowRef,
          tabIndex: -1,
          style: _extends({}, styles$5.shadow, style, {
            padding: 0
          })
        })]
      });
    });
    TextareaAutosize.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * Maximum number of rows to display.
       */
      maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      /**
       * Minimum number of rows to display.
       * @default 1
       */
      minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      /**
       * @ignore
       */
      onChange: PropTypes.func,
      /**
       * @ignore
       */
      placeholder: PropTypes.string,
      /**
       * @ignore
       */
      style: PropTypes.object,
      /**
       * @ignore
       */
      value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])
    } ;
    var TextareaAutosize$1 = TextareaAutosize;

    function getSvgIconUtilityClass(slot) {
      return generateUtilityClass('MuiSvgIcon', slot);
    }
    generateUtilityClasses('MuiSvgIcon', ['root', 'colorPrimary', 'colorSecondary', 'colorAction', 'colorError', 'colorDisabled', 'fontSizeInherit', 'fontSizeSmall', 'fontSizeMedium', 'fontSizeLarge']);

    const _excluded$1K = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
    const useUtilityClasses$1t = ownerState => {
      const {
        color,
        fontSize,
        classes
      } = ownerState;
      const slots = {
        root: ['root', color !== 'inherit' && `color${capitalize(color)}`, `fontSize${capitalize(fontSize)}`]
      };
      return composeClasses(slots, getSvgIconUtilityClass, classes);
    };
    const SvgIconRoot = styled$1('svg', {
      name: 'MuiSvgIcon',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`], styles[`fontSize${capitalize(ownerState.fontSize)}`]];
      }
    })(({
      theme,
      ownerState
    }) => {
      var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$transitions2$d, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette$ownerState$c2, _palette2, _palette2$action, _palette3, _palette3$action;
      return {
        userSelect: 'none',
        width: '1em',
        height: '1em',
        display: 'inline-block',
        fill: 'currentColor',
        flexShrink: 0,
        transition: (_theme$transitions = theme.transitions) == null ? void 0 : (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, 'fill', {
          duration: (_theme$transitions2 = theme.transitions) == null ? void 0 : (_theme$transitions2$d = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2$d.shorter
        }),
        fontSize: {
          inherit: 'inherit',
          small: ((_theme$typography = theme.typography) == null ? void 0 : (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || '1.25rem',
          medium: ((_theme$typography2 = theme.typography) == null ? void 0 : (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || '1.5rem',
          large: ((_theme$typography3 = theme.typography) == null ? void 0 : (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || '2.1875rem'
        }[ownerState.fontSize],
        // TODO v5 deprecate, v6 remove for sx
        color: (_palette$ownerState$c = (_palette = (theme.vars || theme).palette) == null ? void 0 : (_palette$ownerState$c2 = _palette[ownerState.color]) == null ? void 0 : _palette$ownerState$c2.main) != null ? _palette$ownerState$c : {
          action: (_palette2 = (theme.vars || theme).palette) == null ? void 0 : (_palette2$action = _palette2.action) == null ? void 0 : _palette2$action.active,
          disabled: (_palette3 = (theme.vars || theme).palette) == null ? void 0 : (_palette3$action = _palette3.action) == null ? void 0 : _palette3$action.disabled,
          inherit: undefined
        }[ownerState.color]
      };
    });
    const SvgIcon = /*#__PURE__*/React__namespace.forwardRef(function SvgIcon(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiSvgIcon'
      });
      const {
          children,
          className,
          color = 'inherit',
          component = 'svg',
          fontSize = 'medium',
          htmlColor,
          inheritViewBox = false,
          titleAccess,
          viewBox = '0 0 24 24'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1K);
      const ownerState = _extends({}, props, {
        color,
        component,
        fontSize,
        instanceFontSize: inProps.fontSize,
        inheritViewBox,
        viewBox
      });
      const more = {};
      if (!inheritViewBox) {
        more.viewBox = viewBox;
      }
      const classes = useUtilityClasses$1t(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsxs(SvgIconRoot, _extends({
        as: component,
        className: clsx(classes.root, className),
        focusable: "false",
        color: htmlColor,
        "aria-hidden": titleAccess ? undefined : true,
        role: titleAccess ? 'img' : undefined,
        ref: ref
      }, more, other, {
        ownerState: ownerState,
        children: [children, titleAccess ? /*#__PURE__*/jsxRuntime.exports.jsx("title", {
          children: titleAccess
        }) : null]
      }));
    });
    SvgIcon.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * Node passed into the SVG element.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
       * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
       * @default 'inherit'
       */
      color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'action', 'disabled', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
       * @default 'medium'
       */
      fontSize: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'large', 'medium', 'small']), PropTypes.string]),
      /**
       * Applies a color attribute to the SVG element.
       */
      htmlColor: PropTypes.string,
      /**
       * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
       * prop will be ignored.
       * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
       * `component`'s viewBox to the root node.
       * @default false
       */
      inheritViewBox: PropTypes.bool,
      /**
       * The shape-rendering attribute. The behavior of the different options is described on the
       * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
       * If you are having issues with blurry icons you should investigate this prop.
       */
      shapeRendering: PropTypes.string,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * Provides a human-readable title for the element that contains it.
       * https://www.w3.org/TR/SVG-access/#Equivalent
       */
      titleAccess: PropTypes.string,
      /**
       * Allows you to redefine what the coordinates without units mean inside an SVG element.
       * For example, if the SVG element is 500 (width) by 200 (height),
       * and you pass viewBox="0 0 50 20",
       * this means that the coordinates inside the SVG will go from the top left corner (0,0)
       * to bottom right (50,20) and each unit will be worth 10px.
       * @default '0 0 24 24'
       */
      viewBox: PropTypes.string
    } ;
    SvgIcon.muiName = 'SvgIcon';
    var SvgIcon$1 = SvgIcon;

    function createSvgIcon$1(path, displayName) {
      function Component(props, ref) {
        return /*#__PURE__*/jsxRuntime.exports.jsx(SvgIcon$1, _extends({
          "data-testid": `${displayName}Icon`,
          ref: ref
        }, props, {
          children: path
        }));
      }
      {
        // Need to set `displayName` on the inner component for React.memo.
        // React prior to 16.14 ignores `displayName` on the wrapper.
        Component.displayName = `${displayName}Icon`;
      }
      Component.muiName = SvgIcon$1.muiName;
      return /*#__PURE__*/React__namespace.memo( /*#__PURE__*/React__namespace.forwardRef(Component));
    }

    // TODO: remove this export once ClassNameGenerator is stable
    // eslint-disable-next-line @typescript-eslint/naming-convention
    const unstable_ClassNameGenerator = {
      configure: generator => {
        console.warn(['MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.', '', "You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead", '', 'The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401', '', 'The updated documentation: https://mui.com/guides/classname-generator/'].join('\n'));
        ClassNameGenerator$1.configure(generator);
      }
    };

    var utils = /*#__PURE__*/Object.freeze({
        __proto__: null,
        unstable_ClassNameGenerator: unstable_ClassNameGenerator,
        capitalize: capitalize,
        createChainedFunction: createChainedFunction,
        createSvgIcon: createSvgIcon$1,
        debounce: debounce$1,
        deprecatedPropType: deprecatedPropType,
        isMuiElement: isMuiElement,
        ownerDocument: ownerDocument,
        ownerWindow: ownerWindow,
        requirePropFactory: requirePropFactory,
        setRef: setRef,
        unstable_useEnhancedEffect: useEnhancedEffect$1,
        unstable_useId: useId,
        unsupportedProp: unsupportedProp,
        useControlled: useControlled,
        useEventCallback: useEventCallback,
        useForkRef: useForkRef,
        useIsFocusVisible: useIsFocusVisible
    });

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _setPrototypeOf(subClass, superClass);
    }

    /**
     * Checks if a given element has a CSS class.
     * 
     * @param element the element
     * @param className the CSS class name
     */
    function hasClass(element, className) {
      if (element.classList) return !!className && element.classList.contains(className);
      return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
    }

    /**
     * Adds a CSS class to a given element.
     * 
     * @param element the element
     * @param className the CSS class name
     */

    function addClass(element, className) {
      if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + " " + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + " " + className);
    }

    function replaceClassName(origClass, classToRemove) {
      return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
    }
    /**
     * Removes a CSS class from a given element.
     * 
     * @param element the element
     * @param className the CSS class name
     */


    function removeClass$1(element, className) {
      if (element.classList) {
        element.classList.remove(className);
      } else if (typeof element.className === 'string') {
        element.className = replaceClassName(element.className, className);
      } else {
        element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
      }
    }

    var config = {
      disabled: false
    };

    var timeoutsShape = PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
      enter: PropTypes.number,
      exit: PropTypes.number,
      appear: PropTypes.number
    }).isRequired]) ;
    var classNamesShape = PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
      enter: PropTypes.string,
      exit: PropTypes.string,
      active: PropTypes.string
    }), PropTypes.shape({
      enter: PropTypes.string,
      enterDone: PropTypes.string,
      enterActive: PropTypes.string,
      exit: PropTypes.string,
      exitDone: PropTypes.string,
      exitActive: PropTypes.string
    })]) ;

    var TransitionGroupContext = React__default["default"].createContext(null);

    var forceReflow = function forceReflow(node) {
      return node.scrollTop;
    };

    var UNMOUNTED = 'unmounted';
    var EXITED = 'exited';
    var ENTERING = 'entering';
    var ENTERED = 'entered';
    var EXITING = 'exiting';
    /**
     * The Transition component lets you describe a transition from one component
     * state to another _over time_ with a simple declarative API. Most commonly
     * it's used to animate the mounting and unmounting of a component, but can also
     * be used to describe in-place transition states as well.
     *
     * ---
     *
     * **Note**: `Transition` is a platform-agnostic base component. If you're using
     * transitions in CSS, you'll probably want to use
     * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
     * instead. It inherits all the features of `Transition`, but contains
     * additional features necessary to play nice with CSS transitions (hence the
     * name of the component).
     *
     * ---
     *
     * By default the `Transition` component does not alter the behavior of the
     * component it renders, it only tracks "enter" and "exit" states for the
     * components. It's up to you to give meaning and effect to those states. For
     * example we can add styles to a component when it enters or exits:
     *
     * ```jsx
     * import { Transition } from 'react-transition-group';
     *
     * const duration = 300;
     *
     * const defaultStyle = {
     *   transition: `opacity ${duration}ms ease-in-out`,
     *   opacity: 0,
     * }
     *
     * const transitionStyles = {
     *   entering: { opacity: 1 },
     *   entered:  { opacity: 1 },
     *   exiting:  { opacity: 0 },
     *   exited:  { opacity: 0 },
     * };
     *
     * const Fade = ({ in: inProp }) => (
     *   <Transition in={inProp} timeout={duration}>
     *     {state => (
     *       <div style={{
     *         ...defaultStyle,
     *         ...transitionStyles[state]
     *       }}>
     *         I'm a fade Transition!
     *       </div>
     *     )}
     *   </Transition>
     * );
     * ```
     *
     * There are 4 main states a Transition can be in:
     *  - `'entering'`
     *  - `'entered'`
     *  - `'exiting'`
     *  - `'exited'`
     *
     * Transition state is toggled via the `in` prop. When `true` the component
     * begins the "Enter" stage. During this stage, the component will shift from
     * its current transition state, to `'entering'` for the duration of the
     * transition and then to the `'entered'` stage once it's complete. Let's take
     * the following example (we'll use the
     * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
     *
     * ```jsx
     * function App() {
     *   const [inProp, setInProp] = useState(false);
     *   return (
     *     <div>
     *       <Transition in={inProp} timeout={500}>
     *         {state => (
     *           // ...
     *         )}
     *       </Transition>
     *       <button onClick={() => setInProp(true)}>
     *         Click to Enter
     *       </button>
     *     </div>
     *   );
     * }
     * ```
     *
     * When the button is clicked the component will shift to the `'entering'` state
     * and stay there for 500ms (the value of `timeout`) before it finally switches
     * to `'entered'`.
     *
     * When `in` is `false` the same thing happens except the state moves from
     * `'exiting'` to `'exited'`.
     */

    var Transition = /*#__PURE__*/function (_React$Component) {
      _inheritsLoose(Transition, _React$Component);

      function Transition(props, context) {
        var _this;

        _this = _React$Component.call(this, props, context) || this;
        var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

        var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
        var initialStatus;
        _this.appearStatus = null;

        if (props.in) {
          if (appear) {
            initialStatus = EXITED;
            _this.appearStatus = ENTERING;
          } else {
            initialStatus = ENTERED;
          }
        } else {
          if (props.unmountOnExit || props.mountOnEnter) {
            initialStatus = UNMOUNTED;
          } else {
            initialStatus = EXITED;
          }
        }

        _this.state = {
          status: initialStatus
        };
        _this.nextCallback = null;
        return _this;
      }

      Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
        var nextIn = _ref.in;

        if (nextIn && prevState.status === UNMOUNTED) {
          return {
            status: EXITED
          };
        }

        return null;
      } // getSnapshotBeforeUpdate(prevProps) {
      //   let nextStatus = null
      //   if (prevProps !== this.props) {
      //     const { status } = this.state
      //     if (this.props.in) {
      //       if (status !== ENTERING && status !== ENTERED) {
      //         nextStatus = ENTERING
      //       }
      //     } else {
      //       if (status === ENTERING || status === ENTERED) {
      //         nextStatus = EXITING
      //       }
      //     }
      //   }
      //   return { nextStatus }
      // }
      ;

      var _proto = Transition.prototype;

      _proto.componentDidMount = function componentDidMount() {
        this.updateStatus(true, this.appearStatus);
      };

      _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        var nextStatus = null;

        if (prevProps !== this.props) {
          var status = this.state.status;

          if (this.props.in) {
            if (status !== ENTERING && status !== ENTERED) {
              nextStatus = ENTERING;
            }
          } else {
            if (status === ENTERING || status === ENTERED) {
              nextStatus = EXITING;
            }
          }
        }

        this.updateStatus(false, nextStatus);
      };

      _proto.componentWillUnmount = function componentWillUnmount() {
        this.cancelNextCallback();
      };

      _proto.getTimeouts = function getTimeouts() {
        var timeout = this.props.timeout;
        var exit, enter, appear;
        exit = enter = appear = timeout;

        if (timeout != null && typeof timeout !== 'number') {
          exit = timeout.exit;
          enter = timeout.enter; // TODO: remove fallback for next major

          appear = timeout.appear !== undefined ? timeout.appear : enter;
        }

        return {
          exit: exit,
          enter: enter,
          appear: appear
        };
      };

      _proto.updateStatus = function updateStatus(mounting, nextStatus) {
        if (mounting === void 0) {
          mounting = false;
        }

        if (nextStatus !== null) {
          // nextStatus will always be ENTERING or EXITING.
          this.cancelNextCallback();

          if (nextStatus === ENTERING) {
            if (this.props.unmountOnExit || this.props.mountOnEnter) {
              var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM__default["default"].findDOMNode(this); // https://github.com/reactjs/react-transition-group/pull/749
              // With unmountOnExit or mountOnEnter, the enter animation should happen at the transition between `exited` and `entering`.
              // To make the animation happen,  we have to separate each rendering and avoid being processed as batched.

              if (node) forceReflow(node);
            }

            this.performEnter(mounting);
          } else {
            this.performExit();
          }
        } else if (this.props.unmountOnExit && this.state.status === EXITED) {
          this.setState({
            status: UNMOUNTED
          });
        }
      };

      _proto.performEnter = function performEnter(mounting) {
        var _this2 = this;

        var enter = this.props.enter;
        var appearing = this.context ? this.context.isMounting : mounting;

        var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM__default["default"].findDOMNode(this), appearing],
            maybeNode = _ref2[0],
            maybeAppearing = _ref2[1];

        var timeouts = this.getTimeouts();
        var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
        // if we are mounting and running this it means appear _must_ be set

        if (!mounting && !enter || config.disabled) {
          this.safeSetState({
            status: ENTERED
          }, function () {
            _this2.props.onEntered(maybeNode);
          });
          return;
        }

        this.props.onEnter(maybeNode, maybeAppearing);
        this.safeSetState({
          status: ENTERING
        }, function () {
          _this2.props.onEntering(maybeNode, maybeAppearing);

          _this2.onTransitionEnd(enterTimeout, function () {
            _this2.safeSetState({
              status: ENTERED
            }, function () {
              _this2.props.onEntered(maybeNode, maybeAppearing);
            });
          });
        });
      };

      _proto.performExit = function performExit() {
        var _this3 = this;

        var exit = this.props.exit;
        var timeouts = this.getTimeouts();
        var maybeNode = this.props.nodeRef ? undefined : ReactDOM__default["default"].findDOMNode(this); // no exit animation skip right to EXITED

        if (!exit || config.disabled) {
          this.safeSetState({
            status: EXITED
          }, function () {
            _this3.props.onExited(maybeNode);
          });
          return;
        }

        this.props.onExit(maybeNode);
        this.safeSetState({
          status: EXITING
        }, function () {
          _this3.props.onExiting(maybeNode);

          _this3.onTransitionEnd(timeouts.exit, function () {
            _this3.safeSetState({
              status: EXITED
            }, function () {
              _this3.props.onExited(maybeNode);
            });
          });
        });
      };

      _proto.cancelNextCallback = function cancelNextCallback() {
        if (this.nextCallback !== null) {
          this.nextCallback.cancel();
          this.nextCallback = null;
        }
      };

      _proto.safeSetState = function safeSetState(nextState, callback) {
        // This shouldn't be necessary, but there are weird race conditions with
        // setState callbacks and unmounting in testing, so always make sure that
        // we can cancel any pending setState callbacks after we unmount.
        callback = this.setNextCallback(callback);
        this.setState(nextState, callback);
      };

      _proto.setNextCallback = function setNextCallback(callback) {
        var _this4 = this;

        var active = true;

        this.nextCallback = function (event) {
          if (active) {
            active = false;
            _this4.nextCallback = null;
            callback(event);
          }
        };

        this.nextCallback.cancel = function () {
          active = false;
        };

        return this.nextCallback;
      };

      _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
        this.setNextCallback(handler);
        var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM__default["default"].findDOMNode(this);
        var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

        if (!node || doesNotHaveTimeoutOrListener) {
          setTimeout(this.nextCallback, 0);
          return;
        }

        if (this.props.addEndListener) {
          var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
              maybeNode = _ref3[0],
              maybeNextCallback = _ref3[1];

          this.props.addEndListener(maybeNode, maybeNextCallback);
        }

        if (timeout != null) {
          setTimeout(this.nextCallback, timeout);
        }
      };

      _proto.render = function render() {
        var status = this.state.status;

        if (status === UNMOUNTED) {
          return null;
        }

        var _this$props = this.props,
            children = _this$props.children;
            _this$props.in;
            _this$props.mountOnEnter;
            _this$props.unmountOnExit;
            _this$props.appear;
            _this$props.enter;
            _this$props.exit;
            _this$props.timeout;
            _this$props.addEndListener;
            _this$props.onEnter;
            _this$props.onEntering;
            _this$props.onEntered;
            _this$props.onExit;
            _this$props.onExiting;
            _this$props.onExited;
            _this$props.nodeRef;
            var childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);

        return (
          /*#__PURE__*/
          // allows for nested Transitions
          React__default["default"].createElement(TransitionGroupContext.Provider, {
            value: null
          }, typeof children === 'function' ? children(status, childProps) : React__default["default"].cloneElement(React__default["default"].Children.only(children), childProps))
        );
      };

      return Transition;
    }(React__default["default"].Component);

    Transition.contextType = TransitionGroupContext;
    Transition.propTypes = {
      /**
       * A React reference to DOM element that need to transition:
       * https://stackoverflow.com/a/51127130/4671932
       *
       *   - When `nodeRef` prop is used, `node` is not passed to callback functions
       *      (e.g. `onEnter`) because user already has direct access to the node.
       *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
       *     `nodeRef` need to be provided to `Transition` with changed `key` prop
       *     (see
       *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
       */
      nodeRef: PropTypes.shape({
        current: typeof Element === 'undefined' ? PropTypes.any : function (propValue, key, componentName, location, propFullName, secret) {
          var value = propValue[key];
          return PropTypes.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
        }
      }),

      /**
       * A `function` child can be used instead of a React element. This function is
       * called with the current transition status (`'entering'`, `'entered'`,
       * `'exiting'`, `'exited'`), which can be used to apply context
       * specific props to a component.
       *
       * ```jsx
       * <Transition in={this.state.in} timeout={150}>
       *   {state => (
       *     <MyComponent className={`fade fade-${state}`} />
       *   )}
       * </Transition>
       * ```
       */
      children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,

      /**
       * Show the component; triggers the enter or exit states
       */
      in: PropTypes.bool,

      /**
       * By default the child component is mounted immediately along with
       * the parent `Transition` component. If you want to "lazy mount" the component on the
       * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
       * mounted, even on "exited", unless you also specify `unmountOnExit`.
       */
      mountOnEnter: PropTypes.bool,

      /**
       * By default the child component stays mounted after it reaches the `'exited'` state.
       * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
       */
      unmountOnExit: PropTypes.bool,

      /**
       * By default the child component does not perform the enter transition when
       * it first mounts, regardless of the value of `in`. If you want this
       * behavior, set both `appear` and `in` to `true`.
       *
       * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
       * > only adds an additional enter transition. However, in the
       * > `<CSSTransition>` component that first enter transition does result in
       * > additional `.appear-*` classes, that way you can choose to style it
       * > differently.
       */
      appear: PropTypes.bool,

      /**
       * Enable or disable enter transitions.
       */
      enter: PropTypes.bool,

      /**
       * Enable or disable exit transitions.
       */
      exit: PropTypes.bool,

      /**
       * The duration of the transition, in milliseconds.
       * Required unless `addEndListener` is provided.
       *
       * You may specify a single timeout for all transitions:
       *
       * ```jsx
       * timeout={500}
       * ```
       *
       * or individually:
       *
       * ```jsx
       * timeout={{
       *  appear: 500,
       *  enter: 300,
       *  exit: 500,
       * }}
       * ```
       *
       * - `appear` defaults to the value of `enter`
       * - `enter` defaults to `0`
       * - `exit` defaults to `0`
       *
       * @type {number | { enter?: number, exit?: number, appear?: number }}
       */
      timeout: function timeout(props) {
        var pt = timeoutsShape;
        if (!props.addEndListener) pt = pt.isRequired;

        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        return pt.apply(void 0, [props].concat(args));
      },

      /**
       * Add a custom transition end trigger. Called with the transitioning
       * DOM node and a `done` callback. Allows for more fine grained transition end
       * logic. Timeouts are still used as a fallback if provided.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * ```jsx
       * addEndListener={(node, done) => {
       *   // use the css transitionend event to mark the finish of a transition
       *   node.addEventListener('transitionend', done, false);
       * }}
       * ```
       */
      addEndListener: PropTypes.func,

      /**
       * Callback fired before the "entering" status is applied. An extra parameter
       * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool) -> void
       */
      onEnter: PropTypes.func,

      /**
       * Callback fired after the "entering" status is applied. An extra parameter
       * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEntering: PropTypes.func,

      /**
       * Callback fired after the "entered" status is applied. An extra parameter
       * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool) -> void
       */
      onEntered: PropTypes.func,

      /**
       * Callback fired before the "exiting" status is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement) -> void
       */
      onExit: PropTypes.func,

      /**
       * Callback fired after the "exiting" status is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement) -> void
       */
      onExiting: PropTypes.func,

      /**
       * Callback fired after the "exited" status is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed
       *
       * @type Function(node: HtmlElement) -> void
       */
      onExited: PropTypes.func
    } ; // Name the function so it is clearer in the documentation

    function noop$3() {}

    Transition.defaultProps = {
      in: false,
      mountOnEnter: false,
      unmountOnExit: false,
      appear: false,
      enter: true,
      exit: true,
      onEnter: noop$3,
      onEntering: noop$3,
      onEntered: noop$3,
      onExit: noop$3,
      onExiting: noop$3,
      onExited: noop$3
    };
    Transition.UNMOUNTED = UNMOUNTED;
    Transition.EXITED = EXITED;
    Transition.ENTERING = ENTERING;
    Transition.ENTERED = ENTERED;
    Transition.EXITING = EXITING;
    var Transition$1 = Transition;

    var _addClass = function addClass$1(node, classes) {
      return node && classes && classes.split(' ').forEach(function (c) {
        return addClass(node, c);
      });
    };

    var removeClass = function removeClass(node, classes) {
      return node && classes && classes.split(' ').forEach(function (c) {
        return removeClass$1(node, c);
      });
    };
    /**
     * A transition component inspired by the excellent
     * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should
     * use it if you're using CSS transitions or animations. It's built upon the
     * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
     * component, so it inherits all of its props.
     *
     * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
     * and `exit` states of the transition. The first class is applied and then a
     * second `*-active` class in order to activate the CSS transition. After the
     * transition, matching `*-done` class names are applied to persist the
     * transition state.
     *
     * ```jsx
     * function App() {
     *   const [inProp, setInProp] = useState(false);
     *   return (
     *     <div>
     *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
     *         <div>
     *           {"I'll receive my-node-* classes"}
     *         </div>
     *       </CSSTransition>
     *       <button type="button" onClick={() => setInProp(true)}>
     *         Click to Enter
     *       </button>
     *     </div>
     *   );
     * }
     * ```
     *
     * When the `in` prop is set to `true`, the child component will first receive
     * the class `example-enter`, then the `example-enter-active` will be added in
     * the next tick. `CSSTransition` [forces a
     * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
     * between before adding the `example-enter-active`. This is an important trick
     * because it allows us to transition between `example-enter` and
     * `example-enter-active` even though they were added immediately one after
     * another. Most notably, this is what makes it possible for us to animate
     * _appearance_.
     *
     * ```css
     * .my-node-enter {
     *   opacity: 0;
     * }
     * .my-node-enter-active {
     *   opacity: 1;
     *   transition: opacity 200ms;
     * }
     * .my-node-exit {
     *   opacity: 1;
     * }
     * .my-node-exit-active {
     *   opacity: 0;
     *   transition: opacity 200ms;
     * }
     * ```
     *
     * `*-active` classes represent which styles you want to animate **to**, so it's
     * important to add `transition` declaration only to them, otherwise transitions
     * might not behave as intended! This might not be obvious when the transitions
     * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in
     * the example above (minus `transition`), but it becomes apparent in more
     * complex transitions.
     *
     * **Note**: If you're using the
     * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)
     * prop, make sure to define styles for `.appear-*` classes as well.
     */


    var CSSTransition = /*#__PURE__*/function (_React$Component) {
      _inheritsLoose(CSSTransition, _React$Component);

      function CSSTransition() {
        var _this;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.appliedClasses = {
          appear: {},
          enter: {},
          exit: {}
        };

        _this.onEnter = function (maybeNode, maybeAppearing) {
          var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),
              node = _this$resolveArgument[0],
              appearing = _this$resolveArgument[1];

          _this.removeClasses(node, 'exit');

          _this.addClass(node, appearing ? 'appear' : 'enter', 'base');

          if (_this.props.onEnter) {
            _this.props.onEnter(maybeNode, maybeAppearing);
          }
        };

        _this.onEntering = function (maybeNode, maybeAppearing) {
          var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),
              node = _this$resolveArgument2[0],
              appearing = _this$resolveArgument2[1];

          var type = appearing ? 'appear' : 'enter';

          _this.addClass(node, type, 'active');

          if (_this.props.onEntering) {
            _this.props.onEntering(maybeNode, maybeAppearing);
          }
        };

        _this.onEntered = function (maybeNode, maybeAppearing) {
          var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),
              node = _this$resolveArgument3[0],
              appearing = _this$resolveArgument3[1];

          var type = appearing ? 'appear' : 'enter';

          _this.removeClasses(node, type);

          _this.addClass(node, type, 'done');

          if (_this.props.onEntered) {
            _this.props.onEntered(maybeNode, maybeAppearing);
          }
        };

        _this.onExit = function (maybeNode) {
          var _this$resolveArgument4 = _this.resolveArguments(maybeNode),
              node = _this$resolveArgument4[0];

          _this.removeClasses(node, 'appear');

          _this.removeClasses(node, 'enter');

          _this.addClass(node, 'exit', 'base');

          if (_this.props.onExit) {
            _this.props.onExit(maybeNode);
          }
        };

        _this.onExiting = function (maybeNode) {
          var _this$resolveArgument5 = _this.resolveArguments(maybeNode),
              node = _this$resolveArgument5[0];

          _this.addClass(node, 'exit', 'active');

          if (_this.props.onExiting) {
            _this.props.onExiting(maybeNode);
          }
        };

        _this.onExited = function (maybeNode) {
          var _this$resolveArgument6 = _this.resolveArguments(maybeNode),
              node = _this$resolveArgument6[0];

          _this.removeClasses(node, 'exit');

          _this.addClass(node, 'exit', 'done');

          if (_this.props.onExited) {
            _this.props.onExited(maybeNode);
          }
        };

        _this.resolveArguments = function (maybeNode, maybeAppearing) {
          return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`
          : [maybeNode, maybeAppearing];
        };

        _this.getClassNames = function (type) {
          var classNames = _this.props.classNames;
          var isStringClassNames = typeof classNames === 'string';
          var prefix = isStringClassNames && classNames ? classNames + "-" : '';
          var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
          var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
          var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
          return {
            baseClassName: baseClassName,
            activeClassName: activeClassName,
            doneClassName: doneClassName
          };
        };

        return _this;
      }

      var _proto = CSSTransition.prototype;

      _proto.addClass = function addClass(node, type, phase) {
        var className = this.getClassNames(type)[phase + "ClassName"];

        var _this$getClassNames = this.getClassNames('enter'),
            doneClassName = _this$getClassNames.doneClassName;

        if (type === 'appear' && phase === 'done' && doneClassName) {
          className += " " + doneClassName;
        } // This is to force a repaint,
        // which is necessary in order to transition styles when adding a class name.


        if (phase === 'active') {
          if (node) forceReflow(node);
        }

        if (className) {
          this.appliedClasses[type][phase] = className;

          _addClass(node, className);
        }
      };

      _proto.removeClasses = function removeClasses(node, type) {
        var _this$appliedClasses$ = this.appliedClasses[type],
            baseClassName = _this$appliedClasses$.base,
            activeClassName = _this$appliedClasses$.active,
            doneClassName = _this$appliedClasses$.done;
        this.appliedClasses[type] = {};

        if (baseClassName) {
          removeClass(node, baseClassName);
        }

        if (activeClassName) {
          removeClass(node, activeClassName);
        }

        if (doneClassName) {
          removeClass(node, doneClassName);
        }
      };

      _proto.render = function render() {
        var _this$props = this.props;
            _this$props.classNames;
            var props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);

        return /*#__PURE__*/React__default["default"].createElement(Transition$1, _extends({}, props, {
          onEnter: this.onEnter,
          onEntered: this.onEntered,
          onEntering: this.onEntering,
          onExit: this.onExit,
          onExiting: this.onExiting,
          onExited: this.onExited
        }));
      };

      return CSSTransition;
    }(React__default["default"].Component);

    CSSTransition.defaultProps = {
      classNames: ''
    };
    CSSTransition.propTypes = _extends({}, Transition$1.propTypes, {
      /**
       * The animation classNames applied to the component as it appears, enters,
       * exits or has finished the transition. A single name can be provided, which
       * will be suffixed for each stage, e.g. `classNames="fade"` applies:
       *
       * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
       * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
       * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
       *
       * A few details to note about how these classes are applied:
       *
       * 1. They are _joined_ with the ones that are already defined on the child
       *    component, so if you want to add some base styles, you can use
       *    `className` without worrying that it will be overridden.
       *
       * 2. If the transition component mounts with `in={false}`, no classes are
       *    applied yet. You might be expecting `*-exit-done`, but if you think
       *    about it, a component cannot finish exiting if it hasn't entered yet.
       *
       * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
       *    allows you to define different behavior for when appearing is done and
       *    when regular entering is done, using selectors like
       *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
       *    an epic entrance animation when element first appears in the DOM using
       *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
       *    simply use `fade-enter-done` for defining both cases.
       *
       * Each individual classNames can also be specified independently like:
       *
       * ```js
       * classNames={{
       *  appear: 'my-appear',
       *  appearActive: 'my-active-appear',
       *  appearDone: 'my-done-appear',
       *  enter: 'my-enter',
       *  enterActive: 'my-active-enter',
       *  enterDone: 'my-done-enter',
       *  exit: 'my-exit',
       *  exitActive: 'my-active-exit',
       *  exitDone: 'my-done-exit',
       * }}
       * ```
       *
       * If you want to set these classes using CSS Modules:
       *
       * ```js
       * import styles from './styles.css';
       * ```
       *
       * you might want to use camelCase in your CSS file, that way could simply
       * spread them instead of listing them one by one:
       *
       * ```js
       * classNames={{ ...styles }}
       * ```
       *
       * @type {string | {
       *  appear?: string,
       *  appearActive?: string,
       *  appearDone?: string,
       *  enter?: string,
       *  enterActive?: string,
       *  enterDone?: string,
       *  exit?: string,
       *  exitActive?: string,
       *  exitDone?: string,
       * }}
       */
      classNames: classNamesShape,

      /**
       * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
       * applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEnter: PropTypes.func,

      /**
       * A `<Transition>` callback fired immediately after the 'enter-active' or
       * 'appear-active' class is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEntering: PropTypes.func,

      /**
       * A `<Transition>` callback fired immediately after the 'enter' or
       * 'appear' classes are **removed** and the `done` class is added to the DOM node.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEntered: PropTypes.func,

      /**
       * A `<Transition>` callback fired immediately after the 'exit' class is
       * applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed
       *
       * @type Function(node: HtmlElement)
       */
      onExit: PropTypes.func,

      /**
       * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed
       *
       * @type Function(node: HtmlElement)
       */
      onExiting: PropTypes.func,

      /**
       * A `<Transition>` callback fired immediately after the 'exit' classes
       * are **removed** and the `exit-done` class is added to the DOM node.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed
       *
       * @type Function(node: HtmlElement)
       */
      onExited: PropTypes.func
    }) ;
    var CSSTransition$1 = CSSTransition;

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }

    /**
     * Given `this.props.children`, return an object mapping key to child.
     *
     * @param {*} children `this.props.children`
     * @return {object} Mapping of key to child
     */

    function getChildMapping(children, mapFn) {
      var mapper = function mapper(child) {
        return mapFn && React.isValidElement(child) ? mapFn(child) : child;
      };

      var result = Object.create(null);
      if (children) React.Children.map(children, function (c) {
        return c;
      }).forEach(function (child) {
        // run the map function here instead so that the key is the computed one
        result[child.key] = mapper(child);
      });
      return result;
    }
    /**
     * When you're adding or removing children some may be added or removed in the
     * same render pass. We want to show *both* since we want to simultaneously
     * animate elements in and out. This function takes a previous set of keys
     * and a new set of keys and merges them with its best guess of the correct
     * ordering. In the future we may expose some of the utilities in
     * ReactMultiChild to make this easy, but for now React itself does not
     * directly have this concept of the union of prevChildren and nextChildren
     * so we implement it here.
     *
     * @param {object} prev prev children as returned from
     * `ReactTransitionChildMapping.getChildMapping()`.
     * @param {object} next next children as returned from
     * `ReactTransitionChildMapping.getChildMapping()`.
     * @return {object} a key set that contains all keys in `prev` and all keys
     * in `next` in a reasonable order.
     */

    function mergeChildMappings(prev, next) {
      prev = prev || {};
      next = next || {};

      function getValueForKey(key) {
        return key in next ? next[key] : prev[key];
      } // For each key of `next`, the list of keys to insert before that key in
      // the combined list


      var nextKeysPending = Object.create(null);
      var pendingKeys = [];

      for (var prevKey in prev) {
        if (prevKey in next) {
          if (pendingKeys.length) {
            nextKeysPending[prevKey] = pendingKeys;
            pendingKeys = [];
          }
        } else {
          pendingKeys.push(prevKey);
        }
      }

      var i;
      var childMapping = {};

      for (var nextKey in next) {
        if (nextKeysPending[nextKey]) {
          for (i = 0; i < nextKeysPending[nextKey].length; i++) {
            var pendingNextKey = nextKeysPending[nextKey][i];
            childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
          }
        }

        childMapping[nextKey] = getValueForKey(nextKey);
      } // Finally, add the keys which didn't appear before any key in `next`


      for (i = 0; i < pendingKeys.length; i++) {
        childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
      }

      return childMapping;
    }

    function getProp(child, prop, props) {
      return props[prop] != null ? props[prop] : child.props[prop];
    }

    function getInitialChildMapping(props, onExited) {
      return getChildMapping(props.children, function (child) {
        return React.cloneElement(child, {
          onExited: onExited.bind(null, child),
          in: true,
          appear: getProp(child, 'appear', props),
          enter: getProp(child, 'enter', props),
          exit: getProp(child, 'exit', props)
        });
      });
    }
    function getNextChildMapping(nextProps, prevChildMapping, onExited) {
      var nextChildMapping = getChildMapping(nextProps.children);
      var children = mergeChildMappings(prevChildMapping, nextChildMapping);
      Object.keys(children).forEach(function (key) {
        var child = children[key];
        if (!React.isValidElement(child)) return;
        var hasPrev = (key in prevChildMapping);
        var hasNext = (key in nextChildMapping);
        var prevChild = prevChildMapping[key];
        var isLeaving = React.isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)

        if (hasNext && (!hasPrev || isLeaving)) {
          // console.log('entering', key)
          children[key] = React.cloneElement(child, {
            onExited: onExited.bind(null, child),
            in: true,
            exit: getProp(child, 'exit', nextProps),
            enter: getProp(child, 'enter', nextProps)
          });
        } else if (!hasNext && hasPrev && !isLeaving) {
          // item is old (exiting)
          // console.log('leaving', key)
          children[key] = React.cloneElement(child, {
            in: false
          });
        } else if (hasNext && hasPrev && React.isValidElement(prevChild)) {
          // item hasn't changed transition states
          // copy over the last transition props;
          // console.log('unchanged', key)
          children[key] = React.cloneElement(child, {
            onExited: onExited.bind(null, child),
            in: prevChild.props.in,
            exit: getProp(child, 'exit', nextProps),
            enter: getProp(child, 'enter', nextProps)
          });
        }
      });
      return children;
    }

    var values = Object.values || function (obj) {
      return Object.keys(obj).map(function (k) {
        return obj[k];
      });
    };

    var defaultProps = {
      component: 'div',
      childFactory: function childFactory(child) {
        return child;
      }
    };
    /**
     * The `<TransitionGroup>` component manages a set of transition components
     * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
     * components, `<TransitionGroup>` is a state machine for managing the mounting
     * and unmounting of components over time.
     *
     * Consider the example below. As items are removed or added to the TodoList the
     * `in` prop is toggled automatically by the `<TransitionGroup>`.
     *
     * Note that `<TransitionGroup>`  does not define any animation behavior!
     * Exactly _how_ a list item animates is up to the individual transition
     * component. This means you can mix and match animations across different list
     * items.
     */

    var TransitionGroup = /*#__PURE__*/function (_React$Component) {
      _inheritsLoose(TransitionGroup, _React$Component);

      function TransitionGroup(props, context) {
        var _this;

        _this = _React$Component.call(this, props, context) || this;

        var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear


        _this.state = {
          contextValue: {
            isMounting: true
          },
          handleExited: handleExited,
          firstRender: true
        };
        return _this;
      }

      var _proto = TransitionGroup.prototype;

      _proto.componentDidMount = function componentDidMount() {
        this.mounted = true;
        this.setState({
          contextValue: {
            isMounting: false
          }
        });
      };

      _proto.componentWillUnmount = function componentWillUnmount() {
        this.mounted = false;
      };

      TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
        var prevChildMapping = _ref.children,
            handleExited = _ref.handleExited,
            firstRender = _ref.firstRender;
        return {
          children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
          firstRender: false
        };
      } // node is `undefined` when user provided `nodeRef` prop
      ;

      _proto.handleExited = function handleExited(child, node) {
        var currentChildMapping = getChildMapping(this.props.children);
        if (child.key in currentChildMapping) return;

        if (child.props.onExited) {
          child.props.onExited(node);
        }

        if (this.mounted) {
          this.setState(function (state) {
            var children = _extends({}, state.children);

            delete children[child.key];
            return {
              children: children
            };
          });
        }
      };

      _proto.render = function render() {
        var _this$props = this.props,
            Component = _this$props.component,
            childFactory = _this$props.childFactory,
            props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

        var contextValue = this.state.contextValue;
        var children = values(this.state.children).map(childFactory);
        delete props.appear;
        delete props.enter;
        delete props.exit;

        if (Component === null) {
          return /*#__PURE__*/React__default["default"].createElement(TransitionGroupContext.Provider, {
            value: contextValue
          }, children);
        }

        return /*#__PURE__*/React__default["default"].createElement(TransitionGroupContext.Provider, {
          value: contextValue
        }, /*#__PURE__*/React__default["default"].createElement(Component, props, children));
      };

      return TransitionGroup;
    }(React__default["default"].Component);

    TransitionGroup.propTypes = {
      /**
       * `<TransitionGroup>` renders a `<div>` by default. You can change this
       * behavior by providing a `component` prop.
       * If you use React v16+ and would like to avoid a wrapping `<div>` element
       * you can pass in `component={null}`. This is useful if the wrapping div
       * borks your css styles.
       */
      component: PropTypes.any,

      /**
       * A set of `<Transition>` components, that are toggled `in` and out as they
       * leave. the `<TransitionGroup>` will inject specific transition props, so
       * remember to spread them through if you are wrapping the `<Transition>` as
       * with our `<Fade>` example.
       *
       * While this component is meant for multiple `Transition` or `CSSTransition`
       * children, sometimes you may want to have a single transition child with
       * content that you want to be transitioned out and in when you change it
       * (e.g. routes, images etc.) In that case you can change the `key` prop of
       * the transition child as you change its content, this will cause
       * `TransitionGroup` to transition the child out and back in.
       */
      children: PropTypes.node,

      /**
       * A convenience prop that enables or disables appear animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      appear: PropTypes.bool,

      /**
       * A convenience prop that enables or disables enter animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      enter: PropTypes.bool,

      /**
       * A convenience prop that enables or disables exit animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      exit: PropTypes.bool,

      /**
       * You may need to apply reactive updates to a child as it is exiting.
       * This is generally done by using `cloneElement` however in the case of an exiting
       * child the element has already been removed and not accessible to the consumer.
       *
       * If you do need to update a child as it leaves you can provide a `childFactory`
       * to wrap every child, even the ones that are leaving.
       *
       * @type Function(child: ReactElement) -> ReactElement
       */
      childFactory: PropTypes.func
    } ;
    TransitionGroup.defaultProps = defaultProps;
    var TransitionGroup$1 = TransitionGroup;

    const reflow = node => node.scrollTop;
    function getTransitionProps(props, options) {
      var _style$transitionDura, _style$transitionTimi;
      const {
        timeout,
        easing,
        style = {}
      } = props;
      return {
        duration: (_style$transitionDura = style.transitionDuration) != null ? _style$transitionDura : typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,
        easing: (_style$transitionTimi = style.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing === 'object' ? easing[options.mode] : easing,
        delay: style.transitionDelay
      };
    }

    function getCollapseUtilityClass(slot) {
      return generateUtilityClass('MuiCollapse', slot);
    }
    generateUtilityClasses('MuiCollapse', ['root', 'horizontal', 'vertical', 'entered', 'hidden', 'wrapper', 'wrapperInner']);

    const _excluded$1J = ["addEndListener", "children", "className", "collapsedSize", "component", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "orientation", "style", "timeout", "TransitionComponent"];
    const useUtilityClasses$1s = ownerState => {
      const {
        orientation,
        classes
      } = ownerState;
      const slots = {
        root: ['root', `${orientation}`],
        entered: ['entered'],
        hidden: ['hidden'],
        wrapper: ['wrapper', `${orientation}`],
        wrapperInner: ['wrapperInner', `${orientation}`]
      };
      return composeClasses(slots, getCollapseUtilityClass, classes);
    };
    const CollapseRoot = styled$1('div', {
      name: 'MuiCollapse',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[ownerState.orientation], ownerState.state === 'entered' && styles.entered, ownerState.state === 'exited' && !ownerState.in && ownerState.collapsedSize === '0px' && styles.hidden];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      height: 0,
      overflow: 'hidden',
      transition: theme.transitions.create('height')
    }, ownerState.orientation === 'horizontal' && {
      height: 'auto',
      width: 0,
      transition: theme.transitions.create('width')
    }, ownerState.state === 'entered' && _extends({
      height: 'auto',
      overflow: 'visible'
    }, ownerState.orientation === 'horizontal' && {
      width: 'auto'
    }), ownerState.state === 'exited' && !ownerState.in && ownerState.collapsedSize === '0px' && {
      visibility: 'hidden'
    }));
    const CollapseWrapper = styled$1('div', {
      name: 'MuiCollapse',
      slot: 'Wrapper',
      overridesResolver: (props, styles) => styles.wrapper
    })(({
      ownerState
    }) => _extends({
      // Hack to get children with a negative margin to not falsify the height computation.
      display: 'flex',
      width: '100%'
    }, ownerState.orientation === 'horizontal' && {
      width: 'auto',
      height: '100%'
    }));
    const CollapseWrapperInner = styled$1('div', {
      name: 'MuiCollapse',
      slot: 'WrapperInner',
      overridesResolver: (props, styles) => styles.wrapperInner
    })(({
      ownerState
    }) => _extends({
      width: '100%'
    }, ownerState.orientation === 'horizontal' && {
      width: 'auto',
      height: '100%'
    }));

    /**
     * The Collapse transition is used by the
     * [Vertical Stepper](/material-ui/react-stepper/#vertical-stepper) StepContent component.
     * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
     */
    const Collapse = /*#__PURE__*/React__namespace.forwardRef(function Collapse(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiCollapse'
      });
      const {
          addEndListener,
          children,
          className,
          collapsedSize: collapsedSizeProp = '0px',
          component,
          easing,
          in: inProp,
          onEnter,
          onEntered,
          onEntering,
          onExit,
          onExited,
          onExiting,
          orientation = 'vertical',
          style,
          timeout = duration.standard,
          // eslint-disable-next-line react/prop-types
          TransitionComponent = Transition$1
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1J);
      const ownerState = _extends({}, props, {
        orientation,
        collapsedSize: collapsedSizeProp
      });
      const classes = useUtilityClasses$1s(ownerState);
      const theme = useTheme();
      const timer = React__namespace.useRef();
      const wrapperRef = React__namespace.useRef(null);
      const autoTransitionDuration = React__namespace.useRef();
      const collapsedSize = typeof collapsedSizeProp === 'number' ? `${collapsedSizeProp}px` : collapsedSizeProp;
      const isHorizontal = orientation === 'horizontal';
      const size = isHorizontal ? 'width' : 'height';
      React__namespace.useEffect(() => {
        return () => {
          clearTimeout(timer.current);
        };
      }, []);
      const nodeRef = React__namespace.useRef(null);
      const handleRef = useForkRef(ref, nodeRef);
      const normalizedTransitionCallback = callback => maybeIsAppearing => {
        if (callback) {
          const node = nodeRef.current;

          // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
          if (maybeIsAppearing === undefined) {
            callback(node);
          } else {
            callback(node, maybeIsAppearing);
          }
        }
      };
      const getWrapperSize = () => wrapperRef.current ? wrapperRef.current[isHorizontal ? 'clientWidth' : 'clientHeight'] : 0;
      const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
        if (wrapperRef.current && isHorizontal) {
          // Set absolute position to get the size of collapsed content
          wrapperRef.current.style.position = 'absolute';
        }
        node.style[size] = collapsedSize;
        if (onEnter) {
          onEnter(node, isAppearing);
        }
      });
      const handleEntering = normalizedTransitionCallback((node, isAppearing) => {
        const wrapperSize = getWrapperSize();
        if (wrapperRef.current && isHorizontal) {
          // After the size is read reset the position back to default
          wrapperRef.current.style.position = '';
        }
        const {
          duration: transitionDuration,
          easing: transitionTimingFunction
        } = getTransitionProps({
          style,
          timeout,
          easing
        }, {
          mode: 'enter'
        });
        if (timeout === 'auto') {
          const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
          node.style.transitionDuration = `${duration2}ms`;
          autoTransitionDuration.current = duration2;
        } else {
          node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : `${transitionDuration}ms`;
        }
        node.style[size] = `${wrapperSize}px`;
        node.style.transitionTimingFunction = transitionTimingFunction;
        if (onEntering) {
          onEntering(node, isAppearing);
        }
      });
      const handleEntered = normalizedTransitionCallback((node, isAppearing) => {
        node.style[size] = 'auto';
        if (onEntered) {
          onEntered(node, isAppearing);
        }
      });
      const handleExit = normalizedTransitionCallback(node => {
        node.style[size] = `${getWrapperSize()}px`;
        if (onExit) {
          onExit(node);
        }
      });
      const handleExited = normalizedTransitionCallback(onExited);
      const handleExiting = normalizedTransitionCallback(node => {
        const wrapperSize = getWrapperSize();
        const {
          duration: transitionDuration,
          easing: transitionTimingFunction
        } = getTransitionProps({
          style,
          timeout,
          easing
        }, {
          mode: 'exit'
        });
        if (timeout === 'auto') {
          // TODO: rename getAutoHeightDuration to something more generic (width support)
          // Actually it just calculates animation duration based on size
          const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
          node.style.transitionDuration = `${duration2}ms`;
          autoTransitionDuration.current = duration2;
        } else {
          node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : `${transitionDuration}ms`;
        }
        node.style[size] = collapsedSize;
        node.style.transitionTimingFunction = transitionTimingFunction;
        if (onExiting) {
          onExiting(node);
        }
      });
      const handleAddEndListener = next => {
        if (timeout === 'auto') {
          timer.current = setTimeout(next, autoTransitionDuration.current || 0);
        }
        if (addEndListener) {
          // Old call signature before `react-transition-group` implemented `nodeRef`
          addEndListener(nodeRef.current, next);
        }
      };
      return /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
        in: inProp,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: handleAddEndListener,
        nodeRef: nodeRef,
        timeout: timeout === 'auto' ? null : timeout
      }, other, {
        children: (state, childProps) => /*#__PURE__*/jsxRuntime.exports.jsx(CollapseRoot, _extends({
          as: component,
          className: clsx(classes.root, className, {
            'entered': classes.entered,
            'exited': !inProp && collapsedSize === '0px' && classes.hidden
          }[state]),
          style: _extends({
            [isHorizontal ? 'minWidth' : 'minHeight']: collapsedSize
          }, style),
          ownerState: _extends({}, ownerState, {
            state
          }),
          ref: handleRef
        }, childProps, {
          children: /*#__PURE__*/jsxRuntime.exports.jsx(CollapseWrapper, {
            ownerState: _extends({}, ownerState, {
              state
            }),
            className: classes.wrapper,
            ref: wrapperRef,
            children: /*#__PURE__*/jsxRuntime.exports.jsx(CollapseWrapperInner, {
              ownerState: _extends({}, ownerState, {
                state
              }),
              className: classes.wrapperInner,
              children: children
            })
          })
        }))
      }));
    });
    Collapse.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * Add a custom transition end trigger. Called with the transitioning DOM
       * node and a done callback. Allows for more fine grained transition end
       * logic. Note: Timeouts are still used as a fallback if provided.
       */
      addEndListener: PropTypes.func,
      /**
       * The content node to be collapsed.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The width (horizontal) or height (vertical) of the container when collapsed.
       * @default '0px'
       */
      collapsedSize: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: elementTypeAcceptingRef$1,
      /**
       * The transition timing function.
       * You may specify a single easing or a object containing enter and exit values.
       */
      easing: PropTypes.oneOfType([PropTypes.shape({
        enter: PropTypes.string,
        exit: PropTypes.string
      }), PropTypes.string]),
      /**
       * If `true`, the component will transition in.
       */
      in: PropTypes.bool,
      /**
       * @ignore
       */
      onEnter: PropTypes.func,
      /**
       * @ignore
       */
      onEntered: PropTypes.func,
      /**
       * @ignore
       */
      onEntering: PropTypes.func,
      /**
       * @ignore
       */
      onExit: PropTypes.func,
      /**
       * @ignore
       */
      onExited: PropTypes.func,
      /**
       * @ignore
       */
      onExiting: PropTypes.func,
      /**
       * The transition orientation.
       * @default 'vertical'
       */
      orientation: PropTypes.oneOf(['horizontal', 'vertical']),
      /**
       * @ignore
       */
      style: PropTypes.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       *
       * Set to 'auto' to automatically calculate transition time based on height.
       * @default duration.standard
       */
      timeout: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.shape({
        appear: PropTypes.number,
        enter: PropTypes.number,
        exit: PropTypes.number
      })])
    } ;
    Collapse.muiSupportAuto = true;
    var Collapse$1 = Collapse;

    function getPaperUtilityClass(slot) {
      return generateUtilityClass('MuiPaper', slot);
    }
    generateUtilityClasses('MuiPaper', ['root', 'rounded', 'outlined', 'elevation', 'elevation0', 'elevation1', 'elevation2', 'elevation3', 'elevation4', 'elevation5', 'elevation6', 'elevation7', 'elevation8', 'elevation9', 'elevation10', 'elevation11', 'elevation12', 'elevation13', 'elevation14', 'elevation15', 'elevation16', 'elevation17', 'elevation18', 'elevation19', 'elevation20', 'elevation21', 'elevation22', 'elevation23', 'elevation24']);

    const _excluded$1I = ["className", "component", "elevation", "square", "variant"];
    const useUtilityClasses$1r = ownerState => {
      const {
        square,
        elevation,
        variant,
        classes
      } = ownerState;
      const slots = {
        root: ['root', variant, !square && 'rounded', variant === 'elevation' && `elevation${elevation}`]
      };
      return composeClasses(slots, getPaperUtilityClass, classes);
    };
    const PaperRoot = styled$1('div', {
      name: 'MuiPaper',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[ownerState.variant], !ownerState.square && styles.rounded, ownerState.variant === 'elevation' && styles[`elevation${ownerState.elevation}`]];
      }
    })(({
      theme,
      ownerState
    }) => {
      var _theme$vars$overlays;
      return _extends({
        backgroundColor: (theme.vars || theme).palette.background.paper,
        color: (theme.vars || theme).palette.text.primary,
        transition: theme.transitions.create('box-shadow')
      }, !ownerState.square && {
        borderRadius: theme.shape.borderRadius
      }, ownerState.variant === 'outlined' && {
        border: `1px solid ${(theme.vars || theme).palette.divider}`
      }, ownerState.variant === 'elevation' && _extends({
        boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
      }, !theme.vars && theme.palette.mode === 'dark' && {
        backgroundImage: `linear-gradient(${alpha('#fff', getOverlayAlpha$1(ownerState.elevation))}, ${alpha('#fff', getOverlayAlpha$1(ownerState.elevation))})`
      }, theme.vars && {
        backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
      }));
    });
    const Paper = /*#__PURE__*/React__namespace.forwardRef(function Paper(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiPaper'
      });
      const {
          className,
          component = 'div',
          elevation = 1,
          square = false,
          variant = 'elevation'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1I);
      const ownerState = _extends({}, props, {
        component,
        elevation,
        square,
        variant
      });
      const classes = useUtilityClasses$1r(ownerState);
      {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        const theme = useTheme();
        if (theme.shadows[elevation] === undefined) {
          console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join('\n'));
        }
      }
      return /*#__PURE__*/jsxRuntime.exports.jsx(PaperRoot, _extends({
        as: component,
        ownerState: ownerState,
        className: clsx(classes.root, className),
        ref: ref
      }, other));
    });
    Paper.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * Shadow depth, corresponds to `dp` in the spec.
       * It accepts values between 0 and 24 inclusive.
       * @default 1
       */
      elevation: chainPropTypes(integerPropType, props => {
        const {
          elevation,
          variant
        } = props;
        if (elevation > 0 && variant === 'outlined') {
          return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
        }
        return null;
      }),
      /**
       * If `true`, rounded corners are disabled.
       * @default false
       */
      square: PropTypes.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The variant to use.
       * @default 'elevation'
       */
      variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['elevation', 'outlined']), PropTypes.string])
    } ;
    var Paper$1 = Paper;

    /**
     * @ignore - internal component.
     * @type {React.Context<{} | {expanded: boolean, disabled: boolean, toggle: () => void}>}
     */
    const AccordionContext = /*#__PURE__*/React__namespace.createContext({});
    {
      AccordionContext.displayName = 'AccordionContext';
    }
    var AccordionContext$1 = AccordionContext;

    function getAccordionUtilityClass(slot) {
      return generateUtilityClass('MuiAccordion', slot);
    }
    const accordionClasses = generateUtilityClasses('MuiAccordion', ['root', 'rounded', 'expanded', 'disabled', 'gutters', 'region']);
    var accordionClasses$1 = accordionClasses;

    const _excluded$1H = ["children", "className", "defaultExpanded", "disabled", "disableGutters", "expanded", "onChange", "square", "TransitionComponent", "TransitionProps"];
    const useUtilityClasses$1q = ownerState => {
      const {
        classes,
        square,
        expanded,
        disabled,
        disableGutters
      } = ownerState;
      const slots = {
        root: ['root', !square && 'rounded', expanded && 'expanded', disabled && 'disabled', !disableGutters && 'gutters'],
        region: ['region']
      };
      return composeClasses(slots, getAccordionUtilityClass, classes);
    };
    const AccordionRoot = styled$1(Paper$1, {
      name: 'MuiAccordion',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${accordionClasses$1.region}`]: styles.region
        }, styles.root, !ownerState.square && styles.rounded, !ownerState.disableGutters && styles.gutters];
      }
    })(({
      theme
    }) => {
      const transition = {
        duration: theme.transitions.duration.shortest
      };
      return {
        position: 'relative',
        transition: theme.transitions.create(['margin'], transition),
        overflowAnchor: 'none',
        // Keep the same scrolling position
        '&:before': {
          position: 'absolute',
          left: 0,
          top: -1,
          right: 0,
          height: 1,
          content: '""',
          opacity: 1,
          backgroundColor: (theme.vars || theme).palette.divider,
          transition: theme.transitions.create(['opacity', 'background-color'], transition)
        },
        '&:first-of-type': {
          '&:before': {
            display: 'none'
          }
        },
        [`&.${accordionClasses$1.expanded}`]: {
          '&:before': {
            opacity: 0
          },
          '&:first-of-type': {
            marginTop: 0
          },
          '&:last-of-type': {
            marginBottom: 0
          },
          '& + &': {
            '&:before': {
              display: 'none'
            }
          }
        },
        [`&.${accordionClasses$1.disabled}`]: {
          backgroundColor: (theme.vars || theme).palette.action.disabledBackground
        }
      };
    }, ({
      theme,
      ownerState
    }) => _extends({}, !ownerState.square && {
      borderRadius: 0,
      '&:first-of-type': {
        borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
        borderTopRightRadius: (theme.vars || theme).shape.borderRadius
      },
      '&:last-of-type': {
        borderBottomLeftRadius: (theme.vars || theme).shape.borderRadius,
        borderBottomRightRadius: (theme.vars || theme).shape.borderRadius,
        // Fix a rendering issue on Edge
        '@supports (-ms-ime-align: auto)': {
          borderBottomLeftRadius: 0,
          borderBottomRightRadius: 0
        }
      }
    }, !ownerState.disableGutters && {
      [`&.${accordionClasses$1.expanded}`]: {
        margin: '16px 0'
      }
    }));
    const Accordion = /*#__PURE__*/React__namespace.forwardRef(function Accordion(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiAccordion'
      });
      const {
          children: childrenProp,
          className,
          defaultExpanded = false,
          disabled = false,
          disableGutters = false,
          expanded: expandedProp,
          onChange,
          square = false,
          TransitionComponent = Collapse$1,
          TransitionProps
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1H);
      const [expanded, setExpandedState] = useControlled({
        controlled: expandedProp,
        default: defaultExpanded,
        name: 'Accordion',
        state: 'expanded'
      });
      const handleChange = React__namespace.useCallback(event => {
        setExpandedState(!expanded);
        if (onChange) {
          onChange(event, !expanded);
        }
      }, [expanded, onChange, setExpandedState]);
      const [summary, ...children] = React__namespace.Children.toArray(childrenProp);
      const contextValue = React__namespace.useMemo(() => ({
        expanded,
        disabled,
        disableGutters,
        toggle: handleChange
      }), [expanded, disabled, disableGutters, handleChange]);
      const ownerState = _extends({}, props, {
        square,
        disabled,
        disableGutters,
        expanded
      });
      const classes = useUtilityClasses$1q(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsxs(AccordionRoot, _extends({
        className: clsx(classes.root, className),
        ref: ref,
        ownerState: ownerState,
        square: square
      }, other, {
        children: [/*#__PURE__*/jsxRuntime.exports.jsx(AccordionContext$1.Provider, {
          value: contextValue,
          children: summary
        }), /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
          in: expanded,
          timeout: "auto"
        }, TransitionProps, {
          children: /*#__PURE__*/jsxRuntime.exports.jsx("div", {
            "aria-labelledby": summary.props.id,
            id: summary.props['aria-controls'],
            role: "region",
            className: classes.region,
            children: children
          })
        }))]
      }));
    });
    Accordion.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: chainPropTypes(PropTypes.node.isRequired, props => {
        const summary = React__namespace.Children.toArray(props.children)[0];
        if (reactIs.exports.isFragment(summary)) {
          return new Error("MUI: The Accordion doesn't accept a Fragment as a child. " + 'Consider providing an array instead.');
        }
        if (! /*#__PURE__*/React__namespace.isValidElement(summary)) {
          return new Error('MUI: Expected the first child of Accordion to be a valid element.');
        }
        return null;
      }),
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * If `true`, expands the accordion by default.
       * @default false
       */
      defaultExpanded: PropTypes.bool,
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, it removes the margin between two expanded accordion items and the increase of height.
       * @default false
       */
      disableGutters: PropTypes.bool,
      /**
       * If `true`, expands the accordion, otherwise collapse it.
       * Setting this prop enables control over the accordion.
       */
      expanded: PropTypes.bool,
      /**
       * Callback fired when the expand/collapse state is changed.
       *
       * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
       * @param {boolean} expanded The `expanded` state of the accordion.
       */
      onChange: PropTypes.func,
      /**
       * If `true`, rounded corners are disabled.
       * @default false
       */
      square: PropTypes.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The component used for the transition.
       * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
       * @default Collapse
       */
      TransitionComponent: PropTypes.elementType,
      /**
       * Props applied to the transition element.
       * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
       */
      TransitionProps: PropTypes.object
    } ;
    var Accordion$1 = Accordion;

    function getAccordionDetailsUtilityClass(slot) {
      return generateUtilityClass('MuiAccordionDetails', slot);
    }
    generateUtilityClasses('MuiAccordionDetails', ['root']);

    const _excluded$1G = ["className"];
    const useUtilityClasses$1p = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root']
      };
      return composeClasses(slots, getAccordionDetailsUtilityClass, classes);
    };
    const AccordionDetailsRoot = styled$1('div', {
      name: 'MuiAccordionDetails',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })(({
      theme
    }) => ({
      padding: theme.spacing(1, 2, 2)
    }));
    const AccordionDetails = /*#__PURE__*/React__namespace.forwardRef(function AccordionDetails(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiAccordionDetails'
      });
      const {
          className
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1G);
      const ownerState = props;
      const classes = useUtilityClasses$1p(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(AccordionDetailsRoot, _extends({
        className: clsx(classes.root, className),
        ref: ref,
        ownerState: ownerState
      }, other));
    });
    AccordionDetails.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var AccordionDetails$1 = AccordionDetails;

    function Ripple(props) {
      const {
        className,
        classes,
        pulsate = false,
        rippleX,
        rippleY,
        rippleSize,
        in: inProp,
        onExited,
        timeout
      } = props;
      const [leaving, setLeaving] = React__namespace.useState(false);
      const rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
      const rippleStyles = {
        width: rippleSize,
        height: rippleSize,
        top: -(rippleSize / 2) + rippleY,
        left: -(rippleSize / 2) + rippleX
      };
      const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
      if (!inProp && !leaving) {
        setLeaving(true);
      }
      React__namespace.useEffect(() => {
        if (!inProp && onExited != null) {
          // react-transition-group#onExited
          const timeoutId = setTimeout(onExited, timeout);
          return () => {
            clearTimeout(timeoutId);
          };
        }
        return undefined;
      }, [onExited, inProp, timeout]);
      return /*#__PURE__*/jsxRuntime.exports.jsx("span", {
        className: rippleClassName,
        style: rippleStyles,
        children: /*#__PURE__*/jsxRuntime.exports.jsx("span", {
          className: childClassName
        })
      });
    }
    Ripple.propTypes = {
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: PropTypes.object.isRequired,
      className: PropTypes.string,
      /**
       * @ignore - injected from TransitionGroup
       */
      in: PropTypes.bool,
      /**
       * @ignore - injected from TransitionGroup
       */
      onExited: PropTypes.func,
      /**
       * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
       */
      pulsate: PropTypes.bool,
      /**
       * Diameter of the ripple.
       */
      rippleSize: PropTypes.number,
      /**
       * Horizontal position of the ripple center.
       */
      rippleX: PropTypes.number,
      /**
       * Vertical position of the ripple center.
       */
      rippleY: PropTypes.number,
      /**
       * exit delay
       */
      timeout: PropTypes.number.isRequired
    } ;

    const touchRippleClasses = generateUtilityClasses('MuiTouchRipple', ['root', 'ripple', 'rippleVisible', 'ripplePulsate', 'child', 'childLeaving', 'childPulsate']);
    var touchRippleClasses$1 = touchRippleClasses;

    const _excluded$1F = ["center", "classes", "className"];
    let _ = t => t,
      _t,
      _t2,
      _t3,
      _t4;
    const DURATION = 550;
    const DELAY_RIPPLE = 80;
    const enterKeyframe = keyframes(_t || (_t = _`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
    const exitKeyframe = keyframes(_t2 || (_t2 = _`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
    const pulsateKeyframe = keyframes(_t3 || (_t3 = _`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
    const TouchRippleRoot = styled$1('span', {
      name: 'MuiTouchRipple',
      slot: 'Root'
    })({
      overflow: 'hidden',
      pointerEvents: 'none',
      position: 'absolute',
      zIndex: 0,
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      borderRadius: 'inherit'
    });

    // This `styled()` function invokes keyframes. `styled-components` only supports keyframes
    // in string templates. Do not convert these styles in JS object as it will break.
    const TouchRippleRipple = styled$1(Ripple, {
      name: 'MuiTouchRipple',
      slot: 'Ripple'
    })(_t4 || (_t4 = _`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses$1.rippleVisible, enterKeyframe, DURATION, ({
      theme
    }) => theme.transitions.easing.easeInOut, touchRippleClasses$1.ripplePulsate, ({
      theme
    }) => theme.transitions.duration.shorter, touchRippleClasses$1.child, touchRippleClasses$1.childLeaving, exitKeyframe, DURATION, ({
      theme
    }) => theme.transitions.easing.easeInOut, touchRippleClasses$1.childPulsate, pulsateKeyframe, ({
      theme
    }) => theme.transitions.easing.easeInOut);

    /**
     * @ignore - internal component.
     *
     * TODO v5: Make private
     */
    const TouchRipple = /*#__PURE__*/React__namespace.forwardRef(function TouchRipple(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiTouchRipple'
      });
      const {
          center: centerProp = false,
          classes = {},
          className
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1F);
      const [ripples, setRipples] = React__namespace.useState([]);
      const nextKey = React__namespace.useRef(0);
      const rippleCallback = React__namespace.useRef(null);
      React__namespace.useEffect(() => {
        if (rippleCallback.current) {
          rippleCallback.current();
          rippleCallback.current = null;
        }
      }, [ripples]);

      // Used to filter out mouse emulated events on mobile.
      const ignoringMouseDown = React__namespace.useRef(false);
      // We use a timer in order to only show the ripples for touch "click" like events.
      // We don't want to display the ripple for touch scroll events.
      const startTimer = React__namespace.useRef(null);

      // This is the hook called once the previous timeout is ready.
      const startTimerCommit = React__namespace.useRef(null);
      const container = React__namespace.useRef(null);
      React__namespace.useEffect(() => {
        return () => {
          clearTimeout(startTimer.current);
        };
      }, []);
      const startCommit = React__namespace.useCallback(params => {
        const {
          pulsate,
          rippleX,
          rippleY,
          rippleSize,
          cb
        } = params;
        setRipples(oldRipples => [...oldRipples, /*#__PURE__*/jsxRuntime.exports.jsx(TouchRippleRipple, {
          classes: {
            ripple: clsx(classes.ripple, touchRippleClasses$1.ripple),
            rippleVisible: clsx(classes.rippleVisible, touchRippleClasses$1.rippleVisible),
            ripplePulsate: clsx(classes.ripplePulsate, touchRippleClasses$1.ripplePulsate),
            child: clsx(classes.child, touchRippleClasses$1.child),
            childLeaving: clsx(classes.childLeaving, touchRippleClasses$1.childLeaving),
            childPulsate: clsx(classes.childPulsate, touchRippleClasses$1.childPulsate)
          },
          timeout: DURATION,
          pulsate: pulsate,
          rippleX: rippleX,
          rippleY: rippleY,
          rippleSize: rippleSize
        }, nextKey.current)]);
        nextKey.current += 1;
        rippleCallback.current = cb;
      }, [classes]);
      const start = React__namespace.useCallback((event = {}, options = {}, cb = () => {}) => {
        const {
          pulsate = false,
          center = centerProp || options.pulsate,
          fakeElement = false // For test purposes
        } = options;
        if ((event == null ? void 0 : event.type) === 'mousedown' && ignoringMouseDown.current) {
          ignoringMouseDown.current = false;
          return;
        }
        if ((event == null ? void 0 : event.type) === 'touchstart') {
          ignoringMouseDown.current = true;
        }
        const element = fakeElement ? null : container.current;
        const rect = element ? element.getBoundingClientRect() : {
          width: 0,
          height: 0,
          left: 0,
          top: 0
        };

        // Get the size of the ripple
        let rippleX;
        let rippleY;
        let rippleSize;
        if (center || event === undefined || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
          rippleX = Math.round(rect.width / 2);
          rippleY = Math.round(rect.height / 2);
        } else {
          const {
            clientX,
            clientY
          } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
          rippleX = Math.round(clientX - rect.left);
          rippleY = Math.round(clientY - rect.top);
        }
        if (center) {
          rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);

          // For some reason the animation is broken on Mobile Chrome if the size is even.
          if (rippleSize % 2 === 0) {
            rippleSize += 1;
          }
        } else {
          const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
          const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
          rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
        }

        // Touche devices
        if (event != null && event.touches) {
          // check that this isn't another touchstart due to multitouch
          // otherwise we will only clear a single timer when unmounting while two
          // are running
          if (startTimerCommit.current === null) {
            // Prepare the ripple effect.
            startTimerCommit.current = () => {
              startCommit({
                pulsate,
                rippleX,
                rippleY,
                rippleSize,
                cb
              });
            };
            // Delay the execution of the ripple effect.
            startTimer.current = setTimeout(() => {
              if (startTimerCommit.current) {
                startTimerCommit.current();
                startTimerCommit.current = null;
              }
            }, DELAY_RIPPLE); // We have to make a tradeoff with this value.
          }
        } else {
          startCommit({
            pulsate,
            rippleX,
            rippleY,
            rippleSize,
            cb
          });
        }
      }, [centerProp, startCommit]);
      const pulsate = React__namespace.useCallback(() => {
        start({}, {
          pulsate: true
        });
      }, [start]);
      const stop = React__namespace.useCallback((event, cb) => {
        clearTimeout(startTimer.current);

        // The touch interaction occurs too quickly.
        // We still want to show ripple effect.
        if ((event == null ? void 0 : event.type) === 'touchend' && startTimerCommit.current) {
          startTimerCommit.current();
          startTimerCommit.current = null;
          startTimer.current = setTimeout(() => {
            stop(event, cb);
          });
          return;
        }
        startTimerCommit.current = null;
        setRipples(oldRipples => {
          if (oldRipples.length > 0) {
            return oldRipples.slice(1);
          }
          return oldRipples;
        });
        rippleCallback.current = cb;
      }, []);
      React__namespace.useImperativeHandle(ref, () => ({
        pulsate,
        start,
        stop
      }), [pulsate, start, stop]);
      return /*#__PURE__*/jsxRuntime.exports.jsx(TouchRippleRoot, _extends({
        className: clsx(touchRippleClasses$1.root, classes.root, className),
        ref: container
      }, other, {
        children: /*#__PURE__*/jsxRuntime.exports.jsx(TransitionGroup$1, {
          component: null,
          exit: true,
          children: ripples
        })
      }));
    });
    TouchRipple.propTypes = {
      /**
       * If `true`, the ripple starts at the center of the component
       * rather than at the point of interaction.
       */
      center: PropTypes.bool,
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string
    } ;
    var TouchRipple$1 = TouchRipple;

    function getButtonBaseUtilityClass(slot) {
      return generateUtilityClass('MuiButtonBase', slot);
    }
    const buttonBaseClasses = generateUtilityClasses('MuiButtonBase', ['root', 'disabled', 'focusVisible']);
    var buttonBaseClasses$1 = buttonBaseClasses;

    const _excluded$1E = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];
    const useUtilityClasses$1o = ownerState => {
      const {
        disabled,
        focusVisible,
        focusVisibleClassName,
        classes
      } = ownerState;
      const slots = {
        root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']
      };
      const composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);
      if (focusVisible && focusVisibleClassName) {
        composedClasses.root += ` ${focusVisibleClassName}`;
      }
      return composedClasses;
    };
    const ButtonBaseRoot = styled$1('button', {
      name: 'MuiButtonBase',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({
      display: 'inline-flex',
      alignItems: 'center',
      justifyContent: 'center',
      position: 'relative',
      boxSizing: 'border-box',
      WebkitTapHighlightColor: 'transparent',
      backgroundColor: 'transparent',
      // Reset default value
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0,
      border: 0,
      margin: 0,
      // Remove the margin in Safari
      borderRadius: 0,
      padding: 0,
      // Remove the padding in Firefox
      cursor: 'pointer',
      userSelect: 'none',
      verticalAlign: 'middle',
      MozAppearance: 'none',
      // Reset
      WebkitAppearance: 'none',
      // Reset
      textDecoration: 'none',
      // So we take precedent over the style of a native <a /> element.
      color: 'inherit',
      '&::-moz-focus-inner': {
        borderStyle: 'none' // Remove Firefox dotted outline.
      },

      [`&.${buttonBaseClasses$1.disabled}`]: {
        pointerEvents: 'none',
        // Disable link interactions
        cursor: 'default'
      },
      '@media print': {
        colorAdjust: 'exact'
      }
    });

    /**
     * `ButtonBase` contains as few styles as possible.
     * It aims to be a simple building block for creating a button.
     * It contains a load of style reset and some focus/ripple logic.
     */
    const ButtonBase = /*#__PURE__*/React__namespace.forwardRef(function ButtonBase(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiButtonBase'
      });
      const {
          action,
          centerRipple = false,
          children,
          className,
          component = 'button',
          disabled = false,
          disableRipple = false,
          disableTouchRipple = false,
          focusRipple = false,
          LinkComponent = 'a',
          onBlur,
          onClick,
          onContextMenu,
          onDragLeave,
          onFocus,
          onFocusVisible,
          onKeyDown,
          onKeyUp,
          onMouseDown,
          onMouseLeave,
          onMouseUp,
          onTouchEnd,
          onTouchMove,
          onTouchStart,
          tabIndex = 0,
          TouchRippleProps,
          touchRippleRef,
          type
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1E);
      const buttonRef = React__namespace.useRef(null);
      const rippleRef = React__namespace.useRef(null);
      const handleRippleRef = useForkRef(rippleRef, touchRippleRef);
      const {
        isFocusVisibleRef,
        onFocus: handleFocusVisible,
        onBlur: handleBlurVisible,
        ref: focusVisibleRef
      } = useIsFocusVisible();
      const [focusVisible, setFocusVisible] = React__namespace.useState(false);
      if (disabled && focusVisible) {
        setFocusVisible(false);
      }
      React__namespace.useImperativeHandle(action, () => ({
        focusVisible: () => {
          setFocusVisible(true);
          buttonRef.current.focus();
        }
      }), []);
      const [mountedState, setMountedState] = React__namespace.useState(false);
      React__namespace.useEffect(() => {
        setMountedState(true);
      }, []);
      const enableTouchRipple = mountedState && !disableRipple && !disabled;
      React__namespace.useEffect(() => {
        if (focusVisible && focusRipple && !disableRipple && mountedState) {
          rippleRef.current.pulsate();
        }
      }, [disableRipple, focusRipple, focusVisible, mountedState]);
      function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
        return useEventCallback(event => {
          if (eventCallback) {
            eventCallback(event);
          }
          const ignore = skipRippleAction;
          if (!ignore && rippleRef.current) {
            rippleRef.current[rippleAction](event);
          }
          return true;
        });
      }
      const handleMouseDown = useRippleHandler('start', onMouseDown);
      const handleContextMenu = useRippleHandler('stop', onContextMenu);
      const handleDragLeave = useRippleHandler('stop', onDragLeave);
      const handleMouseUp = useRippleHandler('stop', onMouseUp);
      const handleMouseLeave = useRippleHandler('stop', event => {
        if (focusVisible) {
          event.preventDefault();
        }
        if (onMouseLeave) {
          onMouseLeave(event);
        }
      });
      const handleTouchStart = useRippleHandler('start', onTouchStart);
      const handleTouchEnd = useRippleHandler('stop', onTouchEnd);
      const handleTouchMove = useRippleHandler('stop', onTouchMove);
      const handleBlur = useRippleHandler('stop', event => {
        handleBlurVisible(event);
        if (isFocusVisibleRef.current === false) {
          setFocusVisible(false);
        }
        if (onBlur) {
          onBlur(event);
        }
      }, false);
      const handleFocus = useEventCallback(event => {
        // Fix for https://github.com/facebook/react/issues/7769
        if (!buttonRef.current) {
          buttonRef.current = event.currentTarget;
        }
        handleFocusVisible(event);
        if (isFocusVisibleRef.current === true) {
          setFocusVisible(true);
          if (onFocusVisible) {
            onFocusVisible(event);
          }
        }
        if (onFocus) {
          onFocus(event);
        }
      });
      const isNonNativeButton = () => {
        const button = buttonRef.current;
        return component && component !== 'button' && !(button.tagName === 'A' && button.href);
      };

      /**
       * IE11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat
       */
      const keydownRef = React__namespace.useRef(false);
      const handleKeyDown = useEventCallback(event => {
        // Check if key is already down to avoid repeats being counted as multiple activations
        if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {
          keydownRef.current = true;
          rippleRef.current.stop(event, () => {
            rippleRef.current.start(event);
          });
        }
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {
          event.preventDefault();
        }
        if (onKeyDown) {
          onKeyDown(event);
        }

        // Keyboard accessibility for non interactive elements
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
          event.preventDefault();
          if (onClick) {
            onClick(event);
          }
        }
      });
      const handleKeyUp = useEventCallback(event => {
        // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
        // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
        if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {
          keydownRef.current = false;
          rippleRef.current.stop(event, () => {
            rippleRef.current.pulsate(event);
          });
        }
        if (onKeyUp) {
          onKeyUp(event);
        }

        // Keyboard accessibility for non interactive elements
        if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {
          onClick(event);
        }
      });
      let ComponentProp = component;
      if (ComponentProp === 'button' && (other.href || other.to)) {
        ComponentProp = LinkComponent;
      }
      const buttonProps = {};
      if (ComponentProp === 'button') {
        buttonProps.type = type === undefined ? 'button' : type;
        buttonProps.disabled = disabled;
      } else {
        if (!other.href && !other.to) {
          buttonProps.role = 'button';
        }
        if (disabled) {
          buttonProps['aria-disabled'] = disabled;
        }
      }
      const handleRef = useForkRef(ref, focusVisibleRef, buttonRef);
      {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__namespace.useEffect(() => {
          if (enableTouchRipple && !rippleRef.current) {
            console.error(['MUI: The `component` prop provided to ButtonBase is invalid.', 'Please make sure the children prop is rendered in this custom component.'].join('\n'));
          }
        }, [enableTouchRipple]);
      }
      const ownerState = _extends({}, props, {
        centerRipple,
        component,
        disabled,
        disableRipple,
        disableTouchRipple,
        focusRipple,
        tabIndex,
        focusVisible
      });
      const classes = useUtilityClasses$1o(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsxs(ButtonBaseRoot, _extends({
        as: ComponentProp,
        className: clsx(classes.root, className),
        ownerState: ownerState,
        onBlur: handleBlur,
        onClick: onClick,
        onContextMenu: handleContextMenu,
        onFocus: handleFocus,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp,
        onMouseDown: handleMouseDown,
        onMouseLeave: handleMouseLeave,
        onMouseUp: handleMouseUp,
        onDragLeave: handleDragLeave,
        onTouchEnd: handleTouchEnd,
        onTouchMove: handleTouchMove,
        onTouchStart: handleTouchStart,
        ref: handleRef,
        tabIndex: disabled ? -1 : tabIndex,
        type: type
      }, buttonProps, other, {
        children: [children, enableTouchRipple ?
        /*#__PURE__*/
        /* TouchRipple is only needed client-side, x2 boost on the server. */
        jsxRuntime.exports.jsx(TouchRipple$1, _extends({
          ref: handleRippleRef,
          center: centerRipple
        }, TouchRippleProps)) : null]
      }));
    });
    ButtonBase.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * A ref for imperative actions.
       * It currently only supports `focusVisible()` action.
       */
      action: refType$1,
      /**
       * If `true`, the ripples are centered.
       * They won't start at the cursor interaction position.
       * @default false
       */
      centerRipple: PropTypes.bool,
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: elementTypeAcceptingRef$1,
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, the ripple effect is disabled.
       *
       * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
       * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
       * @default false
       */
      disableRipple: PropTypes.bool,
      /**
       * If `true`, the touch ripple effect is disabled.
       * @default false
       */
      disableTouchRipple: PropTypes.bool,
      /**
       * If `true`, the base button will have a keyboard focus ripple.
       * @default false
       */
      focusRipple: PropTypes.bool,
      /**
       * This prop can help identify which element has keyboard focus.
       * The class name will be applied when the element gains the focus through keyboard interaction.
       * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
       * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
       * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
       * if needed.
       */
      focusVisibleClassName: PropTypes.string,
      /**
       * @ignore
       */
      href: PropTypes /* @typescript-to-proptypes-ignore */.any,
      /**
       * The component used to render a link when the `href` prop is provided.
       * @default 'a'
       */
      LinkComponent: PropTypes.elementType,
      /**
       * @ignore
       */
      onBlur: PropTypes.func,
      /**
       * @ignore
       */
      onClick: PropTypes.func,
      /**
       * @ignore
       */
      onContextMenu: PropTypes.func,
      /**
       * @ignore
       */
      onDragLeave: PropTypes.func,
      /**
       * @ignore
       */
      onFocus: PropTypes.func,
      /**
       * Callback fired when the component is focused with a keyboard.
       * We trigger a `onFocus` callback too.
       */
      onFocusVisible: PropTypes.func,
      /**
       * @ignore
       */
      onKeyDown: PropTypes.func,
      /**
       * @ignore
       */
      onKeyUp: PropTypes.func,
      /**
       * @ignore
       */
      onMouseDown: PropTypes.func,
      /**
       * @ignore
       */
      onMouseLeave: PropTypes.func,
      /**
       * @ignore
       */
      onMouseUp: PropTypes.func,
      /**
       * @ignore
       */
      onTouchEnd: PropTypes.func,
      /**
       * @ignore
       */
      onTouchMove: PropTypes.func,
      /**
       * @ignore
       */
      onTouchStart: PropTypes.func,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * @default 0
       */
      tabIndex: PropTypes.number,
      /**
       * Props applied to the `TouchRipple` element.
       */
      TouchRippleProps: PropTypes.object,
      /**
       * A ref that points to the `TouchRipple` element.
       */
      touchRippleRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
        current: PropTypes.shape({
          pulsate: PropTypes.func.isRequired,
          start: PropTypes.func.isRequired,
          stop: PropTypes.func.isRequired
        })
      })]),
      /**
       * @ignore
       */
      type: PropTypes.oneOfType([PropTypes.oneOf(['button', 'reset', 'submit']), PropTypes.string])
    } ;
    var ButtonBase$1 = ButtonBase;

    function getAccordionSummaryUtilityClass(slot) {
      return generateUtilityClass('MuiAccordionSummary', slot);
    }
    const accordionSummaryClasses = generateUtilityClasses('MuiAccordionSummary', ['root', 'expanded', 'focusVisible', 'disabled', 'gutters', 'contentGutters', 'content', 'expandIconWrapper']);
    var accordionSummaryClasses$1 = accordionSummaryClasses;

    const _excluded$1D = ["children", "className", "expandIcon", "focusVisibleClassName", "onClick"];
    const useUtilityClasses$1n = ownerState => {
      const {
        classes,
        expanded,
        disabled,
        disableGutters
      } = ownerState;
      const slots = {
        root: ['root', expanded && 'expanded', disabled && 'disabled', !disableGutters && 'gutters'],
        focusVisible: ['focusVisible'],
        content: ['content', expanded && 'expanded', !disableGutters && 'contentGutters'],
        expandIconWrapper: ['expandIconWrapper', expanded && 'expanded']
      };
      return composeClasses(slots, getAccordionSummaryUtilityClass, classes);
    };
    const AccordionSummaryRoot = styled$1(ButtonBase$1, {
      name: 'MuiAccordionSummary',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })(({
      theme,
      ownerState
    }) => {
      const transition = {
        duration: theme.transitions.duration.shortest
      };
      return _extends({
        display: 'flex',
        minHeight: 48,
        padding: theme.spacing(0, 2),
        transition: theme.transitions.create(['min-height', 'background-color'], transition),
        [`&.${accordionSummaryClasses$1.focusVisible}`]: {
          backgroundColor: (theme.vars || theme).palette.action.focus
        },
        [`&.${accordionSummaryClasses$1.disabled}`]: {
          opacity: (theme.vars || theme).palette.action.disabledOpacity
        },
        [`&:hover:not(.${accordionSummaryClasses$1.disabled})`]: {
          cursor: 'pointer'
        }
      }, !ownerState.disableGutters && {
        [`&.${accordionSummaryClasses$1.expanded}`]: {
          minHeight: 64
        }
      });
    });
    const AccordionSummaryContent = styled$1('div', {
      name: 'MuiAccordionSummary',
      slot: 'Content',
      overridesResolver: (props, styles) => styles.content
    })(({
      theme,
      ownerState
    }) => _extends({
      display: 'flex',
      flexGrow: 1,
      margin: '12px 0'
    }, !ownerState.disableGutters && {
      transition: theme.transitions.create(['margin'], {
        duration: theme.transitions.duration.shortest
      }),
      [`&.${accordionSummaryClasses$1.expanded}`]: {
        margin: '20px 0'
      }
    }));
    const AccordionSummaryExpandIconWrapper = styled$1('div', {
      name: 'MuiAccordionSummary',
      slot: 'ExpandIconWrapper',
      overridesResolver: (props, styles) => styles.expandIconWrapper
    })(({
      theme
    }) => ({
      display: 'flex',
      color: (theme.vars || theme).palette.action.active,
      transform: 'rotate(0deg)',
      transition: theme.transitions.create('transform', {
        duration: theme.transitions.duration.shortest
      }),
      [`&.${accordionSummaryClasses$1.expanded}`]: {
        transform: 'rotate(180deg)'
      }
    }));
    const AccordionSummary = /*#__PURE__*/React__namespace.forwardRef(function AccordionSummary(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiAccordionSummary'
      });
      const {
          children,
          className,
          expandIcon,
          focusVisibleClassName,
          onClick
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1D);
      const {
        disabled = false,
        disableGutters,
        expanded,
        toggle
      } = React__namespace.useContext(AccordionContext$1);
      const handleChange = event => {
        if (toggle) {
          toggle(event);
        }
        if (onClick) {
          onClick(event);
        }
      };
      const ownerState = _extends({}, props, {
        expanded,
        disabled,
        disableGutters
      });
      const classes = useUtilityClasses$1n(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsxs(AccordionSummaryRoot, _extends({
        focusRipple: false,
        disableRipple: true,
        disabled: disabled,
        component: "div",
        "aria-expanded": expanded,
        className: clsx(classes.root, className),
        focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
        onClick: handleChange,
        ref: ref,
        ownerState: ownerState
      }, other, {
        children: [/*#__PURE__*/jsxRuntime.exports.jsx(AccordionSummaryContent, {
          className: classes.content,
          ownerState: ownerState,
          children: children
        }), expandIcon && /*#__PURE__*/jsxRuntime.exports.jsx(AccordionSummaryExpandIconWrapper, {
          className: classes.expandIconWrapper,
          ownerState: ownerState,
          children: expandIcon
        })]
      }));
    });
    AccordionSummary.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The icon to display as the expand indicator.
       */
      expandIcon: PropTypes.node,
      /**
       * This prop can help identify which element has keyboard focus.
       * The class name will be applied when the element gains the focus through keyboard interaction.
       * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
       * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
       * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
       * if needed.
       */
      focusVisibleClassName: PropTypes.string,
      /**
       * @ignore
       */
      onClick: PropTypes.func,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var AccordionSummary$1 = AccordionSummary;

    function getIconButtonUtilityClass(slot) {
      return generateUtilityClass('MuiIconButton', slot);
    }
    const iconButtonClasses = generateUtilityClasses('MuiIconButton', ['root', 'disabled', 'colorInherit', 'colorPrimary', 'colorSecondary', 'colorError', 'colorInfo', 'colorSuccess', 'colorWarning', 'edgeStart', 'edgeEnd', 'sizeSmall', 'sizeMedium', 'sizeLarge']);
    var iconButtonClasses$1 = iconButtonClasses;

    const _excluded$1C = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];
    const useUtilityClasses$1m = ownerState => {
      const {
        classes,
        disabled,
        color,
        edge,
        size
      } = ownerState;
      const slots = {
        root: ['root', disabled && 'disabled', color !== 'default' && `color${capitalize(color)}`, edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`]
      };
      return composeClasses(slots, getIconButtonUtilityClass, classes);
    };
    const IconButtonRoot = styled$1(ButtonBase$1, {
      name: 'MuiIconButton',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], ownerState.edge && styles[`edge${capitalize(ownerState.edge)}`], styles[`size${capitalize(ownerState.size)}`]];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      textAlign: 'center',
      flex: '0 0 auto',
      fontSize: theme.typography.pxToRem(24),
      padding: 8,
      borderRadius: '50%',
      overflow: 'visible',
      // Explicitly set the default value to solve a bug on IE11.
      color: (theme.vars || theme).palette.action.active,
      transition: theme.transitions.create('background-color', {
        duration: theme.transitions.duration.shortest
      })
    }, !ownerState.disableRipple && {
      '&:hover': {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      }
    }, ownerState.edge === 'start' && {
      marginLeft: ownerState.size === 'small' ? -3 : -12
    }, ownerState.edge === 'end' && {
      marginRight: ownerState.size === 'small' ? -3 : -12
    }), ({
      theme,
      ownerState
    }) => {
      var _palette;
      const palette = (_palette = (theme.vars || theme).palette) == null ? void 0 : _palette[ownerState.color];
      return _extends({}, ownerState.color === 'inherit' && {
        color: 'inherit'
      }, ownerState.color !== 'inherit' && ownerState.color !== 'default' && _extends({
        color: palette == null ? void 0 : palette.main
      }, !ownerState.disableRipple && {
        '&:hover': _extends({}, palette && {
          backgroundColor: theme.vars ? `rgba(${palette.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(palette.main, theme.palette.action.hoverOpacity)
        }, {
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: 'transparent'
          }
        })
      }), ownerState.size === 'small' && {
        padding: 5,
        fontSize: theme.typography.pxToRem(18)
      }, ownerState.size === 'large' && {
        padding: 12,
        fontSize: theme.typography.pxToRem(28)
      }, {
        [`&.${iconButtonClasses$1.disabled}`]: {
          backgroundColor: 'transparent',
          color: (theme.vars || theme).palette.action.disabled
        }
      });
    });

    /**
     * Refer to the [Icons](/material-ui/icons/) section of the documentation
     * regarding the available icon options.
     */
    const IconButton = /*#__PURE__*/React__namespace.forwardRef(function IconButton(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiIconButton'
      });
      const {
          edge = false,
          children,
          className,
          color = 'default',
          disabled = false,
          disableFocusRipple = false,
          size = 'medium'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1C);
      const ownerState = _extends({}, props, {
        edge,
        color,
        disabled,
        disableFocusRipple,
        size
      });
      const classes = useUtilityClasses$1m(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(IconButtonRoot, _extends({
        className: clsx(classes.root, className),
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled: disabled,
        ref: ref,
        ownerState: ownerState
      }, other, {
        children: children
      }));
    });
    IconButton.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The icon to display.
       */
      children: chainPropTypes(PropTypes.node, props => {
        const found = React__namespace.Children.toArray(props.children).some(child => /*#__PURE__*/React__namespace.isValidElement(child) && child.props.onClick);
        if (found) {
          return new Error(['MUI: You are providing an onClick event listener to a child of a button element.', 'Prefer applying it to the IconButton directly.', 'This guarantees that the whole <button> will be responsive to click events.'].join('\n'));
        }
        return null;
      }),
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
       * @default 'default'
       */
      color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, the  keyboard focus ripple is disabled.
       * @default false
       */
      disableFocusRipple: PropTypes.bool,
      /**
       * If `true`, the ripple effect is disabled.
       *
       * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
       * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
       * @default false
       */
      disableRipple: PropTypes.bool,
      /**
       * If given, uses a negative margin to counteract the padding on one
       * side (this is often helpful for aligning the left or right
       * side of the icon with content above or below, without ruining the border
       * size and shape).
       * @default false
       */
      edge: PropTypes.oneOf(['end', 'start', false]),
      /**
       * The size of the component.
       * `small` is equivalent to the dense button styling.
       * @default 'medium'
       */
      size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var IconButton$1 = IconButton;

    var ClearIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
      d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
    }), 'Close');

    function getTypographyUtilityClass(slot) {
      return generateUtilityClass('MuiTypography', slot);
    }
    generateUtilityClasses('MuiTypography', ['root', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'inherit', 'button', 'caption', 'overline', 'alignLeft', 'alignRight', 'alignCenter', 'alignJustify', 'noWrap', 'gutterBottom', 'paragraph']);

    const _excluded$1B = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
    const useUtilityClasses$1l = ownerState => {
      const {
        align,
        gutterBottom,
        noWrap,
        paragraph,
        variant,
        classes
      } = ownerState;
      const slots = {
        root: ['root', variant, ownerState.align !== 'inherit' && `align${capitalize(align)}`, gutterBottom && 'gutterBottom', noWrap && 'noWrap', paragraph && 'paragraph']
      };
      return composeClasses(slots, getTypographyUtilityClass, classes);
    };
    const TypographyRoot = styled$1('span', {
      name: 'MuiTypography',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== 'inherit' && styles[`align${capitalize(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      margin: 0
    }, ownerState.variant && theme.typography[ownerState.variant], ownerState.align !== 'inherit' && {
      textAlign: ownerState.align
    }, ownerState.noWrap && {
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap'
    }, ownerState.gutterBottom && {
      marginBottom: '0.35em'
    }, ownerState.paragraph && {
      marginBottom: 16
    }));
    const defaultVariantMapping = {
      h1: 'h1',
      h2: 'h2',
      h3: 'h3',
      h4: 'h4',
      h5: 'h5',
      h6: 'h6',
      subtitle1: 'h6',
      subtitle2: 'h6',
      body1: 'p',
      body2: 'p',
      inherit: 'p'
    };

    // TODO v6: deprecate these color values in v5.x and remove the transformation in v6
    const colorTransformations = {
      primary: 'primary.main',
      textPrimary: 'text.primary',
      secondary: 'secondary.main',
      textSecondary: 'text.secondary',
      error: 'error.main'
    };
    const transformDeprecatedColors = color => {
      return colorTransformations[color] || color;
    };
    const Typography = /*#__PURE__*/React__namespace.forwardRef(function Typography(inProps, ref) {
      const themeProps = useThemeProps({
        props: inProps,
        name: 'MuiTypography'
      });
      const color = transformDeprecatedColors(themeProps.color);
      const props = extendSxProp(_extends({}, themeProps, {
        color
      }));
      const {
          align = 'inherit',
          className,
          component,
          gutterBottom = false,
          noWrap = false,
          paragraph = false,
          variant = 'body1',
          variantMapping = defaultVariantMapping
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1B);
      const ownerState = _extends({}, props, {
        align,
        color,
        className,
        component,
        gutterBottom,
        noWrap,
        paragraph,
        variant,
        variantMapping
      });
      const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';
      const classes = useUtilityClasses$1l(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(TypographyRoot, _extends({
        as: Component,
        ref: ref,
        ownerState: ownerState,
        className: clsx(classes.root, className)
      }, other));
    });
    Typography.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * Set the text-align on the component.
       * @default 'inherit'
       */
      align: PropTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * If `true`, the text will have a bottom margin.
       * @default false
       */
      gutterBottom: PropTypes.bool,
      /**
       * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
       *
       * Note that text overflow can only happen with block or inline-block level elements
       * (the element needs to have a width in order to overflow).
       * @default false
       */
      noWrap: PropTypes.bool,
      /**
       * If `true`, the element will be a paragraph element.
       * @default false
       */
      paragraph: PropTypes.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * Applies the theme typography styles.
       * @default 'body1'
       */
      variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string]),
      /**
       * The component maps the variant prop to a range of different HTML element types.
       * For instance, subtitle1 to `<h6>`.
       * If you wish to change that mapping, you can provide your own.
       * Alternatively, you can use the `component` prop.
       * @default {
       *   h1: 'h1',
       *   h2: 'h2',
       *   h3: 'h3',
       *   h4: 'h4',
       *   h5: 'h5',
       *   h6: 'h6',
       *   subtitle1: 'h6',
       *   subtitle2: 'h6',
       *   body1: 'p',
       *   body2: 'p',
       *   inherit: 'p',
       * }
       */
      variantMapping: PropTypes /* @typescript-to-proptypes-ignore */.object
    } ;
    var Typography$1 = Typography;

    function getAppBarUtilityClass(slot) {
      return generateUtilityClass('MuiAppBar', slot);
    }
    generateUtilityClasses('MuiAppBar', ['root', 'positionFixed', 'positionAbsolute', 'positionSticky', 'positionStatic', 'positionRelative', 'colorDefault', 'colorPrimary', 'colorSecondary', 'colorInherit', 'colorTransparent']);

    const _excluded$1A = ["className", "color", "enableColorOnDark", "position"];
    const useUtilityClasses$1k = ownerState => {
      const {
        color,
        position,
        classes
      } = ownerState;
      const slots = {
        root: ['root', `color${capitalize(color)}`, `position${capitalize(position)}`]
      };
      return composeClasses(slots, getAppBarUtilityClass, classes);
    };

    // var2 is the fallback.
    // Ex. var1: 'var(--a)', var2: 'var(--b)'; return: 'var(--a, var(--b))'
    const joinVars = (var1, var2) => `${var1 == null ? void 0 : var1.replace(')', '')}, ${var2})`;
    const AppBarRoot = styled$1(Paper$1, {
      name: 'MuiAppBar',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[`position${capitalize(ownerState.position)}`], styles[`color${capitalize(ownerState.color)}`]];
      }
    })(({
      theme,
      ownerState
    }) => {
      const backgroundColorDefault = theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[900];
      return _extends({
        display: 'flex',
        flexDirection: 'column',
        width: '100%',
        boxSizing: 'border-box',
        // Prevent padding issue with the Modal and fixed positioned AppBar.
        flexShrink: 0
      }, ownerState.position === 'fixed' && {
        position: 'fixed',
        zIndex: (theme.vars || theme).zIndex.appBar,
        top: 0,
        left: 'auto',
        right: 0,
        '@media print': {
          // Prevent the app bar to be visible on each printed page.
          position: 'absolute'
        }
      }, ownerState.position === 'absolute' && {
        position: 'absolute',
        zIndex: (theme.vars || theme).zIndex.appBar,
        top: 0,
        left: 'auto',
        right: 0
      }, ownerState.position === 'sticky' && {
        // ⚠️ sticky is not supported by IE11.
        position: 'sticky',
        zIndex: (theme.vars || theme).zIndex.appBar,
        top: 0,
        left: 'auto',
        right: 0
      }, ownerState.position === 'static' && {
        position: 'static'
      }, ownerState.position === 'relative' && {
        position: 'relative'
      }, !theme.vars && _extends({}, ownerState.color === 'default' && {
        backgroundColor: backgroundColorDefault,
        color: theme.palette.getContrastText(backgroundColorDefault)
      }, ownerState.color && ownerState.color !== 'default' && ownerState.color !== 'inherit' && ownerState.color !== 'transparent' && {
        backgroundColor: theme.palette[ownerState.color].main,
        color: theme.palette[ownerState.color].contrastText
      }, ownerState.color === 'inherit' && {
        color: 'inherit'
      }, theme.palette.mode === 'dark' && !ownerState.enableColorOnDark && {
        backgroundColor: null,
        color: null
      }, ownerState.color === 'transparent' && _extends({
        backgroundColor: 'transparent',
        color: 'inherit'
      }, theme.palette.mode === 'dark' && {
        backgroundImage: 'none'
      })), theme.vars && _extends({}, ownerState.color === 'default' && {
        '--AppBar-background': ownerState.enableColorOnDark ? theme.vars.palette.AppBar.defaultBg : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette.AppBar.defaultBg),
        '--AppBar-color': ownerState.enableColorOnDark ? theme.vars.palette.text.primary : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette.text.primary)
      }, ownerState.color && !ownerState.color.match(/^(default|inherit|transparent)$/) && {
        '--AppBar-background': ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].main : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette[ownerState.color].main),
        '--AppBar-color': ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].contrastText : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette[ownerState.color].contrastText)
      }, {
        backgroundColor: 'var(--AppBar-background)',
        color: ownerState.color === 'inherit' ? 'inherit' : 'var(--AppBar-color)'
      }, ownerState.color === 'transparent' && {
        backgroundImage: 'none',
        backgroundColor: 'transparent',
        color: 'inherit'
      }));
    });
    const AppBar = /*#__PURE__*/React__namespace.forwardRef(function AppBar(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiAppBar'
      });
      const {
          className,
          color = 'primary',
          enableColorOnDark = false,
          position = 'fixed'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1A);
      const ownerState = _extends({}, props, {
        color,
        position,
        enableColorOnDark
      });
      const classes = useUtilityClasses$1k(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(AppBarRoot, _extends({
        square: true,
        component: "header",
        ownerState: ownerState,
        elevation: 4,
        className: clsx(classes.root, className, position === 'fixed' && 'mui-fixed'),
        ref: ref
      }, other));
    });
    AppBar.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
       * @default 'primary'
       */
      color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary', 'transparent']), PropTypes.string]),
      /**
       * If true, the `color` prop is applied in dark mode.
       * @default false
       */
      enableColorOnDark: PropTypes.bool,
      /**
       * The positioning type. The behavior of the different options is described
       * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).
       * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.
       * @default 'fixed'
       */
      position: PropTypes.oneOf(['absolute', 'fixed', 'relative', 'static', 'sticky']),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var AppBar$1 = AppBar;

    const _excluded$1z = ["components", "componentsProps", "slots", "slotProps"];
    const PopperRoot = styled$1(PopperUnstyled$1, {
      name: 'MuiPopper',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({});

    /**
     *
     * Demos:
     *
     * - [Autocomplete](https://mui.com/material-ui/react-autocomplete/)
     * - [Menu](https://mui.com/material-ui/react-menu/)
     * - [Popper](https://mui.com/material-ui/react-popper/)
     *
     * API:
     *
     * - [Popper API](https://mui.com/material-ui/api/popper/)
     */
    const Popper = /*#__PURE__*/React__namespace.forwardRef(function Popper(inProps, ref) {
      var _slots$root;
      const theme = useTheme$2();
      const _useThemeProps = useThemeProps({
          props: inProps,
          name: 'MuiPopper'
        }),
        {
          components,
          componentsProps,
          slots,
          slotProps
        } = _useThemeProps,
        other = _objectWithoutPropertiesLoose(_useThemeProps, _excluded$1z);
      const RootComponent = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components == null ? void 0 : components.Root;
      return /*#__PURE__*/jsxRuntime.exports.jsx(PopperRoot, _extends({
        direction: theme == null ? void 0 : theme.direction,
        slots: {
          root: RootComponent
        },
        slotProps: slotProps != null ? slotProps : componentsProps
      }, other, {
        ref: ref
      }));
    });
    Popper.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------
      /**
       * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
       * or a function that returns either.
       * It's used to set the position of the popper.
       * The return value will passed as the reference object of the Popper instance.
       */
      anchorEl: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.object, PropTypes.func]),
      /**
       * Popper render function or node.
       */
      children: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.node, PropTypes.func]),
      /**
       * @ignore
       */
      component: PropTypes /* @typescript-to-proptypes-ignore */.elementType,
      /**
       * The components used for each slot inside the Popper.
       * Either a string to use a HTML element or a component.
       * @default {}
       */
      components: PropTypes.shape({
        Root: PropTypes.elementType
      }),
      /**
       * The props used for each slot inside the Popper.
       * @default {}
       */
      componentsProps: PropTypes.shape({
        root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
      }),
      /**
       * An HTML element or function that returns one.
       * The `container` will have the portal children appended to it.
       *
       * By default, it uses the body of the top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),
      /**
       * The `children` will be under the DOM hierarchy of the parent component.
       * @default false
       */
      disablePortal: PropTypes.bool,
      /**
       * Always keep the children in the DOM.
       * This prop can be useful in SEO situation or
       * when you want to maximize the responsiveness of the Popper.
       * @default false
       */
      keepMounted: PropTypes.bool,
      /**
       * Popper.js is based on a "plugin-like" architecture,
       * most of its features are fully encapsulated "modifiers".
       *
       * A modifier is a function that is called each time Popper.js needs to
       * compute the position of the popper.
       * For this reason, modifiers should be very performant to avoid bottlenecks.
       * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
       */
      modifiers: PropTypes.arrayOf(PropTypes.shape({
        data: PropTypes.object,
        effect: PropTypes.func,
        enabled: PropTypes.bool,
        fn: PropTypes.func,
        name: PropTypes.any,
        options: PropTypes.object,
        phase: PropTypes.oneOf(['afterMain', 'afterRead', 'afterWrite', 'beforeMain', 'beforeRead', 'beforeWrite', 'main', 'read', 'write']),
        requires: PropTypes.arrayOf(PropTypes.string),
        requiresIfExists: PropTypes.arrayOf(PropTypes.string)
      })),
      /**
       * If `true`, the component is shown.
       */
      open: PropTypes.bool.isRequired,
      /**
       * Popper placement.
       * @default 'bottom'
       */
      placement: PropTypes.oneOf(['auto-end', 'auto-start', 'auto', 'bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),
      /**
       * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
       * @default {}
       */
      popperOptions: PropTypes.shape({
        modifiers: PropTypes.array,
        onFirstUpdate: PropTypes.func,
        placement: PropTypes.oneOf(['auto-end', 'auto-start', 'auto', 'bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),
        strategy: PropTypes.oneOf(['absolute', 'fixed'])
      }),
      /**
       * A ref that points to the used popper instance.
       */
      popperRef: refType$1,
      /**
       * The props used for each slot inside the Popper.
       * @default {}
       */
      slotProps: PropTypes.shape({
        root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
      }),
      /**
       * The components used for each slot inside the Popper.
       * Either a string to use a HTML element or a component.
       * @default {}
       */
      slots: PropTypes.shape({
        root: PropTypes.elementType
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * Help supporting a react-transition-group/Transition component.
       * @default false
       */
      transition: PropTypes.bool
    } ;
    var Popper$1 = Popper;

    function getListSubheaderUtilityClass(slot) {
      return generateUtilityClass('MuiListSubheader', slot);
    }
    generateUtilityClasses('MuiListSubheader', ['root', 'colorPrimary', 'colorInherit', 'gutters', 'inset', 'sticky']);

    const _excluded$1y = ["className", "color", "component", "disableGutters", "disableSticky", "inset"];
    const useUtilityClasses$1j = ownerState => {
      const {
        classes,
        color,
        disableGutters,
        inset,
        disableSticky
      } = ownerState;
      const slots = {
        root: ['root', color !== 'default' && `color${capitalize(color)}`, !disableGutters && 'gutters', inset && 'inset', !disableSticky && 'sticky']
      };
      return composeClasses(slots, getListSubheaderUtilityClass, classes);
    };
    const ListSubheaderRoot = styled$1('li', {
      name: 'MuiListSubheader',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], !ownerState.disableGutters && styles.gutters, ownerState.inset && styles.inset, !ownerState.disableSticky && styles.sticky];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      boxSizing: 'border-box',
      lineHeight: '48px',
      listStyle: 'none',
      color: (theme.vars || theme).palette.text.secondary,
      fontFamily: theme.typography.fontFamily,
      fontWeight: theme.typography.fontWeightMedium,
      fontSize: theme.typography.pxToRem(14)
    }, ownerState.color === 'primary' && {
      color: (theme.vars || theme).palette.primary.main
    }, ownerState.color === 'inherit' && {
      color: 'inherit'
    }, !ownerState.disableGutters && {
      paddingLeft: 16,
      paddingRight: 16
    }, ownerState.inset && {
      paddingLeft: 72
    }, !ownerState.disableSticky && {
      position: 'sticky',
      top: 0,
      zIndex: 1,
      backgroundColor: (theme.vars || theme).palette.background.paper
    }));
    const ListSubheader = /*#__PURE__*/React__namespace.forwardRef(function ListSubheader(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiListSubheader'
      });
      const {
          className,
          color = 'default',
          component = 'li',
          disableGutters = false,
          disableSticky = false,
          inset = false
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1y);
      const ownerState = _extends({}, props, {
        color,
        component,
        disableGutters,
        disableSticky,
        inset
      });
      const classes = useUtilityClasses$1j(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(ListSubheaderRoot, _extends({
        as: component,
        className: clsx(classes.root, className),
        ref: ref,
        ownerState: ownerState
      }, other));
    });
    ListSubheader.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       * @default 'default'
       */
      color: PropTypes.oneOf(['default', 'inherit', 'primary']),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * If `true`, the List Subheader will not have gutters.
       * @default false
       */
      disableGutters: PropTypes.bool,
      /**
       * If `true`, the List Subheader will not stick to the top during scroll.
       * @default false
       */
      disableSticky: PropTypes.bool,
      /**
       * If `true`, the List Subheader is indented.
       * @default false
       */
      inset: PropTypes.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var ListSubheader$1 = ListSubheader;

    var CancelIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
      d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
    }), 'Cancel');

    function getChipUtilityClass(slot) {
      return generateUtilityClass('MuiChip', slot);
    }
    const chipClasses = generateUtilityClasses('MuiChip', ['root', 'sizeSmall', 'sizeMedium', 'colorError', 'colorInfo', 'colorPrimary', 'colorSecondary', 'colorSuccess', 'colorWarning', 'disabled', 'clickable', 'clickableColorPrimary', 'clickableColorSecondary', 'deletable', 'deletableColorPrimary', 'deletableColorSecondary', 'outlined', 'filled', 'outlinedPrimary', 'outlinedSecondary', 'filledPrimary', 'filledSecondary', 'avatar', 'avatarSmall', 'avatarMedium', 'avatarColorPrimary', 'avatarColorSecondary', 'icon', 'iconSmall', 'iconMedium', 'iconColorPrimary', 'iconColorSecondary', 'label', 'labelSmall', 'labelMedium', 'deleteIcon', 'deleteIconSmall', 'deleteIconMedium', 'deleteIconColorPrimary', 'deleteIconColorSecondary', 'deleteIconOutlinedColorPrimary', 'deleteIconOutlinedColorSecondary', 'deleteIconFilledColorPrimary', 'deleteIconFilledColorSecondary', 'focusVisible']);
    var chipClasses$1 = chipClasses;

    const _excluded$1x = ["avatar", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant", "tabIndex", "skipFocusWhenDisabled"];
    const useUtilityClasses$1i = ownerState => {
      const {
        classes,
        disabled,
        size,
        color,
        iconColor,
        onDelete,
        clickable,
        variant
      } = ownerState;
      const slots = {
        root: ['root', variant, disabled && 'disabled', `size${capitalize(size)}`, `color${capitalize(color)}`, clickable && 'clickable', clickable && `clickableColor${capitalize(color)}`, onDelete && 'deletable', onDelete && `deletableColor${capitalize(color)}`, `${variant}${capitalize(color)}`],
        label: ['label', `label${capitalize(size)}`],
        avatar: ['avatar', `avatar${capitalize(size)}`, `avatarColor${capitalize(color)}`],
        icon: ['icon', `icon${capitalize(size)}`, `iconColor${capitalize(iconColor)}`],
        deleteIcon: ['deleteIcon', `deleteIcon${capitalize(size)}`, `deleteIconColor${capitalize(color)}`, `deleteIcon${capitalize(variant)}Color${capitalize(color)}`]
      };
      return composeClasses(slots, getChipUtilityClass, classes);
    };
    const ChipRoot = styled$1('div', {
      name: 'MuiChip',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        const {
          color,
          iconColor,
          clickable,
          onDelete,
          size,
          variant
        } = ownerState;
        return [{
          [`& .${chipClasses$1.avatar}`]: styles.avatar
        }, {
          [`& .${chipClasses$1.avatar}`]: styles[`avatar${capitalize(size)}`]
        }, {
          [`& .${chipClasses$1.avatar}`]: styles[`avatarColor${capitalize(color)}`]
        }, {
          [`& .${chipClasses$1.icon}`]: styles.icon
        }, {
          [`& .${chipClasses$1.icon}`]: styles[`icon${capitalize(size)}`]
        }, {
          [`& .${chipClasses$1.icon}`]: styles[`iconColor${capitalize(iconColor)}`]
        }, {
          [`& .${chipClasses$1.deleteIcon}`]: styles.deleteIcon
        }, {
          [`& .${chipClasses$1.deleteIcon}`]: styles[`deleteIcon${capitalize(size)}`]
        }, {
          [`& .${chipClasses$1.deleteIcon}`]: styles[`deleteIconColor${capitalize(color)}`]
        }, {
          [`& .${chipClasses$1.deleteIcon}`]: styles[`deleteIcon${capitalize(variant)}Color${capitalize(color)}`]
        }, styles.root, styles[`size${capitalize(size)}`], styles[`color${capitalize(color)}`], clickable && styles.clickable, clickable && color !== 'default' && styles[`clickableColor${capitalize(color)})`], onDelete && styles.deletable, onDelete && color !== 'default' && styles[`deletableColor${capitalize(color)}`], styles[variant], styles[`${variant}${capitalize(color)}`]];
      }
    })(({
      theme,
      ownerState
    }) => {
      const deleteIconColor = alpha(theme.palette.text.primary, 0.26);
      const textColor = theme.palette.mode === 'light' ? theme.palette.grey[700] : theme.palette.grey[300];
      return _extends({
        maxWidth: '100%',
        fontFamily: theme.typography.fontFamily,
        fontSize: theme.typography.pxToRem(13),
        display: 'inline-flex',
        alignItems: 'center',
        justifyContent: 'center',
        height: 32,
        color: (theme.vars || theme).palette.text.primary,
        backgroundColor: (theme.vars || theme).palette.action.selected,
        borderRadius: 32 / 2,
        whiteSpace: 'nowrap',
        transition: theme.transitions.create(['background-color', 'box-shadow']),
        // label will inherit this from root, then `clickable` class overrides this for both
        cursor: 'default',
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0,
        textDecoration: 'none',
        border: 0,
        // Remove `button` border
        padding: 0,
        // Remove `button` padding
        verticalAlign: 'middle',
        boxSizing: 'border-box',
        [`&.${chipClasses$1.disabled}`]: {
          opacity: (theme.vars || theme).palette.action.disabledOpacity,
          pointerEvents: 'none'
        },
        [`& .${chipClasses$1.avatar}`]: {
          marginLeft: 5,
          marginRight: -6,
          width: 24,
          height: 24,
          color: theme.vars ? theme.vars.palette.Chip.defaultAvatarColor : textColor,
          fontSize: theme.typography.pxToRem(12)
        },
        [`& .${chipClasses$1.avatarColorPrimary}`]: {
          color: (theme.vars || theme).palette.primary.contrastText,
          backgroundColor: (theme.vars || theme).palette.primary.dark
        },
        [`& .${chipClasses$1.avatarColorSecondary}`]: {
          color: (theme.vars || theme).palette.secondary.contrastText,
          backgroundColor: (theme.vars || theme).palette.secondary.dark
        },
        [`& .${chipClasses$1.avatarSmall}`]: {
          marginLeft: 4,
          marginRight: -4,
          width: 18,
          height: 18,
          fontSize: theme.typography.pxToRem(10)
        },
        [`& .${chipClasses$1.icon}`]: _extends({
          marginLeft: 5,
          marginRight: -6
        }, ownerState.size === 'small' && {
          fontSize: 18,
          marginLeft: 4,
          marginRight: -4
        }, ownerState.iconColor === ownerState.color && _extends({
          color: theme.vars ? theme.vars.palette.Chip.defaultIconColor : textColor
        }, ownerState.color !== 'default' && {
          color: 'inherit'
        })),
        [`& .${chipClasses$1.deleteIcon}`]: _extends({
          WebkitTapHighlightColor: 'transparent',
          color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.26)` : deleteIconColor,
          fontSize: 22,
          cursor: 'pointer',
          margin: '0 5px 0 -6px',
          '&:hover': {
            color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.4)` : alpha(deleteIconColor, 0.4)
          }
        }, ownerState.size === 'small' && {
          fontSize: 16,
          marginRight: 4,
          marginLeft: -4
        }, ownerState.color !== 'default' && {
          color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].contrastTextChannel} / 0.7)` : alpha(theme.palette[ownerState.color].contrastText, 0.7),
          '&:hover, &:active': {
            color: (theme.vars || theme).palette[ownerState.color].contrastText
          }
        })
      }, ownerState.size === 'small' && {
        height: 24
      }, ownerState.color !== 'default' && {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
        color: (theme.vars || theme).palette[ownerState.color].contrastText
      }, ownerState.onDelete && {
        [`&.${chipClasses$1.focusVisible}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity + theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        }
      }, ownerState.onDelete && ownerState.color !== 'default' && {
        [`&.${chipClasses$1.focusVisible}`]: {
          backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
        }
      });
    }, ({
      theme,
      ownerState
    }) => _extends({}, ownerState.clickable && {
      userSelect: 'none',
      WebkitTapHighlightColor: 'transparent',
      cursor: 'pointer',
      '&:hover': {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity + theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
      },
      [`&.${chipClasses$1.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity + theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      },
      '&:active': {
        boxShadow: (theme.vars || theme).shadows[1]
      }
    }, ownerState.clickable && ownerState.color !== 'default' && {
      [`&:hover, &.${chipClasses$1.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
      }
    }), ({
      theme,
      ownerState
    }) => _extends({}, ownerState.variant === 'outlined' && {
      backgroundColor: 'transparent',
      border: theme.vars ? `1px solid ${theme.vars.palette.Chip.defaultBorder}` : `1px solid ${theme.palette.mode === 'light' ? theme.palette.grey[400] : theme.palette.grey[700]}`,
      [`&.${chipClasses$1.clickable}:hover`]: {
        backgroundColor: (theme.vars || theme).palette.action.hover
      },
      [`&.${chipClasses$1.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette.action.focus
      },
      [`& .${chipClasses$1.avatar}`]: {
        marginLeft: 4
      },
      [`& .${chipClasses$1.avatarSmall}`]: {
        marginLeft: 2
      },
      [`& .${chipClasses$1.icon}`]: {
        marginLeft: 4
      },
      [`& .${chipClasses$1.iconSmall}`]: {
        marginLeft: 2
      },
      [`& .${chipClasses$1.deleteIcon}`]: {
        marginRight: 5
      },
      [`& .${chipClasses$1.deleteIconSmall}`]: {
        marginRight: 3
      }
    }, ownerState.variant === 'outlined' && ownerState.color !== 'default' && {
      color: (theme.vars || theme).palette[ownerState.color].main,
      border: `1px solid ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : alpha(theme.palette[ownerState.color].main, 0.7)}`,
      [`&.${chipClasses$1.clickable}:hover`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity)
      },
      [`&.${chipClasses$1.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.focusOpacity)
      },
      [`& .${chipClasses$1.deleteIcon}`]: {
        color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : alpha(theme.palette[ownerState.color].main, 0.7),
        '&:hover, &:active': {
          color: (theme.vars || theme).palette[ownerState.color].main
        }
      }
    }));
    const ChipLabel = styled$1('span', {
      name: 'MuiChip',
      slot: 'Label',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        const {
          size
        } = ownerState;
        return [styles.label, styles[`label${capitalize(size)}`]];
      }
    })(({
      ownerState
    }) => _extends({
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      paddingLeft: 12,
      paddingRight: 12,
      whiteSpace: 'nowrap'
    }, ownerState.size === 'small' && {
      paddingLeft: 8,
      paddingRight: 8
    }));
    function isDeleteKeyboardEvent(keyboardEvent) {
      return keyboardEvent.key === 'Backspace' || keyboardEvent.key === 'Delete';
    }

    /**
     * Chips represent complex entities in small blocks, such as a contact.
     */
    const Chip = /*#__PURE__*/React__namespace.forwardRef(function Chip(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiChip'
      });
      const {
          avatar: avatarProp,
          className,
          clickable: clickableProp,
          color = 'default',
          component: ComponentProp,
          deleteIcon: deleteIconProp,
          disabled = false,
          icon: iconProp,
          label,
          onClick,
          onDelete,
          onKeyDown,
          onKeyUp,
          size = 'medium',
          variant = 'filled',
          tabIndex,
          skipFocusWhenDisabled = false
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1x);
      const chipRef = React__namespace.useRef(null);
      const handleRef = useForkRef(chipRef, ref);
      const handleDeleteIconClick = event => {
        // Stop the event from bubbling up to the `Chip`
        event.stopPropagation();
        if (onDelete) {
          onDelete(event);
        }
      };
      const handleKeyDown = event => {
        // Ignore events from children of `Chip`.
        if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
          // Will be handled in keyUp, otherwise some browsers
          // might init navigation
          event.preventDefault();
        }
        if (onKeyDown) {
          onKeyDown(event);
        }
      };
      const handleKeyUp = event => {
        // Ignore events from children of `Chip`.
        if (event.currentTarget === event.target) {
          if (onDelete && isDeleteKeyboardEvent(event)) {
            onDelete(event);
          } else if (event.key === 'Escape' && chipRef.current) {
            chipRef.current.blur();
          }
        }
        if (onKeyUp) {
          onKeyUp(event);
        }
      };
      const clickable = clickableProp !== false && onClick ? true : clickableProp;
      const component = clickable || onDelete ? ButtonBase$1 : ComponentProp || 'div';
      const ownerState = _extends({}, props, {
        component,
        disabled,
        size,
        color,
        iconColor: /*#__PURE__*/React__namespace.isValidElement(iconProp) ? iconProp.props.color || color : color,
        onDelete: !!onDelete,
        clickable,
        variant
      });
      const classes = useUtilityClasses$1i(ownerState);
      const moreProps = component === ButtonBase$1 ? _extends({
        component: ComponentProp || 'div',
        focusVisibleClassName: classes.focusVisible
      }, onDelete && {
        disableRipple: true
      }) : {};
      let deleteIcon = null;
      if (onDelete) {
        deleteIcon = deleteIconProp && /*#__PURE__*/React__namespace.isValidElement(deleteIconProp) ? /*#__PURE__*/React__namespace.cloneElement(deleteIconProp, {
          className: clsx(deleteIconProp.props.className, classes.deleteIcon),
          onClick: handleDeleteIconClick
        }) : /*#__PURE__*/jsxRuntime.exports.jsx(CancelIcon, {
          className: clsx(classes.deleteIcon),
          onClick: handleDeleteIconClick
        });
      }
      let avatar = null;
      if (avatarProp && /*#__PURE__*/React__namespace.isValidElement(avatarProp)) {
        avatar = /*#__PURE__*/React__namespace.cloneElement(avatarProp, {
          className: clsx(classes.avatar, avatarProp.props.className)
        });
      }
      let icon = null;
      if (iconProp && /*#__PURE__*/React__namespace.isValidElement(iconProp)) {
        icon = /*#__PURE__*/React__namespace.cloneElement(iconProp, {
          className: clsx(classes.icon, iconProp.props.className)
        });
      }
      {
        if (avatar && icon) {
          console.error('MUI: The Chip component can not handle the avatar ' + 'and the icon prop at the same time. Pick one.');
        }
      }
      return /*#__PURE__*/jsxRuntime.exports.jsxs(ChipRoot, _extends({
        as: component,
        className: clsx(classes.root, className),
        disabled: clickable && disabled ? true : undefined,
        onClick: onClick,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp,
        ref: handleRef,
        tabIndex: skipFocusWhenDisabled && disabled ? -1 : tabIndex,
        ownerState: ownerState
      }, moreProps, other, {
        children: [avatar || icon, /*#__PURE__*/jsxRuntime.exports.jsx(ChipLabel, {
          className: clsx(classes.label),
          ownerState: ownerState,
          children: label
        }), deleteIcon]
      }));
    });
    Chip.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The Avatar element to display.
       */
      avatar: PropTypes.element,
      /**
       * This prop isn't supported.
       * Use the `component` prop if you need to change the children structure.
       */
      children: unsupportedProp,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * If `true`, the chip will appear clickable, and will raise when pressed,
       * even if the onClick prop is not defined.
       * If `false`, the chip will not appear clickable, even if onClick prop is defined.
       * This can be used, for example,
       * along with the component prop to indicate an anchor Chip is clickable.
       * Note: this controls the UI and does not affect the onClick event.
       */
      clickable: PropTypes.bool,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
       * @default 'default'
       */
      color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * Override the default delete icon element. Shown only if `onDelete` is set.
       */
      deleteIcon: PropTypes.element,
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: PropTypes.bool,
      /**
       * Icon element.
       */
      icon: PropTypes.element,
      /**
       * The content of the component.
       */
      label: PropTypes.node,
      /**
       * @ignore
       */
      onClick: PropTypes.func,
      /**
       * Callback fired when the delete icon is clicked.
       * If set, the delete icon will be shown.
       */
      onDelete: PropTypes.func,
      /**
       * @ignore
       */
      onKeyDown: PropTypes.func,
      /**
       * @ignore
       */
      onKeyUp: PropTypes.func,
      /**
       * The size of the component.
       * @default 'medium'
       */
      size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),
      /**
       * If `true`, allows the disabled chip to escape focus.
       * If `false`, allows the disabled chip to receive focus.
       * @default false
       */
      skipFocusWhenDisabled: PropTypes.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * @ignore
       */
      tabIndex: PropTypes.number,
      /**
       * The variant to use.
       * @default 'filled'
       */
      variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['filled', 'outlined']), PropTypes.string])
    } ;
    var Chip$1 = Chip;

    function formControlState({
      props,
      states,
      muiFormControl
    }) {
      return states.reduce((acc, state) => {
        acc[state] = props[state];
        if (muiFormControl) {
          if (typeof props[state] === 'undefined') {
            acc[state] = muiFormControl[state];
          }
        }
        return acc;
      }, {});
    }

    /**
     * @ignore - internal component.
     */
    const FormControlContext = /*#__PURE__*/React__namespace.createContext(undefined);
    {
      FormControlContext.displayName = 'FormControlContext';
    }
    var FormControlContext$1 = FormControlContext;

    function useFormControl() {
      return React__namespace.useContext(FormControlContext$1);
    }

    function GlobalStyles(props) {
      return /*#__PURE__*/jsxRuntime.exports.jsx(GlobalStyles$1, _extends({}, props, {
        defaultTheme: defaultTheme$2
      }));
    }
    GlobalStyles.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The styles you want to apply globally.
       */
      styles: PropTypes.oneOfType([PropTypes.func, PropTypes.number, PropTypes.object, PropTypes.shape({
        __emotion_styles: PropTypes.any.isRequired
      }), PropTypes.string, PropTypes.bool])
    } ;

    // Supports determination of isControlled().
    // Controlled input accepts its current value as a prop.
    //
    // @see https://facebook.github.io/react/docs/forms.html#controlled-components
    // @param value
    // @returns {boolean} true if string (including '') or number (including zero)
    function hasValue(value) {
      return value != null && !(Array.isArray(value) && value.length === 0);
    }

    // Determine if field is empty or filled.
    // Response determines if label is presented above field or as placeholder.
    //
    // @param obj
    // @param SSR
    // @returns {boolean} False when not present or empty string.
    //                    True when any number or string with length.
    function isFilled(obj, SSR = false) {
      return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');
    }

    // Determine if an Input is adorned on start.
    // It's corresponding to the left with LTR.
    //
    // @param obj
    // @returns {boolean} False when no adornments.
    //                    True when adorned at the start.
    function isAdornedStart(obj) {
      return obj.startAdornment;
    }

    function getInputBaseUtilityClass(slot) {
      return generateUtilityClass('MuiInputBase', slot);
    }
    const inputBaseClasses = generateUtilityClasses('MuiInputBase', ['root', 'formControl', 'focused', 'disabled', 'adornedStart', 'adornedEnd', 'error', 'sizeSmall', 'multiline', 'colorSecondary', 'fullWidth', 'hiddenLabel', 'readOnly', 'input', 'inputSizeSmall', 'inputMultiline', 'inputTypeSearch', 'inputAdornedStart', 'inputAdornedEnd', 'inputHiddenLabel']);
    var inputBaseClasses$1 = inputBaseClasses;

    const _excluded$1w = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "slotProps", "slots", "startAdornment", "type", "value"];
    const rootOverridesResolver = (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.formControl && styles.formControl, ownerState.startAdornment && styles.adornedStart, ownerState.endAdornment && styles.adornedEnd, ownerState.error && styles.error, ownerState.size === 'small' && styles.sizeSmall, ownerState.multiline && styles.multiline, ownerState.color && styles[`color${capitalize(ownerState.color)}`], ownerState.fullWidth && styles.fullWidth, ownerState.hiddenLabel && styles.hiddenLabel];
    };
    const inputOverridesResolver = (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.input, ownerState.size === 'small' && styles.inputSizeSmall, ownerState.multiline && styles.inputMultiline, ownerState.type === 'search' && styles.inputTypeSearch, ownerState.startAdornment && styles.inputAdornedStart, ownerState.endAdornment && styles.inputAdornedEnd, ownerState.hiddenLabel && styles.inputHiddenLabel];
    };
    const useUtilityClasses$1h = ownerState => {
      const {
        classes,
        color,
        disabled,
        error,
        endAdornment,
        focused,
        formControl,
        fullWidth,
        hiddenLabel,
        multiline,
        readOnly,
        size,
        startAdornment,
        type
      } = ownerState;
      const slots = {
        root: ['root', `color${capitalize(color)}`, disabled && 'disabled', error && 'error', fullWidth && 'fullWidth', focused && 'focused', formControl && 'formControl', size === 'small' && 'sizeSmall', multiline && 'multiline', startAdornment && 'adornedStart', endAdornment && 'adornedEnd', hiddenLabel && 'hiddenLabel', readOnly && 'readOnly'],
        input: ['input', disabled && 'disabled', type === 'search' && 'inputTypeSearch', multiline && 'inputMultiline', size === 'small' && 'inputSizeSmall', hiddenLabel && 'inputHiddenLabel', startAdornment && 'inputAdornedStart', endAdornment && 'inputAdornedEnd', readOnly && 'readOnly']
      };
      return composeClasses(slots, getInputBaseUtilityClass, classes);
    };
    const InputBaseRoot = styled$1('div', {
      name: 'MuiInputBase',
      slot: 'Root',
      overridesResolver: rootOverridesResolver
    })(({
      theme,
      ownerState
    }) => _extends({}, theme.typography.body1, {
      color: (theme.vars || theme).palette.text.primary,
      lineHeight: '1.4375em',
      // 23px
      boxSizing: 'border-box',
      // Prevent padding issue with fullWidth.
      position: 'relative',
      cursor: 'text',
      display: 'inline-flex',
      alignItems: 'center',
      [`&.${inputBaseClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled,
        cursor: 'default'
      }
    }, ownerState.multiline && _extends({
      padding: '4px 0 5px'
    }, ownerState.size === 'small' && {
      paddingTop: 1
    }), ownerState.fullWidth && {
      width: '100%'
    }));
    const InputBaseComponent = styled$1('input', {
      name: 'MuiInputBase',
      slot: 'Input',
      overridesResolver: inputOverridesResolver
    })(({
      theme,
      ownerState
    }) => {
      const light = theme.palette.mode === 'light';
      const placeholder = _extends({
        color: 'currentColor'
      }, theme.vars ? {
        opacity: theme.vars.opacity.inputPlaceholder
      } : {
        opacity: light ? 0.42 : 0.5
      }, {
        transition: theme.transitions.create('opacity', {
          duration: theme.transitions.duration.shorter
        })
      });
      const placeholderHidden = {
        opacity: '0 !important'
      };
      const placeholderVisible = theme.vars ? {
        opacity: theme.vars.opacity.inputPlaceholder
      } : {
        opacity: light ? 0.42 : 0.5
      };
      return _extends({
        font: 'inherit',
        letterSpacing: 'inherit',
        color: 'currentColor',
        padding: '4px 0 5px',
        border: 0,
        boxSizing: 'content-box',
        background: 'none',
        height: '1.4375em',
        // Reset 23pxthe native input line-height
        margin: 0,
        // Reset for Safari
        WebkitTapHighlightColor: 'transparent',
        display: 'block',
        // Make the flex item shrink with Firefox
        minWidth: 0,
        width: '100%',
        // Fix IE11 width issue
        animationName: 'mui-auto-fill-cancel',
        animationDuration: '10ms',
        '&::-webkit-input-placeholder': placeholder,
        '&::-moz-placeholder': placeholder,
        // Firefox 19+
        '&:-ms-input-placeholder': placeholder,
        // IE11
        '&::-ms-input-placeholder': placeholder,
        // Edge
        '&:focus': {
          outline: 0
        },
        // Reset Firefox invalid required input style
        '&:invalid': {
          boxShadow: 'none'
        },
        '&::-webkit-search-decoration': {
          // Remove the padding when type=search.
          WebkitAppearance: 'none'
        },
        // Show and hide the placeholder logic
        [`label[data-shrink=false] + .${inputBaseClasses$1.formControl} &`]: {
          '&::-webkit-input-placeholder': placeholderHidden,
          '&::-moz-placeholder': placeholderHidden,
          // Firefox 19+
          '&:-ms-input-placeholder': placeholderHidden,
          // IE11
          '&::-ms-input-placeholder': placeholderHidden,
          // Edge
          '&:focus::-webkit-input-placeholder': placeholderVisible,
          '&:focus::-moz-placeholder': placeholderVisible,
          // Firefox 19+
          '&:focus:-ms-input-placeholder': placeholderVisible,
          // IE11
          '&:focus::-ms-input-placeholder': placeholderVisible // Edge
        },

        [`&.${inputBaseClasses$1.disabled}`]: {
          opacity: 1,
          // Reset iOS opacity
          WebkitTextFillColor: (theme.vars || theme).palette.text.disabled // Fix opacity Safari bug
        },

        '&:-webkit-autofill': {
          animationDuration: '5000s',
          animationName: 'mui-auto-fill'
        }
      }, ownerState.size === 'small' && {
        paddingTop: 1
      }, ownerState.multiline && {
        height: 'auto',
        resize: 'none',
        padding: 0,
        paddingTop: 0
      }, ownerState.type === 'search' && {
        // Improve type search style.
        MozAppearance: 'textfield'
      });
    });
    const inputGlobalStyles = /*#__PURE__*/jsxRuntime.exports.jsx(GlobalStyles, {
      styles: {
        '@keyframes mui-auto-fill': {
          from: {
            display: 'block'
          }
        },
        '@keyframes mui-auto-fill-cancel': {
          from: {
            display: 'block'
          }
        }
      }
    });

    /**
     * `InputBase` contains as few styles as possible.
     * It aims to be a simple building block for creating an input.
     * It contains a load of style reset and some state logic.
     */
    const InputBase = /*#__PURE__*/React__namespace.forwardRef(function InputBase(inProps, ref) {
      var _slotProps$input;
      const props = useThemeProps({
        props: inProps,
        name: 'MuiInputBase'
      });
      const {
          'aria-describedby': ariaDescribedby,
          autoComplete,
          autoFocus,
          className,
          components = {},
          componentsProps = {},
          defaultValue,
          disabled,
          disableInjectingGlobalStyles,
          endAdornment,
          fullWidth = false,
          id,
          inputComponent = 'input',
          inputProps: inputPropsProp = {},
          inputRef: inputRefProp,
          maxRows,
          minRows,
          multiline = false,
          name,
          onBlur,
          onChange,
          onClick,
          onFocus,
          onKeyDown,
          onKeyUp,
          placeholder,
          readOnly,
          renderSuffix,
          rows,
          slotProps = {},
          slots = {},
          startAdornment,
          type = 'text',
          value: valueProp
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1w);
      const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
      const {
        current: isControlled
      } = React__namespace.useRef(value != null);
      const inputRef = React__namespace.useRef();
      const handleInputRefWarning = React__namespace.useCallback(instance => {
        {
          if (instance && instance.nodeName !== 'INPUT' && !instance.focus) {
            console.error(['MUI: You have provided a `inputComponent` to the input component', 'that does not correctly handle the `ref` prop.', 'Make sure the `ref` prop is called with a HTMLInputElement.'].join('\n'));
          }
        }
      }, []);
      const handleInputRef = useForkRef(inputRef, inputRefProp, inputPropsProp.ref, handleInputRefWarning);
      const [focused, setFocused] = React__namespace.useState(false);
      const muiFormControl = useFormControl();
      {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__namespace.useEffect(() => {
          if (muiFormControl) {
            return muiFormControl.registerEffect();
          }
          return undefined;
        }, [muiFormControl]);
      }
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ['color', 'disabled', 'error', 'hiddenLabel', 'size', 'required', 'filled']
      });
      fcs.focused = muiFormControl ? muiFormControl.focused : focused;

      // The blur won't fire when the disabled state is set on a focused input.
      // We need to book keep the focused state manually.
      React__namespace.useEffect(() => {
        if (!muiFormControl && disabled && focused) {
          setFocused(false);
          if (onBlur) {
            onBlur();
          }
        }
      }, [muiFormControl, disabled, focused, onBlur]);
      const onFilled = muiFormControl && muiFormControl.onFilled;
      const onEmpty = muiFormControl && muiFormControl.onEmpty;
      const checkDirty = React__namespace.useCallback(obj => {
        if (isFilled(obj)) {
          if (onFilled) {
            onFilled();
          }
        } else if (onEmpty) {
          onEmpty();
        }
      }, [onFilled, onEmpty]);
      useEnhancedEffect$1(() => {
        if (isControlled) {
          checkDirty({
            value
          });
        }
      }, [value, checkDirty, isControlled]);
      const handleFocus = event => {
        // Fix a bug with IE11 where the focus/blur events are triggered
        // while the component is disabled.
        if (fcs.disabled) {
          event.stopPropagation();
          return;
        }
        if (onFocus) {
          onFocus(event);
        }
        if (inputPropsProp.onFocus) {
          inputPropsProp.onFocus(event);
        }
        if (muiFormControl && muiFormControl.onFocus) {
          muiFormControl.onFocus(event);
        } else {
          setFocused(true);
        }
      };
      const handleBlur = event => {
        if (onBlur) {
          onBlur(event);
        }
        if (inputPropsProp.onBlur) {
          inputPropsProp.onBlur(event);
        }
        if (muiFormControl && muiFormControl.onBlur) {
          muiFormControl.onBlur(event);
        } else {
          setFocused(false);
        }
      };
      const handleChange = (event, ...args) => {
        if (!isControlled) {
          const element = event.target || inputRef.current;
          if (element == null) {
            throw new Error(`MUI: Expected valid input target. Did you use a custom \`inputComponent\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` );
          }
          checkDirty({
            value: element.value
          });
        }
        if (inputPropsProp.onChange) {
          inputPropsProp.onChange(event, ...args);
        }

        // Perform in the willUpdate
        if (onChange) {
          onChange(event, ...args);
        }
      };

      // Check the input state on mount, in case it was filled by the user
      // or auto filled by the browser before the hydration (for SSR).
      React__namespace.useEffect(() => {
        checkDirty(inputRef.current);
        // eslint-disable-next-line react-hooks/exhaustive-deps
      }, []);
      const handleClick = event => {
        if (inputRef.current && event.currentTarget === event.target) {
          inputRef.current.focus();
        }
        if (onClick) {
          onClick(event);
        }
      };
      let InputComponent = inputComponent;
      let inputProps = inputPropsProp;
      if (multiline && InputComponent === 'input') {
        if (rows) {
          {
            if (minRows || maxRows) {
              console.warn('MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.');
            }
          }
          inputProps = _extends({
            type: undefined,
            minRows: rows,
            maxRows: rows
          }, inputProps);
        } else {
          inputProps = _extends({
            type: undefined,
            maxRows,
            minRows
          }, inputProps);
        }
        InputComponent = TextareaAutosize$1;
      }
      const handleAutoFill = event => {
        // Provide a fake value as Chrome might not let you access it for security reasons.
        checkDirty(event.animationName === 'mui-auto-fill-cancel' ? inputRef.current : {
          value: 'x'
        });
      };
      React__namespace.useEffect(() => {
        if (muiFormControl) {
          muiFormControl.setAdornedStart(Boolean(startAdornment));
        }
      }, [muiFormControl, startAdornment]);
      const ownerState = _extends({}, props, {
        color: fcs.color || 'primary',
        disabled: fcs.disabled,
        endAdornment,
        error: fcs.error,
        focused: fcs.focused,
        formControl: muiFormControl,
        fullWidth,
        hiddenLabel: fcs.hiddenLabel,
        multiline,
        size: fcs.size,
        startAdornment,
        type
      });
      const classes = useUtilityClasses$1h(ownerState);
      const Root = slots.root || components.Root || InputBaseRoot;
      const rootProps = slotProps.root || componentsProps.root || {};
      const Input = slots.input || components.Input || InputBaseComponent;
      inputProps = _extends({}, inputProps, (_slotProps$input = slotProps.input) != null ? _slotProps$input : componentsProps.input);
      return /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
        children: [!disableInjectingGlobalStyles && inputGlobalStyles, /*#__PURE__*/jsxRuntime.exports.jsxs(Root, _extends({}, rootProps, !isHostComponent(Root) && {
          ownerState: _extends({}, ownerState, rootProps.ownerState)
        }, {
          ref: ref,
          onClick: handleClick
        }, other, {
          className: clsx(classes.root, rootProps.className, className),
          children: [startAdornment, /*#__PURE__*/jsxRuntime.exports.jsx(FormControlContext$1.Provider, {
            value: null,
            children: /*#__PURE__*/jsxRuntime.exports.jsx(Input, _extends({
              ownerState: ownerState,
              "aria-invalid": fcs.error,
              "aria-describedby": ariaDescribedby,
              autoComplete: autoComplete,
              autoFocus: autoFocus,
              defaultValue: defaultValue,
              disabled: fcs.disabled,
              id: id,
              onAnimationStart: handleAutoFill,
              name: name,
              placeholder: placeholder,
              readOnly: readOnly,
              required: fcs.required,
              rows: rows,
              value: value,
              onKeyDown: onKeyDown,
              onKeyUp: onKeyUp,
              type: type
            }, inputProps, !isHostComponent(Input) && {
              as: InputComponent,
              ownerState: _extends({}, ownerState, inputProps.ownerState)
            }, {
              ref: handleInputRef,
              className: clsx(classes.input, inputProps.className),
              onBlur: handleBlur,
              onChange: handleChange,
              onFocus: handleFocus
            }))
          }), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {
            startAdornment
          })) : null]
        }))]
      });
    });
    InputBase.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * @ignore
       */
      'aria-describedby': PropTypes.string,
      /**
       * This prop helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: PropTypes.string,
      /**
       * If `true`, the `input` element is focused during the first mount.
       */
      autoFocus: PropTypes.bool,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
       * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
       */
      color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `slots` prop.
       * It's recommended to use the `slots` prop instead.
       *
       * @default {}
       */
      components: PropTypes.shape({
        Input: PropTypes.elementType,
        Root: PropTypes.elementType
      }),
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * This prop is an alias for the `slotProps` prop.
       * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
       *
       * @default {}
       */
      componentsProps: PropTypes.shape({
        input: PropTypes.object,
        root: PropTypes.object
      }),
      /**
       * The default value. Use when the component is not controlled.
       */
      defaultValue: PropTypes.any,
      /**
       * If `true`, the component is disabled.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.
       * This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.
       * @default false
       */
      disableInjectingGlobalStyles: PropTypes.bool,
      /**
       * End `InputAdornment` for this component.
       */
      endAdornment: PropTypes.node,
      /**
       * If `true`, the `input` will indicate an error.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      error: PropTypes.bool,
      /**
       * If `true`, the `input` will take up the full width of its container.
       * @default false
       */
      fullWidth: PropTypes.bool,
      /**
       * The id of the `input` element.
       */
      id: PropTypes.string,
      /**
       * The component used for the `input` element.
       * Either a string to use a HTML element or a component.
       * @default 'input'
       */
      inputComponent: elementTypeAcceptingRef$1,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       * @default {}
       */
      inputProps: PropTypes.object,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,
      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
       */
      margin: PropTypes.oneOf(['dense', 'none']),
      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      /**
       * Minimum number of rows to display when multiline option is set to true.
       */
      minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      /**
       * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
       * @default false
       */
      multiline: PropTypes.bool,
      /**
       * Name attribute of the `input` element.
       */
      name: PropTypes.string,
      /**
       * Callback fired when the `input` is blurred.
       *
       * Notice that the first argument (event) might be undefined.
       */
      onBlur: PropTypes.func,
      /**
       * Callback fired when the value is changed.
       *
       * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: PropTypes.func,
      /**
       * @ignore
       */
      onClick: PropTypes.func,
      /**
       * @ignore
       */
      onFocus: PropTypes.func,
      /**
       * Callback fired when the `input` doesn't satisfy its constraints.
       */
      onInvalid: PropTypes.func,
      /**
       * @ignore
       */
      onKeyDown: PropTypes.func,
      /**
       * @ignore
       */
      onKeyUp: PropTypes.func,
      /**
       * The short hint displayed in the `input` before the user enters a value.
       */
      placeholder: PropTypes.string,
      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: PropTypes.bool,
      /**
       * @ignore
       */
      renderSuffix: PropTypes.func,
      /**
       * If `true`, the `input` element is required.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      required: PropTypes.bool,
      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      /**
       * The size of the component.
       */
      size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slotProps: PropTypes.shape({
        input: PropTypes.object,
        root: PropTypes.object
      }),
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `components` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slots: PropTypes.shape({
        input: PropTypes.elementType,
        root: PropTypes.elementType
      }),
      /**
       * Start `InputAdornment` for this component.
       */
      startAdornment: PropTypes.node,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       * @default 'text'
       */
      type: PropTypes.string,
      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: PropTypes.any
    } ;
    var InputBase$1 = InputBase;

    function getInputUtilityClass(slot) {
      return generateUtilityClass('MuiInput', slot);
    }
    const inputClasses = _extends({}, inputBaseClasses$1, generateUtilityClasses('MuiInput', ['root', 'underline', 'input']));
    var inputClasses$1 = inputClasses;

    function getOutlinedInputUtilityClass(slot) {
      return generateUtilityClass('MuiOutlinedInput', slot);
    }
    const outlinedInputClasses = _extends({}, inputBaseClasses$1, generateUtilityClasses('MuiOutlinedInput', ['root', 'notchedOutline', 'input']));
    var outlinedInputClasses$1 = outlinedInputClasses;

    function getFilledInputUtilityClass(slot) {
      return generateUtilityClass('MuiFilledInput', slot);
    }
    const filledInputClasses = _extends({}, inputBaseClasses$1, generateUtilityClasses('MuiFilledInput', ['root', 'underline', 'input']));
    var filledInputClasses$1 = filledInputClasses;

    var ArrowDropDownIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
      d: "M7 10l5 5 5-5z"
    }), 'ArrowDropDown');

    function getAutocompleteUtilityClass(slot) {
      return generateUtilityClass('MuiAutocomplete', slot);
    }
    const autocompleteClasses = generateUtilityClasses('MuiAutocomplete', ['root', 'fullWidth', 'focused', 'focusVisible', 'tag', 'tagSizeSmall', 'tagSizeMedium', 'hasPopupIcon', 'hasClearIcon', 'inputRoot', 'input', 'inputFocused', 'endAdornment', 'clearIndicator', 'popupIndicator', 'popupIndicatorOpen', 'popper', 'popperDisablePortal', 'paper', 'listbox', 'loading', 'noOptions', 'option', 'groupLabel', 'groupUl']);
    var autocompleteClasses$1 = autocompleteClasses;

    var _ClearIcon, _ArrowDropDownIcon;
    const _excluded$1v = ["autoComplete", "autoHighlight", "autoSelect", "blurOnSelect", "ChipProps", "className", "clearIcon", "clearOnBlur", "clearOnEscape", "clearText", "closeText", "componentsProps", "defaultValue", "disableClearable", "disableCloseOnSelect", "disabled", "disabledItemsFocusable", "disableListWrap", "disablePortal", "filterOptions", "filterSelectedOptions", "forcePopupIcon", "freeSolo", "fullWidth", "getLimitTagsText", "getOptionDisabled", "getOptionLabel", "isOptionEqualToValue", "groupBy", "handleHomeEndKeys", "id", "includeInputInList", "inputValue", "limitTags", "ListboxComponent", "ListboxProps", "loading", "loadingText", "multiple", "noOptionsText", "onChange", "onClose", "onHighlightChange", "onInputChange", "onOpen", "open", "openOnFocus", "openText", "options", "PaperComponent", "PopperComponent", "popupIcon", "readOnly", "renderGroup", "renderInput", "renderOption", "renderTags", "selectOnFocus", "size", "slotProps", "value"];
    const useUtilityClasses$1g = ownerState => {
      const {
        classes,
        disablePortal,
        focused,
        fullWidth,
        hasClearIcon,
        hasPopupIcon,
        inputFocused,
        popupOpen,
        size
      } = ownerState;
      const slots = {
        root: ['root', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],
        inputRoot: ['inputRoot'],
        input: ['input', inputFocused && 'inputFocused'],
        tag: ['tag', `tagSize${capitalize(size)}`],
        endAdornment: ['endAdornment'],
        clearIndicator: ['clearIndicator'],
        popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],
        popper: ['popper', disablePortal && 'popperDisablePortal'],
        paper: ['paper'],
        listbox: ['listbox'],
        loading: ['loading'],
        noOptions: ['noOptions'],
        option: ['option'],
        groupLabel: ['groupLabel'],
        groupUl: ['groupUl']
      };
      return composeClasses(slots, getAutocompleteUtilityClass, classes);
    };
    const AutocompleteRoot = styled$1('div', {
      name: 'MuiAutocomplete',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        const {
          fullWidth,
          hasClearIcon,
          hasPopupIcon,
          inputFocused,
          size
        } = ownerState;
        return [{
          [`& .${autocompleteClasses$1.tag}`]: styles.tag
        }, {
          [`& .${autocompleteClasses$1.tag}`]: styles[`tagSize${capitalize(size)}`]
        }, {
          [`& .${autocompleteClasses$1.inputRoot}`]: styles.inputRoot
        }, {
          [`& .${autocompleteClasses$1.input}`]: styles.input
        }, {
          [`& .${autocompleteClasses$1.input}`]: inputFocused && styles.inputFocused
        }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];
      }
    })(({
      ownerState
    }) => _extends({
      [`&.${autocompleteClasses$1.focused} .${autocompleteClasses$1.clearIndicator}`]: {
        visibility: 'visible'
      },
      /* Avoid double tap issue on iOS */
      '@media (pointer: fine)': {
        [`&:hover .${autocompleteClasses$1.clearIndicator}`]: {
          visibility: 'visible'
        }
      }
    }, ownerState.fullWidth && {
      width: '100%'
    }, {
      [`& .${autocompleteClasses$1.tag}`]: _extends({
        margin: 3,
        maxWidth: 'calc(100% - 6px)'
      }, ownerState.size === 'small' && {
        margin: 2,
        maxWidth: 'calc(100% - 4px)'
      }),
      [`& .${autocompleteClasses$1.inputRoot}`]: {
        flexWrap: 'wrap',
        [`.${autocompleteClasses$1.hasPopupIcon}&, .${autocompleteClasses$1.hasClearIcon}&`]: {
          paddingRight: 26 + 4
        },
        [`.${autocompleteClasses$1.hasPopupIcon}.${autocompleteClasses$1.hasClearIcon}&`]: {
          paddingRight: 52 + 4
        },
        [`& .${autocompleteClasses$1.input}`]: {
          width: 0,
          minWidth: 30
        }
      },
      [`& .${inputClasses$1.root}`]: {
        paddingBottom: 1,
        '& .MuiInput-input': {
          padding: '4px 4px 4px 0px'
        }
      },
      [`& .${inputClasses$1.root}.${inputBaseClasses$1.sizeSmall}`]: {
        [`& .${inputClasses$1.input}`]: {
          padding: '2px 4px 3px 0'
        }
      },
      [`& .${outlinedInputClasses$1.root}`]: {
        padding: 9,
        [`.${autocompleteClasses$1.hasPopupIcon}&, .${autocompleteClasses$1.hasClearIcon}&`]: {
          paddingRight: 26 + 4 + 9
        },
        [`.${autocompleteClasses$1.hasPopupIcon}.${autocompleteClasses$1.hasClearIcon}&`]: {
          paddingRight: 52 + 4 + 9
        },
        [`& .${autocompleteClasses$1.input}`]: {
          padding: '7.5px 4px 7.5px 6px'
        },
        [`& .${autocompleteClasses$1.endAdornment}`]: {
          right: 9
        }
      },
      [`& .${outlinedInputClasses$1.root}.${inputBaseClasses$1.sizeSmall}`]: {
        // Don't specify paddingRight, as it overrides the default value set when there is only
        // one of the popup or clear icon as the specificity is equal so the latter one wins
        paddingTop: 6,
        paddingBottom: 6,
        paddingLeft: 6,
        [`& .${autocompleteClasses$1.input}`]: {
          padding: '2.5px 4px 2.5px 6px'
        }
      },
      [`& .${filledInputClasses$1.root}`]: {
        paddingTop: 19,
        paddingLeft: 8,
        [`.${autocompleteClasses$1.hasPopupIcon}&, .${autocompleteClasses$1.hasClearIcon}&`]: {
          paddingRight: 26 + 4 + 9
        },
        [`.${autocompleteClasses$1.hasPopupIcon}.${autocompleteClasses$1.hasClearIcon}&`]: {
          paddingRight: 52 + 4 + 9
        },
        [`& .${filledInputClasses$1.input}`]: {
          padding: '7px 4px'
        },
        [`& .${autocompleteClasses$1.endAdornment}`]: {
          right: 9
        }
      },
      [`& .${filledInputClasses$1.root}.${inputBaseClasses$1.sizeSmall}`]: {
        paddingBottom: 1,
        [`& .${filledInputClasses$1.input}`]: {
          padding: '2.5px 4px'
        }
      },
      [`& .${inputBaseClasses$1.hiddenLabel}`]: {
        paddingTop: 8
      },
      [`& .${autocompleteClasses$1.input}`]: _extends({
        flexGrow: 1,
        textOverflow: 'ellipsis',
        opacity: 0
      }, ownerState.inputFocused && {
        opacity: 1
      })
    }));
    const AutocompleteEndAdornment = styled$1('div', {
      name: 'MuiAutocomplete',
      slot: 'EndAdornment',
      overridesResolver: (props, styles) => styles.endAdornment
    })({
      // We use a position absolute to support wrapping tags.
      position: 'absolute',
      right: 0,
      top: 'calc(50% - 14px)' // Center vertically
    });

    const AutocompleteClearIndicator = styled$1(IconButton$1, {
      name: 'MuiAutocomplete',
      slot: 'ClearIndicator',
      overridesResolver: (props, styles) => styles.clearIndicator
    })({
      marginRight: -2,
      padding: 4,
      visibility: 'hidden'
    });
    const AutocompletePopupIndicator = styled$1(IconButton$1, {
      name: 'MuiAutocomplete',
      slot: 'PopupIndicator',
      overridesResolver: ({
        ownerState
      }, styles) => _extends({}, styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen)
    })(({
      ownerState
    }) => _extends({
      padding: 2,
      marginRight: -2
    }, ownerState.popupOpen && {
      transform: 'rotate(180deg)'
    }));
    const AutocompletePopper = styled$1(Popper$1, {
      name: 'MuiAutocomplete',
      slot: 'Popper',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${autocompleteClasses$1.option}`]: styles.option
        }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      zIndex: (theme.vars || theme).zIndex.modal
    }, ownerState.disablePortal && {
      position: 'absolute'
    }));
    const AutocompletePaper = styled$1(Paper$1, {
      name: 'MuiAutocomplete',
      slot: 'Paper',
      overridesResolver: (props, styles) => styles.paper
    })(({
      theme
    }) => _extends({}, theme.typography.body1, {
      overflow: 'auto'
    }));
    const AutocompleteLoading = styled$1('div', {
      name: 'MuiAutocomplete',
      slot: 'Loading',
      overridesResolver: (props, styles) => styles.loading
    })(({
      theme
    }) => ({
      color: (theme.vars || theme).palette.text.secondary,
      padding: '14px 16px'
    }));
    const AutocompleteNoOptions = styled$1('div', {
      name: 'MuiAutocomplete',
      slot: 'NoOptions',
      overridesResolver: (props, styles) => styles.noOptions
    })(({
      theme
    }) => ({
      color: (theme.vars || theme).palette.text.secondary,
      padding: '14px 16px'
    }));
    const AutocompleteListbox = styled$1('div', {
      name: 'MuiAutocomplete',
      slot: 'Listbox',
      overridesResolver: (props, styles) => styles.listbox
    })(({
      theme
    }) => ({
      listStyle: 'none',
      margin: 0,
      padding: '8px 0',
      maxHeight: '40vh',
      overflow: 'auto',
      position: 'relative',
      [`& .${autocompleteClasses$1.option}`]: {
        minHeight: 48,
        display: 'flex',
        overflow: 'hidden',
        justifyContent: 'flex-start',
        alignItems: 'center',
        cursor: 'pointer',
        paddingTop: 6,
        boxSizing: 'border-box',
        outline: '0',
        WebkitTapHighlightColor: 'transparent',
        paddingBottom: 6,
        paddingLeft: 16,
        paddingRight: 16,
        [theme.breakpoints.up('sm')]: {
          minHeight: 'auto'
        },
        [`&.${autocompleteClasses$1.focused}`]: {
          backgroundColor: (theme.vars || theme).palette.action.hover,
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: 'transparent'
          }
        },
        '&[aria-disabled="true"]': {
          opacity: (theme.vars || theme).palette.action.disabledOpacity,
          pointerEvents: 'none'
        },
        [`&.${autocompleteClasses$1.focusVisible}`]: {
          backgroundColor: (theme.vars || theme).palette.action.focus
        },
        '&[aria-selected="true"]': {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
          [`&.${autocompleteClasses$1.focused}`]: {
            backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: (theme.vars || theme).palette.action.selected
            }
          },
          [`&.${autocompleteClasses$1.focusVisible}`]: {
            backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
          }
        }
      }
    }));
    const AutocompleteGroupLabel = styled$1(ListSubheader$1, {
      name: 'MuiAutocomplete',
      slot: 'GroupLabel',
      overridesResolver: (props, styles) => styles.groupLabel
    })(({
      theme
    }) => ({
      backgroundColor: (theme.vars || theme).palette.background.paper,
      top: -8
    }));
    const AutocompleteGroupUl = styled$1('ul', {
      name: 'MuiAutocomplete',
      slot: 'GroupUl',
      overridesResolver: (props, styles) => styles.groupUl
    })({
      padding: 0,
      [`& .${autocompleteClasses$1.option}`]: {
        paddingLeft: 24
      }
    });
    const Autocomplete = /*#__PURE__*/React__namespace.forwardRef(function Autocomplete(inProps, ref) {
      var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;
      const props = useThemeProps({
        props: inProps,
        name: 'MuiAutocomplete'
      });
      /* eslint-disable @typescript-eslint/no-unused-vars */
      const {
          autoComplete = false,
          autoHighlight = false,
          autoSelect = false,
          blurOnSelect = false,
          ChipProps,
          className,
          clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/jsxRuntime.exports.jsx(ClearIcon, {
            fontSize: "small"
          })),
          clearOnBlur = !props.freeSolo,
          clearOnEscape = false,
          clearText = 'Clear',
          closeText = 'Close',
          componentsProps = {},
          defaultValue = props.multiple ? [] : null,
          disableClearable = false,
          disableCloseOnSelect = false,
          disabled = false,
          disabledItemsFocusable = false,
          disableListWrap = false,
          disablePortal = false,
          filterSelectedOptions = false,
          forcePopupIcon = 'auto',
          freeSolo = false,
          fullWidth = false,
          getLimitTagsText = more => `+${more}`,
          getOptionLabel = option => {
            var _option$label;
            return (_option$label = option.label) != null ? _option$label : option;
          },
          groupBy,
          handleHomeEndKeys = !props.freeSolo,
          includeInputInList = false,
          limitTags = -1,
          ListboxComponent = 'ul',
          ListboxProps,
          loading = false,
          loadingText = 'Loading…',
          multiple = false,
          noOptionsText = 'No options',
          openOnFocus = false,
          openText = 'Open',
          PaperComponent = Paper$1,
          PopperComponent = Popper$1,
          popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/jsxRuntime.exports.jsx(ArrowDropDownIcon, {})),
          readOnly = false,
          renderGroup: renderGroupProp,
          renderInput,
          renderOption: renderOptionProp,
          renderTags,
          selectOnFocus = !props.freeSolo,
          size = 'medium',
          slotProps = {}
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1v);
      /* eslint-enable @typescript-eslint/no-unused-vars */

      const {
        getRootProps,
        getInputProps,
        getInputLabelProps,
        getPopupIndicatorProps,
        getClearProps,
        getTagProps,
        getListboxProps,
        getOptionProps,
        value,
        dirty,
        id,
        popupOpen,
        focused,
        focusedTag,
        anchorEl,
        setAnchorEl,
        inputValue,
        groupedOptions
      } = useAutocomplete(_extends({}, props, {
        componentName: 'Autocomplete'
      }));
      const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;
      const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;

      // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.
      const ownerState = _extends({}, props, {
        disablePortal,
        focused,
        fullWidth,
        hasClearIcon,
        hasPopupIcon,
        inputFocused: focusedTag === -1,
        popupOpen,
        size
      });
      const classes = useUtilityClasses$1g(ownerState);
      let startAdornment;
      if (multiple && value.length > 0) {
        const getCustomizedTagProps = params => _extends({
          className: classes.tag,
          disabled
        }, getTagProps(params));
        if (renderTags) {
          startAdornment = renderTags(value, getCustomizedTagProps, ownerState);
        } else {
          startAdornment = value.map((option, index) => /*#__PURE__*/jsxRuntime.exports.jsx(Chip$1, _extends({
            label: getOptionLabel(option),
            size: size
          }, getCustomizedTagProps({
            index
          }), ChipProps)));
        }
      }
      if (limitTags > -1 && Array.isArray(startAdornment)) {
        const more = startAdornment.length - limitTags;
        if (!focused && more > 0) {
          startAdornment = startAdornment.splice(0, limitTags);
          startAdornment.push( /*#__PURE__*/jsxRuntime.exports.jsx("span", {
            className: classes.tag,
            children: getLimitTagsText(more)
          }, startAdornment.length));
        }
      }
      const defaultRenderGroup = params => /*#__PURE__*/jsxRuntime.exports.jsxs("li", {
        children: [/*#__PURE__*/jsxRuntime.exports.jsx(AutocompleteGroupLabel, {
          className: classes.groupLabel,
          ownerState: ownerState,
          component: "div",
          children: params.group
        }), /*#__PURE__*/jsxRuntime.exports.jsx(AutocompleteGroupUl, {
          className: classes.groupUl,
          ownerState: ownerState,
          children: params.children
        })]
      }, params.key);
      const renderGroup = renderGroupProp || defaultRenderGroup;
      const defaultRenderOption = (props2, option) => /*#__PURE__*/jsxRuntime.exports.jsx("li", _extends({}, props2, {
        children: getOptionLabel(option)
      }));
      const renderOption = renderOptionProp || defaultRenderOption;
      const renderListOption = (option, index) => {
        const optionProps = getOptionProps({
          option,
          index
        });
        return renderOption(_extends({}, optionProps, {
          className: classes.option
        }), option, {
          selected: optionProps['aria-selected'],
          inputValue
        });
      };
      const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;
      const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;
      const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;
      const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;
      return /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
        children: [/*#__PURE__*/jsxRuntime.exports.jsx(AutocompleteRoot, _extends({
          ref: ref,
          className: clsx(classes.root, className),
          ownerState: ownerState
        }, getRootProps(other), {
          children: renderInput({
            id,
            disabled,
            fullWidth: true,
            size: size === 'small' ? 'small' : undefined,
            InputLabelProps: getInputLabelProps(),
            InputProps: _extends({
              ref: setAnchorEl,
              className: classes.inputRoot,
              startAdornment
            }, (hasClearIcon || hasPopupIcon) && {
              endAdornment: /*#__PURE__*/jsxRuntime.exports.jsxs(AutocompleteEndAdornment, {
                className: classes.endAdornment,
                ownerState: ownerState,
                children: [hasClearIcon ? /*#__PURE__*/jsxRuntime.exports.jsx(AutocompleteClearIndicator, _extends({}, getClearProps(), {
                  "aria-label": clearText,
                  title: clearText,
                  ownerState: ownerState
                }, clearIndicatorSlotProps, {
                  className: clsx(classes.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),
                  children: clearIcon
                })) : null, hasPopupIcon ? /*#__PURE__*/jsxRuntime.exports.jsx(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {
                  disabled: disabled,
                  "aria-label": popupOpen ? closeText : openText,
                  title: popupOpen ? closeText : openText,
                  ownerState: ownerState
                }, popupIndicatorSlotProps, {
                  className: clsx(classes.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),
                  children: popupIcon
                })) : null]
              })
            }),
            inputProps: _extends({
              className: classes.input,
              disabled,
              readOnly
            }, getInputProps())
          })
        })), anchorEl ? /*#__PURE__*/jsxRuntime.exports.jsx(AutocompletePopper, _extends({
          as: PopperComponent,
          disablePortal: disablePortal,
          style: {
            width: anchorEl ? anchorEl.clientWidth : null
          },
          ownerState: ownerState,
          role: "presentation",
          anchorEl: anchorEl,
          open: popupOpen
        }, popperSlotProps, {
          className: clsx(classes.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),
          children: /*#__PURE__*/jsxRuntime.exports.jsxs(AutocompletePaper, _extends({
            ownerState: ownerState,
            as: PaperComponent
          }, paperSlotProps, {
            className: clsx(classes.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),
            children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/jsxRuntime.exports.jsx(AutocompleteLoading, {
              className: classes.loading,
              ownerState: ownerState,
              children: loadingText
            }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/jsxRuntime.exports.jsx(AutocompleteNoOptions, {
              className: classes.noOptions,
              ownerState: ownerState,
              role: "presentation",
              onMouseDown: event => {
                // Prevent input blur when interacting with the "no options" content
                event.preventDefault();
              },
              children: noOptionsText
            }) : null, groupedOptions.length > 0 ? /*#__PURE__*/jsxRuntime.exports.jsx(AutocompleteListbox, _extends({
              as: ListboxComponent,
              className: classes.listbox,
              ownerState: ownerState
            }, getListboxProps(), ListboxProps, {
              children: groupedOptions.map((option, index) => {
                if (groupBy) {
                  return renderGroup({
                    key: option.key,
                    group: option.group,
                    children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))
                  });
                }
                return renderListOption(option, index);
              })
            })) : null]
          }))
        })) : null]
      });
    });
    Autocomplete.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * If `true`, the portion of the selected suggestion that has not been typed by the user,
       * known as the completion string, appears inline after the input cursor in the textbox.
       * The inline completion string is visually highlighted and has a selected state.
       * @default false
       */
      autoComplete: PropTypes.bool,
      /**
       * If `true`, the first option is automatically highlighted.
       * @default false
       */
      autoHighlight: PropTypes.bool,
      /**
       * If `true`, the selected option becomes the value of the input
       * when the Autocomplete loses focus unless the user chooses
       * a different option or changes the character string in the input.
       * @default false
       */
      autoSelect: PropTypes.bool,
      /**
       * Control if the input should be blurred when an option is selected:
       *
       * - `false` the input is not blurred.
       * - `true` the input is always blurred.
       * - `touch` the input is blurred after a touch event.
       * - `mouse` the input is blurred after a mouse event.
       * @default false
       */
      blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),
      /**
       * Props applied to the [`Chip`](/material-ui/api/chip/) element.
       */
      ChipProps: PropTypes.object,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The icon to display in place of the default clear icon.
       * @default <ClearIcon fontSize="small" />
       */
      clearIcon: PropTypes.node,
      /**
       * If `true`, the input's text is cleared on blur if no value is selected.
       *
       * Set to `true` if you want to help the user enter a new value.
       * Set to `false` if you want to help the user resume their search.
       * @default !props.freeSolo
       */
      clearOnBlur: PropTypes.bool,
      /**
       * If `true`, clear all values when the user presses escape and the popup is closed.
       * @default false
       */
      clearOnEscape: PropTypes.bool,
      /**
       * Override the default text for the *clear* icon button.
       *
       * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
       * @default 'Clear'
       */
      clearText: PropTypes.string,
      /**
       * Override the default text for the *close popup* icon button.
       *
       * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
       * @default 'Close'
       */
      closeText: PropTypes.string,
      /**
       * The props used for each slot inside.
       * @default {}
       */
      componentsProps: PropTypes.shape({
        clearIndicator: PropTypes.object,
        paper: PropTypes.object,
        popper: PropTypes.object,
        popupIndicator: PropTypes.object
      }),
      /**
       * The default value. Use when the component is not controlled.
       * @default props.multiple ? [] : null
       */
      defaultValue: chainPropTypes(PropTypes.any, props => {
        if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {
          return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\n'));
        }
        return null;
      }),
      /**
       * If `true`, the input can't be cleared.
       * @default false
       */
      disableClearable: PropTypes.bool,
      /**
       * If `true`, the popup won't close when a value is selected.
       * @default false
       */
      disableCloseOnSelect: PropTypes.bool,
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, will allow focus on disabled items.
       * @default false
       */
      disabledItemsFocusable: PropTypes.bool,
      /**
       * If `true`, the list box in the popup will not wrap focus.
       * @default false
       */
      disableListWrap: PropTypes.bool,
      /**
       * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.
       * @default false
       */
      disablePortal: PropTypes.bool,
      /**
       * A function that determines the filtered options to be rendered on search.
       *
       * @param {T[]} options The options to render.
       * @param {object} state The state of the component.
       * @returns {T[]}
       */
      filterOptions: PropTypes.func,
      /**
       * If `true`, hide the selected options from the list box.
       * @default false
       */
      filterSelectedOptions: PropTypes.bool,
      /**
       * Force the visibility display of the popup icon.
       * @default 'auto'
       */
      forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),
      /**
       * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.
       * @default false
       */
      freeSolo: PropTypes.bool,
      /**
       * If `true`, the input will take up the full width of its container.
       * @default false
       */
      fullWidth: PropTypes.bool,
      /**
       * The label to display when the tags are truncated (`limitTags`).
       *
       * @param {number} more The number of truncated tags.
       * @returns {ReactNode}
       * @default (more) => `+${more}`
       */
      getLimitTagsText: PropTypes.func,
      /**
       * Used to determine the disabled state for a given option.
       *
       * @param {T} option The option to test.
       * @returns {boolean}
       */
      getOptionDisabled: PropTypes.func,
      /**
       * Used to determine the string value for a given option.
       * It's used to fill the input (and the list box options if `renderOption` is not provided).
       *
       * If used in free solo mode, it must accept both the type of the options and a string.
       *
       * @param {T} option
       * @returns {string}
       * @default (option) => option.label ?? option
       */
      getOptionLabel: PropTypes.func,
      /**
       * If provided, the options will be grouped under the returned string.
       * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.
       *
       * @param {T} options The options to group.
       * @returns {string}
       */
      groupBy: PropTypes.func,
      /**
       * If `true`, the component handles the "Home" and "End" keys when the popup is open.
       * It should move focus to the first option and last option, respectively.
       * @default !props.freeSolo
       */
      handleHomeEndKeys: PropTypes.bool,
      /**
       * This prop is used to help implement the accessibility logic.
       * If you don't provide an id it will fall back to a randomly generated one.
       */
      id: PropTypes.string,
      /**
       * If `true`, the highlight can move to the input.
       * @default false
       */
      includeInputInList: PropTypes.bool,
      /**
       * The input value.
       */
      inputValue: PropTypes.string,
      /**
       * Used to determine if the option represents the given value.
       * Uses strict equality by default.
       * ⚠️ Both arguments need to be handled, an option can only match with one value.
       *
       * @param {T} option The option to test.
       * @param {T} value The value to test against.
       * @returns {boolean}
       */
      isOptionEqualToValue: PropTypes.func,
      /**
       * The maximum number of tags that will be visible when not focused.
       * Set `-1` to disable the limit.
       * @default -1
       */
      limitTags: integerPropType,
      /**
       * The component used to render the listbox.
       * @default 'ul'
       */
      ListboxComponent: PropTypes.elementType,
      /**
       * Props applied to the Listbox element.
       */
      ListboxProps: PropTypes.object,
      /**
       * If `true`, the component is in a loading state.
       * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, e.g. `options` are empty).
       * @default false
       */
      loading: PropTypes.bool,
      /**
       * Text to display when in a loading state.
       *
       * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
       * @default 'Loading…'
       */
      loadingText: PropTypes.node,
      /**
       * If `true`, `value` must be an array and the menu will support multiple selections.
       * @default false
       */
      multiple: PropTypes.bool,
      /**
       * Text to display when there are no options.
       *
       * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
       * @default 'No options'
       */
      noOptionsText: PropTypes.node,
      /**
       * Callback fired when the value changes.
       *
       * @param {React.SyntheticEvent} event The event source of the callback.
       * @param {T|T[]} value The new value of the component.
       * @param {string} reason One of "createOption", "selectOption", "removeOption", "blur" or "clear".
       * @param {string} [details]
       */
      onChange: PropTypes.func,
      /**
       * Callback fired when the popup requests to be closed.
       * Use in controlled mode (see open).
       *
       * @param {React.SyntheticEvent} event The event source of the callback.
       * @param {string} reason Can be: `"toggleInput"`, `"escape"`, `"selectOption"`, `"removeOption"`, `"blur"`.
       */
      onClose: PropTypes.func,
      /**
       * Callback fired when the highlight option changes.
       *
       * @param {React.SyntheticEvent} event The event source of the callback.
       * @param {T} option The highlighted option.
       * @param {string} reason Can be: `"keyboard"`, `"auto"`, `"mouse"`.
       */
      onHighlightChange: PropTypes.func,
      /**
       * Callback fired when the input value changes.
       *
       * @param {React.SyntheticEvent} event The event source of the callback.
       * @param {string} value The new value of the text input.
       * @param {string} reason Can be: `"input"` (user input), `"reset"` (programmatic change), `"clear"`.
       */
      onInputChange: PropTypes.func,
      /**
       * Callback fired when the popup requests to be opened.
       * Use in controlled mode (see open).
       *
       * @param {React.SyntheticEvent} event The event source of the callback.
       */
      onOpen: PropTypes.func,
      /**
       * If `true`, the component is shown.
       */
      open: PropTypes.bool,
      /**
       * If `true`, the popup will open on input focus.
       * @default false
       */
      openOnFocus: PropTypes.bool,
      /**
       * Override the default text for the *open popup* icon button.
       *
       * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
       * @default 'Open'
       */
      openText: PropTypes.string,
      /**
       * Array of options.
       */
      options: PropTypes.array.isRequired,
      /**
       * The component used to render the body of the popup.
       * @default Paper
       */
      PaperComponent: PropTypes.elementType,
      /**
       * The component used to position the popup.
       * @default Popper
       */
      PopperComponent: PropTypes.elementType,
      /**
       * The icon to display in place of the default popup icon.
       * @default <ArrowDropDownIcon />
       */
      popupIcon: PropTypes.node,
      /**
       * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.
       * @default false
       */
      readOnly: PropTypes.bool,
      /**
       * Render the group.
       *
       * @param {AutocompleteRenderGroupParams} params The group to render.
       * @returns {ReactNode}
       */
      renderGroup: PropTypes.func,
      /**
       * Render the input.
       *
       * @param {object} params
       * @returns {ReactNode}
       */
      renderInput: PropTypes.func.isRequired,
      /**
       * Render the option, use `getOptionLabel` by default.
       *
       * @param {object} props The props to apply on the li element.
       * @param {T} option The option to render.
       * @param {object} state The state of the component.
       * @returns {ReactNode}
       */
      renderOption: PropTypes.func,
      /**
       * Render the selected value.
       *
       * @param {T[]} value The `value` provided to the component.
       * @param {function} getTagProps A tag props getter.
       * @param {object} ownerState The state of the Autocomplete component.
       * @returns {ReactNode}
       */
      renderTags: PropTypes.func,
      /**
       * If `true`, the input's text is selected on focus.
       * It helps the user clear the selected value.
       * @default !props.freeSolo
       */
      selectOnFocus: PropTypes.bool,
      /**
       * The size of the component.
       * @default 'medium'
       */
      size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),
      /**
       * The props used for each slot inside.
       * @default {}
       */
      slotProps: PropTypes.shape({
        clearIndicator: PropTypes.object,
        paper: PropTypes.object,
        popper: PropTypes.object,
        popupIndicator: PropTypes.object
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The value of the autocomplete.
       *
       * The value must have reference equality with the option in order to be selected.
       * You can customize the equality behavior with the `isOptionEqualToValue` prop.
       */
      value: chainPropTypes(PropTypes.any, props => {
        if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {
          return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\n'));
        }
        return null;
      })
    } ;
    var Autocomplete$1 = Autocomplete;

    var Person = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
      d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
    }), 'Person');

    function getAvatarUtilityClass(slot) {
      return generateUtilityClass('MuiAvatar', slot);
    }
    generateUtilityClasses('MuiAvatar', ['root', 'colorDefault', 'circular', 'rounded', 'square', 'img', 'fallback']);

    const _excluded$1u = ["alt", "children", "className", "component", "imgProps", "sizes", "src", "srcSet", "variant"];
    const useUtilityClasses$1f = ownerState => {
      const {
        classes,
        variant,
        colorDefault
      } = ownerState;
      const slots = {
        root: ['root', variant, colorDefault && 'colorDefault'],
        img: ['img'],
        fallback: ['fallback']
      };
      return composeClasses(slots, getAvatarUtilityClass, classes);
    };
    const AvatarRoot = styled$1('div', {
      name: 'MuiAvatar',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[ownerState.variant], ownerState.colorDefault && styles.colorDefault];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      position: 'relative',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      flexShrink: 0,
      width: 40,
      height: 40,
      fontFamily: theme.typography.fontFamily,
      fontSize: theme.typography.pxToRem(20),
      lineHeight: 1,
      borderRadius: '50%',
      overflow: 'hidden',
      userSelect: 'none'
    }, ownerState.variant === 'rounded' && {
      borderRadius: (theme.vars || theme).shape.borderRadius
    }, ownerState.variant === 'square' && {
      borderRadius: 0
    }, ownerState.colorDefault && _extends({
      color: (theme.vars || theme).palette.background.default
    }, theme.vars ? {
      backgroundColor: theme.vars.palette.Avatar.defaultBg
    } : {
      backgroundColor: theme.palette.mode === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]
    })));
    const AvatarImg = styled$1('img', {
      name: 'MuiAvatar',
      slot: 'Img',
      overridesResolver: (props, styles) => styles.img
    })({
      width: '100%',
      height: '100%',
      textAlign: 'center',
      // Handle non-square image. The property isn't supported by IE11.
      objectFit: 'cover',
      // Hide alt text.
      color: 'transparent',
      // Hide the image broken icon, only works on Chrome.
      textIndent: 10000
    });
    const AvatarFallback = styled$1(Person, {
      name: 'MuiAvatar',
      slot: 'Fallback',
      overridesResolver: (props, styles) => styles.fallback
    })({
      width: '75%',
      height: '75%'
    });
    function useLoaded({
      crossOrigin,
      referrerPolicy,
      src,
      srcSet
    }) {
      const [loaded, setLoaded] = React__namespace.useState(false);
      React__namespace.useEffect(() => {
        if (!src && !srcSet) {
          return undefined;
        }
        setLoaded(false);
        let active = true;
        const image = new Image();
        image.onload = () => {
          if (!active) {
            return;
          }
          setLoaded('loaded');
        };
        image.onerror = () => {
          if (!active) {
            return;
          }
          setLoaded('error');
        };
        image.crossOrigin = crossOrigin;
        image.referrerPolicy = referrerPolicy;
        image.src = src;
        if (srcSet) {
          image.srcset = srcSet;
        }
        return () => {
          active = false;
        };
      }, [crossOrigin, referrerPolicy, src, srcSet]);
      return loaded;
    }
    const Avatar = /*#__PURE__*/React__namespace.forwardRef(function Avatar(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiAvatar'
      });
      const {
          alt,
          children: childrenProp,
          className,
          component = 'div',
          imgProps,
          sizes,
          src,
          srcSet,
          variant = 'circular'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1u);
      let children = null;

      // Use a hook instead of onError on the img element to support server-side rendering.
      const loaded = useLoaded(_extends({}, imgProps, {
        src,
        srcSet
      }));
      const hasImg = src || srcSet;
      const hasImgNotFailing = hasImg && loaded !== 'error';
      const ownerState = _extends({}, props, {
        colorDefault: !hasImgNotFailing,
        component,
        variant
      });
      const classes = useUtilityClasses$1f(ownerState);
      if (hasImgNotFailing) {
        children = /*#__PURE__*/jsxRuntime.exports.jsx(AvatarImg, _extends({
          alt: alt,
          src: src,
          srcSet: srcSet,
          sizes: sizes,
          ownerState: ownerState,
          className: classes.img
        }, imgProps));
      } else if (childrenProp != null) {
        children = childrenProp;
      } else if (hasImg && alt) {
        children = alt[0];
      } else {
        children = /*#__PURE__*/jsxRuntime.exports.jsx(AvatarFallback, {
          className: classes.fallback
        });
      }
      return /*#__PURE__*/jsxRuntime.exports.jsx(AvatarRoot, _extends({
        as: component,
        ownerState: ownerState,
        className: clsx(classes.root, className),
        ref: ref
      }, other, {
        children: children
      }));
    });
    Avatar.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * Used in combination with `src` or `srcSet` to
       * provide an alt attribute for the rendered `img` element.
       */
      alt: PropTypes.string,
      /**
       * Used to render icon or text elements inside the Avatar if `src` is not set.
       * This can be an element, or just a string.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attributes) applied to the `img` element if the component is used to display an image.
       * It can be used to listen for the loading error event.
       */
      imgProps: PropTypes.object,
      /**
       * The `sizes` attribute for the `img` element.
       */
      sizes: PropTypes.string,
      /**
       * The `src` attribute for the `img` element.
       */
      src: PropTypes.string,
      /**
       * The `srcSet` attribute for the `img` element.
       * Use this attribute for responsive image display.
       */
      srcSet: PropTypes.string,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The shape of the avatar.
       * @default 'circular'
       */
      variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['circular', 'rounded', 'square']), PropTypes.string])
    } ;
    var Avatar$1 = Avatar;

    const _excluded$1t = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
    const styles$4 = {
      entering: {
        opacity: 1
      },
      entered: {
        opacity: 1
      }
    };

    /**
     * The Fade transition is used by the [Modal](/material-ui/react-modal/) component.
     * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
     */
    const Fade = /*#__PURE__*/React__namespace.forwardRef(function Fade(props, ref) {
      const theme = useTheme();
      const defaultTimeout = {
        enter: theme.transitions.duration.enteringScreen,
        exit: theme.transitions.duration.leavingScreen
      };
      const {
          addEndListener,
          appear = true,
          children,
          easing,
          in: inProp,
          onEnter,
          onEntered,
          onEntering,
          onExit,
          onExited,
          onExiting,
          style,
          timeout = defaultTimeout,
          // eslint-disable-next-line react/prop-types
          TransitionComponent = Transition$1
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1t);
      const nodeRef = React__namespace.useRef(null);
      const handleRef = useForkRef(nodeRef, children.ref, ref);
      const normalizedTransitionCallback = callback => maybeIsAppearing => {
        if (callback) {
          const node = nodeRef.current;

          // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
          if (maybeIsAppearing === undefined) {
            callback(node);
          } else {
            callback(node, maybeIsAppearing);
          }
        }
      };
      const handleEntering = normalizedTransitionCallback(onEntering);
      const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
        reflow(node); // So the animation always start from the start.

        const transitionProps = getTransitionProps({
          style,
          timeout,
          easing
        }, {
          mode: 'enter'
        });
        node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
        node.style.transition = theme.transitions.create('opacity', transitionProps);
        if (onEnter) {
          onEnter(node, isAppearing);
        }
      });
      const handleEntered = normalizedTransitionCallback(onEntered);
      const handleExiting = normalizedTransitionCallback(onExiting);
      const handleExit = normalizedTransitionCallback(node => {
        const transitionProps = getTransitionProps({
          style,
          timeout,
          easing
        }, {
          mode: 'exit'
        });
        node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
        node.style.transition = theme.transitions.create('opacity', transitionProps);
        if (onExit) {
          onExit(node);
        }
      });
      const handleExited = normalizedTransitionCallback(onExited);
      const handleAddEndListener = next => {
        if (addEndListener) {
          // Old call signature before `react-transition-group` implemented `nodeRef`
          addEndListener(nodeRef.current, next);
        }
      };
      return /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
        appear: appear,
        in: inProp,
        nodeRef: nodeRef ,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: handleAddEndListener,
        timeout: timeout
      }, other, {
        children: (state, childProps) => {
          return /*#__PURE__*/React__namespace.cloneElement(children, _extends({
            style: _extends({
              opacity: 0,
              visibility: state === 'exited' && !inProp ? 'hidden' : undefined
            }, styles$4[state], style, children.props.style),
            ref: handleRef
          }, childProps));
        }
      }));
    });
    Fade.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * Add a custom transition end trigger. Called with the transitioning DOM
       * node and a done callback. Allows for more fine grained transition end
       * logic. Note: Timeouts are still used as a fallback if provided.
       */
      addEndListener: PropTypes.func,
      /**
       * Perform the enter transition when it first mounts if `in` is also `true`.
       * Set this to `false` to disable this behavior.
       * @default true
       */
      appear: PropTypes.bool,
      /**
       * A single child content element.
       */
      children: elementAcceptingRef$1.isRequired,
      /**
       * The transition timing function.
       * You may specify a single easing or a object containing enter and exit values.
       */
      easing: PropTypes.oneOfType([PropTypes.shape({
        enter: PropTypes.string,
        exit: PropTypes.string
      }), PropTypes.string]),
      /**
       * If `true`, the component will transition in.
       */
      in: PropTypes.bool,
      /**
       * @ignore
       */
      onEnter: PropTypes.func,
      /**
       * @ignore
       */
      onEntered: PropTypes.func,
      /**
       * @ignore
       */
      onEntering: PropTypes.func,
      /**
       * @ignore
       */
      onExit: PropTypes.func,
      /**
       * @ignore
       */
      onExited: PropTypes.func,
      /**
       * @ignore
       */
      onExiting: PropTypes.func,
      /**
       * @ignore
       */
      style: PropTypes.object,
      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       * @default {
       *   enter: theme.transitions.duration.enteringScreen,
       *   exit: theme.transitions.duration.leavingScreen,
       * }
       */
      timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
        appear: PropTypes.number,
        enter: PropTypes.number,
        exit: PropTypes.number
      })])
    } ;
    var Fade$1 = Fade;

    function getBackdropUtilityClass(slot) {
      return generateUtilityClass('MuiBackdrop', slot);
    }
    generateUtilityClasses('MuiBackdrop', ['root', 'invisible']);

    const _excluded$1s = ["children", "component", "components", "componentsProps", "className", "invisible", "open", "slotProps", "slots", "transitionDuration", "TransitionComponent"];
    const useUtilityClasses$1e = ownerState => {
      const {
        classes,
        invisible
      } = ownerState;
      const slots = {
        root: ['root', invisible && 'invisible']
      };
      return composeClasses(slots, getBackdropUtilityClass, classes);
    };
    const BackdropRoot = styled$1('div', {
      name: 'MuiBackdrop',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.invisible && styles.invisible];
      }
    })(({
      ownerState
    }) => _extends({
      position: 'fixed',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      right: 0,
      bottom: 0,
      top: 0,
      left: 0,
      backgroundColor: 'rgba(0, 0, 0, 0.5)',
      WebkitTapHighlightColor: 'transparent'
    }, ownerState.invisible && {
      backgroundColor: 'transparent'
    }));
    const Backdrop = /*#__PURE__*/React__namespace.forwardRef(function Backdrop(inProps, ref) {
      var _slotProps$root, _ref, _slots$root;
      const props = useThemeProps({
        props: inProps,
        name: 'MuiBackdrop'
      });
      const {
          children,
          component = 'div',
          components = {},
          componentsProps = {},
          className,
          invisible = false,
          open,
          slotProps = {},
          slots = {},
          transitionDuration,
          // eslint-disable-next-line react/prop-types
          TransitionComponent = Fade$1
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1s);
      const ownerState = _extends({}, props, {
        component,
        invisible
      });
      const classes = useUtilityClasses$1e(ownerState);
      const rootSlotProps = (_slotProps$root = slotProps.root) != null ? _slotProps$root : componentsProps.root;
      return /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
        in: open,
        timeout: transitionDuration
      }, other, {
        children: /*#__PURE__*/jsxRuntime.exports.jsx(BackdropRoot, _extends({
          "aria-hidden": true
        }, rootSlotProps, {
          as: (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : component,
          className: clsx(classes.root, className, rootSlotProps == null ? void 0 : rootSlotProps.className),
          ownerState: _extends({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
          classes: classes,
          ref: ref,
          children: children
        }))
      }));
    });
    Backdrop.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `slots` prop.
       * It's recommended to use the `slots` prop instead.
       *
       * @default {}
       */
      components: PropTypes.shape({
        Root: PropTypes.elementType
      }),
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * This prop is an alias for the `slotProps` prop.
       * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
       *
       * @default {}
       */
      componentsProps: PropTypes.shape({
        root: PropTypes.object
      }),
      /**
       * If `true`, the backdrop is invisible.
       * It can be used when rendering a popover or a custom select component.
       * @default false
       */
      invisible: PropTypes.bool,
      /**
       * If `true`, the component is shown.
       */
      open: PropTypes.bool.isRequired,
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slotProps: PropTypes.shape({
        root: PropTypes.object
      }),
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `components` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slots: PropTypes.shape({
        root: PropTypes.elementType
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
        appear: PropTypes.number,
        enter: PropTypes.number,
        exit: PropTypes.number
      })])
    } ;
    var Backdrop$1 = Backdrop;

    const shouldSpreadAdditionalProps = Slot => {
      return !Slot || !isHostComponent(Slot);
    };
    var shouldSpreadAdditionalProps$1 = shouldSpreadAdditionalProps;

    function getBadgeUtilityClass(slot) {
      return generateUtilityClass('MuiBadge', slot);
    }
    const badgeClasses = generateUtilityClasses('MuiBadge', ['root', 'badge', 'dot', 'standard', 'anchorOriginTopRight', 'anchorOriginBottomRight', 'anchorOriginTopLeft', 'anchorOriginBottomLeft', 'invisible', 'colorError', 'colorInfo', 'colorPrimary', 'colorSecondary', 'colorSuccess', 'colorWarning', 'overlapRectangular', 'overlapCircular',
    // TODO: v6 remove the overlap value from these class keys
    'anchorOriginTopLeftCircular', 'anchorOriginTopLeftRectangular', 'anchorOriginTopRightCircular', 'anchorOriginTopRightRectangular', 'anchorOriginBottomLeftCircular', 'anchorOriginBottomLeftRectangular', 'anchorOriginBottomRightCircular', 'anchorOriginBottomRightRectangular']);
    var badgeClasses$1 = badgeClasses;

    const _excluded$1r = ["anchorOrigin", "className", "component", "components", "componentsProps", "overlap", "color", "invisible", "max", "badgeContent", "slots", "slotProps", "showZero", "variant"];
    const RADIUS_STANDARD = 10;
    const RADIUS_DOT = 4;
    const useUtilityClasses$1d = ownerState => {
      const {
        color,
        anchorOrigin,
        invisible,
        overlap,
        variant,
        classes = {}
      } = ownerState;
      const slots = {
        root: ['root'],
        badge: ['badge', variant, invisible && 'invisible', `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}`, `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}${capitalize(overlap)}`, `overlap${capitalize(overlap)}`, color !== 'default' && `color${capitalize(color)}`]
      };
      return composeClasses(slots, getBadgeUtilityClass, classes);
    };
    const BadgeRoot = styled$1('span', {
      name: 'MuiBadge',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({
      position: 'relative',
      display: 'inline-flex',
      // For correct alignment with the text.
      verticalAlign: 'middle',
      flexShrink: 0
    });
    const BadgeBadge = styled$1('span', {
      name: 'MuiBadge',
      slot: 'Badge',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.badge, styles[ownerState.variant], styles[`anchorOrigin${capitalize(ownerState.anchorOrigin.vertical)}${capitalize(ownerState.anchorOrigin.horizontal)}${capitalize(ownerState.overlap)}`], ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], ownerState.invisible && styles.invisible];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      display: 'flex',
      flexDirection: 'row',
      flexWrap: 'wrap',
      justifyContent: 'center',
      alignContent: 'center',
      alignItems: 'center',
      position: 'absolute',
      boxSizing: 'border-box',
      fontFamily: theme.typography.fontFamily,
      fontWeight: theme.typography.fontWeightMedium,
      fontSize: theme.typography.pxToRem(12),
      minWidth: RADIUS_STANDARD * 2,
      lineHeight: 1,
      padding: '0 6px',
      height: RADIUS_STANDARD * 2,
      borderRadius: RADIUS_STANDARD,
      zIndex: 1,
      // Render the badge on top of potential ripples.
      transition: theme.transitions.create('transform', {
        easing: theme.transitions.easing.easeInOut,
        duration: theme.transitions.duration.enteringScreen
      })
    }, ownerState.color !== 'default' && {
      backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
      color: (theme.vars || theme).palette[ownerState.color].contrastText
    }, ownerState.variant === 'dot' && {
      borderRadius: RADIUS_DOT,
      height: RADIUS_DOT * 2,
      minWidth: RADIUS_DOT * 2,
      padding: 0
    }, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'rectangular' && {
      top: 0,
      right: 0,
      transform: 'scale(1) translate(50%, -50%)',
      transformOrigin: '100% 0%',
      [`&.${badgeClasses$1.invisible}`]: {
        transform: 'scale(0) translate(50%, -50%)'
      }
    }, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'rectangular' && {
      bottom: 0,
      right: 0,
      transform: 'scale(1) translate(50%, 50%)',
      transformOrigin: '100% 100%',
      [`&.${badgeClasses$1.invisible}`]: {
        transform: 'scale(0) translate(50%, 50%)'
      }
    }, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'rectangular' && {
      top: 0,
      left: 0,
      transform: 'scale(1) translate(-50%, -50%)',
      transformOrigin: '0% 0%',
      [`&.${badgeClasses$1.invisible}`]: {
        transform: 'scale(0) translate(-50%, -50%)'
      }
    }, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'rectangular' && {
      bottom: 0,
      left: 0,
      transform: 'scale(1) translate(-50%, 50%)',
      transformOrigin: '0% 100%',
      [`&.${badgeClasses$1.invisible}`]: {
        transform: 'scale(0) translate(-50%, 50%)'
      }
    }, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'circular' && {
      top: '14%',
      right: '14%',
      transform: 'scale(1) translate(50%, -50%)',
      transformOrigin: '100% 0%',
      [`&.${badgeClasses$1.invisible}`]: {
        transform: 'scale(0) translate(50%, -50%)'
      }
    }, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'circular' && {
      bottom: '14%',
      right: '14%',
      transform: 'scale(1) translate(50%, 50%)',
      transformOrigin: '100% 100%',
      [`&.${badgeClasses$1.invisible}`]: {
        transform: 'scale(0) translate(50%, 50%)'
      }
    }, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'circular' && {
      top: '14%',
      left: '14%',
      transform: 'scale(1) translate(-50%, -50%)',
      transformOrigin: '0% 0%',
      [`&.${badgeClasses$1.invisible}`]: {
        transform: 'scale(0) translate(-50%, -50%)'
      }
    }, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'circular' && {
      bottom: '14%',
      left: '14%',
      transform: 'scale(1) translate(-50%, 50%)',
      transformOrigin: '0% 100%',
      [`&.${badgeClasses$1.invisible}`]: {
        transform: 'scale(0) translate(-50%, 50%)'
      }
    }, ownerState.invisible && {
      transition: theme.transitions.create('transform', {
        easing: theme.transitions.easing.easeInOut,
        duration: theme.transitions.duration.leavingScreen
      })
    }));
    const Badge = /*#__PURE__*/React__namespace.forwardRef(function Badge(inProps, ref) {
      var _ref, _slots$root, _ref2, _slots$badge, _slotProps$root, _slotProps$badge;
      const props = useThemeProps({
        props: inProps,
        name: 'MuiBadge'
      });
      const {
          anchorOrigin: anchorOriginProp = {
            vertical: 'top',
            horizontal: 'right'
          },
          className,
          component = 'span',
          components = {},
          componentsProps = {},
          overlap: overlapProp = 'rectangular',
          color: colorProp = 'default',
          invisible: invisibleProp = false,
          max,
          badgeContent: badgeContentProp,
          slots,
          slotProps,
          showZero = false,
          variant: variantProp = 'standard'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1r);
      const prevProps = usePreviousProps$1({
        anchorOrigin: anchorOriginProp,
        color: colorProp,
        overlap: overlapProp,
        variant: variantProp
      });
      let invisible = invisibleProp;
      if (invisibleProp === false && (badgeContentProp === 0 && !showZero || badgeContentProp == null && variantProp !== 'dot')) {
        invisible = true;
      }
      const {
        color = colorProp,
        overlap = overlapProp,
        anchorOrigin = anchorOriginProp,
        variant = variantProp
      } = invisible ? prevProps : props;
      const ownerState = _extends({}, props, {
        anchorOrigin,
        invisible,
        color,
        overlap,
        variant
      });
      const classes = useUtilityClasses$1d(ownerState);
      let displayValue;
      if (variant !== 'dot') {
        displayValue = badgeContentProp && Number(badgeContentProp) > max ? `${max}+` : badgeContentProp;
      }

      // support both `slots` and `components` for backward compatibility
      const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : BadgeRoot;
      const BadgeSlot = (_ref2 = (_slots$badge = slots == null ? void 0 : slots.badge) != null ? _slots$badge : components.Badge) != null ? _ref2 : BadgeBadge;
      const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
      const badgeSlotProps = (_slotProps$badge = slotProps == null ? void 0 : slotProps.badge) != null ? _slotProps$badge : componentsProps.badge;
      return /*#__PURE__*/jsxRuntime.exports.jsx(BadgeUnstyled$1, _extends({
        invisible: invisibleProp,
        badgeContent: displayValue,
        showZero: showZero,
        max: max
      }, other, {
        slots: {
          root: RootSlot,
          badge: BadgeSlot
        },
        className: clsx(rootSlotProps == null ? void 0 : rootSlotProps.className, classes.root, className),
        slotProps: {
          root: _extends({}, rootSlotProps, shouldSpreadAdditionalProps$1(RootSlot) && {
            as: component,
            ownerState: _extends({}, rootSlotProps == null ? void 0 : rootSlotProps.ownerState, {
              anchorOrigin,
              color,
              overlap,
              variant
            })
          }),
          badge: _extends({}, badgeSlotProps, {
            className: clsx(classes.badge, badgeSlotProps == null ? void 0 : badgeSlotProps.className)
          }, shouldSpreadAdditionalProps$1(BadgeSlot) && {
            ownerState: _extends({}, badgeSlotProps == null ? void 0 : badgeSlotProps.ownerState, {
              anchorOrigin,
              color,
              overlap,
              variant
            })
          })
        },
        ref: ref
      }));
    });
    Badge.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The anchor of the badge.
       * @default {
       *   vertical: 'top',
       *   horizontal: 'right',
       * }
       */
      anchorOrigin: PropTypes.shape({
        horizontal: PropTypes.oneOf(['left', 'right']).isRequired,
        vertical: PropTypes.oneOf(['bottom', 'top']).isRequired
      }),
      /**
       * The content rendered within the badge.
       */
      badgeContent: PropTypes.node,
      /**
       * The badge will be added relative to this node.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
       * @default 'default'
       */
      color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `slots` prop.
       * It's recommended to use the `slots` prop instead.
       *
       * @default {}
       */
      components: PropTypes.shape({
        Badge: PropTypes.elementType,
        Root: PropTypes.elementType
      }),
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * This prop is an alias for the `slotProps` prop.
       * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
       *
       * @default {}
       */
      componentsProps: PropTypes.shape({
        badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
      }),
      /**
       * If `true`, the badge is invisible.
       * @default false
       */
      invisible: PropTypes.bool,
      /**
       * Max count to show.
       * @default 99
       */
      max: PropTypes.number,
      /**
       * Wrapped shape the badge should overlap.
       * @default 'rectangular'
       */
      overlap: PropTypes.oneOf(['circular', 'rectangular']),
      /**
       * Controls whether the badge is hidden when `badgeContent` is zero.
       * @default false
       */
      showZero: PropTypes.bool,
      /**
       * The props used for each slot inside the Badge.
       * @default {}
       */
      slotProps: PropTypes.shape({
        badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
      }),
      /**
       * The components used for each slot inside the Badge.
       * Either a string to use a HTML element or a component.
       * @default {}
       */
      slots: PropTypes.shape({
        badge: PropTypes.elementType,
        root: PropTypes.elementType
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The variant to use.
       * @default 'standard'
       */
      variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['dot', 'standard']), PropTypes.string])
    } ;
    var Badge$1 = Badge;

    const defaultTheme = createTheme();
    const Box = createBox({
      defaultTheme,
      defaultClassName: 'MuiBox-root',
      generateClassName: ClassNameGenerator$1.generate
    });
    Box.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * @ignore
       */
      children: PropTypes.node,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var Box$1 = Box;

    function getButtonUtilityClass(slot) {
      return generateUtilityClass('MuiButton', slot);
    }
    const buttonClasses = generateUtilityClasses('MuiButton', ['root', 'text', 'textInherit', 'textPrimary', 'textSecondary', 'textSuccess', 'textError', 'textInfo', 'textWarning', 'outlined', 'outlinedInherit', 'outlinedPrimary', 'outlinedSecondary', 'outlinedSuccess', 'outlinedError', 'outlinedInfo', 'outlinedWarning', 'contained', 'containedInherit', 'containedPrimary', 'containedSecondary', 'containedSuccess', 'containedError', 'containedInfo', 'containedWarning', 'disableElevation', 'focusVisible', 'disabled', 'colorInherit', 'textSizeSmall', 'textSizeMedium', 'textSizeLarge', 'outlinedSizeSmall', 'outlinedSizeMedium', 'outlinedSizeLarge', 'containedSizeSmall', 'containedSizeMedium', 'containedSizeLarge', 'sizeMedium', 'sizeSmall', 'sizeLarge', 'fullWidth', 'startIcon', 'endIcon', 'iconSizeSmall', 'iconSizeMedium', 'iconSizeLarge']);
    var buttonClasses$1 = buttonClasses;

    /**
     * @ignore - internal component.
     */
    const ButtonGroupContext = /*#__PURE__*/React__namespace.createContext({});
    {
      ButtonGroupContext.displayName = 'ButtonGroupContext';
    }
    var ButtonGroupContext$1 = ButtonGroupContext;

    const _excluded$1q = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];
    const useUtilityClasses$1c = ownerState => {
      const {
        color,
        disableElevation,
        fullWidth,
        size,
        variant,
        classes
      } = ownerState;
      const slots = {
        root: ['root', variant, `${variant}${capitalize(color)}`, `size${capitalize(size)}`, `${variant}Size${capitalize(size)}`, color === 'inherit' && 'colorInherit', disableElevation && 'disableElevation', fullWidth && 'fullWidth'],
        label: ['label'],
        startIcon: ['startIcon', `iconSize${capitalize(size)}`],
        endIcon: ['endIcon', `iconSize${capitalize(size)}`]
      };
      const composedClasses = composeClasses(slots, getButtonUtilityClass, classes);
      return _extends({}, classes, composedClasses);
    };
    const commonIconStyles = ownerState => _extends({}, ownerState.size === 'small' && {
      '& > *:nth-of-type(1)': {
        fontSize: 18
      }
    }, ownerState.size === 'medium' && {
      '& > *:nth-of-type(1)': {
        fontSize: 20
      }
    }, ownerState.size === 'large' && {
      '& > *:nth-of-type(1)': {
        fontSize: 22
      }
    });
    const ButtonRoot = styled$1(ButtonBase$1, {
      shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
      name: 'MuiButton',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize(ownerState.color)}`], styles[`size${capitalize(ownerState.size)}`], styles[`${ownerState.variant}Size${capitalize(ownerState.size)}`], ownerState.color === 'inherit' && styles.colorInherit, ownerState.disableElevation && styles.disableElevation, ownerState.fullWidth && styles.fullWidth];
      }
    })(({
      theme,
      ownerState
    }) => {
      var _theme$palette$getCon, _theme$palette;
      return _extends({}, theme.typography.button, {
        minWidth: 64,
        padding: '6px 16px',
        borderRadius: (theme.vars || theme).shape.borderRadius,
        transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color', 'color'], {
          duration: theme.transitions.duration.short
        }),
        '&:hover': _extends({
          textDecoration: 'none',
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: 'transparent'
          }
        }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: 'transparent'
          }
        }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
          border: `1px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: 'transparent'
          }
        }, ownerState.variant === 'contained' && {
          backgroundColor: (theme.vars || theme).palette.grey.A100,
          boxShadow: (theme.vars || theme).shadows[4],
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            boxShadow: (theme.vars || theme).shadows[2],
            backgroundColor: (theme.vars || theme).palette.grey[300]
          }
        }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
          backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: (theme.vars || theme).palette[ownerState.color].main
          }
        }),
        '&:active': _extends({}, ownerState.variant === 'contained' && {
          boxShadow: (theme.vars || theme).shadows[8]
        }),
        [`&.${buttonClasses$1.focusVisible}`]: _extends({}, ownerState.variant === 'contained' && {
          boxShadow: (theme.vars || theme).shadows[6]
        }),
        [`&.${buttonClasses$1.disabled}`]: _extends({
          color: (theme.vars || theme).palette.action.disabled
        }, ownerState.variant === 'outlined' && {
          border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
        }, ownerState.variant === 'outlined' && ownerState.color === 'secondary' && {
          border: `1px solid ${(theme.vars || theme).palette.action.disabled}`
        }, ownerState.variant === 'contained' && {
          color: (theme.vars || theme).palette.action.disabled,
          boxShadow: (theme.vars || theme).shadows[0],
          backgroundColor: (theme.vars || theme).palette.action.disabledBackground
        })
      }, ownerState.variant === 'text' && {
        padding: '6px 8px'
      }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
        color: (theme.vars || theme).palette[ownerState.color].main
      }, ownerState.variant === 'outlined' && {
        padding: '5px 15px',
        border: '1px solid currentColor'
      }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
        color: (theme.vars || theme).palette[ownerState.color].main,
        border: theme.vars ? `1px solid rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : `1px solid ${alpha(theme.palette[ownerState.color].main, 0.5)}`
      }, ownerState.variant === 'contained' && {
        color: theme.vars ?
        // this is safe because grey does not change between default light/dark mode
        theme.vars.palette.text.primary : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
        backgroundColor: (theme.vars || theme).palette.grey[300],
        boxShadow: (theme.vars || theme).shadows[2]
      }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
        color: (theme.vars || theme).palette[ownerState.color].contrastText,
        backgroundColor: (theme.vars || theme).palette[ownerState.color].main
      }, ownerState.color === 'inherit' && {
        color: 'inherit',
        borderColor: 'currentColor'
      }, ownerState.size === 'small' && ownerState.variant === 'text' && {
        padding: '4px 5px',
        fontSize: theme.typography.pxToRem(13)
      }, ownerState.size === 'large' && ownerState.variant === 'text' && {
        padding: '8px 11px',
        fontSize: theme.typography.pxToRem(15)
      }, ownerState.size === 'small' && ownerState.variant === 'outlined' && {
        padding: '3px 9px',
        fontSize: theme.typography.pxToRem(13)
      }, ownerState.size === 'large' && ownerState.variant === 'outlined' && {
        padding: '7px 21px',
        fontSize: theme.typography.pxToRem(15)
      }, ownerState.size === 'small' && ownerState.variant === 'contained' && {
        padding: '4px 10px',
        fontSize: theme.typography.pxToRem(13)
      }, ownerState.size === 'large' && ownerState.variant === 'contained' && {
        padding: '8px 22px',
        fontSize: theme.typography.pxToRem(15)
      }, ownerState.fullWidth && {
        width: '100%'
      });
    }, ({
      ownerState
    }) => ownerState.disableElevation && {
      boxShadow: 'none',
      '&:hover': {
        boxShadow: 'none'
      },
      [`&.${buttonClasses$1.focusVisible}`]: {
        boxShadow: 'none'
      },
      '&:active': {
        boxShadow: 'none'
      },
      [`&.${buttonClasses$1.disabled}`]: {
        boxShadow: 'none'
      }
    });
    const ButtonStartIcon = styled$1('span', {
      name: 'MuiButton',
      slot: 'StartIcon',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.startIcon, styles[`iconSize${capitalize(ownerState.size)}`]];
      }
    })(({
      ownerState
    }) => _extends({
      display: 'inherit',
      marginRight: 8,
      marginLeft: -4
    }, ownerState.size === 'small' && {
      marginLeft: -2
    }, commonIconStyles(ownerState)));
    const ButtonEndIcon = styled$1('span', {
      name: 'MuiButton',
      slot: 'EndIcon',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.endIcon, styles[`iconSize${capitalize(ownerState.size)}`]];
      }
    })(({
      ownerState
    }) => _extends({
      display: 'inherit',
      marginRight: -4,
      marginLeft: 8
    }, ownerState.size === 'small' && {
      marginRight: -2
    }, commonIconStyles(ownerState)));
    const Button = /*#__PURE__*/React__namespace.forwardRef(function Button(inProps, ref) {
      // props priority: `inProps` > `contextProps` > `themeDefaultProps`
      const contextProps = React__namespace.useContext(ButtonGroupContext$1);
      const resolvedProps = resolveProps(contextProps, inProps);
      const props = useThemeProps({
        props: resolvedProps,
        name: 'MuiButton'
      });
      const {
          children,
          color = 'primary',
          component = 'button',
          className,
          disabled = false,
          disableElevation = false,
          disableFocusRipple = false,
          endIcon: endIconProp,
          focusVisibleClassName,
          fullWidth = false,
          size = 'medium',
          startIcon: startIconProp,
          type,
          variant = 'text'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1q);
      const ownerState = _extends({}, props, {
        color,
        component,
        disabled,
        disableElevation,
        disableFocusRipple,
        fullWidth,
        size,
        type,
        variant
      });
      const classes = useUtilityClasses$1c(ownerState);
      const startIcon = startIconProp && /*#__PURE__*/jsxRuntime.exports.jsx(ButtonStartIcon, {
        className: classes.startIcon,
        ownerState: ownerState,
        children: startIconProp
      });
      const endIcon = endIconProp && /*#__PURE__*/jsxRuntime.exports.jsx(ButtonEndIcon, {
        className: classes.endIcon,
        ownerState: ownerState,
        children: endIconProp
      });
      return /*#__PURE__*/jsxRuntime.exports.jsxs(ButtonRoot, _extends({
        ownerState: ownerState,
        className: clsx(contextProps.className, classes.root, className),
        component: component,
        disabled: disabled,
        focusRipple: !disableFocusRipple,
        focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
        ref: ref,
        type: type
      }, other, {
        classes: classes,
        children: [startIcon, children, endIcon]
      }));
    });
    Button.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
       * @default 'primary'
       */
      color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'primary', 'secondary', 'success', 'error', 'info', 'warning']), PropTypes.string]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, no elevation is used.
       * @default false
       */
      disableElevation: PropTypes.bool,
      /**
       * If `true`, the  keyboard focus ripple is disabled.
       * @default false
       */
      disableFocusRipple: PropTypes.bool,
      /**
       * If `true`, the ripple effect is disabled.
       *
       * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
       * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
       * @default false
       */
      disableRipple: PropTypes.bool,
      /**
       * Element placed after the children.
       */
      endIcon: PropTypes.node,
      /**
       * @ignore
       */
      focusVisibleClassName: PropTypes.string,
      /**
       * If `true`, the button will take up the full width of its container.
       * @default false
       */
      fullWidth: PropTypes.bool,
      /**
       * The URL to link to when the button is clicked.
       * If defined, an `a` element will be used as the root node.
       */
      href: PropTypes.string,
      /**
       * The size of the component.
       * `small` is equivalent to the dense button styling.
       * @default 'medium'
       */
      size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),
      /**
       * Element placed before the children.
       */
      startIcon: PropTypes.node,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * @ignore
       */
      type: PropTypes.oneOfType([PropTypes.oneOf(['button', 'reset', 'submit']), PropTypes.string]),
      /**
       * The variant to use.
       * @default 'text'
       */
      variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['contained', 'outlined', 'text']), PropTypes.string])
    } ;
    var Button$1 = Button;

    function getCardUtilityClass(slot) {
      return generateUtilityClass('MuiCard', slot);
    }
    generateUtilityClasses('MuiCard', ['root']);

    const _excluded$1p = ["className", "raised"];
    const useUtilityClasses$1b = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root']
      };
      return composeClasses(slots, getCardUtilityClass, classes);
    };
    const CardRoot = styled$1(Paper$1, {
      name: 'MuiCard',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })(() => {
      return {
        overflow: 'hidden'
      };
    });
    const Card = /*#__PURE__*/React__namespace.forwardRef(function Card(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiCard'
      });
      const {
          className,
          raised = false
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1p);
      const ownerState = _extends({}, props, {
        raised
      });
      const classes = useUtilityClasses$1b(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(CardRoot, _extends({
        className: clsx(classes.root, className),
        elevation: raised ? 8 : undefined,
        ref: ref,
        ownerState: ownerState
      }, other));
    });
    Card.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * If `true`, the card will use raised styling.
       * @default false
       */
      raised: chainPropTypes(PropTypes.bool, props => {
        if (props.raised && props.variant === 'outlined') {
          return new Error('MUI: Combining `raised={true}` with `variant="outlined"` has no effect.');
        }
        return null;
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var Card$1 = Card;

    function getCardContentUtilityClass(slot) {
      return generateUtilityClass('MuiCardContent', slot);
    }
    generateUtilityClasses('MuiCardContent', ['root']);

    const _excluded$1o = ["className", "component"];
    const useUtilityClasses$1a = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root']
      };
      return composeClasses(slots, getCardContentUtilityClass, classes);
    };
    const CardContentRoot = styled$1('div', {
      name: 'MuiCardContent',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })(() => {
      return {
        padding: 16,
        '&:last-child': {
          paddingBottom: 24
        }
      };
    });
    const CardContent = /*#__PURE__*/React__namespace.forwardRef(function CardContent(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiCardContent'
      });
      const {
          className,
          component = 'div'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1o);
      const ownerState = _extends({}, props, {
        component
      });
      const classes = useUtilityClasses$1a(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(CardContentRoot, _extends({
        as: component,
        className: clsx(classes.root, className),
        ownerState: ownerState,
        ref: ref
      }, other));
    });
    CardContent.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var CardContent$1 = CardContent;

    function getCardHeaderUtilityClass(slot) {
      return generateUtilityClass('MuiCardHeader', slot);
    }
    const cardHeaderClasses = generateUtilityClasses('MuiCardHeader', ['root', 'avatar', 'action', 'content', 'title', 'subheader']);
    var cardHeaderClasses$1 = cardHeaderClasses;

    const _excluded$1n = ["action", "avatar", "className", "component", "disableTypography", "subheader", "subheaderTypographyProps", "title", "titleTypographyProps"];
    const useUtilityClasses$19 = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        avatar: ['avatar'],
        action: ['action'],
        content: ['content'],
        title: ['title'],
        subheader: ['subheader']
      };
      return composeClasses(slots, getCardHeaderUtilityClass, classes);
    };
    const CardHeaderRoot = styled$1('div', {
      name: 'MuiCardHeader',
      slot: 'Root',
      overridesResolver: (props, styles) => _extends({
        [`& .${cardHeaderClasses$1.title}`]: styles.title,
        [`& .${cardHeaderClasses$1.subheader}`]: styles.subheader
      }, styles.root)
    })({
      display: 'flex',
      alignItems: 'center',
      padding: 16
    });
    const CardHeaderAvatar = styled$1('div', {
      name: 'MuiCardHeader',
      slot: 'Avatar',
      overridesResolver: (props, styles) => styles.avatar
    })({
      display: 'flex',
      flex: '0 0 auto',
      marginRight: 16
    });
    const CardHeaderAction = styled$1('div', {
      name: 'MuiCardHeader',
      slot: 'Action',
      overridesResolver: (props, styles) => styles.action
    })({
      flex: '0 0 auto',
      alignSelf: 'flex-start',
      marginTop: -4,
      marginRight: -8,
      marginBottom: -4
    });
    const CardHeaderContent = styled$1('div', {
      name: 'MuiCardHeader',
      slot: 'Content',
      overridesResolver: (props, styles) => styles.content
    })({
      flex: '1 1 auto'
    });
    const CardHeader = /*#__PURE__*/React__namespace.forwardRef(function CardHeader(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiCardHeader'
      });
      const {
          action,
          avatar,
          className,
          component = 'div',
          disableTypography = false,
          subheader: subheaderProp,
          subheaderTypographyProps,
          title: titleProp,
          titleTypographyProps
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1n);
      const ownerState = _extends({}, props, {
        component,
        disableTypography
      });
      const classes = useUtilityClasses$19(ownerState);
      let title = titleProp;
      if (title != null && title.type !== Typography$1 && !disableTypography) {
        title = /*#__PURE__*/jsxRuntime.exports.jsx(Typography$1, _extends({
          variant: avatar ? 'body2' : 'h5',
          className: classes.title,
          component: "span",
          display: "block"
        }, titleTypographyProps, {
          children: title
        }));
      }
      let subheader = subheaderProp;
      if (subheader != null && subheader.type !== Typography$1 && !disableTypography) {
        subheader = /*#__PURE__*/jsxRuntime.exports.jsx(Typography$1, _extends({
          variant: avatar ? 'body2' : 'body1',
          className: classes.subheader,
          color: "text.secondary",
          component: "span",
          display: "block"
        }, subheaderTypographyProps, {
          children: subheader
        }));
      }
      return /*#__PURE__*/jsxRuntime.exports.jsxs(CardHeaderRoot, _extends({
        className: clsx(classes.root, className),
        as: component,
        ref: ref,
        ownerState: ownerState
      }, other, {
        children: [avatar && /*#__PURE__*/jsxRuntime.exports.jsx(CardHeaderAvatar, {
          className: classes.avatar,
          ownerState: ownerState,
          children: avatar
        }), /*#__PURE__*/jsxRuntime.exports.jsxs(CardHeaderContent, {
          className: classes.content,
          ownerState: ownerState,
          children: [title, subheader]
        }), action && /*#__PURE__*/jsxRuntime.exports.jsx(CardHeaderAction, {
          className: classes.action,
          ownerState: ownerState,
          children: action
        })]
      }));
    });
    CardHeader.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The action to display in the card header.
       */
      action: PropTypes.node,
      /**
       * The Avatar element to display.
       */
      avatar: PropTypes.node,
      /**
       * @ignore
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * If `true`, `subheader` and `title` won't be wrapped by a Typography component.
       * This can be useful to render an alternative Typography variant by wrapping
       * the `title` text, and optional `subheader` text
       * with the Typography component.
       * @default false
       */
      disableTypography: PropTypes.bool,
      /**
       * The content of the component.
       */
      subheader: PropTypes.node,
      /**
       * These props will be forwarded to the subheader
       * (as long as disableTypography is not `true`).
       */
      subheaderTypographyProps: PropTypes.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The content of the component.
       */
      title: PropTypes.node,
      /**
       * These props will be forwarded to the title
       * (as long as disableTypography is not `true`).
       */
      titleTypographyProps: PropTypes.object
    } ;
    var CardHeader$1 = CardHeader;

    function getSwitchBaseUtilityClass(slot) {
      return generateUtilityClass('PrivateSwitchBase', slot);
    }
    generateUtilityClasses('PrivateSwitchBase', ['root', 'checked', 'disabled', 'input', 'edgeStart', 'edgeEnd']);

    const _excluded$1m = ["autoFocus", "checked", "checkedIcon", "className", "defaultChecked", "disabled", "disableFocusRipple", "edge", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"];
    const useUtilityClasses$18 = ownerState => {
      const {
        classes,
        checked,
        disabled,
        edge
      } = ownerState;
      const slots = {
        root: ['root', checked && 'checked', disabled && 'disabled', edge && `edge${capitalize(edge)}`],
        input: ['input']
      };
      return composeClasses(slots, getSwitchBaseUtilityClass, classes);
    };
    const SwitchBaseRoot = styled$1(ButtonBase$1)(({
      ownerState
    }) => _extends({
      padding: 9,
      borderRadius: '50%'
    }, ownerState.edge === 'start' && {
      marginLeft: ownerState.size === 'small' ? -3 : -12
    }, ownerState.edge === 'end' && {
      marginRight: ownerState.size === 'small' ? -3 : -12
    }));
    const SwitchBaseInput = styled$1('input')({
      cursor: 'inherit',
      position: 'absolute',
      opacity: 0,
      width: '100%',
      height: '100%',
      top: 0,
      left: 0,
      margin: 0,
      padding: 0,
      zIndex: 1
    });

    /**
     * @ignore - internal component.
     */
    const SwitchBase = /*#__PURE__*/React__namespace.forwardRef(function SwitchBase(props, ref) {
      const {
          autoFocus,
          checked: checkedProp,
          checkedIcon,
          className,
          defaultChecked,
          disabled: disabledProp,
          disableFocusRipple = false,
          edge = false,
          icon,
          id,
          inputProps,
          inputRef,
          name,
          onBlur,
          onChange,
          onFocus,
          readOnly,
          required,
          tabIndex,
          type,
          value
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1m);
      const [checked, setCheckedState] = useControlled({
        controlled: checkedProp,
        default: Boolean(defaultChecked),
        name: 'SwitchBase',
        state: 'checked'
      });
      const muiFormControl = useFormControl();
      const handleFocus = event => {
        if (onFocus) {
          onFocus(event);
        }
        if (muiFormControl && muiFormControl.onFocus) {
          muiFormControl.onFocus(event);
        }
      };
      const handleBlur = event => {
        if (onBlur) {
          onBlur(event);
        }
        if (muiFormControl && muiFormControl.onBlur) {
          muiFormControl.onBlur(event);
        }
      };
      const handleInputChange = event => {
        // Workaround for https://github.com/facebook/react/issues/9023
        if (event.nativeEvent.defaultPrevented) {
          return;
        }
        const newChecked = event.target.checked;
        setCheckedState(newChecked);
        if (onChange) {
          // TODO v6: remove the second argument.
          onChange(event, newChecked);
        }
      };
      let disabled = disabledProp;
      if (muiFormControl) {
        if (typeof disabled === 'undefined') {
          disabled = muiFormControl.disabled;
        }
      }
      const hasLabelFor = type === 'checkbox' || type === 'radio';
      const ownerState = _extends({}, props, {
        checked,
        disabled,
        disableFocusRipple,
        edge
      });
      const classes = useUtilityClasses$18(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsxs(SwitchBaseRoot, _extends({
        component: "span",
        className: clsx(classes.root, className),
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled: disabled,
        tabIndex: null,
        role: undefined,
        onFocus: handleFocus,
        onBlur: handleBlur,
        ownerState: ownerState,
        ref: ref
      }, other, {
        children: [/*#__PURE__*/jsxRuntime.exports.jsx(SwitchBaseInput, _extends({
          autoFocus: autoFocus,
          checked: checkedProp,
          defaultChecked: defaultChecked,
          className: classes.input,
          disabled: disabled,
          id: hasLabelFor && id,
          name: name,
          onChange: handleInputChange,
          readOnly: readOnly,
          ref: inputRef,
          required: required,
          ownerState: ownerState,
          tabIndex: tabIndex,
          type: type
        }, type === 'checkbox' && value === undefined ? {} : {
          value
        }, inputProps)), checked ? checkedIcon : icon]
      }));
    });

    // NB: If changed, please update Checkbox, Switch and Radio
    // so that the API documentation is updated.
    SwitchBase.propTypes = {
      /**
       * If `true`, the `input` element is focused during the first mount.
       */
      autoFocus: PropTypes.bool,
      /**
       * If `true`, the component is checked.
       */
      checked: PropTypes.bool,
      /**
       * The icon to display when the component is checked.
       */
      checkedIcon: PropTypes.node.isRequired,
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * @ignore
       */
      defaultChecked: PropTypes.bool,
      /**
       * If `true`, the component is disabled.
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, the  keyboard focus ripple is disabled.
       * @default false
       */
      disableFocusRipple: PropTypes.bool,
      /**
       * If given, uses a negative margin to counteract the padding on one
       * side (this is often helpful for aligning the left or right
       * side of the icon with content above or below, without ruining the border
       * size and shape).
       * @default false
       */
      edge: PropTypes.oneOf(['end', 'start', false]),
      /**
       * The icon to display when the component is unchecked.
       */
      icon: PropTypes.node.isRequired,
      /**
       * The id of the `input` element.
       */
      id: PropTypes.string,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: PropTypes.object,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,
      /*
       * @ignore
       */
      name: PropTypes.string,
      /**
       * @ignore
       */
      onBlur: PropTypes.func,
      /**
       * Callback fired when the state is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: PropTypes.func,
      /**
       * @ignore
       */
      onFocus: PropTypes.func,
      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: PropTypes.bool,
      /**
       * If `true`, the `input` element is required.
       */
      required: PropTypes.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.object,
      /**
       * @ignore
       */
      tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      /**
       * The input component prop `type`.
       */
      type: PropTypes.string.isRequired,
      /**
       * The value of the component.
       */
      value: PropTypes.any
    } ;
    var SwitchBase$1 = SwitchBase;

    var CheckBoxOutlineBlankIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
      d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
    }), 'CheckBoxOutlineBlank');

    var CheckBoxIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
      d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
    }), 'CheckBox');

    var IndeterminateCheckBoxIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
      d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
    }), 'IndeterminateCheckBox');

    function getCheckboxUtilityClass(slot) {
      return generateUtilityClass('MuiCheckbox', slot);
    }
    const checkboxClasses = generateUtilityClasses('MuiCheckbox', ['root', 'checked', 'disabled', 'indeterminate', 'colorPrimary', 'colorSecondary']);
    var checkboxClasses$1 = checkboxClasses;

    const _excluded$1l = ["checkedIcon", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size", "className"];
    const useUtilityClasses$17 = ownerState => {
      const {
        classes,
        indeterminate,
        color
      } = ownerState;
      const slots = {
        root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`]
      };
      const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);
      return _extends({}, classes, composedClasses);
    };
    const CheckboxRoot = styled$1(SwitchBase$1, {
      shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
      name: 'MuiCheckbox',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.indeterminate && styles.indeterminate, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      color: (theme.vars || theme).palette.text.secondary
    }, !ownerState.disableRipple && {
      '&:hover': {
        backgroundColor: theme.vars ? `rgba(${ownerState.color === 'default' ? theme.vars.palette.action.activeChannel : theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      }
    }, ownerState.color !== 'default' && {
      [`&.${checkboxClasses$1.checked}, &.${checkboxClasses$1.indeterminate}`]: {
        color: (theme.vars || theme).palette[ownerState.color].main
      },
      [`&.${checkboxClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.action.disabled
      }
    }));
    const defaultCheckedIcon$1 = /*#__PURE__*/jsxRuntime.exports.jsx(CheckBoxIcon, {});
    const defaultIcon$1 = /*#__PURE__*/jsxRuntime.exports.jsx(CheckBoxOutlineBlankIcon, {});
    const defaultIndeterminateIcon = /*#__PURE__*/jsxRuntime.exports.jsx(IndeterminateCheckBoxIcon, {});
    const Checkbox = /*#__PURE__*/React__namespace.forwardRef(function Checkbox(inProps, ref) {
      var _icon$props$fontSize, _indeterminateIcon$pr;
      const props = useThemeProps({
        props: inProps,
        name: 'MuiCheckbox'
      });
      const {
          checkedIcon = defaultCheckedIcon$1,
          color = 'primary',
          icon: iconProp = defaultIcon$1,
          indeterminate = false,
          indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
          inputProps,
          size = 'medium',
          className
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1l);
      const icon = indeterminate ? indeterminateIconProp : iconProp;
      const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
      const ownerState = _extends({}, props, {
        color,
        indeterminate,
        size
      });
      const classes = useUtilityClasses$17(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(CheckboxRoot, _extends({
        type: "checkbox",
        inputProps: _extends({
          'data-indeterminate': indeterminate
        }, inputProps),
        icon: /*#__PURE__*/React__namespace.cloneElement(icon, {
          fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size
        }),
        checkedIcon: /*#__PURE__*/React__namespace.cloneElement(indeterminateIcon, {
          fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size
        }),
        ownerState: ownerState,
        ref: ref,
        className: clsx(classes.root, className)
      }, other, {
        classes: classes
      }));
    });
    Checkbox.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * If `true`, the component is checked.
       */
      checked: PropTypes.bool,
      /**
       * The icon to display when the component is checked.
       * @default <CheckBoxIcon />
       */
      checkedIcon: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
       * @default 'primary'
       */
      color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),
      /**
       * The default checked state. Use when the component is not controlled.
       */
      defaultChecked: PropTypes.bool,
      /**
       * If `true`, the component is disabled.
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, the ripple effect is disabled.
       */
      disableRipple: PropTypes.bool,
      /**
       * The icon to display when the component is unchecked.
       * @default <CheckBoxOutlineBlankIcon />
       */
      icon: PropTypes.node,
      /**
       * The id of the `input` element.
       */
      id: PropTypes.string,
      /**
       * If `true`, the component appears indeterminate.
       * This does not set the native input element to indeterminate due
       * to inconsistent behavior across browsers.
       * However, we set a `data-indeterminate` attribute on the `input`.
       * @default false
       */
      indeterminate: PropTypes.bool,
      /**
       * The icon to display when the component is indeterminate.
       * @default <IndeterminateCheckBoxIcon />
       */
      indeterminateIcon: PropTypes.node,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: PropTypes.object,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,
      /**
       * Callback fired when the state is changed.
       *
       * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: PropTypes.func,
      /**
       * If `true`, the `input` element is required.
       */
      required: PropTypes.bool,
      /**
       * The size of the component.
       * `small` is equivalent to the dense checkbox styling.
       * @default 'medium'
       */
      size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The value of the component. The DOM API casts this to a string.
       * The browser uses "on" as the default value.
       */
      value: PropTypes.any
    } ;
    var Checkbox$1 = Checkbox;

    const html = (theme, enableColorScheme) => _extends({
      WebkitFontSmoothing: 'antialiased',
      // Antialiasing.
      MozOsxFontSmoothing: 'grayscale',
      // Antialiasing.
      // Change from `box-sizing: content-box` so that `width`
      // is not affected by `padding` or `border`.
      boxSizing: 'border-box',
      // Fix font resize problem in iOS
      WebkitTextSizeAdjust: '100%'
    }, enableColorScheme && !theme.vars && {
      colorScheme: theme.palette.mode
    });
    const body = theme => _extends({
      color: (theme.vars || theme).palette.text.primary
    }, theme.typography.body1, {
      backgroundColor: (theme.vars || theme).palette.background.default,
      '@media print': {
        // Save printer ink.
        backgroundColor: (theme.vars || theme).palette.common.white
      }
    });
    const styles$3 = (theme, enableColorScheme = false) => {
      var _theme$components, _theme$components$Mui;
      const colorSchemeStyles = {};
      if (enableColorScheme && theme.colorSchemes) {
        Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {
          var _scheme$palette;
          colorSchemeStyles[theme.getColorSchemeSelector(key).replace(/\s*&/, '')] = {
            colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode
          };
        });
      }
      let defaultStyles = _extends({
        html: html(theme, enableColorScheme),
        '*, *::before, *::after': {
          boxSizing: 'inherit'
        },
        'strong, b': {
          fontWeight: theme.typography.fontWeightBold
        },
        body: _extends({
          margin: 0
        }, body(theme), {
          // Add support for document.body.requestFullScreen().
          // Other elements, if background transparent, are not supported.
          '&::backdrop': {
            backgroundColor: (theme.vars || theme).palette.background.default
          }
        })
      }, colorSchemeStyles);
      const themeOverrides = (_theme$components = theme.components) == null ? void 0 : (_theme$components$Mui = _theme$components.MuiCssBaseline) == null ? void 0 : _theme$components$Mui.styleOverrides;
      if (themeOverrides) {
        defaultStyles = [defaultStyles, themeOverrides];
      }
      return defaultStyles;
    };

    /**
     * Kickstart an elegant, consistent, and simple baseline to build upon.
     */
    function CssBaseline(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiCssBaseline'
      });
      const {
        children,
        enableColorScheme = false
      } = props;
      return /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
        children: [/*#__PURE__*/jsxRuntime.exports.jsx(GlobalStyles, {
          styles: theme => styles$3(theme, enableColorScheme)
        }), children]
      });
    }
    CssBaseline.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * You can wrap a node.
       */
      children: PropTypes.node,
      /**
       * Enable `color-scheme` CSS property to use `theme.palette.mode`.
       * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
       * For browser support, check out https://caniuse.com/?search=color-scheme
       * @default false
       */
      enableColorScheme: PropTypes.bool
    } ;

    const _excluded$1k = ["BackdropComponent", "BackdropProps", "closeAfterTransition", "children", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "slotProps", "slots", "theme"];
    const extendUtilityClasses$1 = ownerState => {
      return ownerState.classes;
    };
    const ModalRoot = styled$1('div', {
      name: 'MuiModal',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, !ownerState.open && ownerState.exited && styles.hidden];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      position: 'fixed',
      zIndex: (theme.vars || theme).zIndex.modal,
      right: 0,
      bottom: 0,
      top: 0,
      left: 0
    }, !ownerState.open && ownerState.exited && {
      visibility: 'hidden'
    }));
    const ModalBackdrop = styled$1(Backdrop$1, {
      name: 'MuiModal',
      slot: 'Backdrop',
      overridesResolver: (props, styles) => {
        return styles.backdrop;
      }
    })({
      zIndex: -1
    });

    /**
     * Modal is a lower-level construct that is leveraged by the following components:
     *
     * - [Dialog](/material-ui/api/dialog/)
     * - [Drawer](/material-ui/api/drawer/)
     * - [Menu](/material-ui/api/menu/)
     * - [Popover](/material-ui/api/popover/)
     *
     * If you are creating a modal dialog, you probably want to use the [Dialog](/material-ui/api/dialog/) component
     * rather than directly using Modal.
     *
     * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
     */
    const Modal = /*#__PURE__*/React__namespace.forwardRef(function Modal(inProps, ref) {
      var _ref, _slots$root, _ref2, _slots$backdrop, _slotProps$root, _slotProps$backdrop;
      const props = useThemeProps({
        name: 'MuiModal',
        props: inProps
      });
      const {
          BackdropComponent = ModalBackdrop,
          BackdropProps,
          closeAfterTransition = false,
          children,
          component,
          components = {},
          componentsProps = {},
          disableAutoFocus = false,
          disableEnforceFocus = false,
          disableEscapeKeyDown = false,
          disablePortal = false,
          disableRestoreFocus = false,
          disableScrollLock = false,
          hideBackdrop = false,
          keepMounted = false,
          slotProps,
          slots,
          // eslint-disable-next-line react/prop-types
          theme
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1k);
      const [exited, setExited] = React__namespace.useState(true);
      const commonProps = {
        closeAfterTransition,
        disableAutoFocus,
        disableEnforceFocus,
        disableEscapeKeyDown,
        disablePortal,
        disableRestoreFocus,
        disableScrollLock,
        hideBackdrop,
        keepMounted
      };
      const ownerState = _extends({}, props, commonProps, {
        exited
      });
      const classes = extendUtilityClasses$1(ownerState);
      const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : ModalRoot;
      const BackdropSlot = (_ref2 = (_slots$backdrop = slots == null ? void 0 : slots.backdrop) != null ? _slots$backdrop : components.Backdrop) != null ? _ref2 : BackdropComponent;
      const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
      const backdropSlotProps = (_slotProps$backdrop = slotProps == null ? void 0 : slotProps.backdrop) != null ? _slotProps$backdrop : componentsProps.backdrop;
      return /*#__PURE__*/jsxRuntime.exports.jsx(ModalUnstyled$1, _extends({
        slots: {
          root: RootSlot,
          backdrop: BackdropSlot
        },
        slotProps: {
          root: () => _extends({}, resolveComponentProps(rootSlotProps, ownerState), !isHostComponent(RootSlot) && {
            as: component,
            theme
          }),
          backdrop: () => _extends({}, BackdropProps, resolveComponentProps(backdropSlotProps, ownerState))
        },
        onTransitionEnter: () => setExited(false),
        onTransitionExited: () => setExited(true),
        ref: ref
      }, other, {
        classes: classes
      }, commonProps, {
        children: children
      }));
    });
    Modal.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * A backdrop component. This prop enables custom backdrop rendering.
       * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
       * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
       * @default styled(Backdrop, {
       *   name: 'MuiModal',
       *   slot: 'Backdrop',
       *   overridesResolver: (props, styles) => {
       *     return styles.backdrop;
       *   },
       * })({
       *   zIndex: -1,
       * })
       */
      BackdropComponent: PropTypes.elementType,
      /**
       * Props applied to the [`Backdrop`](/material-ui/api/backdrop/) element.
       * @deprecated Use `slotProps.backdrop` instead.
       */
      BackdropProps: PropTypes.object,
      /**
       * A single child content element.
       */
      children: elementAcceptingRef$1.isRequired,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * When set to true the Modal waits until a nested Transition is completed before closing.
       * @default false
       */
      closeAfterTransition: PropTypes.bool,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `slots` prop.
       * It's recommended to use the `slots` prop instead.
       *
       * @default {}
       */
      components: PropTypes.shape({
        Backdrop: PropTypes.elementType,
        Root: PropTypes.elementType
      }),
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * This prop is an alias for the `slotProps` prop.
       * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
       *
       * @default {}
       */
      componentsProps: PropTypes.shape({
        backdrop: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
      }),
      /**
       * An HTML element or function that returns one.
       * The `container` will have the portal children appended to it.
       *
       * By default, it uses the body of the top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),
      /**
       * If `true`, the modal will not automatically shift focus to itself when it opens, and
       * replace it to the last focused element when it closes.
       * This also works correctly with any modal children that have the `disableAutoFocus` prop.
       *
       * Generally this should never be set to `true` as it makes the modal less
       * accessible to assistive technologies, like screen readers.
       * @default false
       */
      disableAutoFocus: PropTypes.bool,
      /**
       * If `true`, the modal will not prevent focus from leaving the modal while open.
       *
       * Generally this should never be set to `true` as it makes the modal less
       * accessible to assistive technologies, like screen readers.
       * @default false
       */
      disableEnforceFocus: PropTypes.bool,
      /**
       * If `true`, hitting escape will not fire the `onClose` callback.
       * @default false
       */
      disableEscapeKeyDown: PropTypes.bool,
      /**
       * The `children` will be under the DOM hierarchy of the parent component.
       * @default false
       */
      disablePortal: PropTypes.bool,
      /**
       * If `true`, the modal will not restore focus to previously focused element once
       * modal is hidden or unmounted.
       * @default false
       */
      disableRestoreFocus: PropTypes.bool,
      /**
       * Disable the scroll lock behavior.
       * @default false
       */
      disableScrollLock: PropTypes.bool,
      /**
       * If `true`, the backdrop is not rendered.
       * @default false
       */
      hideBackdrop: PropTypes.bool,
      /**
       * Always keep the children in the DOM.
       * This prop can be useful in SEO situation or
       * when you want to maximize the responsiveness of the Modal.
       * @default false
       */
      keepMounted: PropTypes.bool,
      /**
       * Callback fired when the backdrop is clicked.
       * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
       */
      onBackdropClick: PropTypes.func,
      /**
       * Callback fired when the component requests to be closed.
       * The `reason` parameter can optionally be used to control the response to `onClose`.
       *
       * @param {object} event The event source of the callback.
       * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
       */
      onClose: PropTypes.func,
      /**
       * If `true`, the component is shown.
       */
      open: PropTypes.bool.isRequired,
      /**
       * The props used for each slot inside the Modal.
       * @default {}
       */
      slotProps: PropTypes.shape({
        backdrop: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
      }),
      /**
       * The components used for each slot inside the Modal.
       * Either a string to use a HTML element or a component.
       * @default {}
       */
      slots: PropTypes.shape({
        backdrop: PropTypes.elementType,
        root: PropTypes.elementType
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var Modal$1 = Modal;

    function getDialogUtilityClass(slot) {
      return generateUtilityClass('MuiDialog', slot);
    }
    const dialogClasses = generateUtilityClasses('MuiDialog', ['root', 'scrollPaper', 'scrollBody', 'container', 'paper', 'paperScrollPaper', 'paperScrollBody', 'paperWidthFalse', 'paperWidthXs', 'paperWidthSm', 'paperWidthMd', 'paperWidthLg', 'paperWidthXl', 'paperFullWidth', 'paperFullScreen']);
    var dialogClasses$1 = dialogClasses;

    const DialogContext = /*#__PURE__*/React.createContext({});
    {
      DialogContext.displayName = 'DialogContext';
    }
    var DialogContext$1 = DialogContext;

    const _excluded$1j = ["aria-describedby", "aria-labelledby", "BackdropComponent", "BackdropProps", "children", "className", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps"];
    const DialogBackdrop = styled$1(Backdrop$1, {
      name: 'MuiDialog',
      slot: 'Backdrop',
      overrides: (props, styles) => styles.backdrop
    })({
      // Improve scrollable dialog support.
      zIndex: -1
    });
    const useUtilityClasses$16 = ownerState => {
      const {
        classes,
        scroll,
        maxWidth,
        fullWidth,
        fullScreen
      } = ownerState;
      const slots = {
        root: ['root'],
        container: ['container', `scroll${capitalize(scroll)}`],
        paper: ['paper', `paperScroll${capitalize(scroll)}`, `paperWidth${capitalize(String(maxWidth))}`, fullWidth && 'paperFullWidth', fullScreen && 'paperFullScreen']
      };
      return composeClasses(slots, getDialogUtilityClass, classes);
    };
    const DialogRoot = styled$1(Modal$1, {
      name: 'MuiDialog',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({
      '@media print': {
        // Use !important to override the Modal inline-style.
        position: 'absolute !important'
      }
    });
    const DialogContainer = styled$1('div', {
      name: 'MuiDialog',
      slot: 'Container',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.container, styles[`scroll${capitalize(ownerState.scroll)}`]];
      }
    })(({
      ownerState
    }) => _extends({
      height: '100%',
      '@media print': {
        height: 'auto'
      },
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0
    }, ownerState.scroll === 'paper' && {
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center'
    }, ownerState.scroll === 'body' && {
      overflowY: 'auto',
      overflowX: 'hidden',
      textAlign: 'center',
      '&:after': {
        content: '""',
        display: 'inline-block',
        verticalAlign: 'middle',
        height: '100%',
        width: '0'
      }
    }));
    const DialogPaper = styled$1(Paper$1, {
      name: 'MuiDialog',
      slot: 'Paper',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.paper, styles[`scrollPaper${capitalize(ownerState.scroll)}`], styles[`paperWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fullWidth && styles.paperFullWidth, ownerState.fullScreen && styles.paperFullScreen];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      margin: 32,
      position: 'relative',
      overflowY: 'auto',
      // Fix IE11 issue, to remove at some point.
      '@media print': {
        overflowY: 'visible',
        boxShadow: 'none'
      }
    }, ownerState.scroll === 'paper' && {
      display: 'flex',
      flexDirection: 'column',
      maxHeight: 'calc(100% - 64px)'
    }, ownerState.scroll === 'body' && {
      display: 'inline-block',
      verticalAlign: 'middle',
      textAlign: 'left' // 'initial' doesn't work on IE11
    }, !ownerState.maxWidth && {
      maxWidth: 'calc(100% - 64px)'
    }, ownerState.maxWidth === 'xs' && {
      maxWidth: theme.breakpoints.unit === 'px' ? Math.max(theme.breakpoints.values.xs, 444) : `${theme.breakpoints.values.xs}${theme.breakpoints.unit}`,
      [`&.${dialogClasses$1.paperScrollBody}`]: {
        [theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 32 * 2)]: {
          maxWidth: 'calc(100% - 64px)'
        }
      }
    }, ownerState.maxWidth && ownerState.maxWidth !== 'xs' && {
      maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`,
      [`&.${dialogClasses$1.paperScrollBody}`]: {
        [theme.breakpoints.down(theme.breakpoints.values[ownerState.maxWidth] + 32 * 2)]: {
          maxWidth: 'calc(100% - 64px)'
        }
      }
    }, ownerState.fullWidth && {
      width: 'calc(100% - 64px)'
    }, ownerState.fullScreen && {
      margin: 0,
      width: '100%',
      maxWidth: '100%',
      height: '100%',
      maxHeight: 'none',
      borderRadius: 0,
      [`&.${dialogClasses$1.paperScrollBody}`]: {
        margin: 0,
        maxWidth: '100%'
      }
    }));

    /**
     * Dialogs are overlaid modal paper based components with a backdrop.
     */
    const Dialog = /*#__PURE__*/React__namespace.forwardRef(function Dialog(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiDialog'
      });
      const theme = useTheme();
      const defaultTransitionDuration = {
        enter: theme.transitions.duration.enteringScreen,
        exit: theme.transitions.duration.leavingScreen
      };
      const {
          'aria-describedby': ariaDescribedby,
          'aria-labelledby': ariaLabelledbyProp,
          BackdropComponent,
          BackdropProps,
          children,
          className,
          disableEscapeKeyDown = false,
          fullScreen = false,
          fullWidth = false,
          maxWidth = 'sm',
          onBackdropClick,
          onClose,
          open,
          PaperComponent = Paper$1,
          PaperProps = {},
          scroll = 'paper',
          TransitionComponent = Fade$1,
          transitionDuration = defaultTransitionDuration,
          TransitionProps
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1j);
      const ownerState = _extends({}, props, {
        disableEscapeKeyDown,
        fullScreen,
        fullWidth,
        maxWidth,
        scroll
      });
      const classes = useUtilityClasses$16(ownerState);
      const backdropClick = React__namespace.useRef();
      const handleMouseDown = event => {
        // We don't want to close the dialog when clicking the dialog content.
        // Make sure the event starts and ends on the same DOM element.
        backdropClick.current = event.target === event.currentTarget;
      };
      const handleBackdropClick = event => {
        // Ignore the events not coming from the "backdrop".
        if (!backdropClick.current) {
          return;
        }
        backdropClick.current = null;
        if (onBackdropClick) {
          onBackdropClick(event);
        }
        if (onClose) {
          onClose(event, 'backdropClick');
        }
      };
      const ariaLabelledby = useId(ariaLabelledbyProp);
      const dialogContextValue = React__namespace.useMemo(() => {
        return {
          titleId: ariaLabelledby
        };
      }, [ariaLabelledby]);
      return /*#__PURE__*/jsxRuntime.exports.jsx(DialogRoot, _extends({
        className: clsx(classes.root, className),
        closeAfterTransition: true,
        components: {
          Backdrop: DialogBackdrop
        },
        componentsProps: {
          backdrop: _extends({
            transitionDuration,
            as: BackdropComponent
          }, BackdropProps)
        },
        disableEscapeKeyDown: disableEscapeKeyDown,
        onClose: onClose,
        open: open,
        ref: ref,
        onClick: handleBackdropClick,
        ownerState: ownerState
      }, other, {
        children: /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
          appear: true,
          in: open,
          timeout: transitionDuration,
          role: "presentation"
        }, TransitionProps, {
          children: /*#__PURE__*/jsxRuntime.exports.jsx(DialogContainer, {
            className: clsx(classes.container),
            onMouseDown: handleMouseDown,
            ownerState: ownerState,
            children: /*#__PURE__*/jsxRuntime.exports.jsx(DialogPaper, _extends({
              as: PaperComponent,
              elevation: 24,
              role: "dialog",
              "aria-describedby": ariaDescribedby,
              "aria-labelledby": ariaLabelledby
            }, PaperProps, {
              className: clsx(classes.paper, PaperProps.className),
              ownerState: ownerState,
              children: /*#__PURE__*/jsxRuntime.exports.jsx(DialogContext$1.Provider, {
                value: dialogContextValue,
                children: children
              })
            }))
          })
        }))
      }));
    });
    Dialog.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The id(s) of the element(s) that describe the dialog.
       */
      'aria-describedby': PropTypes.string,
      /**
       * The id(s) of the element(s) that label the dialog.
       */
      'aria-labelledby': PropTypes.string,
      /**
       * A backdrop component. This prop enables custom backdrop rendering.
       * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
       * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
       * @default styled(Backdrop, {
       *   name: 'MuiModal',
       *   slot: 'Backdrop',
       *   overridesResolver: (props, styles) => {
       *     return styles.backdrop;
       *   },
       * })({
       *   zIndex: -1,
       * })
       */
      BackdropComponent: PropTypes.elementType,
      /**
       * @ignore
       */
      BackdropProps: PropTypes.object,
      /**
       * Dialog children, usually the included sub-components.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * If `true`, hitting escape will not fire the `onClose` callback.
       * @default false
       */
      disableEscapeKeyDown: PropTypes.bool,
      /**
       * If `true`, the dialog is full-screen.
       * @default false
       */
      fullScreen: PropTypes.bool,
      /**
       * If `true`, the dialog stretches to `maxWidth`.
       *
       * Notice that the dialog width grow is limited by the default margin.
       * @default false
       */
      fullWidth: PropTypes.bool,
      /**
       * Determine the max-width of the dialog.
       * The dialog width grows with the size of the screen.
       * Set to `false` to disable `maxWidth`.
       * @default 'sm'
       */
      maxWidth: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),
      /**
       * Callback fired when the backdrop is clicked.
       * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
       */
      onBackdropClick: PropTypes.func,
      /**
       * Callback fired when the component requests to be closed.
       *
       * @param {object} event The event source of the callback.
       * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
       */
      onClose: PropTypes.func,
      /**
       * If `true`, the component is shown.
       */
      open: PropTypes.bool.isRequired,
      /**
       * The component used to render the body of the dialog.
       * @default Paper
       */
      PaperComponent: PropTypes.elementType,
      /**
       * Props applied to the [`Paper`](/material-ui/api/paper/) element.
       * @default {}
       */
      PaperProps: PropTypes.object,
      /**
       * Determine the container for scrolling the dialog.
       * @default 'paper'
       */
      scroll: PropTypes.oneOf(['body', 'paper']),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The component used for the transition.
       * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
       * @default Fade
       */
      TransitionComponent: PropTypes.elementType,
      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       * @default {
       *   enter: theme.transitions.duration.enteringScreen,
       *   exit: theme.transitions.duration.leavingScreen,
       * }
       */
      transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
        appear: PropTypes.number,
        enter: PropTypes.number,
        exit: PropTypes.number
      })]),
      /**
       * Props applied to the transition element.
       * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
       */
      TransitionProps: PropTypes.object
    } ;
    var Dialog$1 = Dialog;

    function getDialogActionsUtilityClass(slot) {
      return generateUtilityClass('MuiDialogActions', slot);
    }
    generateUtilityClasses('MuiDialogActions', ['root', 'spacing']);

    const _excluded$1i = ["className", "disableSpacing"];
    const useUtilityClasses$15 = ownerState => {
      const {
        classes,
        disableSpacing
      } = ownerState;
      const slots = {
        root: ['root', !disableSpacing && 'spacing']
      };
      return composeClasses(slots, getDialogActionsUtilityClass, classes);
    };
    const DialogActionsRoot = styled$1('div', {
      name: 'MuiDialogActions',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, !ownerState.disableSpacing && styles.spacing];
      }
    })(({
      ownerState
    }) => _extends({
      display: 'flex',
      alignItems: 'center',
      padding: 8,
      justifyContent: 'flex-end',
      flex: '0 0 auto'
    }, !ownerState.disableSpacing && {
      '& > :not(:first-of-type)': {
        marginLeft: 8
      }
    }));
    const DialogActions = /*#__PURE__*/React__namespace.forwardRef(function DialogActions(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiDialogActions'
      });
      const {
          className,
          disableSpacing = false
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1i);
      const ownerState = _extends({}, props, {
        disableSpacing
      });
      const classes = useUtilityClasses$15(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(DialogActionsRoot, _extends({
        className: clsx(classes.root, className),
        ownerState: ownerState,
        ref: ref
      }, other));
    });
    DialogActions.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * If `true`, the actions do not have additional margin.
       * @default false
       */
      disableSpacing: PropTypes.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var DialogActions$1 = DialogActions;

    function getDialogContentUtilityClass(slot) {
      return generateUtilityClass('MuiDialogContent', slot);
    }
    generateUtilityClasses('MuiDialogContent', ['root', 'dividers']);

    function getDialogTitleUtilityClass(slot) {
      return generateUtilityClass('MuiDialogTitle', slot);
    }
    const dialogTitleClasses = generateUtilityClasses('MuiDialogTitle', ['root']);
    var dialogTitleClasses$1 = dialogTitleClasses;

    const _excluded$1h = ["className", "dividers"];
    const useUtilityClasses$14 = ownerState => {
      const {
        classes,
        dividers
      } = ownerState;
      const slots = {
        root: ['root', dividers && 'dividers']
      };
      return composeClasses(slots, getDialogContentUtilityClass, classes);
    };
    const DialogContentRoot = styled$1('div', {
      name: 'MuiDialogContent',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.dividers && styles.dividers];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      flex: '1 1 auto',
      // Add iOS momentum scrolling for iOS < 13.0
      WebkitOverflowScrolling: 'touch',
      overflowY: 'auto',
      padding: '20px 24px'
    }, ownerState.dividers ? {
      padding: '16px 24px',
      borderTop: `1px solid ${(theme.vars || theme).palette.divider}`,
      borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
    } : {
      [`.${dialogTitleClasses$1.root} + &`]: {
        paddingTop: 0
      }
    }));
    const DialogContent = /*#__PURE__*/React__namespace.forwardRef(function DialogContent(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiDialogContent'
      });
      const {
          className,
          dividers = false
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1h);
      const ownerState = _extends({}, props, {
        dividers
      });
      const classes = useUtilityClasses$14(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(DialogContentRoot, _extends({
        className: clsx(classes.root, className),
        ownerState: ownerState,
        ref: ref
      }, other));
    });
    DialogContent.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * Display the top and bottom dividers.
       * @default false
       */
      dividers: PropTypes.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var DialogContent$1 = DialogContent;

    function getDialogContentTextUtilityClass(slot) {
      return generateUtilityClass('MuiDialogContentText', slot);
    }
    generateUtilityClasses('MuiDialogContentText', ['root']);

    const _excluded$1g = ["children", "className"];
    const useUtilityClasses$13 = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root']
      };
      const composedClasses = composeClasses(slots, getDialogContentTextUtilityClass, classes);
      return _extends({}, classes, composedClasses);
    };
    const DialogContentTextRoot = styled$1(Typography$1, {
      shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
      name: 'MuiDialogContentText',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({});
    const DialogContentText = /*#__PURE__*/React__namespace.forwardRef(function DialogContentText(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiDialogContentText'
      });
      const {
          className
        } = props,
        ownerState = _objectWithoutPropertiesLoose(props, _excluded$1g);
      const classes = useUtilityClasses$13(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(DialogContentTextRoot, _extends({
        component: "p",
        variant: "body1",
        color: "text.secondary",
        ref: ref,
        ownerState: ownerState,
        className: clsx(classes.root, className)
      }, props, {
        classes: classes
      }));
    });
    DialogContentText.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var DialogContentText$1 = DialogContentText;

    const _excluded$1f = ["className", "id"];
    const useUtilityClasses$12 = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root']
      };
      return composeClasses(slots, getDialogTitleUtilityClass, classes);
    };
    const DialogTitleRoot = styled$1(Typography$1, {
      name: 'MuiDialogTitle',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({
      padding: '16px 24px',
      flex: '0 0 auto'
    });
    const DialogTitle = /*#__PURE__*/React__namespace.forwardRef(function DialogTitle(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiDialogTitle'
      });
      const {
          className,
          id: idProp
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1f);
      const ownerState = props;
      const classes = useUtilityClasses$12(ownerState);
      const {
        titleId: id = idProp
      } = React__namespace.useContext(DialogContext$1);
      return /*#__PURE__*/jsxRuntime.exports.jsx(DialogTitleRoot, _extends({
        component: "h2",
        className: clsx(classes.root, className),
        ownerState: ownerState,
        ref: ref,
        variant: "h6",
        id: id
      }, other));
    });
    DialogTitle.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * @ignore
       */
      id: PropTypes.string,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var DialogTitle$1 = DialogTitle;

    const dividerClasses = generateUtilityClasses('MuiDivider', ['root', 'absolute', 'fullWidth', 'inset', 'middle', 'flexItem', 'light', 'vertical', 'withChildren', 'withChildrenVertical', 'textAlignRight', 'textAlignLeft', 'wrapper', 'wrapperVertical']);
    var dividerClasses$1 = dividerClasses;

    const _excluded$1e = ["disableUnderline", "components", "componentsProps", "fullWidth", "hiddenLabel", "inputComponent", "multiline", "slotProps", "slots", "type"];
    const useUtilityClasses$11 = ownerState => {
      const {
        classes,
        disableUnderline
      } = ownerState;
      const slots = {
        root: ['root', !disableUnderline && 'underline'],
        input: ['input']
      };
      const composedClasses = composeClasses(slots, getFilledInputUtilityClass, classes);
      return _extends({}, classes, composedClasses);
    };
    const FilledInputRoot = styled$1(InputBaseRoot, {
      shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
      name: 'MuiFilledInput',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [...rootOverridesResolver(props, styles), !ownerState.disableUnderline && styles.underline];
      }
    })(({
      theme,
      ownerState
    }) => {
      var _palette;
      const light = theme.palette.mode === 'light';
      const bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
      const backgroundColor = light ? 'rgba(0, 0, 0, 0.06)' : 'rgba(255, 255, 255, 0.09)';
      const hoverBackground = light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.13)';
      const disabledBackground = light ? 'rgba(0, 0, 0, 0.12)' : 'rgba(255, 255, 255, 0.12)';
      return _extends({
        position: 'relative',
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor,
        borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
        borderTopRightRadius: (theme.vars || theme).shape.borderRadius,
        transition: theme.transitions.create('background-color', {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        '&:hover': {
          backgroundColor: theme.vars ? theme.vars.palette.FilledInput.hoverBg : hoverBackground,
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor
          }
        },
        [`&.${filledInputClasses$1.focused}`]: {
          backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor
        },
        [`&.${filledInputClasses$1.disabled}`]: {
          backgroundColor: theme.vars ? theme.vars.palette.FilledInput.disabledBg : disabledBackground
        }
      }, !ownerState.disableUnderline && {
        '&:after': {
          borderBottom: `2px solid ${(_palette = (theme.vars || theme).palette[ownerState.color || 'primary']) == null ? void 0 : _palette.main}`,
          left: 0,
          bottom: 0,
          // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
          content: '""',
          position: 'absolute',
          right: 0,
          transform: 'scaleX(0)',
          transition: theme.transitions.create('transform', {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut
          }),
          pointerEvents: 'none' // Transparent to the hover style.
        },

        [`&.${filledInputClasses$1.focused}:after`]: {
          // translateX(0) is a workaround for Safari transform scale bug
          // See https://github.com/mui/material-ui/issues/31766
          transform: 'scaleX(1) translateX(0)'
        },
        [`&.${filledInputClasses$1.error}:after`]: {
          borderBottomColor: (theme.vars || theme).palette.error.main,
          transform: 'scaleX(1)' // error is always underlined in red
        },

        '&:before': {
          borderBottom: `1px solid ${theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})` : bottomLineColor}`,
          left: 0,
          bottom: 0,
          // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
          content: '"\\00a0"',
          position: 'absolute',
          right: 0,
          transition: theme.transitions.create('border-bottom-color', {
            duration: theme.transitions.duration.shorter
          }),
          pointerEvents: 'none' // Transparent to the hover style.
        },

        [`&:hover:not(.${filledInputClasses$1.disabled}):before`]: {
          borderBottom: `1px solid ${(theme.vars || theme).palette.text.primary}`
        },
        [`&.${filledInputClasses$1.disabled}:before`]: {
          borderBottomStyle: 'dotted'
        }
      }, ownerState.startAdornment && {
        paddingLeft: 12
      }, ownerState.endAdornment && {
        paddingRight: 12
      }, ownerState.multiline && _extends({
        padding: '25px 12px 8px'
      }, ownerState.size === 'small' && {
        paddingTop: 21,
        paddingBottom: 4
      }, ownerState.hiddenLabel && {
        paddingTop: 16,
        paddingBottom: 17
      }));
    });
    const FilledInputInput = styled$1(InputBaseComponent, {
      name: 'MuiFilledInput',
      slot: 'Input',
      overridesResolver: inputOverridesResolver
    })(({
      theme,
      ownerState
    }) => _extends({
      paddingTop: 25,
      paddingRight: 12,
      paddingBottom: 8,
      paddingLeft: 12
    }, !theme.vars && {
      '&:-webkit-autofill': {
        WebkitBoxShadow: theme.palette.mode === 'light' ? null : '0 0 0 100px #266798 inset',
        WebkitTextFillColor: theme.palette.mode === 'light' ? null : '#fff',
        caretColor: theme.palette.mode === 'light' ? null : '#fff',
        borderTopLeftRadius: 'inherit',
        borderTopRightRadius: 'inherit'
      }
    }, theme.vars && {
      '&:-webkit-autofill': {
        borderTopLeftRadius: 'inherit',
        borderTopRightRadius: 'inherit'
      },
      [theme.getColorSchemeSelector('dark')]: {
        '&:-webkit-autofill': {
          WebkitBoxShadow: '0 0 0 100px #266798 inset',
          WebkitTextFillColor: '#fff',
          caretColor: '#fff'
        }
      }
    }, ownerState.size === 'small' && {
      paddingTop: 21,
      paddingBottom: 4
    }, ownerState.hiddenLabel && {
      paddingTop: 16,
      paddingBottom: 17
    }, ownerState.multiline && {
      paddingTop: 0,
      paddingBottom: 0,
      paddingLeft: 0,
      paddingRight: 0
    }, ownerState.startAdornment && {
      paddingLeft: 0
    }, ownerState.endAdornment && {
      paddingRight: 0
    }, ownerState.hiddenLabel && ownerState.size === 'small' && {
      paddingTop: 8,
      paddingBottom: 9
    }));
    const FilledInput = /*#__PURE__*/React__namespace.forwardRef(function FilledInput(inProps, ref) {
      var _ref, _slots$root, _ref2, _slots$input;
      const props = useThemeProps({
        props: inProps,
        name: 'MuiFilledInput'
      });
      const {
          components = {},
          componentsProps: componentsPropsProp,
          fullWidth = false,
          // declare here to prevent spreading to DOM
          inputComponent = 'input',
          multiline = false,
          slotProps,
          slots = {},
          type = 'text'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1e);
      const ownerState = _extends({}, props, {
        fullWidth,
        inputComponent,
        multiline,
        type
      });
      const classes = useUtilityClasses$11(props);
      const filledInputComponentsProps = {
        root: {
          ownerState
        },
        input: {
          ownerState
        }
      };
      const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? deepmerge(slotProps != null ? slotProps : componentsPropsProp, filledInputComponentsProps) : filledInputComponentsProps;
      const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : FilledInputRoot;
      const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : FilledInputInput;
      return /*#__PURE__*/jsxRuntime.exports.jsx(InputBase$1, _extends({
        slots: {
          root: RootSlot,
          input: InputSlot
        },
        componentsProps: componentsProps,
        fullWidth: fullWidth,
        inputComponent: inputComponent,
        multiline: multiline,
        ref: ref,
        type: type
      }, other, {
        classes: classes
      }));
    });
    FilledInput.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * This prop helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: PropTypes.string,
      /**
       * If `true`, the `input` element is focused during the first mount.
       */
      autoFocus: PropTypes.bool,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
       * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
       */
      color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary']), PropTypes.string]),
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `slots` prop.
       * It's recommended to use the `slots` prop instead.
       *
       * @default {}
       */
      components: PropTypes.shape({
        Input: PropTypes.elementType,
        Root: PropTypes.elementType
      }),
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * This prop is an alias for the `slotProps` prop.
       * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
       *
       * @default {}
       */
      componentsProps: PropTypes.shape({
        input: PropTypes.object,
        root: PropTypes.object
      }),
      /**
       * The default value. Use when the component is not controlled.
       */
      defaultValue: PropTypes.any,
      /**
       * If `true`, the component is disabled.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, the input will not have an underline.
       */
      disableUnderline: PropTypes.bool,
      /**
       * End `InputAdornment` for this component.
       */
      endAdornment: PropTypes.node,
      /**
       * If `true`, the `input` will indicate an error.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      error: PropTypes.bool,
      /**
       * If `true`, the `input` will take up the full width of its container.
       * @default false
       */
      fullWidth: PropTypes.bool,
      /**
       * If `true`, the label is hidden.
       * This is used to increase density for a `FilledInput`.
       * Be sure to add `aria-label` to the `input` element.
       * @default false
       */
      hiddenLabel: PropTypes.bool,
      /**
       * The id of the `input` element.
       */
      id: PropTypes.string,
      /**
       * The component used for the `input` element.
       * Either a string to use a HTML element or a component.
       * @default 'input'
       */
      inputComponent: PropTypes.elementType,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       * @default {}
       */
      inputProps: PropTypes.object,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,
      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
       */
      margin: PropTypes.oneOf(['dense', 'none']),
      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      /**
       * Minimum number of rows to display when multiline option is set to true.
       */
      minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      /**
       * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
       * @default false
       */
      multiline: PropTypes.bool,
      /**
       * Name attribute of the `input` element.
       */
      name: PropTypes.string,
      /**
       * Callback fired when the value is changed.
       *
       * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: PropTypes.func,
      /**
       * The short hint displayed in the `input` before the user enters a value.
       */
      placeholder: PropTypes.string,
      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: PropTypes.bool,
      /**
       * If `true`, the `input` element is required.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      required: PropTypes.bool,
      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slotProps: PropTypes.shape({
        input: PropTypes.object,
        root: PropTypes.object
      }),
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `components` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slots: PropTypes.shape({
        input: PropTypes.elementType,
        root: PropTypes.elementType
      }),
      /**
       * Start `InputAdornment` for this component.
       */
      startAdornment: PropTypes.node,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       * @default 'text'
       */
      type: PropTypes.string,
      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: PropTypes.any
    } ;
    FilledInput.muiName = 'Input';
    var FilledInput$1 = FilledInput;

    function getFormControlUtilityClasses(slot) {
      return generateUtilityClass('MuiFormControl', slot);
    }
    generateUtilityClasses('MuiFormControl', ['root', 'marginNone', 'marginNormal', 'marginDense', 'fullWidth', 'disabled']);

    const _excluded$1d = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];
    const useUtilityClasses$10 = ownerState => {
      const {
        classes,
        margin,
        fullWidth
      } = ownerState;
      const slots = {
        root: ['root', margin !== 'none' && `margin${capitalize(margin)}`, fullWidth && 'fullWidth']
      };
      return composeClasses(slots, getFormControlUtilityClasses, classes);
    };
    const FormControlRoot = styled$1('div', {
      name: 'MuiFormControl',
      slot: 'Root',
      overridesResolver: ({
        ownerState
      }, styles) => {
        return _extends({}, styles.root, styles[`margin${capitalize(ownerState.margin)}`], ownerState.fullWidth && styles.fullWidth);
      }
    })(({
      ownerState
    }) => _extends({
      display: 'inline-flex',
      flexDirection: 'column',
      position: 'relative',
      // Reset fieldset default style.
      minWidth: 0,
      padding: 0,
      margin: 0,
      border: 0,
      verticalAlign: 'top'
    }, ownerState.margin === 'normal' && {
      marginTop: 16,
      marginBottom: 8
    }, ownerState.margin === 'dense' && {
      marginTop: 8,
      marginBottom: 4
    }, ownerState.fullWidth && {
      width: '100%'
    }));

    /**
     * Provides context such as filled/focused/error/required for form inputs.
     * Relying on the context provides high flexibility and ensures that the state always stays
     * consistent across the children of the `FormControl`.
     * This context is used by the following components:
     *
     *  - FormLabel
     *  - FormHelperText
     *  - Input
     *  - InputLabel
     *
     * You can find one composition example below and more going to [the demos](/material-ui/react-text-field/#components).
     *
     * ```jsx
     * <FormControl>
     *   <InputLabel htmlFor="my-input">Email address</InputLabel>
     *   <Input id="my-input" aria-describedby="my-helper-text" />
     *   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
     * </FormControl>
     * ```
     *
     * ⚠️ Only one `InputBase` can be used within a FormControl because it create visual inconsistencies.
     * For instance, only one input can be focused at the same time, the state shouldn't be shared.
     */
    const FormControl = /*#__PURE__*/React__namespace.forwardRef(function FormControl(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiFormControl'
      });
      const {
          children,
          className,
          color = 'primary',
          component = 'div',
          disabled = false,
          error = false,
          focused: visuallyFocused,
          fullWidth = false,
          hiddenLabel = false,
          margin = 'none',
          required = false,
          size = 'medium',
          variant = 'outlined'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1d);
      const ownerState = _extends({}, props, {
        color,
        component,
        disabled,
        error,
        fullWidth,
        hiddenLabel,
        margin,
        required,
        size,
        variant
      });
      const classes = useUtilityClasses$10(ownerState);
      const [adornedStart, setAdornedStart] = React__namespace.useState(() => {
        // We need to iterate through the children and find the Input in order
        // to fully support server-side rendering.
        let initialAdornedStart = false;
        if (children) {
          React__namespace.Children.forEach(children, child => {
            if (!isMuiElement(child, ['Input', 'Select'])) {
              return;
            }
            const input = isMuiElement(child, ['Select']) ? child.props.input : child;
            if (input && isAdornedStart(input.props)) {
              initialAdornedStart = true;
            }
          });
        }
        return initialAdornedStart;
      });
      const [filled, setFilled] = React__namespace.useState(() => {
        // We need to iterate through the children and find the Input in order
        // to fully support server-side rendering.
        let initialFilled = false;
        if (children) {
          React__namespace.Children.forEach(children, child => {
            if (!isMuiElement(child, ['Input', 'Select'])) {
              return;
            }
            if (isFilled(child.props, true)) {
              initialFilled = true;
            }
          });
        }
        return initialFilled;
      });
      const [focusedState, setFocused] = React__namespace.useState(false);
      if (disabled && focusedState) {
        setFocused(false);
      }
      const focused = visuallyFocused !== undefined && !disabled ? visuallyFocused : focusedState;
      let registerEffect;
      {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        const registeredInput = React__namespace.useRef(false);
        registerEffect = () => {
          if (registeredInput.current) {
            console.error(['MUI: There are multiple `InputBase` components inside a FormControl.', 'This creates visual inconsistencies, only use one `InputBase`.'].join('\n'));
          }
          registeredInput.current = true;
          return () => {
            registeredInput.current = false;
          };
        };
      }
      const childContext = React__namespace.useMemo(() => {
        return {
          adornedStart,
          setAdornedStart,
          color,
          disabled,
          error,
          filled,
          focused,
          fullWidth,
          hiddenLabel,
          size,
          onBlur: () => {
            setFocused(false);
          },
          onEmpty: () => {
            setFilled(false);
          },
          onFilled: () => {
            setFilled(true);
          },
          onFocus: () => {
            setFocused(true);
          },
          registerEffect,
          required,
          variant
        };
      }, [adornedStart, color, disabled, error, filled, focused, fullWidth, hiddenLabel, registerEffect, required, size, variant]);
      return /*#__PURE__*/jsxRuntime.exports.jsx(FormControlContext$1.Provider, {
        value: childContext,
        children: /*#__PURE__*/jsxRuntime.exports.jsx(FormControlRoot, _extends({
          as: component,
          ownerState: ownerState,
          className: clsx(classes.root, className),
          ref: ref
        }, other, {
          children: children
        }))
      });
    });
    FormControl.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
       * @default 'primary'
       */
      color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * If `true`, the label, input and helper text should be displayed in a disabled state.
       * @default false
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, the label is displayed in an error state.
       * @default false
       */
      error: PropTypes.bool,
      /**
       * If `true`, the component is displayed in focused state.
       */
      focused: PropTypes.bool,
      /**
       * If `true`, the component will take up the full width of its container.
       * @default false
       */
      fullWidth: PropTypes.bool,
      /**
       * If `true`, the label is hidden.
       * This is used to increase density for a `FilledInput`.
       * Be sure to add `aria-label` to the `input` element.
       * @default false
       */
      hiddenLabel: PropTypes.bool,
      /**
       * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
       * @default 'none'
       */
      margin: PropTypes.oneOf(['dense', 'none', 'normal']),
      /**
       * If `true`, the label will indicate that the `input` is required.
       * @default false
       */
      required: PropTypes.bool,
      /**
       * The size of the component.
       * @default 'medium'
       */
      size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The variant to use.
       * @default 'outlined'
       */
      variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])
    } ;
    var FormControl$1 = FormControl;

    function getFormControlLabelUtilityClasses(slot) {
      return generateUtilityClass('MuiFormControlLabel', slot);
    }
    const formControlLabelClasses = generateUtilityClasses('MuiFormControlLabel', ['root', 'labelPlacementStart', 'labelPlacementTop', 'labelPlacementBottom', 'disabled', 'label', 'error']);
    var formControlLabelClasses$1 = formControlLabelClasses;

    const _excluded$1c = ["checked", "className", "componentsProps", "control", "disabled", "disableTypography", "inputRef", "label", "labelPlacement", "name", "onChange", "slotProps", "value"];
    const useUtilityClasses$$ = ownerState => {
      const {
        classes,
        disabled,
        labelPlacement,
        error
      } = ownerState;
      const slots = {
        root: ['root', disabled && 'disabled', `labelPlacement${capitalize(labelPlacement)}`, error && 'error'],
        label: ['label', disabled && 'disabled']
      };
      return composeClasses(slots, getFormControlLabelUtilityClasses, classes);
    };
    const FormControlLabelRoot = styled$1('label', {
      name: 'MuiFormControlLabel',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${formControlLabelClasses$1.label}`]: styles.label
        }, styles.root, styles[`labelPlacement${capitalize(ownerState.labelPlacement)}`]];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      display: 'inline-flex',
      alignItems: 'center',
      cursor: 'pointer',
      // For correct alignment with the text.
      verticalAlign: 'middle',
      WebkitTapHighlightColor: 'transparent',
      marginLeft: -11,
      marginRight: 16,
      // used for row presentation of radio/checkbox
      [`&.${formControlLabelClasses$1.disabled}`]: {
        cursor: 'default'
      }
    }, ownerState.labelPlacement === 'start' && {
      flexDirection: 'row-reverse',
      marginLeft: 16,
      // used for row presentation of radio/checkbox
      marginRight: -11
    }, ownerState.labelPlacement === 'top' && {
      flexDirection: 'column-reverse',
      marginLeft: 16
    }, ownerState.labelPlacement === 'bottom' && {
      flexDirection: 'column',
      marginLeft: 16
    }, {
      [`& .${formControlLabelClasses$1.label}`]: {
        [`&.${formControlLabelClasses$1.disabled}`]: {
          color: (theme.vars || theme).palette.text.disabled
        }
      }
    }));

    /**
     * Drop-in replacement of the `Radio`, `Switch` and `Checkbox` component.
     * Use this component if you want to display an extra label.
     */
    const FormControlLabel = /*#__PURE__*/React__namespace.forwardRef(function FormControlLabel(inProps, ref) {
      var _slotProps$typography;
      const props = useThemeProps({
        props: inProps,
        name: 'MuiFormControlLabel'
      });
      const {
          className,
          componentsProps = {},
          control,
          disabled: disabledProp,
          disableTypography,
          label: labelProp,
          labelPlacement = 'end',
          slotProps = {}
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1c);
      const muiFormControl = useFormControl();
      let disabled = disabledProp;
      if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {
        disabled = control.props.disabled;
      }
      if (typeof disabled === 'undefined' && muiFormControl) {
        disabled = muiFormControl.disabled;
      }
      const controlProps = {
        disabled
      };
      ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(key => {
        if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {
          controlProps[key] = props[key];
        }
      });
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ['error']
      });
      const ownerState = _extends({}, props, {
        disabled,
        labelPlacement,
        error: fcs.error
      });
      const classes = useUtilityClasses$$(ownerState);
      const typographySlotProps = (_slotProps$typography = slotProps.typography) != null ? _slotProps$typography : componentsProps.typography;
      let label = labelProp;
      if (label != null && label.type !== Typography$1 && !disableTypography) {
        label = /*#__PURE__*/jsxRuntime.exports.jsx(Typography$1, _extends({
          component: "span"
        }, typographySlotProps, {
          className: clsx(classes.label, typographySlotProps == null ? void 0 : typographySlotProps.className),
          children: label
        }));
      }
      return /*#__PURE__*/jsxRuntime.exports.jsxs(FormControlLabelRoot, _extends({
        className: clsx(classes.root, className),
        ownerState: ownerState,
        ref: ref
      }, other, {
        children: [/*#__PURE__*/React__namespace.cloneElement(control, controlProps), label]
      }));
    });
    FormControlLabel.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * If `true`, the component appears selected.
       */
      checked: PropTypes.bool,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The props used for each slot inside.
       * @default {}
       */
      componentsProps: PropTypes.shape({
        typography: PropTypes.object
      }),
      /**
       * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.
       */
      control: PropTypes.element.isRequired,
      /**
       * If `true`, the control is disabled.
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, the label is rendered as it is passed without an additional typography node.
       */
      disableTypography: PropTypes.bool,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,
      /**
       * A text or an element to be used in an enclosing label element.
       */
      label: PropTypes.node,
      /**
       * The position of the label.
       * @default 'end'
       */
      labelPlacement: PropTypes.oneOf(['bottom', 'end', 'start', 'top']),
      /**
       * @ignore
       */
      name: PropTypes.string,
      /**
       * Callback fired when the state is changed.
       *
       * @param {React.SyntheticEvent} event The event source of the callback.
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: PropTypes.func,
      /**
       * The props used for each slot inside.
       * @default {}
       */
      slotProps: PropTypes.shape({
        typography: PropTypes.object
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The value of the component.
       */
      value: PropTypes.any
    } ;
    var FormControlLabel$1 = FormControlLabel;

    function getFormGroupUtilityClass(slot) {
      return generateUtilityClass('MuiFormGroup', slot);
    }
    generateUtilityClasses('MuiFormGroup', ['root', 'row', 'error']);

    const _excluded$1b = ["className", "row"];
    const useUtilityClasses$_ = ownerState => {
      const {
        classes,
        row,
        error
      } = ownerState;
      const slots = {
        root: ['root', row && 'row', error && 'error']
      };
      return composeClasses(slots, getFormGroupUtilityClass, classes);
    };
    const FormGroupRoot = styled$1('div', {
      name: 'MuiFormGroup',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.row && styles.row];
      }
    })(({
      ownerState
    }) => _extends({
      display: 'flex',
      flexDirection: 'column',
      flexWrap: 'wrap'
    }, ownerState.row && {
      flexDirection: 'row'
    }));

    /**
     * `FormGroup` wraps controls such as `Checkbox` and `Switch`.
     * It provides compact row layout.
     * For the `Radio`, you should be using the `RadioGroup` component instead of this one.
     */
    const FormGroup = /*#__PURE__*/React__namespace.forwardRef(function FormGroup(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiFormGroup'
      });
      const {
          className,
          row = false
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1b);
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ['error']
      });
      const ownerState = _extends({}, props, {
        row,
        error: fcs.error
      });
      const classes = useUtilityClasses$_(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(FormGroupRoot, _extends({
        className: clsx(classes.root, className),
        ownerState: ownerState,
        ref: ref
      }, other));
    });
    FormGroup.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * Display group of elements in a compact row.
       * @default false
       */
      row: PropTypes.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var FormGroup$1 = FormGroup;

    function getFormHelperTextUtilityClasses(slot) {
      return generateUtilityClass('MuiFormHelperText', slot);
    }
    const formHelperTextClasses = generateUtilityClasses('MuiFormHelperText', ['root', 'error', 'disabled', 'sizeSmall', 'sizeMedium', 'contained', 'focused', 'filled', 'required']);
    var formHelperTextClasses$1 = formHelperTextClasses;

    var _span$3;
    const _excluded$1a = ["children", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"];
    const useUtilityClasses$Z = ownerState => {
      const {
        classes,
        contained,
        size,
        disabled,
        error,
        filled,
        focused,
        required
      } = ownerState;
      const slots = {
        root: ['root', disabled && 'disabled', error && 'error', size && `size${capitalize(size)}`, contained && 'contained', focused && 'focused', filled && 'filled', required && 'required']
      };
      return composeClasses(slots, getFormHelperTextUtilityClasses, classes);
    };
    const FormHelperTextRoot = styled$1('p', {
      name: 'MuiFormHelperText',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.size && styles[`size${capitalize(ownerState.size)}`], ownerState.contained && styles.contained, ownerState.filled && styles.filled];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      color: (theme.vars || theme).palette.text.secondary
    }, theme.typography.caption, {
      textAlign: 'left',
      marginTop: 3,
      marginRight: 0,
      marginBottom: 0,
      marginLeft: 0,
      [`&.${formHelperTextClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled
      },
      [`&.${formHelperTextClasses$1.error}`]: {
        color: (theme.vars || theme).palette.error.main
      }
    }, ownerState.size === 'small' && {
      marginTop: 4
    }, ownerState.contained && {
      marginLeft: 14,
      marginRight: 14
    }));
    const FormHelperText = /*#__PURE__*/React__namespace.forwardRef(function FormHelperText(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiFormHelperText'
      });
      const {
          children,
          className,
          component = 'p'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$1a);
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ['variant', 'size', 'disabled', 'error', 'filled', 'focused', 'required']
      });
      const ownerState = _extends({}, props, {
        component,
        contained: fcs.variant === 'filled' || fcs.variant === 'outlined',
        variant: fcs.variant,
        size: fcs.size,
        disabled: fcs.disabled,
        error: fcs.error,
        filled: fcs.filled,
        focused: fcs.focused,
        required: fcs.required
      });
      const classes = useUtilityClasses$Z(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(FormHelperTextRoot, _extends({
        as: component,
        ownerState: ownerState,
        className: clsx(classes.root, className),
        ref: ref
      }, other, {
        children: children === ' ' ? // notranslate needed while Google Translate will not fix zero-width space issue
        _span$3 || (_span$3 = /*#__PURE__*/jsxRuntime.exports.jsx("span", {
          className: "notranslate",
          children: "\u200B"
        })) : children
      }));
    });
    FormHelperText.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       *
       * If `' '` is provided, the component reserves one line height for displaying a future message.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * If `true`, the helper text should be displayed in a disabled state.
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, helper text should be displayed in an error state.
       */
      error: PropTypes.bool,
      /**
       * If `true`, the helper text should use filled classes key.
       */
      filled: PropTypes.bool,
      /**
       * If `true`, the helper text should use focused classes key.
       */
      focused: PropTypes.bool,
      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: PropTypes.oneOf(['dense']),
      /**
       * If `true`, the helper text should use required classes key.
       */
      required: PropTypes.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The variant to use.
       */
      variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['filled', 'outlined', 'standard']), PropTypes.string])
    } ;
    var FormHelperText$1 = FormHelperText;

    function getFormLabelUtilityClasses(slot) {
      return generateUtilityClass('MuiFormLabel', slot);
    }
    const formLabelClasses = generateUtilityClasses('MuiFormLabel', ['root', 'colorSecondary', 'focused', 'disabled', 'error', 'filled', 'required', 'asterisk']);
    var formLabelClasses$1 = formLabelClasses;

    const _excluded$19 = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];
    const useUtilityClasses$Y = ownerState => {
      const {
        classes,
        color,
        focused,
        disabled,
        error,
        filled,
        required
      } = ownerState;
      const slots = {
        root: ['root', `color${capitalize(color)}`, disabled && 'disabled', error && 'error', filled && 'filled', focused && 'focused', required && 'required'],
        asterisk: ['asterisk', error && 'error']
      };
      return composeClasses(slots, getFormLabelUtilityClasses, classes);
    };
    const FormLabelRoot = styled$1('label', {
      name: 'MuiFormLabel',
      slot: 'Root',
      overridesResolver: ({
        ownerState
      }, styles) => {
        return _extends({}, styles.root, ownerState.color === 'secondary' && styles.colorSecondary, ownerState.filled && styles.filled);
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      color: (theme.vars || theme).palette.text.secondary
    }, theme.typography.body1, {
      lineHeight: '1.4375em',
      padding: 0,
      position: 'relative',
      [`&.${formLabelClasses$1.focused}`]: {
        color: (theme.vars || theme).palette[ownerState.color].main
      },
      [`&.${formLabelClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled
      },
      [`&.${formLabelClasses$1.error}`]: {
        color: (theme.vars || theme).palette.error.main
      }
    }));
    const AsteriskComponent = styled$1('span', {
      name: 'MuiFormLabel',
      slot: 'Asterisk',
      overridesResolver: (props, styles) => styles.asterisk
    })(({
      theme
    }) => ({
      [`&.${formLabelClasses$1.error}`]: {
        color: (theme.vars || theme).palette.error.main
      }
    }));
    const FormLabel = /*#__PURE__*/React__namespace.forwardRef(function FormLabel(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiFormLabel'
      });
      const {
          children,
          className,
          component = 'label'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$19);
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ['color', 'required', 'focused', 'disabled', 'error', 'filled']
      });
      const ownerState = _extends({}, props, {
        color: fcs.color || 'primary',
        component,
        disabled: fcs.disabled,
        error: fcs.error,
        filled: fcs.filled,
        focused: fcs.focused,
        required: fcs.required
      });
      const classes = useUtilityClasses$Y(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsxs(FormLabelRoot, _extends({
        as: component,
        ownerState: ownerState,
        className: clsx(classes.root, className),
        ref: ref
      }, other, {
        children: [children, fcs.required && /*#__PURE__*/jsxRuntime.exports.jsxs(AsteriskComponent, {
          ownerState: ownerState,
          "aria-hidden": true,
          className: classes.asterisk,
          children: ["\u2009", '*']
        })]
      }));
    });
    FormLabel.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
       */
      color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['error', 'info', 'primary', 'secondary', 'success', 'warning']), PropTypes.string]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * If `true`, the label should be displayed in a disabled state.
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, the label is displayed in an error state.
       */
      error: PropTypes.bool,
      /**
       * If `true`, the label should use filled classes key.
       */
      filled: PropTypes.bool,
      /**
       * If `true`, the input of this label is focused (used by `FormGroup` components).
       */
      focused: PropTypes.bool,
      /**
       * If `true`, the label will indicate that the `input` is required.
       */
      required: PropTypes.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var FormLabel$1 = FormLabel;

    /**
     * @ignore - internal component.
     */
    const GridContext = /*#__PURE__*/React__namespace.createContext();
    {
      GridContext.displayName = 'GridContext';
    }
    var GridContext$1 = GridContext;

    function getGridUtilityClass(slot) {
      return generateUtilityClass('MuiGrid', slot);
    }
    const SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    const DIRECTIONS = ['column-reverse', 'column', 'row-reverse', 'row'];
    const WRAPS = ['nowrap', 'wrap-reverse', 'wrap'];
    const GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
    const gridClasses = generateUtilityClasses('MuiGrid', ['root', 'container', 'item', 'zeroMinWidth',
    // spacings
    ...SPACINGS.map(spacing => `spacing-xs-${spacing}`),
    // direction values
    ...DIRECTIONS.map(direction => `direction-xs-${direction}`),
    // wrap values
    ...WRAPS.map(wrap => `wrap-xs-${wrap}`),
    // grid sizes for all breakpoints
    ...GRID_SIZES.map(size => `grid-xs-${size}`), ...GRID_SIZES.map(size => `grid-sm-${size}`), ...GRID_SIZES.map(size => `grid-md-${size}`), ...GRID_SIZES.map(size => `grid-lg-${size}`), ...GRID_SIZES.map(size => `grid-xl-${size}`)]);

    const _excluded$18 = ["className", "columns", "columnSpacing", "component", "container", "direction", "item", "rowSpacing", "spacing", "wrap", "zeroMinWidth"];
    function getOffset(val) {
      const parse = parseFloat(val);
      return `${parse}${String(val).replace(String(parse), '') || 'px'}`;
    }
    function generateGrid({
      theme,
      ownerState
    }) {
      let size;
      return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {
        // Use side effect over immutability for better performance.
        let styles = {};
        if (ownerState[breakpoint]) {
          size = ownerState[breakpoint];
        }
        if (!size) {
          return globalStyles;
        }
        if (size === true) {
          // For the auto layouting
          styles = {
            flexBasis: 0,
            flexGrow: 1,
            maxWidth: '100%'
          };
        } else if (size === 'auto') {
          styles = {
            flexBasis: 'auto',
            flexGrow: 0,
            flexShrink: 0,
            maxWidth: 'none',
            width: 'auto'
          };
        } else {
          const columnsBreakpointValues = resolveBreakpointValues({
            values: ownerState.columns,
            breakpoints: theme.breakpoints.values
          });
          const columnValue = typeof columnsBreakpointValues === 'object' ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;
          if (columnValue === undefined || columnValue === null) {
            return globalStyles;
          }
          // Keep 7 significant numbers.
          const width = `${Math.round(size / columnValue * 10e7) / 10e5}%`;
          let more = {};
          if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {
            const themeSpacing = theme.spacing(ownerState.columnSpacing);
            if (themeSpacing !== '0px') {
              const fullWidth = `calc(${width} + ${getOffset(themeSpacing)})`;
              more = {
                flexBasis: fullWidth,
                maxWidth: fullWidth
              };
            }
          }

          // Close to the bootstrap implementation:
          // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41
          styles = _extends({
            flexBasis: width,
            flexGrow: 0,
            maxWidth: width
          }, more);
        }

        // No need for a media query for the first size.
        if (theme.breakpoints.values[breakpoint] === 0) {
          Object.assign(globalStyles, styles);
        } else {
          globalStyles[theme.breakpoints.up(breakpoint)] = styles;
        }
        return globalStyles;
      }, {});
    }
    function generateDirection({
      theme,
      ownerState
    }) {
      const directionValues = resolveBreakpointValues({
        values: ownerState.direction,
        breakpoints: theme.breakpoints.values
      });
      return handleBreakpoints({
        theme
      }, directionValues, propValue => {
        const output = {
          flexDirection: propValue
        };
        if (propValue.indexOf('column') === 0) {
          output[`& > .${gridClasses.item}`] = {
            maxWidth: 'none'
          };
        }
        return output;
      });
    }

    /**
     * Extracts zero value breakpoint keys before a non-zero value breakpoint key.
     * @example { xs: 0, sm: 0, md: 2, lg: 0, xl: 0 } or [0, 0, 2, 0, 0]
     * @returns [xs, sm]
     */
    function extractZeroValueBreakpointKeys({
      breakpoints,
      values
    }) {
      let nonZeroKey = '';
      Object.keys(values).forEach(key => {
        if (nonZeroKey !== '') {
          return;
        }
        if (values[key] !== 0) {
          nonZeroKey = key;
        }
      });
      const sortedBreakpointKeysByValue = Object.keys(breakpoints).sort((a, b) => {
        return breakpoints[a] - breakpoints[b];
      });
      return sortedBreakpointKeysByValue.slice(0, sortedBreakpointKeysByValue.indexOf(nonZeroKey));
    }
    function generateRowGap({
      theme,
      ownerState
    }) {
      const {
        container,
        rowSpacing
      } = ownerState;
      let styles = {};
      if (container && rowSpacing !== 0) {
        const rowSpacingValues = resolveBreakpointValues({
          values: rowSpacing,
          breakpoints: theme.breakpoints.values
        });
        let zeroValueBreakpointKeys;
        if (typeof rowSpacingValues === 'object') {
          zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
            breakpoints: theme.breakpoints.values,
            values: rowSpacingValues
          });
        }
        styles = handleBreakpoints({
          theme
        }, rowSpacingValues, (propValue, breakpoint) => {
          var _zeroValueBreakpointK;
          const themeSpacing = theme.spacing(propValue);
          if (themeSpacing !== '0px') {
            return {
              marginTop: `-${getOffset(themeSpacing)}`,
              [`& > .${gridClasses.item}`]: {
                paddingTop: getOffset(themeSpacing)
              }
            };
          }
          if ((_zeroValueBreakpointK = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK.includes(breakpoint)) {
            return {};
          }
          return {
            marginTop: 0,
            [`& > .${gridClasses.item}`]: {
              paddingTop: 0
            }
          };
        });
      }
      return styles;
    }
    function generateColumnGap({
      theme,
      ownerState
    }) {
      const {
        container,
        columnSpacing
      } = ownerState;
      let styles = {};
      if (container && columnSpacing !== 0) {
        const columnSpacingValues = resolveBreakpointValues({
          values: columnSpacing,
          breakpoints: theme.breakpoints.values
        });
        let zeroValueBreakpointKeys;
        if (typeof columnSpacingValues === 'object') {
          zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
            breakpoints: theme.breakpoints.values,
            values: columnSpacingValues
          });
        }
        styles = handleBreakpoints({
          theme
        }, columnSpacingValues, (propValue, breakpoint) => {
          var _zeroValueBreakpointK2;
          const themeSpacing = theme.spacing(propValue);
          if (themeSpacing !== '0px') {
            return {
              width: `calc(100% + ${getOffset(themeSpacing)})`,
              marginLeft: `-${getOffset(themeSpacing)}`,
              [`& > .${gridClasses.item}`]: {
                paddingLeft: getOffset(themeSpacing)
              }
            };
          }
          if ((_zeroValueBreakpointK2 = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK2.includes(breakpoint)) {
            return {};
          }
          return {
            width: '100%',
            marginLeft: 0,
            [`& > .${gridClasses.item}`]: {
              paddingLeft: 0
            }
          };
        });
      }
      return styles;
    }
    function resolveSpacingStyles(spacing, breakpoints, styles = {}) {
      // undefined/null or `spacing` <= 0
      if (!spacing || spacing <= 0) {
        return [];
      }
      // in case of string/number `spacing`
      if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {
        return [styles[`spacing-xs-${String(spacing)}`]];
      }
      // in case of object `spacing`
      const spacingStyles = [];
      breakpoints.forEach(breakpoint => {
        const value = spacing[breakpoint];
        if (Number(value) > 0) {
          spacingStyles.push(styles[`spacing-${breakpoint}-${String(value)}`]);
        }
      });
      return spacingStyles;
    }

    // Default CSS values
    // flex: '0 1 auto',
    // flexDirection: 'row',
    // alignItems: 'flex-start',
    // flexWrap: 'nowrap',
    // justifyContent: 'flex-start',
    const GridRoot = styled$1('div', {
      name: 'MuiGrid',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        const {
          container,
          direction,
          item,
          spacing,
          wrap,
          zeroMinWidth,
          breakpoints
        } = ownerState;
        let spacingStyles = [];

        // in case of grid item
        if (container) {
          spacingStyles = resolveSpacingStyles(spacing, breakpoints, styles);
        }
        const breakpointsStyles = [];
        breakpoints.forEach(breakpoint => {
          const value = ownerState[breakpoint];
          if (value) {
            breakpointsStyles.push(styles[`grid-${breakpoint}-${String(value)}`]);
          }
        });
        return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth, ...spacingStyles, direction !== 'row' && styles[`direction-xs-${String(direction)}`], wrap !== 'wrap' && styles[`wrap-xs-${String(wrap)}`], ...breakpointsStyles];
      }
    })(({
      ownerState
    }) => _extends({
      boxSizing: 'border-box'
    }, ownerState.container && {
      display: 'flex',
      flexWrap: 'wrap',
      width: '100%'
    }, ownerState.item && {
      margin: 0 // For instance, it's useful when used with a `figure` element.
    }, ownerState.zeroMinWidth && {
      minWidth: 0
    }, ownerState.wrap !== 'wrap' && {
      flexWrap: ownerState.wrap
    }), generateDirection, generateRowGap, generateColumnGap, generateGrid);
    function resolveSpacingClasses(spacing, breakpoints) {
      // undefined/null or `spacing` <= 0
      if (!spacing || spacing <= 0) {
        return [];
      }
      // in case of string/number `spacing`
      if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {
        return [`spacing-xs-${String(spacing)}`];
      }
      // in case of object `spacing`
      const classes = [];
      breakpoints.forEach(breakpoint => {
        const value = spacing[breakpoint];
        if (Number(value) > 0) {
          const className = `spacing-${breakpoint}-${String(value)}`;
          classes.push(className);
        }
      });
      return classes;
    }
    const useUtilityClasses$X = ownerState => {
      const {
        classes,
        container,
        direction,
        item,
        spacing,
        wrap,
        zeroMinWidth,
        breakpoints
      } = ownerState;
      let spacingClasses = [];

      // in case of grid item
      if (container) {
        spacingClasses = resolveSpacingClasses(spacing, breakpoints);
      }
      const breakpointsClasses = [];
      breakpoints.forEach(breakpoint => {
        const value = ownerState[breakpoint];
        if (value) {
          breakpointsClasses.push(`grid-${breakpoint}-${String(value)}`);
        }
      });
      const slots = {
        root: ['root', container && 'container', item && 'item', zeroMinWidth && 'zeroMinWidth', ...spacingClasses, direction !== 'row' && `direction-xs-${String(direction)}`, wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, ...breakpointsClasses]
      };
      return composeClasses(slots, getGridUtilityClass, classes);
    };
    const Grid = /*#__PURE__*/React__namespace.forwardRef(function Grid(inProps, ref) {
      const themeProps = useThemeProps({
        props: inProps,
        name: 'MuiGrid'
      });
      const {
        breakpoints
      } = useTheme();
      const props = extendSxProp(themeProps);
      const {
          className,
          columns: columnsProp,
          columnSpacing: columnSpacingProp,
          component = 'div',
          container = false,
          direction = 'row',
          item = false,
          rowSpacing: rowSpacingProp,
          spacing = 0,
          wrap = 'wrap',
          zeroMinWidth = false
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$18);
      const rowSpacing = rowSpacingProp || spacing;
      const columnSpacing = columnSpacingProp || spacing;
      const columnsContext = React__namespace.useContext(GridContext$1);

      // columns set with default breakpoint unit of 12
      const columns = container ? columnsProp || 12 : columnsContext;
      const breakpointsValues = {};
      const otherFiltered = _extends({}, other);
      breakpoints.keys.forEach(breakpoint => {
        if (other[breakpoint] != null) {
          breakpointsValues[breakpoint] = other[breakpoint];
          delete otherFiltered[breakpoint];
        }
      });
      const ownerState = _extends({}, props, {
        columns,
        container,
        direction,
        item,
        rowSpacing,
        columnSpacing,
        wrap,
        zeroMinWidth,
        spacing
      }, breakpointsValues, {
        breakpoints: breakpoints.keys
      });
      const classes = useUtilityClasses$X(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(GridContext$1.Provider, {
        value: columns,
        children: /*#__PURE__*/jsxRuntime.exports.jsx(GridRoot, _extends({
          ownerState: ownerState,
          className: clsx(classes.root, className),
          as: component,
          ref: ref
        }, otherFiltered))
      });
    });
    Grid.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The number of columns.
       * @default 12
       */
      columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number, PropTypes.object]),
      /**
       * Defines the horizontal space between the type `item` components.
       * It overrides the value of the `spacing` prop.
       */
      columnSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * If `true`, the component will have the flex *container* behavior.
       * You should be wrapping *items* with a *container*.
       * @default false
       */
      container: PropTypes.bool,
      /**
       * Defines the `flex-direction` style property.
       * It is applied for all screen sizes.
       * @default 'row'
       */
      direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),
      /**
       * If `true`, the component will have the flex *item* behavior.
       * You should be wrapping *items* with a *container*.
       * @default false
       */
      item: PropTypes.bool,
      /**
       * If a number, it sets the number of columns the grid item uses.
       * It can't be greater than the total number of columns of the container (12 by default).
       * If 'auto', the grid item's width matches its content.
       * If false, the prop is ignored.
       * If true, the grid item's width grows to use the space available in the grid container.
       * The value is applied for the `lg` breakpoint and wider screens if not overridden.
       * @default false
       */
      lg: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),
      /**
       * If a number, it sets the number of columns the grid item uses.
       * It can't be greater than the total number of columns of the container (12 by default).
       * If 'auto', the grid item's width matches its content.
       * If false, the prop is ignored.
       * If true, the grid item's width grows to use the space available in the grid container.
       * The value is applied for the `md` breakpoint and wider screens if not overridden.
       * @default false
       */
      md: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),
      /**
       * Defines the vertical space between the type `item` components.
       * It overrides the value of the `spacing` prop.
       */
      rowSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
      /**
       * If a number, it sets the number of columns the grid item uses.
       * It can't be greater than the total number of columns of the container (12 by default).
       * If 'auto', the grid item's width matches its content.
       * If false, the prop is ignored.
       * If true, the grid item's width grows to use the space available in the grid container.
       * The value is applied for the `sm` breakpoint and wider screens if not overridden.
       * @default false
       */
      sm: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),
      /**
       * Defines the space between the type `item` components.
       * It can only be used on a type `container` component.
       * @default 0
       */
      spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * Defines the `flex-wrap` style property.
       * It's applied for all screen sizes.
       * @default 'wrap'
       */
      wrap: PropTypes.oneOf(['nowrap', 'wrap-reverse', 'wrap']),
      /**
       * If a number, it sets the number of columns the grid item uses.
       * It can't be greater than the total number of columns of the container (12 by default).
       * If 'auto', the grid item's width matches its content.
       * If false, the prop is ignored.
       * If true, the grid item's width grows to use the space available in the grid container.
       * The value is applied for the `xl` breakpoint and wider screens if not overridden.
       * @default false
       */
      xl: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),
      /**
       * If a number, it sets the number of columns the grid item uses.
       * It can't be greater than the total number of columns of the container (12 by default).
       * If 'auto', the grid item's width matches its content.
       * If false, the prop is ignored.
       * If true, the grid item's width grows to use the space available in the grid container.
       * The value is applied for all the screen sizes with the lowest priority.
       * @default false
       */
      xs: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),
      /**
       * If `true`, it sets `min-width: 0` on the item.
       * Refer to the limitations section of the documentation to better understand the use case.
       * @default false
       */
      zeroMinWidth: PropTypes.bool
    } ;
    {
      const requireProp = requirePropFactory('Grid', Grid);
      // eslint-disable-next-line no-useless-concat
      Grid['propTypes' + ''] = _extends({}, Grid.propTypes, {
        direction: requireProp('container'),
        lg: requireProp('item'),
        md: requireProp('item'),
        sm: requireProp('item'),
        spacing: requireProp('container'),
        wrap: requireProp('container'),
        xs: requireProp('item'),
        zeroMinWidth: requireProp('item')
      });
    }
    var Grid$1 = Grid;

    const _excluded$17 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
    function getScale(value) {
      return `scale(${value}, ${value ** 2})`;
    }
    const styles$2 = {
      entering: {
        opacity: 1,
        transform: getScale(1)
      },
      entered: {
        opacity: 1,
        transform: 'none'
      }
    };

    /*
     TODO v6: remove
     Conditionally apply a workaround for the CSS transition bug in Safari 15.4 / WebKit browsers.
     */
    const isWebKit154 = typeof navigator !== 'undefined' && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);

    /**
     * The Grow transition is used by the [Tooltip](/material-ui/react-tooltip/) and
     * [Popover](/material-ui/react-popover/) components.
     * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
     */
    const Grow = /*#__PURE__*/React__namespace.forwardRef(function Grow(props, ref) {
      const {
          addEndListener,
          appear = true,
          children,
          easing,
          in: inProp,
          onEnter,
          onEntered,
          onEntering,
          onExit,
          onExited,
          onExiting,
          style,
          timeout = 'auto',
          // eslint-disable-next-line react/prop-types
          TransitionComponent = Transition$1
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$17);
      const timer = React__namespace.useRef();
      const autoTimeout = React__namespace.useRef();
      const theme = useTheme();
      const nodeRef = React__namespace.useRef(null);
      const handleRef = useForkRef(nodeRef, children.ref, ref);
      const normalizedTransitionCallback = callback => maybeIsAppearing => {
        if (callback) {
          const node = nodeRef.current;

          // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
          if (maybeIsAppearing === undefined) {
            callback(node);
          } else {
            callback(node, maybeIsAppearing);
          }
        }
      };
      const handleEntering = normalizedTransitionCallback(onEntering);
      const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
        reflow(node); // So the animation always start from the start.

        const {
          duration: transitionDuration,
          delay,
          easing: transitionTimingFunction
        } = getTransitionProps({
          style,
          timeout,
          easing
        }, {
          mode: 'enter'
        });
        let duration;
        if (timeout === 'auto') {
          duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
          autoTimeout.current = duration;
        } else {
          duration = transitionDuration;
        }
        node.style.transition = [theme.transitions.create('opacity', {
          duration,
          delay
        }), theme.transitions.create('transform', {
          duration: isWebKit154 ? duration : duration * 0.666,
          delay,
          easing: transitionTimingFunction
        })].join(',');
        if (onEnter) {
          onEnter(node, isAppearing);
        }
      });
      const handleEntered = normalizedTransitionCallback(onEntered);
      const handleExiting = normalizedTransitionCallback(onExiting);
      const handleExit = normalizedTransitionCallback(node => {
        const {
          duration: transitionDuration,
          delay,
          easing: transitionTimingFunction
        } = getTransitionProps({
          style,
          timeout,
          easing
        }, {
          mode: 'exit'
        });
        let duration;
        if (timeout === 'auto') {
          duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
          autoTimeout.current = duration;
        } else {
          duration = transitionDuration;
        }
        node.style.transition = [theme.transitions.create('opacity', {
          duration,
          delay
        }), theme.transitions.create('transform', {
          duration: isWebKit154 ? duration : duration * 0.666,
          delay: isWebKit154 ? delay : delay || duration * 0.333,
          easing: transitionTimingFunction
        })].join(',');
        node.style.opacity = 0;
        node.style.transform = getScale(0.75);
        if (onExit) {
          onExit(node);
        }
      });
      const handleExited = normalizedTransitionCallback(onExited);
      const handleAddEndListener = next => {
        if (timeout === 'auto') {
          timer.current = setTimeout(next, autoTimeout.current || 0);
        }
        if (addEndListener) {
          // Old call signature before `react-transition-group` implemented `nodeRef`
          addEndListener(nodeRef.current, next);
        }
      };
      React__namespace.useEffect(() => {
        return () => {
          clearTimeout(timer.current);
        };
      }, []);
      return /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
        appear: appear,
        in: inProp,
        nodeRef: nodeRef,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: handleAddEndListener,
        timeout: timeout === 'auto' ? null : timeout
      }, other, {
        children: (state, childProps) => {
          return /*#__PURE__*/React__namespace.cloneElement(children, _extends({
            style: _extends({
              opacity: 0,
              transform: getScale(0.75),
              visibility: state === 'exited' && !inProp ? 'hidden' : undefined
            }, styles$2[state], style, children.props.style),
            ref: handleRef
          }, childProps));
        }
      }));
    });
    Grow.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * Add a custom transition end trigger. Called with the transitioning DOM
       * node and a done callback. Allows for more fine grained transition end
       * logic. Note: Timeouts are still used as a fallback if provided.
       */
      addEndListener: PropTypes.func,
      /**
       * Perform the enter transition when it first mounts if `in` is also `true`.
       * Set this to `false` to disable this behavior.
       * @default true
       */
      appear: PropTypes.bool,
      /**
       * A single child content element.
       */
      children: elementAcceptingRef$1.isRequired,
      /**
       * The transition timing function.
       * You may specify a single easing or a object containing enter and exit values.
       */
      easing: PropTypes.oneOfType([PropTypes.shape({
        enter: PropTypes.string,
        exit: PropTypes.string
      }), PropTypes.string]),
      /**
       * If `true`, the component will transition in.
       */
      in: PropTypes.bool,
      /**
       * @ignore
       */
      onEnter: PropTypes.func,
      /**
       * @ignore
       */
      onEntered: PropTypes.func,
      /**
       * @ignore
       */
      onEntering: PropTypes.func,
      /**
       * @ignore
       */
      onExit: PropTypes.func,
      /**
       * @ignore
       */
      onExited: PropTypes.func,
      /**
       * @ignore
       */
      onExiting: PropTypes.func,
      /**
       * @ignore
       */
      style: PropTypes.object,
      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       *
       * Set to 'auto' to automatically calculate transition time based on height.
       * @default 'auto'
       */
      timeout: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.shape({
        appear: PropTypes.number,
        enter: PropTypes.number,
        exit: PropTypes.number
      })])
    } ;
    Grow.muiSupportAuto = true;
    var Grow$1 = Grow;

    /**
     * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.
     */

    function useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
      const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';
      const [match, setMatch] = React__namespace.useState(() => {
        if (noSsr && supportMatchMedia) {
          return matchMedia(query).matches;
        }
        if (ssrMatchMedia) {
          return ssrMatchMedia(query).matches;
        }

        // Once the component is mounted, we rely on the
        // event listeners to return the correct matches value.
        return defaultMatches;
      });
      useEnhancedEffect$1(() => {
        let active = true;
        if (!supportMatchMedia) {
          return undefined;
        }
        const queryList = matchMedia(query);
        const updateMatch = () => {
          // Workaround Safari wrong implementation of matchMedia
          // TODO can we remove it?
          // https://github.com/mui/material-ui/pull/17315#issuecomment-528286677
          if (active) {
            setMatch(queryList.matches);
          }
        };
        updateMatch();
        // TODO: Use `addEventListener` once support for Safari < 14 is dropped
        queryList.addListener(updateMatch);
        return () => {
          active = false;
          queryList.removeListener(updateMatch);
        };
      }, [query, matchMedia, supportMatchMedia]);
      return match;
    }

    // eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814
    const maybeReactUseSyncExternalStore = React__namespace['useSyncExternalStore' + ''];
    function useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia) {
      const getDefaultSnapshot = React__namespace.useCallback(() => defaultMatches, [defaultMatches]);
      const getServerSnapshot = React__namespace.useMemo(() => {
        if (ssrMatchMedia !== null) {
          const {
            matches
          } = ssrMatchMedia(query);
          return () => matches;
        }
        return getDefaultSnapshot;
      }, [getDefaultSnapshot, query, ssrMatchMedia]);
      const [getSnapshot, subscribe] = React__namespace.useMemo(() => {
        if (matchMedia === null) {
          return [getDefaultSnapshot, () => () => {}];
        }
        const mediaQueryList = matchMedia(query);
        return [() => mediaQueryList.matches, notify => {
          // TODO: Use `addEventListener` once support for Safari < 14 is dropped
          mediaQueryList.addListener(notify);
          return () => {
            mediaQueryList.removeListener(notify);
          };
        }];
      }, [getDefaultSnapshot, matchMedia, query]);
      const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      return match;
    }
    function useMediaQuery(queryInput, options = {}) {
      const theme = useTheme$2();
      // Wait for jsdom to support the match media feature.
      // All the browsers MUI support have this built-in.
      // This defensive check is here for simplicity.
      // Most of the time, the match media logic isn't central to people tests.
      const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';
      const {
        defaultMatches = false,
        matchMedia = supportMatchMedia ? window.matchMedia : null,
        ssrMatchMedia = null,
        noSsr
      } = getThemeProps({
        name: 'MuiUseMediaQuery',
        props: options,
        theme
      });
      {
        if (typeof queryInput === 'function' && theme === null) {
          console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\n'));
        }
      }
      let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;
      query = query.replace(/^@media( ?)/m, '');

      // TODO: Drop `useMediaQueryOld` and use  `use-sync-external-store` shim in `useMediaQueryNew` once the package is stable
      const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;
      const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);
      {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__namespace.useDebugValue({
          query,
          match
        });
      }
      return match;
    }

    const _excluded$16 = ["initialWidth", "width"];
    const breakpointKeys = ['xs', 'sm', 'md', 'lg', 'xl'];

    // By default, returns true if screen width is the same or greater than the given breakpoint.
    const isWidthUp = (breakpoint, width, inclusive = true) => {
      if (inclusive) {
        return breakpointKeys.indexOf(breakpoint) <= breakpointKeys.indexOf(width);
      }
      return breakpointKeys.indexOf(breakpoint) < breakpointKeys.indexOf(width);
    };

    // By default, returns true if screen width is the same or less than the given breakpoint.
    const isWidthDown = (breakpoint, width, inclusive = false) => {
      if (inclusive) {
        return breakpointKeys.indexOf(width) <= breakpointKeys.indexOf(breakpoint);
      }
      return breakpointKeys.indexOf(width) < breakpointKeys.indexOf(breakpoint);
    };
    const withWidth = (options = {}) => Component => {
      const {
        withTheme: withThemeOption = false,
        noSSR = false,
        initialWidth: initialWidthOption
      } = options;
      function WithWidth(props) {
        const contextTheme = useTheme();
        const theme = props.theme || contextTheme;
        const _getThemeProps = getThemeProps({
            theme,
            name: 'MuiWithWidth',
            props
          }),
          {
            initialWidth,
            width
          } = _getThemeProps,
          other = _objectWithoutPropertiesLoose(_getThemeProps, _excluded$16);
        const [mountedState, setMountedState] = React__namespace.useState(false);
        useEnhancedEffect$1(() => {
          setMountedState(true);
        }, []);

        /**
         * innerWidth |xs      sm      md      lg      xl
         *            |-------|-------|-------|-------|------>
         * width      |  xs   |  sm   |  md   |  lg   |  xl
         */
        const keys = theme.breakpoints.keys.slice().reverse();
        const widthComputed = keys.reduce((output, key) => {
          // eslint-disable-next-line react-hooks/rules-of-hooks
          const matches = useMediaQuery(theme.breakpoints.up(key));
          return !output && matches ? key : output;
        }, null);
        const more = _extends({
          width: width || (mountedState || noSSR ? widthComputed : undefined) || initialWidth || initialWidthOption
        }, withThemeOption ? {
          theme
        } : {}, other);

        // When rendering the component on the server,
        // we have no idea about the client browser screen width.
        // In order to prevent blinks and help the reconciliation of the React tree
        // we are not rendering the child component.
        //
        // An alternative is to use the `initialWidth` property.
        if (more.width === undefined) {
          return null;
        }
        return /*#__PURE__*/jsxRuntime.exports.jsx(Component, _extends({}, more));
      }
      WithWidth.propTypes = {
        /**
         * As `window.innerWidth` is unavailable on the server,
         * we default to rendering an empty component during the first mount.
         * You might want to use a heuristic to approximate
         * the screen width of the client browser screen width.
         *
         * For instance, you could be using the user-agent or the client-hints.
         * https://caniuse.com/#search=client%20hint
         */
        initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
        /**
         * @ignore
         */
        theme: PropTypes.object,
        /**
         * Bypass the width calculation logic.
         */
        width: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])
      } ;
      {
        WithWidth.displayName = `WithWidth(${getDisplayName(Component)})`;
      }
      return WithWidth;
    };
    var withWidth$1 = withWidth;

    function HiddenJs(props) {
      const {
        children,
        only,
        width
      } = props;
      const theme = useTheme();
      let visible = true;

      // `only` check is faster to get out sooner if used.
      if (only) {
        if (Array.isArray(only)) {
          for (let i = 0; i < only.length; i += 1) {
            const breakpoint = only[i];
            if (width === breakpoint) {
              visible = false;
              break;
            }
          }
        } else if (only && width === only) {
          visible = false;
        }
      }

      // Allow `only` to be combined with other props. If already hidden, no need to check others.
      if (visible) {
        // determine visibility based on the smallest size up
        for (let i = 0; i < theme.breakpoints.keys.length; i += 1) {
          const breakpoint = theme.breakpoints.keys[i];
          const breakpointUp = props[`${breakpoint}Up`];
          const breakpointDown = props[`${breakpoint}Down`];
          if (breakpointUp && isWidthUp(breakpoint, width) || breakpointDown && isWidthDown(breakpoint, width)) {
            visible = false;
            break;
          }
        }
      }
      if (!visible) {
        return null;
      }
      return /*#__PURE__*/jsxRuntime.exports.jsx(React__namespace.Fragment, {
        children: children
      });
    }
    HiddenJs.propTypes = {
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * If `true`, screens this size and down are hidden.
       */
      // eslint-disable-next-line react/no-unused-prop-types
      lgDown: PropTypes.bool,
      /**
       * If `true`, screens this size and up are hidden.
       */
      // eslint-disable-next-line react/no-unused-prop-types
      lgUp: PropTypes.bool,
      /**
       * If `true`, screens this size and down are hidden.
       */
      // eslint-disable-next-line react/no-unused-prop-types
      mdDown: PropTypes.bool,
      /**
       * If `true`, screens this size and up are hidden.
       */
      // eslint-disable-next-line react/no-unused-prop-types
      mdUp: PropTypes.bool,
      /**
       * Hide the given breakpoint(s).
       */
      only: PropTypes.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), PropTypes.arrayOf(PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),
      /**
       * If `true`, screens this size and down are hidden.
       */
      // eslint-disable-next-line react/no-unused-prop-types
      smDown: PropTypes.bool,
      /**
       * If `true`, screens this size and up are hidden.
       */
      // eslint-disable-next-line react/no-unused-prop-types
      smUp: PropTypes.bool,
      /**
       * @ignore
       * width prop provided by withWidth decorator.
       */
      width: PropTypes.string.isRequired,
      /**
       * If `true`, screens this size and down are hidden.
       */
      // eslint-disable-next-line react/no-unused-prop-types
      xlDown: PropTypes.bool,
      /**
       * If `true`, screens this size and up are hidden.
       */
      // eslint-disable-next-line react/no-unused-prop-types
      xlUp: PropTypes.bool,
      /**
       * If `true`, screens this size and down are hidden.
       */
      // eslint-disable-next-line react/no-unused-prop-types
      xsDown: PropTypes.bool,
      /**
       * If `true`, screens this size and up are hidden.
       */
      // eslint-disable-next-line react/no-unused-prop-types
      xsUp: PropTypes.bool
    } ;
    {
      HiddenJs.propTypes = exactProp(HiddenJs.propTypes) ;
    }
    var HiddenJs$1 = withWidth$1()(HiddenJs);

    function getHiddenCssUtilityClass(slot) {
      return generateUtilityClass('PrivateHiddenCss', slot);
    }
    generateUtilityClasses('PrivateHiddenCss', ['root', 'xlDown', 'xlUp', 'onlyXl', 'lgDown', 'lgUp', 'onlyLg', 'mdDown', 'mdUp', 'onlyMd', 'smDown', 'smUp', 'onlySm', 'xsDown', 'xsUp', 'onlyXs']);

    const _excluded$15 = ["children", "className", "only"];
    const useUtilityClasses$W = ownerState => {
      const {
        classes,
        breakpoints
      } = ownerState;
      const slots = {
        root: ['root', ...breakpoints.map(({
          breakpoint,
          dir
        }) => {
          return dir === 'only' ? `${dir}${capitalize(breakpoint)}` : `${breakpoint}${capitalize(dir)}`;
        })]
      };
      return composeClasses(slots, getHiddenCssUtilityClass, classes);
    };
    const HiddenCssRoot = styled$1('div', {
      name: 'PrivateHiddenCss',
      slot: 'Root'
    })(({
      theme,
      ownerState
    }) => {
      const hidden = {
        display: 'none'
      };
      return _extends({}, ownerState.breakpoints.map(({
        breakpoint,
        dir
      }) => {
        if (dir === 'only') {
          return {
            [theme.breakpoints.only(breakpoint)]: hidden
          };
        }
        return dir === 'up' ? {
          [theme.breakpoints.up(breakpoint)]: hidden
        } : {
          [theme.breakpoints.down(breakpoint)]: hidden
        };
      }).reduce((r, o) => {
        Object.keys(o).forEach(k => {
          r[k] = o[k];
        });
        return r;
      }, {}));
    });

    /**
     * @ignore - internal component.
     */
    function HiddenCss(props) {
      const {
          children,
          className,
          only
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$15);
      const theme = useTheme();
      {
        const unknownProps = Object.keys(other).filter(propName => {
          const isUndeclaredBreakpoint = !theme.breakpoints.keys.some(breakpoint => {
            return `${breakpoint}Up` === propName || `${breakpoint}Down` === propName;
          });
          return !['classes', 'theme', 'isRtl', 'sx'].includes(propName) && isUndeclaredBreakpoint;
        });
        if (unknownProps.length > 0) {
          console.error(`MUI: Unsupported props received by \`<Hidden implementation="css" />\`: ${unknownProps.join(', ')}. Did you forget to wrap this component in a ThemeProvider declaring these breakpoints?`);
        }
      }
      const breakpoints = [];
      for (let i = 0; i < theme.breakpoints.keys.length; i += 1) {
        const breakpoint = theme.breakpoints.keys[i];
        const breakpointUp = other[`${breakpoint}Up`];
        const breakpointDown = other[`${breakpoint}Down`];
        if (breakpointUp) {
          breakpoints.push({
            breakpoint,
            dir: 'up'
          });
        }
        if (breakpointDown) {
          breakpoints.push({
            breakpoint,
            dir: 'down'
          });
        }
      }
      if (only) {
        const onlyBreakpoints = Array.isArray(only) ? only : [only];
        onlyBreakpoints.forEach(breakpoint => {
          breakpoints.push({
            breakpoint,
            dir: 'only'
          });
        });
      }
      const ownerState = _extends({}, props, {
        breakpoints
      });
      const classes = useUtilityClasses$W(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(HiddenCssRoot, {
        className: clsx(classes.root, className),
        ownerState: ownerState,
        children: children
      });
    }
    HiddenCss.propTypes = {
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * Specify which implementation to use.  'js' is the default, 'css' works better for
       * server-side rendering.
       */
      implementation: PropTypes.oneOf(['js', 'css']),
      /**
       * If `true`, screens this size and down are hidden.
       */
      lgDown: PropTypes.bool,
      /**
       * If `true`, screens this size and up are hidden.
       */
      lgUp: PropTypes.bool,
      /**
       * If `true`, screens this size and down are hidden.
       */
      mdDown: PropTypes.bool,
      /**
       * If `true`, screens this size and up are hidden.
       */
      mdUp: PropTypes.bool,
      /**
       * Hide the given breakpoint(s).
       */
      only: PropTypes.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), PropTypes.arrayOf(PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),
      /**
       * If `true`, screens this size and down are hidden.
       */
      smDown: PropTypes.bool,
      /**
       * If `true`, screens this size and up are hidden.
       */
      smUp: PropTypes.bool,
      /**
       * If `true`, screens this size and down are hidden.
       */
      xlDown: PropTypes.bool,
      /**
       * If `true`, screens this size and up are hidden.
       */
      xlUp: PropTypes.bool,
      /**
       * If `true`, screens this size and down are hidden.
       */
      xsDown: PropTypes.bool,
      /**
       * If `true`, screens this size and up are hidden.
       */
      xsUp: PropTypes.bool
    } ;

    const _excluded$14 = ["implementation", "lgDown", "lgUp", "mdDown", "mdUp", "smDown", "smUp", "xlDown", "xlUp", "xsDown", "xsUp"];
    function Hidden(props) {
      const {
          implementation = 'js',
          lgDown = false,
          lgUp = false,
          mdDown = false,
          mdUp = false,
          smDown = false,
          smUp = false,
          xlDown = false,
          xlUp = false,
          xsDown = false,
          xsUp = false
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$14);
      if (implementation === 'js') {
        return /*#__PURE__*/jsxRuntime.exports.jsx(HiddenJs$1, _extends({
          lgDown: lgDown,
          lgUp: lgUp,
          mdDown: mdDown,
          mdUp: mdUp,
          smDown: smDown,
          smUp: smUp,
          xlDown: xlDown,
          xlUp: xlUp,
          xsDown: xsDown,
          xsUp: xsUp
        }, other));
      }
      return /*#__PURE__*/jsxRuntime.exports.jsx(HiddenCss, _extends({
        lgDown: lgDown,
        lgUp: lgUp,
        mdDown: mdDown,
        mdUp: mdUp,
        smDown: smDown,
        smUp: smUp,
        xlDown: xlDown,
        xlUp: xlUp,
        xsDown: xsDown,
        xsUp: xsUp
      }, other));
    }
    Hidden.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Specify which implementation to use.  'js' is the default, 'css' works better for
       * server-side rendering.
       * @default 'js'
       */
      implementation: PropTypes.oneOf(['css', 'js']),
      /**
       * You can use this prop when choosing the `js` implementation with server-side rendering.
       *
       * As `window.innerWidth` is unavailable on the server,
       * we default to rendering an empty component during the first mount.
       * You might want to use a heuristic to approximate
       * the screen width of the client browser screen width.
       *
       * For instance, you could be using the user-agent or the client-hints.
       * https://caniuse.com/#search=client%20hint
       */
      initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
      /**
       * If `true`, screens this size and down are hidden.
       * @default false
       */
      lgDown: PropTypes.bool,
      /**
       * If `true`, screens this size and up are hidden.
       * @default false
       */
      lgUp: PropTypes.bool,
      /**
       * If `true`, screens this size and down are hidden.
       * @default false
       */
      mdDown: PropTypes.bool,
      /**
       * If `true`, screens this size and up are hidden.
       * @default false
       */
      mdUp: PropTypes.bool,
      /**
       * Hide the given breakpoint(s).
       */
      only: PropTypes.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), PropTypes.arrayOf(PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']).isRequired)]),
      /**
       * If `true`, screens this size and down are hidden.
       * @default false
       */
      smDown: PropTypes.bool,
      /**
       * If `true`, screens this size and up are hidden.
       * @default false
       */
      smUp: PropTypes.bool,
      /**
       * If `true`, screens this size and down are hidden.
       * @default false
       */
      xlDown: PropTypes.bool,
      /**
       * If `true`, screens this size and up are hidden.
       * @default false
       */
      xlUp: PropTypes.bool,
      /**
       * If `true`, screens this size and down are hidden.
       * @default false
       */
      xsDown: PropTypes.bool,
      /**
       * If `true`, screens this size and up are hidden.
       * @default false
       */
      xsUp: PropTypes.bool
    } ;

    const _excluded$13 = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "slotProps", "slots", "type"];
    const useUtilityClasses$V = ownerState => {
      const {
        classes,
        disableUnderline
      } = ownerState;
      const slots = {
        root: ['root', !disableUnderline && 'underline'],
        input: ['input']
      };
      const composedClasses = composeClasses(slots, getInputUtilityClass, classes);
      return _extends({}, classes, composedClasses);
    };
    const InputRoot = styled$1(InputBaseRoot, {
      shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
      name: 'MuiInput',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [...rootOverridesResolver(props, styles), !ownerState.disableUnderline && styles.underline];
      }
    })(({
      theme,
      ownerState
    }) => {
      const light = theme.palette.mode === 'light';
      let bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
      if (theme.vars) {
        bottomLineColor = `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})`;
      }
      return _extends({
        position: 'relative'
      }, ownerState.formControl && {
        'label + &': {
          marginTop: 16
        }
      }, !ownerState.disableUnderline && {
        '&:after': {
          borderBottom: `2px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
          left: 0,
          bottom: 0,
          // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
          content: '""',
          position: 'absolute',
          right: 0,
          transform: 'scaleX(0)',
          transition: theme.transitions.create('transform', {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut
          }),
          pointerEvents: 'none' // Transparent to the hover style.
        },

        [`&.${inputClasses$1.focused}:after`]: {
          // translateX(0) is a workaround for Safari transform scale bug
          // See https://github.com/mui/material-ui/issues/31766
          transform: 'scaleX(1) translateX(0)'
        },
        [`&.${inputClasses$1.error}:after`]: {
          borderBottomColor: (theme.vars || theme).palette.error.main,
          transform: 'scaleX(1)' // error is always underlined in red
        },

        '&:before': {
          borderBottom: `1px solid ${bottomLineColor}`,
          left: 0,
          bottom: 0,
          // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
          content: '"\\00a0"',
          position: 'absolute',
          right: 0,
          transition: theme.transitions.create('border-bottom-color', {
            duration: theme.transitions.duration.shorter
          }),
          pointerEvents: 'none' // Transparent to the hover style.
        },

        [`&:hover:not(.${inputClasses$1.disabled}):before`]: {
          borderBottom: `2px solid ${(theme.vars || theme).palette.text.primary}`,
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            borderBottom: `1px solid ${bottomLineColor}`
          }
        },
        [`&.${inputClasses$1.disabled}:before`]: {
          borderBottomStyle: 'dotted'
        }
      });
    });
    const InputInput = styled$1(InputBaseComponent, {
      name: 'MuiInput',
      slot: 'Input',
      overridesResolver: inputOverridesResolver
    })({});
    const Input = /*#__PURE__*/React__namespace.forwardRef(function Input(inProps, ref) {
      var _ref, _slots$root, _ref2, _slots$input;
      const props = useThemeProps({
        props: inProps,
        name: 'MuiInput'
      });
      const {
          disableUnderline,
          components = {},
          componentsProps: componentsPropsProp,
          fullWidth = false,
          inputComponent = 'input',
          multiline = false,
          slotProps,
          slots = {},
          type = 'text'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$13);
      const classes = useUtilityClasses$V(props);
      const ownerState = {
        disableUnderline
      };
      const inputComponentsProps = {
        root: {
          ownerState
        }
      };
      const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? deepmerge(slotProps != null ? slotProps : componentsPropsProp, inputComponentsProps) : inputComponentsProps;
      const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : InputRoot;
      const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : InputInput;
      return /*#__PURE__*/jsxRuntime.exports.jsx(InputBase$1, _extends({
        slots: {
          root: RootSlot,
          input: InputSlot
        },
        slotProps: componentsProps,
        fullWidth: fullWidth,
        inputComponent: inputComponent,
        multiline: multiline,
        ref: ref,
        type: type
      }, other, {
        classes: classes
      }));
    });
    Input.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * This prop helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: PropTypes.string,
      /**
       * If `true`, the `input` element is focused during the first mount.
       */
      autoFocus: PropTypes.bool,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
       * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
       */
      color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary']), PropTypes.string]),
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `slots` prop.
       * It's recommended to use the `slots` prop instead.
       *
       * @default {}
       */
      components: PropTypes.shape({
        Input: PropTypes.elementType,
        Root: PropTypes.elementType
      }),
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * This prop is an alias for the `slotProps` prop.
       * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
       *
       * @default {}
       */
      componentsProps: PropTypes.shape({
        input: PropTypes.object,
        root: PropTypes.object
      }),
      /**
       * The default value. Use when the component is not controlled.
       */
      defaultValue: PropTypes.any,
      /**
       * If `true`, the component is disabled.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, the `input` will not have an underline.
       */
      disableUnderline: PropTypes.bool,
      /**
       * End `InputAdornment` for this component.
       */
      endAdornment: PropTypes.node,
      /**
       * If `true`, the `input` will indicate an error.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      error: PropTypes.bool,
      /**
       * If `true`, the `input` will take up the full width of its container.
       * @default false
       */
      fullWidth: PropTypes.bool,
      /**
       * The id of the `input` element.
       */
      id: PropTypes.string,
      /**
       * The component used for the `input` element.
       * Either a string to use a HTML element or a component.
       * @default 'input'
       */
      inputComponent: PropTypes.elementType,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       * @default {}
       */
      inputProps: PropTypes.object,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,
      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
       */
      margin: PropTypes.oneOf(['dense', 'none']),
      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      /**
       * Minimum number of rows to display when multiline option is set to true.
       */
      minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      /**
       * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
       * @default false
       */
      multiline: PropTypes.bool,
      /**
       * Name attribute of the `input` element.
       */
      name: PropTypes.string,
      /**
       * Callback fired when the value is changed.
       *
       * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: PropTypes.func,
      /**
       * The short hint displayed in the `input` before the user enters a value.
       */
      placeholder: PropTypes.string,
      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: PropTypes.bool,
      /**
       * If `true`, the `input` element is required.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      required: PropTypes.bool,
      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slotProps: PropTypes.shape({
        input: PropTypes.object,
        root: PropTypes.object
      }),
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `components` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slots: PropTypes.shape({
        input: PropTypes.elementType,
        root: PropTypes.elementType
      }),
      /**
       * Start `InputAdornment` for this component.
       */
      startAdornment: PropTypes.node,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       * @default 'text'
       */
      type: PropTypes.string,
      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: PropTypes.any
    } ;
    Input.muiName = 'Input';
    var Input$1 = Input;

    function getInputAdornmentUtilityClass(slot) {
      return generateUtilityClass('MuiInputAdornment', slot);
    }
    const inputAdornmentClasses = generateUtilityClasses('MuiInputAdornment', ['root', 'filled', 'standard', 'outlined', 'positionStart', 'positionEnd', 'disablePointerEvents', 'hiddenLabel', 'sizeSmall']);
    var inputAdornmentClasses$1 = inputAdornmentClasses;

    var _span$2;
    const _excluded$12 = ["children", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"];
    const overridesResolver$3 = (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[`position${capitalize(ownerState.position)}`], ownerState.disablePointerEvents === true && styles.disablePointerEvents, styles[ownerState.variant]];
    };
    const useUtilityClasses$U = ownerState => {
      const {
        classes,
        disablePointerEvents,
        hiddenLabel,
        position,
        size,
        variant
      } = ownerState;
      const slots = {
        root: ['root', disablePointerEvents && 'disablePointerEvents', position && `position${capitalize(position)}`, variant, hiddenLabel && 'hiddenLabel', size && `size${capitalize(size)}`]
      };
      return composeClasses(slots, getInputAdornmentUtilityClass, classes);
    };
    const InputAdornmentRoot = styled$1('div', {
      name: 'MuiInputAdornment',
      slot: 'Root',
      overridesResolver: overridesResolver$3
    })(({
      theme,
      ownerState
    }) => _extends({
      display: 'flex',
      height: '0.01em',
      // Fix IE11 flexbox alignment. To remove at some point.
      maxHeight: '2em',
      alignItems: 'center',
      whiteSpace: 'nowrap',
      color: (theme.vars || theme).palette.action.active
    }, ownerState.variant === 'filled' && {
      // Styles applied to the root element if `variant="filled"`.
      [`&.${inputAdornmentClasses$1.positionStart}&:not(.${inputAdornmentClasses$1.hiddenLabel})`]: {
        marginTop: 16
      }
    }, ownerState.position === 'start' && {
      // Styles applied to the root element if `position="start"`.
      marginRight: 8
    }, ownerState.position === 'end' && {
      // Styles applied to the root element if `position="end"`.
      marginLeft: 8
    }, ownerState.disablePointerEvents === true && {
      // Styles applied to the root element if `disablePointerEvents={true}`.
      pointerEvents: 'none'
    }));
    const InputAdornment = /*#__PURE__*/React__namespace.forwardRef(function InputAdornment(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiInputAdornment'
      });
      const {
          children,
          className,
          component = 'div',
          disablePointerEvents = false,
          disableTypography = false,
          position,
          variant: variantProp
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$12);
      const muiFormControl = useFormControl() || {};
      let variant = variantProp;
      if (variantProp && muiFormControl.variant) {
        {
          if (variantProp === muiFormControl.variant) {
            console.error('MUI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');
          }
        }
      }
      if (muiFormControl && !variant) {
        variant = muiFormControl.variant;
      }
      const ownerState = _extends({}, props, {
        hiddenLabel: muiFormControl.hiddenLabel,
        size: muiFormControl.size,
        disablePointerEvents,
        position,
        variant
      });
      const classes = useUtilityClasses$U(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(FormControlContext$1.Provider, {
        value: null,
        children: /*#__PURE__*/jsxRuntime.exports.jsx(InputAdornmentRoot, _extends({
          as: component,
          ownerState: ownerState,
          className: clsx(classes.root, className),
          ref: ref
        }, other, {
          children: typeof children === 'string' && !disableTypography ? /*#__PURE__*/jsxRuntime.exports.jsx(Typography$1, {
            color: "text.secondary",
            children: children
          }) : /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
            children: [position === 'start' ? /* notranslate needed while Google Translate will not fix zero-width space issue */_span$2 || (_span$2 = /*#__PURE__*/jsxRuntime.exports.jsx("span", {
              className: "notranslate",
              children: "\u200B"
            })) : null, children]
          })
        }))
      });
    });
    InputAdornment.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component, normally an `IconButton` or string.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * Disable pointer events on the root.
       * This allows for the content of the adornment to focus the `input` on click.
       * @default false
       */
      disablePointerEvents: PropTypes.bool,
      /**
       * If children is a string then disable wrapping in a Typography component.
       * @default false
       */
      disableTypography: PropTypes.bool,
      /**
       * The position this adornment should appear relative to the `Input`.
       */
      position: PropTypes.oneOf(['end', 'start']).isRequired,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The variant to use.
       * Note: If you are using the `TextField` component or the `FormControl` component
       * you do not have to set this manually.
       */
      variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])
    } ;
    var InputAdornment$1 = InputAdornment;

    function getInputLabelUtilityClasses(slot) {
      return generateUtilityClass('MuiInputLabel', slot);
    }
    generateUtilityClasses('MuiInputLabel', ['root', 'focused', 'disabled', 'error', 'required', 'asterisk', 'formControl', 'sizeSmall', 'shrink', 'animated', 'standard', 'filled', 'outlined']);

    const _excluded$11 = ["disableAnimation", "margin", "shrink", "variant", "className"];
    const useUtilityClasses$T = ownerState => {
      const {
        classes,
        formControl,
        size,
        shrink,
        disableAnimation,
        variant,
        required
      } = ownerState;
      const slots = {
        root: ['root', formControl && 'formControl', !disableAnimation && 'animated', shrink && 'shrink', size === 'small' && 'sizeSmall', variant],
        asterisk: [required && 'asterisk']
      };
      const composedClasses = composeClasses(slots, getInputLabelUtilityClasses, classes);
      return _extends({}, classes, composedClasses);
    };
    const InputLabelRoot = styled$1(FormLabel$1, {
      shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
      name: 'MuiInputLabel',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${formLabelClasses$1.asterisk}`]: styles.asterisk
        }, styles.root, ownerState.formControl && styles.formControl, ownerState.size === 'small' && styles.sizeSmall, ownerState.shrink && styles.shrink, !ownerState.disableAnimation && styles.animated, styles[ownerState.variant]];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      display: 'block',
      transformOrigin: 'top left',
      whiteSpace: 'nowrap',
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      maxWidth: '100%'
    }, ownerState.formControl && {
      position: 'absolute',
      left: 0,
      top: 0,
      // slight alteration to spec spacing to match visual spec result
      transform: 'translate(0, 20px) scale(1)'
    }, ownerState.size === 'small' && {
      // Compensation for the `Input.inputSizeSmall` style.
      transform: 'translate(0, 17px) scale(1)'
    }, ownerState.shrink && {
      transform: 'translate(0, -1.5px) scale(0.75)',
      transformOrigin: 'top left',
      maxWidth: '133%'
    }, !ownerState.disableAnimation && {
      transition: theme.transitions.create(['color', 'transform', 'max-width'], {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut
      })
    }, ownerState.variant === 'filled' && _extends({
      // Chrome's autofill feature gives the input field a yellow background.
      // Since the input field is behind the label in the HTML tree,
      // the input field is drawn last and hides the label with an opaque background color.
      // zIndex: 1 will raise the label above opaque background-colors of input.
      zIndex: 1,
      pointerEvents: 'none',
      transform: 'translate(12px, 16px) scale(1)',
      maxWidth: 'calc(100% - 24px)'
    }, ownerState.size === 'small' && {
      transform: 'translate(12px, 13px) scale(1)'
    }, ownerState.shrink && _extends({
      userSelect: 'none',
      pointerEvents: 'auto',
      transform: 'translate(12px, 7px) scale(0.75)',
      maxWidth: 'calc(133% - 24px)'
    }, ownerState.size === 'small' && {
      transform: 'translate(12px, 4px) scale(0.75)'
    })), ownerState.variant === 'outlined' && _extends({
      // see comment above on filled.zIndex
      zIndex: 1,
      pointerEvents: 'none',
      transform: 'translate(14px, 16px) scale(1)',
      maxWidth: 'calc(100% - 24px)'
    }, ownerState.size === 'small' && {
      transform: 'translate(14px, 9px) scale(1)'
    }, ownerState.shrink && {
      userSelect: 'none',
      pointerEvents: 'auto',
      maxWidth: 'calc(133% - 24px)',
      transform: 'translate(14px, -9px) scale(0.75)'
    })));
    const InputLabel = /*#__PURE__*/React__namespace.forwardRef(function InputLabel(inProps, ref) {
      const props = useThemeProps({
        name: 'MuiInputLabel',
        props: inProps
      });
      const {
          disableAnimation = false,
          shrink: shrinkProp,
          className
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$11);
      const muiFormControl = useFormControl();
      let shrink = shrinkProp;
      if (typeof shrink === 'undefined' && muiFormControl) {
        shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
      }
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ['size', 'variant', 'required']
      });
      const ownerState = _extends({}, props, {
        disableAnimation,
        formControl: muiFormControl,
        shrink,
        size: fcs.size,
        variant: fcs.variant,
        required: fcs.required
      });
      const classes = useUtilityClasses$T(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(InputLabelRoot, _extends({
        "data-shrink": shrink,
        ownerState: ownerState,
        ref: ref,
        className: clsx(classes.root, className)
      }, other, {
        classes: classes
      }));
    });
    InputLabel.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
       */
      color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['error', 'info', 'primary', 'secondary', 'success', 'warning']), PropTypes.string]),
      /**
       * If `true`, the transition animation is disabled.
       * @default false
       */
      disableAnimation: PropTypes.bool,
      /**
       * If `true`, the component is disabled.
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, the label is displayed in an error state.
       */
      error: PropTypes.bool,
      /**
       * If `true`, the `input` of this label is focused.
       */
      focused: PropTypes.bool,
      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: PropTypes.oneOf(['dense']),
      /**
       * if `true`, the label will indicate that the `input` is required.
       */
      required: PropTypes.bool,
      /**
       * If `true`, the label is shrunk.
       */
      shrink: PropTypes.bool,
      /**
       * The size of the component.
       * @default 'normal'
       */
      size: PropTypes.oneOf(['normal', 'small']),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The variant to use.
       */
      variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])
    } ;
    var InputLabel$1 = InputLabel;

    /**
     * @ignore - internal component.
     */
    const ListContext = /*#__PURE__*/React__namespace.createContext({});
    {
      ListContext.displayName = 'ListContext';
    }
    var ListContext$1 = ListContext;

    function getListUtilityClass(slot) {
      return generateUtilityClass('MuiList', slot);
    }
    generateUtilityClasses('MuiList', ['root', 'padding', 'dense', 'subheader']);

    const _excluded$10 = ["children", "className", "component", "dense", "disablePadding", "subheader"];
    const useUtilityClasses$S = ownerState => {
      const {
        classes,
        disablePadding,
        dense,
        subheader
      } = ownerState;
      const slots = {
        root: ['root', !disablePadding && 'padding', dense && 'dense', subheader && 'subheader']
      };
      return composeClasses(slots, getListUtilityClass, classes);
    };
    const ListRoot = styled$1('ul', {
      name: 'MuiList',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, !ownerState.disablePadding && styles.padding, ownerState.dense && styles.dense, ownerState.subheader && styles.subheader];
      }
    })(({
      ownerState
    }) => _extends({
      listStyle: 'none',
      margin: 0,
      padding: 0,
      position: 'relative'
    }, !ownerState.disablePadding && {
      paddingTop: 8,
      paddingBottom: 8
    }, ownerState.subheader && {
      paddingTop: 0
    }));
    const List = /*#__PURE__*/React__namespace.forwardRef(function List(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiList'
      });
      const {
          children,
          className,
          component = 'ul',
          dense = false,
          disablePadding = false,
          subheader
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$10);
      const context = React__namespace.useMemo(() => ({
        dense
      }), [dense]);
      const ownerState = _extends({}, props, {
        component,
        dense,
        disablePadding
      });
      const classes = useUtilityClasses$S(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(ListContext$1.Provider, {
        value: context,
        children: /*#__PURE__*/jsxRuntime.exports.jsxs(ListRoot, _extends({
          as: component,
          className: clsx(classes.root, className),
          ref: ref,
          ownerState: ownerState
        }, other, {
          children: [subheader, children]
        }))
      });
    });
    List.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * If `true`, compact vertical padding designed for keyboard and mouse input is used for
       * the list and list items.
       * The prop is available to descendant components as the `dense` context.
       * @default false
       */
      dense: PropTypes.bool,
      /**
       * If `true`, vertical padding is removed from the list.
       * @default false
       */
      disablePadding: PropTypes.bool,
      /**
       * The content of the subheader, normally `ListSubheader`.
       */
      subheader: PropTypes.node,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var List$1 = List;

    function getListItemUtilityClass(slot) {
      return generateUtilityClass('MuiListItem', slot);
    }
    const listItemClasses = generateUtilityClasses('MuiListItem', ['root', 'container', 'focusVisible', 'dense', 'alignItemsFlexStart', 'disabled', 'divider', 'gutters', 'padding', 'button', 'secondaryAction', 'selected']);
    var listItemClasses$1 = listItemClasses;

    const listItemButtonClasses = generateUtilityClasses('MuiListItemButton', ['root', 'focusVisible', 'dense', 'alignItemsFlexStart', 'disabled', 'divider', 'gutters', 'selected']);
    var listItemButtonClasses$1 = listItemButtonClasses;

    function getListItemSecondaryActionClassesUtilityClass(slot) {
      return generateUtilityClass('MuiListItemSecondaryAction', slot);
    }
    generateUtilityClasses('MuiListItemSecondaryAction', ['root', 'disableGutters']);

    const _excluded$$ = ["className"];
    const useUtilityClasses$R = ownerState => {
      const {
        disableGutters,
        classes
      } = ownerState;
      const slots = {
        root: ['root', disableGutters && 'disableGutters']
      };
      return composeClasses(slots, getListItemSecondaryActionClassesUtilityClass, classes);
    };
    const ListItemSecondaryActionRoot = styled$1('div', {
      name: 'MuiListItemSecondaryAction',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.disableGutters && styles.disableGutters];
      }
    })(({
      ownerState
    }) => _extends({
      position: 'absolute',
      right: 16,
      top: '50%',
      transform: 'translateY(-50%)'
    }, ownerState.disableGutters && {
      right: 0
    }));

    /**
     * Must be used as the last child of ListItem to function properly.
     */
    const ListItemSecondaryAction = /*#__PURE__*/React__namespace.forwardRef(function ListItemSecondaryAction(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiListItemSecondaryAction'
      });
      const {
          className
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$$);
      const context = React__namespace.useContext(ListContext$1);
      const ownerState = _extends({}, props, {
        disableGutters: context.disableGutters
      });
      const classes = useUtilityClasses$R(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(ListItemSecondaryActionRoot, _extends({
        className: clsx(classes.root, className),
        ownerState: ownerState,
        ref: ref
      }, other));
    });
    ListItemSecondaryAction.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component, normally an `IconButton` or selection control.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    ListItemSecondaryAction.muiName = 'ListItemSecondaryAction';
    var ListItemSecondaryAction$1 = ListItemSecondaryAction;

    const _excluded$_ = ["className"],
      _excluded2$2 = ["alignItems", "autoFocus", "button", "children", "className", "component", "components", "componentsProps", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "disablePadding", "divider", "focusVisibleClassName", "secondaryAction", "selected", "slotProps", "slots"];
    const overridesResolver$2 = (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.dense && styles.dense, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters, !ownerState.disablePadding && styles.padding, ownerState.button && styles.button, ownerState.hasSecondaryAction && styles.secondaryAction];
    };
    const useUtilityClasses$Q = ownerState => {
      const {
        alignItems,
        button,
        classes,
        dense,
        disabled,
        disableGutters,
        disablePadding,
        divider,
        hasSecondaryAction,
        selected
      } = ownerState;
      const slots = {
        root: ['root', dense && 'dense', !disableGutters && 'gutters', !disablePadding && 'padding', divider && 'divider', disabled && 'disabled', button && 'button', alignItems === 'flex-start' && 'alignItemsFlexStart', hasSecondaryAction && 'secondaryAction', selected && 'selected'],
        container: ['container']
      };
      return composeClasses(slots, getListItemUtilityClass, classes);
    };
    const ListItemRoot = styled$1('div', {
      name: 'MuiListItem',
      slot: 'Root',
      overridesResolver: overridesResolver$2
    })(({
      theme,
      ownerState
    }) => _extends({
      display: 'flex',
      justifyContent: 'flex-start',
      alignItems: 'center',
      position: 'relative',
      textDecoration: 'none',
      width: '100%',
      boxSizing: 'border-box',
      textAlign: 'left'
    }, !ownerState.disablePadding && _extends({
      paddingTop: 8,
      paddingBottom: 8
    }, ownerState.dense && {
      paddingTop: 4,
      paddingBottom: 4
    }, !ownerState.disableGutters && {
      paddingLeft: 16,
      paddingRight: 16
    }, !!ownerState.secondaryAction && {
      // Add some space to avoid collision as `ListItemSecondaryAction`
      // is absolutely positioned.
      paddingRight: 48
    }), !!ownerState.secondaryAction && {
      [`& > .${listItemButtonClasses$1.root}`]: {
        paddingRight: 48
      }
    }, {
      [`&.${listItemClasses$1.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette.action.focus
      },
      [`&.${listItemClasses$1.selected}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
        [`&.${listItemClasses$1.focusVisible}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        }
      },
      [`&.${listItemClasses$1.disabled}`]: {
        opacity: (theme.vars || theme).palette.action.disabledOpacity
      }
    }, ownerState.alignItems === 'flex-start' && {
      alignItems: 'flex-start'
    }, ownerState.divider && {
      borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
      backgroundClip: 'padding-box'
    }, ownerState.button && {
      transition: theme.transitions.create('background-color', {
        duration: theme.transitions.duration.shortest
      }),
      '&:hover': {
        textDecoration: 'none',
        backgroundColor: (theme.vars || theme).palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      },
      [`&.${listItemClasses$1.selected}:hover`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
        }
      }
    }, ownerState.hasSecondaryAction && {
      // Add some space to avoid collision as `ListItemSecondaryAction`
      // is absolutely positioned.
      paddingRight: 48
    }));
    const ListItemContainer = styled$1('li', {
      name: 'MuiListItem',
      slot: 'Container',
      overridesResolver: (props, styles) => styles.container
    })({
      position: 'relative'
    });

    /**
     * Uses an additional container component if `ListItemSecondaryAction` is the last child.
     */
    const ListItem = /*#__PURE__*/React__namespace.forwardRef(function ListItem(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiListItem'
      });
      const {
          alignItems = 'center',
          autoFocus = false,
          button = false,
          children: childrenProp,
          className,
          component: componentProp,
          components = {},
          componentsProps = {},
          ContainerComponent = 'li',
          ContainerProps: {
            className: ContainerClassName
          } = {},
          dense = false,
          disabled = false,
          disableGutters = false,
          disablePadding = false,
          divider = false,
          focusVisibleClassName,
          secondaryAction,
          selected = false,
          slotProps = {},
          slots = {}
        } = props,
        ContainerProps = _objectWithoutPropertiesLoose(props.ContainerProps, _excluded$_),
        other = _objectWithoutPropertiesLoose(props, _excluded2$2);
      const context = React__namespace.useContext(ListContext$1);
      const childContext = React__namespace.useMemo(() => ({
        dense: dense || context.dense || false,
        alignItems,
        disableGutters
      }), [alignItems, context.dense, dense, disableGutters]);
      const listItemRef = React__namespace.useRef(null);
      useEnhancedEffect$1(() => {
        if (autoFocus) {
          if (listItemRef.current) {
            listItemRef.current.focus();
          } else {
            console.error('MUI: Unable to set focus to a ListItem whose component has not been rendered.');
          }
        }
      }, [autoFocus]);
      const children = React__namespace.Children.toArray(childrenProp);

      // v4 implementation, deprecated in v5, will be removed in v6
      const hasSecondaryAction = children.length && isMuiElement(children[children.length - 1], ['ListItemSecondaryAction']);
      const ownerState = _extends({}, props, {
        alignItems,
        autoFocus,
        button,
        dense: childContext.dense,
        disabled,
        disableGutters,
        disablePadding,
        divider,
        hasSecondaryAction,
        selected
      });
      const classes = useUtilityClasses$Q(ownerState);
      const handleRef = useForkRef(listItemRef, ref);
      const Root = slots.root || components.Root || ListItemRoot;
      const rootProps = slotProps.root || componentsProps.root || {};
      const componentProps = _extends({
        className: clsx(classes.root, rootProps.className, className),
        disabled
      }, other);
      let Component = componentProp || 'li';
      if (button) {
        componentProps.component = componentProp || 'div';
        componentProps.focusVisibleClassName = clsx(listItemClasses$1.focusVisible, focusVisibleClassName);
        Component = ButtonBase$1;
      }

      // v4 implementation, deprecated in v5, will be removed in v6
      if (hasSecondaryAction) {
        // Use div by default.
        Component = !componentProps.component && !componentProp ? 'div' : Component;

        // Avoid nesting of li > li.
        if (ContainerComponent === 'li') {
          if (Component === 'li') {
            Component = 'div';
          } else if (componentProps.component === 'li') {
            componentProps.component = 'div';
          }
        }
        return /*#__PURE__*/jsxRuntime.exports.jsx(ListContext$1.Provider, {
          value: childContext,
          children: /*#__PURE__*/jsxRuntime.exports.jsxs(ListItemContainer, _extends({
            as: ContainerComponent,
            className: clsx(classes.container, ContainerClassName),
            ref: handleRef,
            ownerState: ownerState
          }, ContainerProps, {
            children: [/*#__PURE__*/jsxRuntime.exports.jsx(Root, _extends({}, rootProps, !isHostComponent(Root) && {
              as: Component,
              ownerState: _extends({}, ownerState, rootProps.ownerState)
            }, componentProps, {
              children: children
            })), children.pop()]
          }))
        });
      }
      return /*#__PURE__*/jsxRuntime.exports.jsx(ListContext$1.Provider, {
        value: childContext,
        children: /*#__PURE__*/jsxRuntime.exports.jsxs(Root, _extends({}, rootProps, {
          as: Component,
          ref: handleRef
        }, !isHostComponent(Root) && {
          ownerState: _extends({}, ownerState, rootProps.ownerState)
        }, componentProps, {
          children: [children, secondaryAction && /*#__PURE__*/jsxRuntime.exports.jsx(ListItemSecondaryAction$1, {
            children: secondaryAction
          })]
        }))
      });
    });
    ListItem.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * Defines the `align-items` style property.
       * @default 'center'
       */
      alignItems: PropTypes.oneOf(['center', 'flex-start']),
      /**
       * If `true`, the list item is focused during the first mount.
       * Focus will also be triggered if the value changes from false to true.
       * @default false
       * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
       */
      autoFocus: PropTypes.bool,
      /**
       * If `true`, the list item is a button (using `ButtonBase`). Props intended
       * for `ButtonBase` can then be applied to `ListItem`.
       * @default false
       * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
       */
      button: PropTypes.bool,
      /**
       * The content of the component if a `ListItemSecondaryAction` is used it must
       * be the last child.
       */
      children: chainPropTypes(PropTypes.node, props => {
        const children = React__namespace.Children.toArray(props.children);

        // React.Children.toArray(props.children).findLastIndex(isListItemSecondaryAction)
        let secondaryActionIndex = -1;
        for (let i = children.length - 1; i >= 0; i -= 1) {
          const child = children[i];
          if (isMuiElement(child, ['ListItemSecondaryAction'])) {
            secondaryActionIndex = i;
            break;
          }
        }

        //  is ListItemSecondaryAction the last child of ListItem
        if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {
          return new Error('MUI: You used an element after ListItemSecondaryAction. ' + 'For ListItem to detect that it has a secondary action ' + 'you must pass it as the last child to ListItem.');
        }
        return null;
      }),
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `slots` prop.
       * It's recommended to use the `slots` prop instead.
       *
       * @default {}
       */
      components: PropTypes.shape({
        Root: PropTypes.elementType
      }),
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * This prop is an alias for the `slotProps` prop.
       * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
       *
       * @default {}
       */
      componentsProps: PropTypes.shape({
        root: PropTypes.object
      }),
      /**
       * The container component used when a `ListItemSecondaryAction` is the last child.
       * @default 'li'
       * @deprecated
       */
      ContainerComponent: elementTypeAcceptingRef$1,
      /**
       * Props applied to the container component if used.
       * @default {}
       * @deprecated
       */
      ContainerProps: PropTypes.object,
      /**
       * If `true`, compact vertical padding designed for keyboard and mouse input is used.
       * The prop defaults to the value inherited from the parent List component.
       * @default false
       */
      dense: PropTypes.bool,
      /**
       * If `true`, the component is disabled.
       * @default false
       * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, the left and right padding is removed.
       * @default false
       */
      disableGutters: PropTypes.bool,
      /**
       * If `true`, all padding is removed.
       * @default false
       */
      disablePadding: PropTypes.bool,
      /**
       * If `true`, a 1px light border is added to the bottom of the list item.
       * @default false
       */
      divider: PropTypes.bool,
      /**
       * @ignore
       */
      focusVisibleClassName: PropTypes.string,
      /**
       * The element to display at the end of ListItem.
       */
      secondaryAction: PropTypes.node,
      /**
       * Use to apply selected styling.
       * @default false
       * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
       */
      selected: PropTypes.bool,
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slotProps: PropTypes.shape({
        root: PropTypes.object
      }),
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `components` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slots: PropTypes.shape({
        root: PropTypes.elementType
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var ListItem$1 = ListItem;

    function getListItemAvatarUtilityClass(slot) {
      return generateUtilityClass('MuiListItemAvatar', slot);
    }
    generateUtilityClasses('MuiListItemAvatar', ['root', 'alignItemsFlexStart']);

    const _excluded$Z = ["className"];
    const useUtilityClasses$P = ownerState => {
      const {
        alignItems,
        classes
      } = ownerState;
      const slots = {
        root: ['root', alignItems === 'flex-start' && 'alignItemsFlexStart']
      };
      return composeClasses(slots, getListItemAvatarUtilityClass, classes);
    };
    const ListItemAvatarRoot = styled$1('div', {
      name: 'MuiListItemAvatar',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart];
      }
    })(({
      ownerState
    }) => _extends({
      minWidth: 56,
      flexShrink: 0
    }, ownerState.alignItems === 'flex-start' && {
      marginTop: 8
    }));

    /**
     * A simple wrapper to apply `List` styles to an `Avatar`.
     */
    const ListItemAvatar = /*#__PURE__*/React__namespace.forwardRef(function ListItemAvatar(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiListItemAvatar'
      });
      const {
          className
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$Z);
      const context = React__namespace.useContext(ListContext$1);
      const ownerState = _extends({}, props, {
        alignItems: context.alignItems
      });
      const classes = useUtilityClasses$P(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(ListItemAvatarRoot, _extends({
        className: clsx(classes.root, className),
        ownerState: ownerState,
        ref: ref
      }, other));
    });
    ListItemAvatar.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component, normally an `Avatar`.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var ListItemAvatar$1 = ListItemAvatar;

    const listItemIconClasses = generateUtilityClasses('MuiListItemIcon', ['root', 'alignItemsFlexStart']);
    var listItemIconClasses$1 = listItemIconClasses;

    function getListItemTextUtilityClass(slot) {
      return generateUtilityClass('MuiListItemText', slot);
    }
    const listItemTextClasses = generateUtilityClasses('MuiListItemText', ['root', 'multiline', 'dense', 'inset', 'primary', 'secondary']);
    var listItemTextClasses$1 = listItemTextClasses;

    const _excluded$Y = ["children", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"];
    const useUtilityClasses$O = ownerState => {
      const {
        classes,
        inset,
        primary,
        secondary,
        dense
      } = ownerState;
      const slots = {
        root: ['root', inset && 'inset', dense && 'dense', primary && secondary && 'multiline'],
        primary: ['primary'],
        secondary: ['secondary']
      };
      return composeClasses(slots, getListItemTextUtilityClass, classes);
    };
    const ListItemTextRoot = styled$1('div', {
      name: 'MuiListItemText',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${listItemTextClasses$1.primary}`]: styles.primary
        }, {
          [`& .${listItemTextClasses$1.secondary}`]: styles.secondary
        }, styles.root, ownerState.inset && styles.inset, ownerState.primary && ownerState.secondary && styles.multiline, ownerState.dense && styles.dense];
      }
    })(({
      ownerState
    }) => _extends({
      flex: '1 1 auto',
      minWidth: 0,
      marginTop: 4,
      marginBottom: 4
    }, ownerState.primary && ownerState.secondary && {
      marginTop: 6,
      marginBottom: 6
    }, ownerState.inset && {
      paddingLeft: 56
    }));
    const ListItemText = /*#__PURE__*/React__namespace.forwardRef(function ListItemText(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiListItemText'
      });
      const {
          children,
          className,
          disableTypography = false,
          inset = false,
          primary: primaryProp,
          primaryTypographyProps,
          secondary: secondaryProp,
          secondaryTypographyProps
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$Y);
      const {
        dense
      } = React__namespace.useContext(ListContext$1);
      let primary = primaryProp != null ? primaryProp : children;
      let secondary = secondaryProp;
      const ownerState = _extends({}, props, {
        disableTypography,
        inset,
        primary: !!primary,
        secondary: !!secondary,
        dense
      });
      const classes = useUtilityClasses$O(ownerState);
      if (primary != null && primary.type !== Typography$1 && !disableTypography) {
        primary = /*#__PURE__*/jsxRuntime.exports.jsx(Typography$1, _extends({
          variant: dense ? 'body2' : 'body1',
          className: classes.primary,
          component: primaryTypographyProps != null && primaryTypographyProps.variant ? undefined : 'span',
          display: "block"
        }, primaryTypographyProps, {
          children: primary
        }));
      }
      if (secondary != null && secondary.type !== Typography$1 && !disableTypography) {
        secondary = /*#__PURE__*/jsxRuntime.exports.jsx(Typography$1, _extends({
          variant: "body2",
          className: classes.secondary,
          color: "text.secondary",
          display: "block"
        }, secondaryTypographyProps, {
          children: secondary
        }));
      }
      return /*#__PURE__*/jsxRuntime.exports.jsxs(ListItemTextRoot, _extends({
        className: clsx(classes.root, className),
        ownerState: ownerState,
        ref: ref
      }, other, {
        children: [primary, secondary]
      }));
    });
    ListItemText.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * Alias for the `primary` prop.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * If `true`, the children won't be wrapped by a Typography component.
       * This can be useful to render an alternative Typography variant by wrapping
       * the `children` (or `primary`) text, and optional `secondary` text
       * with the Typography component.
       * @default false
       */
      disableTypography: PropTypes.bool,
      /**
       * If `true`, the children are indented.
       * This should be used if there is no left avatar or left icon.
       * @default false
       */
      inset: PropTypes.bool,
      /**
       * The main content element.
       */
      primary: PropTypes.node,
      /**
       * These props will be forwarded to the primary typography component
       * (as long as disableTypography is not `true`).
       */
      primaryTypographyProps: PropTypes.object,
      /**
       * The secondary content element.
       */
      secondary: PropTypes.node,
      /**
       * These props will be forwarded to the secondary typography component
       * (as long as disableTypography is not `true`).
       */
      secondaryTypographyProps: PropTypes.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var ListItemText$1 = ListItemText;

    const _excluded$X = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];
    function nextItem$1(list, item, disableListWrap) {
      if (list === item) {
        return list.firstChild;
      }
      if (item && item.nextElementSibling) {
        return item.nextElementSibling;
      }
      return disableListWrap ? null : list.firstChild;
    }
    function previousItem$1(list, item, disableListWrap) {
      if (list === item) {
        return disableListWrap ? list.firstChild : list.lastChild;
      }
      if (item && item.previousElementSibling) {
        return item.previousElementSibling;
      }
      return disableListWrap ? null : list.lastChild;
    }
    function textCriteriaMatches(nextFocus, textCriteria) {
      if (textCriteria === undefined) {
        return true;
      }
      let text = nextFocus.innerText;
      if (text === undefined) {
        // jsdom doesn't support innerText
        text = nextFocus.textContent;
      }
      text = text.trim().toLowerCase();
      if (text.length === 0) {
        return false;
      }
      if (textCriteria.repeating) {
        return text[0] === textCriteria.keys[0];
      }
      return text.indexOf(textCriteria.keys.join('')) === 0;
    }
    function moveFocus$1(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
      let wrappedOnce = false;
      let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
      while (nextFocus) {
        // Prevent infinite loop.
        if (nextFocus === list.firstChild) {
          if (wrappedOnce) {
            return false;
          }
          wrappedOnce = true;
        }

        // Same logic as useAutocomplete.js
        const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';
        if (!nextFocus.hasAttribute('tabindex') || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
          // Move to the next element.
          nextFocus = traversalFunction(list, nextFocus, disableListWrap);
        } else {
          nextFocus.focus();
          return true;
        }
      }
      return false;
    }

    /**
     * A permanently displayed menu following https://www.w3.org/WAI/ARIA/apg/patterns/menubutton/.
     * It's exposed to help customization of the [`Menu`](/material-ui/api/menu/) component if you
     * use it separately you need to move focus into the component manually. Once
     * the focus is placed inside the component it is fully keyboard accessible.
     */
    const MenuList = /*#__PURE__*/React__namespace.forwardRef(function MenuList(props, ref) {
      const {
          // private
          // eslint-disable-next-line react/prop-types
          actions,
          autoFocus = false,
          autoFocusItem = false,
          children,
          className,
          disabledItemsFocusable = false,
          disableListWrap = false,
          onKeyDown,
          variant = 'selectedMenu'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$X);
      const listRef = React__namespace.useRef(null);
      const textCriteriaRef = React__namespace.useRef({
        keys: [],
        repeating: true,
        previousKeyMatched: true,
        lastTime: null
      });
      useEnhancedEffect$1(() => {
        if (autoFocus) {
          listRef.current.focus();
        }
      }, [autoFocus]);
      React__namespace.useImperativeHandle(actions, () => ({
        adjustStyleForScrollbar: (containerElement, theme) => {
          // Let's ignore that piece of logic if users are already overriding the width
          // of the menu.
          const noExplicitWidth = !listRef.current.style.width;
          if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
            const scrollbarSize = `${getScrollbarSize(ownerDocument(containerElement))}px`;
            listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;
            listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
          }
          return listRef.current;
        }
      }), []);
      const handleKeyDown = event => {
        const list = listRef.current;
        const key = event.key;
        /**
         * @type {Element} - will always be defined since we are in a keydown handler
         * attached to an element. A keydown event is either dispatched to the activeElement
         * or document.body or document.documentElement. Only the first case will
         * trigger this specific handler.
         */
        const currentFocus = ownerDocument(list).activeElement;
        if (key === 'ArrowDown') {
          // Prevent scroll of the page
          event.preventDefault();
          moveFocus$1(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem$1);
        } else if (key === 'ArrowUp') {
          event.preventDefault();
          moveFocus$1(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem$1);
        } else if (key === 'Home') {
          event.preventDefault();
          moveFocus$1(list, null, disableListWrap, disabledItemsFocusable, nextItem$1);
        } else if (key === 'End') {
          event.preventDefault();
          moveFocus$1(list, null, disableListWrap, disabledItemsFocusable, previousItem$1);
        } else if (key.length === 1) {
          const criteria = textCriteriaRef.current;
          const lowerKey = key.toLowerCase();
          const currTime = performance.now();
          if (criteria.keys.length > 0) {
            // Reset
            if (currTime - criteria.lastTime > 500) {
              criteria.keys = [];
              criteria.repeating = true;
              criteria.previousKeyMatched = true;
            } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
              criteria.repeating = false;
            }
          }
          criteria.lastTime = currTime;
          criteria.keys.push(lowerKey);
          const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
          if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus$1(list, currentFocus, false, disabledItemsFocusable, nextItem$1, criteria))) {
            event.preventDefault();
          } else {
            criteria.previousKeyMatched = false;
          }
        }
        if (onKeyDown) {
          onKeyDown(event);
        }
      };
      const handleRef = useForkRef(listRef, ref);

      /**
       * the index of the item should receive focus
       * in a `variant="selectedMenu"` it's the first `selected` item
       * otherwise it's the very first item.
       */
      let activeItemIndex = -1;
      // since we inject focus related props into children we have to do a lookahead
      // to check if there is a `selected` item. We're looking for the last `selected`
      // item and use the first valid item as a fallback
      React__namespace.Children.forEach(children, (child, index) => {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return;
        }
        {
          if (reactIs.exports.isFragment(child)) {
            console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }
        if (!child.props.disabled) {
          if (variant === 'selectedMenu' && child.props.selected) {
            activeItemIndex = index;
          } else if (activeItemIndex === -1) {
            activeItemIndex = index;
          }
        }
      });
      const items = React__namespace.Children.map(children, (child, index) => {
        if (index === activeItemIndex) {
          const newChildProps = {};
          if (autoFocusItem) {
            newChildProps.autoFocus = true;
          }
          if (child.props.tabIndex === undefined && variant === 'selectedMenu') {
            newChildProps.tabIndex = 0;
          }
          return /*#__PURE__*/React__namespace.cloneElement(child, newChildProps);
        }
        return child;
      });
      return /*#__PURE__*/jsxRuntime.exports.jsx(List$1, _extends({
        role: "menu",
        ref: handleRef,
        className: className,
        onKeyDown: handleKeyDown,
        tabIndex: autoFocus ? 0 : -1
      }, other, {
        children: items
      }));
    });
    MenuList.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * If `true`, will focus the `[role="menu"]` container and move into tab order.
       * @default false
       */
      autoFocus: PropTypes.bool,
      /**
       * If `true`, will focus the first menuitem if `variant="menu"` or selected item
       * if `variant="selectedMenu"`.
       * @default false
       */
      autoFocusItem: PropTypes.bool,
      /**
       * MenuList contents, normally `MenuItem`s.
       */
      children: PropTypes.node,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * If `true`, will allow focus on disabled items.
       * @default false
       */
      disabledItemsFocusable: PropTypes.bool,
      /**
       * If `true`, the menu items will not wrap focus.
       * @default false
       */
      disableListWrap: PropTypes.bool,
      /**
       * @ignore
       */
      onKeyDown: PropTypes.func,
      /**
       * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
       * and the vertical alignment relative to the anchor element.
       * @default 'selectedMenu'
       */
      variant: PropTypes.oneOf(['menu', 'selectedMenu'])
    } ;
    var MenuList$1 = MenuList;

    function getPopoverUtilityClass(slot) {
      return generateUtilityClass('MuiPopover', slot);
    }
    generateUtilityClasses('MuiPopover', ['root', 'paper']);

    const _excluded$W = ["onEntering"],
      _excluded2$1 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"];
    function getOffsetTop(rect, vertical) {
      let offset = 0;
      if (typeof vertical === 'number') {
        offset = vertical;
      } else if (vertical === 'center') {
        offset = rect.height / 2;
      } else if (vertical === 'bottom') {
        offset = rect.height;
      }
      return offset;
    }
    function getOffsetLeft(rect, horizontal) {
      let offset = 0;
      if (typeof horizontal === 'number') {
        offset = horizontal;
      } else if (horizontal === 'center') {
        offset = rect.width / 2;
      } else if (horizontal === 'right') {
        offset = rect.width;
      }
      return offset;
    }
    function getTransformOriginValue(transformOrigin) {
      return [transformOrigin.horizontal, transformOrigin.vertical].map(n => typeof n === 'number' ? `${n}px` : n).join(' ');
    }
    function resolveAnchorEl(anchorEl) {
      return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
    }
    const useUtilityClasses$N = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        paper: ['paper']
      };
      return composeClasses(slots, getPopoverUtilityClass, classes);
    };
    const PopoverRoot = styled$1(Modal$1, {
      name: 'MuiPopover',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({});
    const PopoverPaper = styled$1(Paper$1, {
      name: 'MuiPopover',
      slot: 'Paper',
      overridesResolver: (props, styles) => styles.paper
    })({
      position: 'absolute',
      overflowY: 'auto',
      overflowX: 'hidden',
      // So we see the popover when it's empty.
      // It's most likely on issue on userland.
      minWidth: 16,
      minHeight: 16,
      maxWidth: 'calc(100% - 32px)',
      maxHeight: 'calc(100% - 32px)',
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0
    });
    const Popover = /*#__PURE__*/React__namespace.forwardRef(function Popover(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiPopover'
      });
      const {
          action,
          anchorEl,
          anchorOrigin = {
            vertical: 'top',
            horizontal: 'left'
          },
          anchorPosition,
          anchorReference = 'anchorEl',
          children,
          className,
          container: containerProp,
          elevation = 8,
          marginThreshold = 16,
          open,
          PaperProps = {},
          transformOrigin = {
            vertical: 'top',
            horizontal: 'left'
          },
          TransitionComponent = Grow$1,
          transitionDuration: transitionDurationProp = 'auto',
          TransitionProps: {
            onEntering
          } = {}
        } = props,
        TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$W),
        other = _objectWithoutPropertiesLoose(props, _excluded2$1);
      const paperRef = React__namespace.useRef();
      const handlePaperRef = useForkRef(paperRef, PaperProps.ref);
      const ownerState = _extends({}, props, {
        anchorOrigin,
        anchorReference,
        elevation,
        marginThreshold,
        PaperProps,
        transformOrigin,
        TransitionComponent,
        transitionDuration: transitionDurationProp,
        TransitionProps
      });
      const classes = useUtilityClasses$N(ownerState);

      // Returns the top/left offset of the position
      // to attach to on the anchor element (or body if none is provided)
      const getAnchorOffset = React__namespace.useCallback(() => {
        if (anchorReference === 'anchorPosition') {
          {
            if (!anchorPosition) {
              console.error('MUI: You need to provide a `anchorPosition` prop when using ' + '<Popover anchorReference="anchorPosition" />.');
            }
          }
          return anchorPosition;
        }
        const resolvedAnchorEl = resolveAnchorEl(anchorEl);

        // If an anchor element wasn't provided, just use the parent body element of this Popover
        const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument(paperRef.current).body;
        const anchorRect = anchorElement.getBoundingClientRect();
        {
          const box = anchorElement.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            console.warn(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
          }
        }
        return {
          top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
          left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
        };
      }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);

      // Returns the base transform origin using the element
      const getTransformOrigin = React__namespace.useCallback(elemRect => {
        return {
          vertical: getOffsetTop(elemRect, transformOrigin.vertical),
          horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
        };
      }, [transformOrigin.horizontal, transformOrigin.vertical]);
      const getPositioningStyle = React__namespace.useCallback(element => {
        const elemRect = {
          width: element.offsetWidth,
          height: element.offsetHeight
        };

        // Get the transform origin point on the element itself
        const elemTransformOrigin = getTransformOrigin(elemRect);
        if (anchorReference === 'none') {
          return {
            top: null,
            left: null,
            transformOrigin: getTransformOriginValue(elemTransformOrigin)
          };
        }

        // Get the offset of the anchoring element
        const anchorOffset = getAnchorOffset();

        // Calculate element positioning
        let top = anchorOffset.top - elemTransformOrigin.vertical;
        let left = anchorOffset.left - elemTransformOrigin.horizontal;
        const bottom = top + elemRect.height;
        const right = left + elemRect.width;

        // Use the parent window of the anchorEl if provided
        const containerWindow = ownerWindow(resolveAnchorEl(anchorEl));

        // Window thresholds taking required margin into account
        const heightThreshold = containerWindow.innerHeight - marginThreshold;
        const widthThreshold = containerWindow.innerWidth - marginThreshold;

        // Check if the vertical axis needs shifting
        if (top < marginThreshold) {
          const diff = top - marginThreshold;
          top -= diff;
          elemTransformOrigin.vertical += diff;
        } else if (bottom > heightThreshold) {
          const diff = bottom - heightThreshold;
          top -= diff;
          elemTransformOrigin.vertical += diff;
        }
        {
          if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
            console.error(['MUI: The popover component is too tall.', `Some part of it can not be seen on the screen (${elemRect.height - heightThreshold}px).`, 'Please consider adding a `max-height` to improve the user-experience.'].join('\n'));
          }
        }

        // Check if the horizontal axis needs shifting
        if (left < marginThreshold) {
          const diff = left - marginThreshold;
          left -= diff;
          elemTransformOrigin.horizontal += diff;
        } else if (right > widthThreshold) {
          const diff = right - widthThreshold;
          left -= diff;
          elemTransformOrigin.horizontal += diff;
        }
        return {
          top: `${Math.round(top)}px`,
          left: `${Math.round(left)}px`,
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
      const [isPositioned, setIsPositioned] = React__namespace.useState(open);
      const setPositioningStyles = React__namespace.useCallback(() => {
        const element = paperRef.current;
        if (!element) {
          return;
        }
        const positioning = getPositioningStyle(element);
        if (positioning.top !== null) {
          element.style.top = positioning.top;
        }
        if (positioning.left !== null) {
          element.style.left = positioning.left;
        }
        element.style.transformOrigin = positioning.transformOrigin;
        setIsPositioned(true);
      }, [getPositioningStyle]);
      const handleEntering = (element, isAppearing) => {
        if (onEntering) {
          onEntering(element, isAppearing);
        }
        setPositioningStyles();
      };
      const handleExited = () => {
        setIsPositioned(false);
      };
      React__namespace.useEffect(() => {
        if (open) {
          setPositioningStyles();
        }
      });
      React__namespace.useImperativeHandle(action, () => open ? {
        updatePosition: () => {
          setPositioningStyles();
        }
      } : null, [open, setPositioningStyles]);
      React__namespace.useEffect(() => {
        if (!open) {
          return undefined;
        }
        const handleResize = debounce$1(() => {
          setPositioningStyles();
        });
        const containerWindow = ownerWindow(anchorEl);
        containerWindow.addEventListener('resize', handleResize);
        return () => {
          handleResize.clear();
          containerWindow.removeEventListener('resize', handleResize);
        };
      }, [anchorEl, open, setPositioningStyles]);
      let transitionDuration = transitionDurationProp;
      if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {
        transitionDuration = undefined;
      }

      // If the container prop is provided, use that
      // If the anchorEl prop is provided, use its parent body element as the container
      // If neither are provided let the Modal take care of choosing the container
      const container = containerProp || (anchorEl ? ownerDocument(resolveAnchorEl(anchorEl)).body : undefined);
      return /*#__PURE__*/jsxRuntime.exports.jsx(PopoverRoot, _extends({
        BackdropProps: {
          invisible: true
        },
        className: clsx(classes.root, className),
        container: container,
        open: open,
        ref: ref,
        ownerState: ownerState
      }, other, {
        children: /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
          appear: true,
          in: open,
          onEntering: handleEntering,
          onExited: handleExited,
          timeout: transitionDuration
        }, TransitionProps, {
          children: /*#__PURE__*/jsxRuntime.exports.jsx(PopoverPaper, _extends({
            elevation: elevation
          }, PaperProps, {
            ref: handlePaperRef,
            className: clsx(classes.paper, PaperProps.className)
          }, isPositioned ? undefined : {
            style: _extends({}, PaperProps.style, {
              opacity: 0
            })
          }, {
            ownerState: ownerState,
            children: children
          }))
        }))
      }));
    });
    Popover.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * A ref for imperative actions.
       * It currently only supports updatePosition() action.
       */
      action: refType$1,
      /**
       * An HTML element, or a function that returns one.
       * It's used to set the position of the popover.
       */
      anchorEl: chainPropTypes(PropTypes.oneOfType([HTMLElementType, PropTypes.func]), props => {
        if (props.open && (!props.anchorReference || props.anchorReference === 'anchorEl')) {
          const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
          if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
            const box = resolvedAnchorEl.getBoundingClientRect();
            if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
              return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
            }
          } else {
            return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', `It should be an Element instance but it's \`${resolvedAnchorEl}\` instead.`].join('\n'));
          }
        }
        return null;
      }),
      /**
       * This is the point on the anchor where the popover's
       * `anchorEl` will attach to. This is not used when the
       * anchorReference is 'anchorPosition'.
       *
       * Options:
       * vertical: [top, center, bottom];
       * horizontal: [left, center, right].
       * @default {
       *   vertical: 'top',
       *   horizontal: 'left',
       * }
       */
      anchorOrigin: PropTypes.shape({
        horizontal: PropTypes.oneOfType([PropTypes.oneOf(['center', 'left', 'right']), PropTypes.number]).isRequired,
        vertical: PropTypes.oneOfType([PropTypes.oneOf(['bottom', 'center', 'top']), PropTypes.number]).isRequired
      }),
      /**
       * This is the position that may be used to set the position of the popover.
       * The coordinates are relative to the application's client area.
       */
      anchorPosition: PropTypes.shape({
        left: PropTypes.number.isRequired,
        top: PropTypes.number.isRequired
      }),
      /**
       * This determines which anchor prop to refer to when setting
       * the position of the popover.
       * @default 'anchorEl'
       */
      anchorReference: PropTypes.oneOf(['anchorEl', 'anchorPosition', 'none']),
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * An HTML element, component instance, or function that returns either.
       * The `container` will passed to the Modal component.
       *
       * By default, it uses the body of the anchorEl's top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),
      /**
       * The elevation of the popover.
       * @default 8
       */
      elevation: integerPropType,
      /**
       * Specifies how close to the edge of the window the popover can appear.
       * @default 16
       */
      marginThreshold: PropTypes.number,
      /**
       * Callback fired when the component requests to be closed.
       * The `reason` parameter can optionally be used to control the response to `onClose`.
       */
      onClose: PropTypes.func,
      /**
       * If `true`, the component is shown.
       */
      open: PropTypes.bool.isRequired,
      /**
       * Props applied to the [`Paper`](/material-ui/api/paper/) element.
       * @default {}
       */
      PaperProps: PropTypes /* @typescript-to-proptypes-ignore */.shape({
        component: elementTypeAcceptingRef$1
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * This is the point on the popover which
       * will attach to the anchor's origin.
       *
       * Options:
       * vertical: [top, center, bottom, x(px)];
       * horizontal: [left, center, right, x(px)].
       * @default {
       *   vertical: 'top',
       *   horizontal: 'left',
       * }
       */
      transformOrigin: PropTypes.shape({
        horizontal: PropTypes.oneOfType([PropTypes.oneOf(['center', 'left', 'right']), PropTypes.number]).isRequired,
        vertical: PropTypes.oneOfType([PropTypes.oneOf(['bottom', 'center', 'top']), PropTypes.number]).isRequired
      }),
      /**
       * The component used for the transition.
       * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
       * @default Grow
       */
      TransitionComponent: PropTypes.elementType,
      /**
       * Set to 'auto' to automatically calculate transition time based on height.
       * @default 'auto'
       */
      transitionDuration: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.shape({
        appear: PropTypes.number,
        enter: PropTypes.number,
        exit: PropTypes.number
      })]),
      /**
       * Props applied to the transition element.
       * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
       * @default {}
       */
      TransitionProps: PropTypes.object
    } ;
    var Popover$1 = Popover;

    function getMenuUtilityClass(slot) {
      return generateUtilityClass('MuiMenu', slot);
    }
    generateUtilityClasses('MuiMenu', ['root', 'paper', 'list']);

    const _excluded$V = ["onEntering"],
      _excluded2 = ["autoFocus", "children", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant"];
    const RTL_ORIGIN = {
      vertical: 'top',
      horizontal: 'right'
    };
    const LTR_ORIGIN = {
      vertical: 'top',
      horizontal: 'left'
    };
    const useUtilityClasses$M = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        paper: ['paper'],
        list: ['list']
      };
      return composeClasses(slots, getMenuUtilityClass, classes);
    };
    const MenuRoot = styled$1(Popover$1, {
      shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
      name: 'MuiMenu',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({});
    const MenuPaper = styled$1(Paper$1, {
      name: 'MuiMenu',
      slot: 'Paper',
      overridesResolver: (props, styles) => styles.paper
    })({
      // specZ: The maximum height of a simple menu should be one or more rows less than the view
      // height. This ensures a tapable area outside of the simple menu with which to dismiss
      // the menu.
      maxHeight: 'calc(100% - 96px)',
      // Add iOS momentum scrolling for iOS < 13.0
      WebkitOverflowScrolling: 'touch'
    });
    const MenuMenuList = styled$1(MenuList$1, {
      name: 'MuiMenu',
      slot: 'List',
      overridesResolver: (props, styles) => styles.list
    })({
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0
    });
    const Menu = /*#__PURE__*/React__namespace.forwardRef(function Menu(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiMenu'
      });
      const {
          autoFocus = true,
          children,
          disableAutoFocusItem = false,
          MenuListProps = {},
          onClose,
          open,
          PaperProps = {},
          PopoverClasses,
          transitionDuration = 'auto',
          TransitionProps: {
            onEntering
          } = {},
          variant = 'selectedMenu'
        } = props,
        TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$V),
        other = _objectWithoutPropertiesLoose(props, _excluded2);
      const theme = useTheme();
      const isRtl = theme.direction === 'rtl';
      const ownerState = _extends({}, props, {
        autoFocus,
        disableAutoFocusItem,
        MenuListProps,
        onEntering,
        PaperProps,
        transitionDuration,
        TransitionProps,
        variant
      });
      const classes = useUtilityClasses$M(ownerState);
      const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
      const menuListActionsRef = React__namespace.useRef(null);
      const handleEntering = (element, isAppearing) => {
        if (menuListActionsRef.current) {
          menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
        }
        if (onEntering) {
          onEntering(element, isAppearing);
        }
      };
      const handleListKeyDown = event => {
        if (event.key === 'Tab') {
          event.preventDefault();
          if (onClose) {
            onClose(event, 'tabKeyDown');
          }
        }
      };

      /**
       * the index of the item should receive focus
       * in a `variant="selectedMenu"` it's the first `selected` item
       * otherwise it's the very first item.
       */
      let activeItemIndex = -1;
      // since we inject focus related props into children we have to do a lookahead
      // to check if there is a `selected` item. We're looking for the last `selected`
      // item and use the first valid item as a fallback
      React__namespace.Children.map(children, (child, index) => {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return;
        }
        {
          if (reactIs.exports.isFragment(child)) {
            console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }
        if (!child.props.disabled) {
          if (variant === 'selectedMenu' && child.props.selected) {
            activeItemIndex = index;
          } else if (activeItemIndex === -1) {
            activeItemIndex = index;
          }
        }
      });
      return /*#__PURE__*/jsxRuntime.exports.jsx(MenuRoot, _extends({
        classes: PopoverClasses,
        onClose: onClose,
        anchorOrigin: {
          vertical: 'bottom',
          horizontal: isRtl ? 'right' : 'left'
        },
        transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
        PaperProps: _extends({
          component: MenuPaper
        }, PaperProps, {
          classes: _extends({}, PaperProps.classes, {
            root: classes.paper
          })
        }),
        className: classes.root,
        open: open,
        ref: ref,
        transitionDuration: transitionDuration,
        TransitionProps: _extends({
          onEntering: handleEntering
        }, TransitionProps),
        ownerState: ownerState
      }, other, {
        children: /*#__PURE__*/jsxRuntime.exports.jsx(MenuMenuList, _extends({
          onKeyDown: handleListKeyDown,
          actions: menuListActionsRef,
          autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
          autoFocusItem: autoFocusItem,
          variant: variant
        }, MenuListProps, {
          className: clsx(classes.list, MenuListProps.className),
          children: children
        }))
      }));
    });
    Menu.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * An HTML element, or a function that returns one.
       * It's used to set the position of the menu.
       */
      anchorEl: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),
      /**
       * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
       * children are not focusable. If you set this prop to `false` focus will be placed
       * on the parent modal container. This has severe accessibility implications
       * and should only be considered if you manage focus otherwise.
       * @default true
       */
      autoFocus: PropTypes.bool,
      /**
       * Menu contents, normally `MenuItem`s.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * When opening the menu will not focus the active item but the `[role="menu"]`
       * unless `autoFocus` is also set to `false`. Not using the default means not
       * following WAI-ARIA authoring practices. Please be considerate about possible
       * accessibility implications.
       * @default false
       */
      disableAutoFocusItem: PropTypes.bool,
      /**
       * Props applied to the [`MenuList`](/material-ui/api/menu-list/) element.
       * @default {}
       */
      MenuListProps: PropTypes.object,
      /**
       * Callback fired when the component requests to be closed.
       *
       * @param {object} event The event source of the callback.
       * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
       */
      onClose: PropTypes.func,
      /**
       * If `true`, the component is shown.
       */
      open: PropTypes.bool.isRequired,
      /**
       * @ignore
       */
      PaperProps: PropTypes.object,
      /**
       * `classes` prop applied to the [`Popover`](/material-ui/api/popover/) element.
       */
      PopoverClasses: PropTypes.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The length of the transition in `ms`, or 'auto'
       * @default 'auto'
       */
      transitionDuration: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.shape({
        appear: PropTypes.number,
        enter: PropTypes.number,
        exit: PropTypes.number
      })]),
      /**
       * Props applied to the transition element.
       * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
       * @default {}
       */
      TransitionProps: PropTypes.object,
      /**
       * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.
       * @default 'selectedMenu'
       */
      variant: PropTypes.oneOf(['menu', 'selectedMenu'])
    } ;
    var Menu$1 = Menu;

    function getMenuItemUtilityClass(slot) {
      return generateUtilityClass('MuiMenuItem', slot);
    }
    const menuItemClasses = generateUtilityClasses('MuiMenuItem', ['root', 'focusVisible', 'dense', 'disabled', 'divider', 'gutters', 'selected']);
    var menuItemClasses$1 = menuItemClasses;

    const _excluded$U = ["autoFocus", "component", "dense", "divider", "disableGutters", "focusVisibleClassName", "role", "tabIndex", "className"];
    const overridesResolver$1 = (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.dense && styles.dense, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters];
    };
    const useUtilityClasses$L = ownerState => {
      const {
        disabled,
        dense,
        divider,
        disableGutters,
        selected,
        classes
      } = ownerState;
      const slots = {
        root: ['root', dense && 'dense', disabled && 'disabled', !disableGutters && 'gutters', divider && 'divider', selected && 'selected']
      };
      const composedClasses = composeClasses(slots, getMenuItemUtilityClass, classes);
      return _extends({}, classes, composedClasses);
    };
    const MenuItemRoot = styled$1(ButtonBase$1, {
      shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
      name: 'MuiMenuItem',
      slot: 'Root',
      overridesResolver: overridesResolver$1
    })(({
      theme,
      ownerState
    }) => _extends({}, theme.typography.body1, {
      display: 'flex',
      justifyContent: 'flex-start',
      alignItems: 'center',
      position: 'relative',
      textDecoration: 'none',
      minHeight: 48,
      paddingTop: 6,
      paddingBottom: 6,
      boxSizing: 'border-box',
      whiteSpace: 'nowrap'
    }, !ownerState.disableGutters && {
      paddingLeft: 16,
      paddingRight: 16
    }, ownerState.divider && {
      borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
      backgroundClip: 'padding-box'
    }, {
      '&:hover': {
        textDecoration: 'none',
        backgroundColor: (theme.vars || theme).palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      },
      [`&.${menuItemClasses$1.selected}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
        [`&.${menuItemClasses$1.focusVisible}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        }
      },
      [`&.${menuItemClasses$1.selected}:hover`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
        }
      },
      [`&.${menuItemClasses$1.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette.action.focus
      },
      [`&.${menuItemClasses$1.disabled}`]: {
        opacity: (theme.vars || theme).palette.action.disabledOpacity
      },
      [`& + .${dividerClasses$1.root}`]: {
        marginTop: theme.spacing(1),
        marginBottom: theme.spacing(1)
      },
      [`& + .${dividerClasses$1.inset}`]: {
        marginLeft: 52
      },
      [`& .${listItemTextClasses$1.root}`]: {
        marginTop: 0,
        marginBottom: 0
      },
      [`& .${listItemTextClasses$1.inset}`]: {
        paddingLeft: 36
      },
      [`& .${listItemIconClasses$1.root}`]: {
        minWidth: 36
      }
    }, !ownerState.dense && {
      [theme.breakpoints.up('sm')]: {
        minHeight: 'auto'
      }
    }, ownerState.dense && _extends({
      minHeight: 32,
      // https://m2.material.io/components/menus#specs > Dense
      paddingTop: 4,
      paddingBottom: 4
    }, theme.typography.body2, {
      [`& .${listItemIconClasses$1.root} svg`]: {
        fontSize: '1.25rem'
      }
    })));
    const MenuItem = /*#__PURE__*/React__namespace.forwardRef(function MenuItem(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiMenuItem'
      });
      const {
          autoFocus = false,
          component = 'li',
          dense = false,
          divider = false,
          disableGutters = false,
          focusVisibleClassName,
          role = 'menuitem',
          tabIndex: tabIndexProp,
          className
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$U);
      const context = React__namespace.useContext(ListContext$1);
      const childContext = React__namespace.useMemo(() => ({
        dense: dense || context.dense || false,
        disableGutters
      }), [context.dense, dense, disableGutters]);
      const menuItemRef = React__namespace.useRef(null);
      useEnhancedEffect$1(() => {
        if (autoFocus) {
          if (menuItemRef.current) {
            menuItemRef.current.focus();
          } else {
            console.error('MUI: Unable to set focus to a MenuItem whose component has not been rendered.');
          }
        }
      }, [autoFocus]);
      const ownerState = _extends({}, props, {
        dense: childContext.dense,
        divider,
        disableGutters
      });
      const classes = useUtilityClasses$L(props);
      const handleRef = useForkRef(menuItemRef, ref);
      let tabIndex;
      if (!props.disabled) {
        tabIndex = tabIndexProp !== undefined ? tabIndexProp : -1;
      }
      return /*#__PURE__*/jsxRuntime.exports.jsx(ListContext$1.Provider, {
        value: childContext,
        children: /*#__PURE__*/jsxRuntime.exports.jsx(MenuItemRoot, _extends({
          ref: handleRef,
          role: role,
          tabIndex: tabIndex,
          component: component,
          focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
          className: clsx(classes.root, className)
        }, other, {
          ownerState: ownerState,
          classes: classes
        }))
      });
    });
    MenuItem.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * If `true`, the list item is focused during the first mount.
       * Focus will also be triggered if the value changes from false to true.
       * @default false
       */
      autoFocus: PropTypes.bool,
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * If `true`, compact vertical padding designed for keyboard and mouse input is used.
       * The prop defaults to the value inherited from the parent Menu component.
       * @default false
       */
      dense: PropTypes.bool,
      /**
       * @ignore
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, the left and right padding is removed.
       * @default false
       */
      disableGutters: PropTypes.bool,
      /**
       * If `true`, a 1px light border is added to the bottom of the menu item.
       * @default false
       */
      divider: PropTypes.bool,
      /**
       * This prop can help identify which element has keyboard focus.
       * The class name will be applied when the element gains the focus through keyboard interaction.
       * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
       * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
       * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
       * if needed.
       */
      focusVisibleClassName: PropTypes.string,
      /**
       * @ignore
       */
      role: PropTypes /* @typescript-to-proptypes-ignore */.string,
      /**
       * @ignore
       */
      selected: PropTypes.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * @default 0
       */
      tabIndex: PropTypes.number
    } ;
    var MenuItem$1 = MenuItem;

    function getNativeSelectUtilityClasses(slot) {
      return generateUtilityClass('MuiNativeSelect', slot);
    }
    const nativeSelectClasses = generateUtilityClasses('MuiNativeSelect', ['root', 'select', 'multiple', 'filled', 'outlined', 'standard', 'disabled', 'icon', 'iconOpen', 'iconFilled', 'iconOutlined', 'iconStandard', 'nativeInput']);
    var nativeSelectClasses$1 = nativeSelectClasses;

    const _excluded$T = ["className", "disabled", "IconComponent", "inputRef", "variant"];
    const useUtilityClasses$K = ownerState => {
      const {
        classes,
        variant,
        disabled,
        multiple,
        open
      } = ownerState;
      const slots = {
        select: ['select', variant, disabled && 'disabled', multiple && 'multiple'],
        icon: ['icon', `icon${capitalize(variant)}`, open && 'iconOpen', disabled && 'disabled']
      };
      return composeClasses(slots, getNativeSelectUtilityClasses, classes);
    };
    const nativeSelectSelectStyles = ({
      ownerState,
      theme
    }) => _extends({
      MozAppearance: 'none',
      // Reset
      WebkitAppearance: 'none',
      // Reset
      // When interacting quickly, the text can end up selected.
      // Native select can't be selected either.
      userSelect: 'none',
      borderRadius: 0,
      // Reset
      cursor: 'pointer',
      '&:focus': _extends({}, theme.vars ? {
        backgroundColor: `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.05)`
      } : {
        backgroundColor: theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)'
      }, {
        borderRadius: 0 // Reset Chrome style
      }),

      // Remove IE11 arrow
      '&::-ms-expand': {
        display: 'none'
      },
      [`&.${nativeSelectClasses$1.disabled}`]: {
        cursor: 'default'
      },
      '&[multiple]': {
        height: 'auto'
      },
      '&:not([multiple]) option, &:not([multiple]) optgroup': {
        backgroundColor: (theme.vars || theme).palette.background.paper
      },
      // Bump specificity to allow extending custom inputs
      '&&&': {
        paddingRight: 24,
        minWidth: 16 // So it doesn't collapse.
      }
    }, ownerState.variant === 'filled' && {
      '&&&': {
        paddingRight: 32
      }
    }, ownerState.variant === 'outlined' && {
      borderRadius: (theme.vars || theme).shape.borderRadius,
      '&:focus': {
        borderRadius: (theme.vars || theme).shape.borderRadius // Reset the reset for Chrome style
      },

      '&&&': {
        paddingRight: 32
      }
    });
    const NativeSelectSelect = styled$1('select', {
      name: 'MuiNativeSelect',
      slot: 'Select',
      shouldForwardProp: rootShouldForwardProp,
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.select, styles[ownerState.variant], {
          [`&.${nativeSelectClasses$1.multiple}`]: styles.multiple
        }];
      }
    })(nativeSelectSelectStyles);
    const nativeSelectIconStyles = ({
      ownerState,
      theme
    }) => _extends({
      // We use a position absolute over a flexbox in order to forward the pointer events
      // to the input and to support wrapping tags..
      position: 'absolute',
      right: 0,
      top: 'calc(50% - .5em)',
      // Center vertically, height is 1em
      pointerEvents: 'none',
      // Don't block pointer events on the select under the icon.
      color: (theme.vars || theme).palette.action.active,
      [`&.${nativeSelectClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.action.disabled
      }
    }, ownerState.open && {
      transform: 'rotate(180deg)'
    }, ownerState.variant === 'filled' && {
      right: 7
    }, ownerState.variant === 'outlined' && {
      right: 7
    });
    const NativeSelectIcon = styled$1('svg', {
      name: 'MuiNativeSelect',
      slot: 'Icon',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.icon, ownerState.variant && styles[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles.iconOpen];
      }
    })(nativeSelectIconStyles);

    /**
     * @ignore - internal component.
     */
    const NativeSelectInput = /*#__PURE__*/React__namespace.forwardRef(function NativeSelectInput(props, ref) {
      const {
          className,
          disabled,
          IconComponent,
          inputRef,
          variant = 'standard'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$T);
      const ownerState = _extends({}, props, {
        disabled,
        variant
      });
      const classes = useUtilityClasses$K(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
        children: [/*#__PURE__*/jsxRuntime.exports.jsx(NativeSelectSelect, _extends({
          ownerState: ownerState,
          className: clsx(classes.select, className),
          disabled: disabled,
          ref: inputRef || ref
        }, other)), props.multiple ? null : /*#__PURE__*/jsxRuntime.exports.jsx(NativeSelectIcon, {
          as: IconComponent,
          ownerState: ownerState,
          className: classes.icon
        })]
      });
    });
    NativeSelectInput.propTypes = {
      /**
       * The option elements to populate the select with.
       * Can be some `<option>` elements.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: PropTypes.object,
      /**
       * The CSS class name of the select element.
       */
      className: PropTypes.string,
      /**
       * If `true`, the select is disabled.
       */
      disabled: PropTypes.bool,
      /**
       * The icon that displays the arrow.
       */
      IconComponent: PropTypes.elementType.isRequired,
      /**
       * Use that prop to pass a ref to the native select element.
       * @deprecated
       */
      inputRef: refType$1,
      /**
       * @ignore
       */
      multiple: PropTypes.bool,
      /**
       * Name attribute of the `select` or hidden `input` element.
       */
      name: PropTypes.string,
      /**
       * Callback fired when a menu item is selected.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: PropTypes.func,
      /**
       * The input value.
       */
      value: PropTypes.any,
      /**
       * The variant to use.
       */
      variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])
    } ;
    var NativeSelectInput$1 = NativeSelectInput;

    var _span$1;
    const _excluded$S = ["children", "classes", "className", "label", "notched"];
    const NotchedOutlineRoot$1 = styled$1('fieldset')({
      textAlign: 'left',
      position: 'absolute',
      bottom: 0,
      right: 0,
      top: -5,
      left: 0,
      margin: 0,
      padding: '0 8px',
      pointerEvents: 'none',
      borderRadius: 'inherit',
      borderStyle: 'solid',
      borderWidth: 1,
      overflow: 'hidden',
      minWidth: '0%'
    });
    const NotchedOutlineLegend = styled$1('legend')(({
      ownerState,
      theme
    }) => _extends({
      float: 'unset',
      // Fix conflict with bootstrap
      width: 'auto',
      // Fix conflict with bootstrap
      overflow: 'hidden'
    }, !ownerState.withLabel && {
      padding: 0,
      lineHeight: '11px',
      // sync with `height` in `legend` styles
      transition: theme.transitions.create('width', {
        duration: 150,
        easing: theme.transitions.easing.easeOut
      })
    }, ownerState.withLabel && _extends({
      display: 'block',
      // Fix conflict with normalize.css and sanitize.css
      padding: 0,
      height: 11,
      // sync with `lineHeight` in `legend` styles
      fontSize: '0.75em',
      visibility: 'hidden',
      maxWidth: 0.01,
      transition: theme.transitions.create('max-width', {
        duration: 50,
        easing: theme.transitions.easing.easeOut
      }),
      whiteSpace: 'nowrap',
      '& > span': {
        paddingLeft: 5,
        paddingRight: 5,
        display: 'inline-block',
        opacity: 0,
        visibility: 'visible'
      }
    }, ownerState.notched && {
      maxWidth: '100%',
      transition: theme.transitions.create('max-width', {
        duration: 100,
        easing: theme.transitions.easing.easeOut,
        delay: 50
      })
    })));

    /**
     * @ignore - internal component.
     */
    function NotchedOutline(props) {
      const {
          className,
          label,
          notched
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$S);
      const withLabel = label != null && label !== '';
      const ownerState = _extends({}, props, {
        notched,
        withLabel
      });
      return /*#__PURE__*/jsxRuntime.exports.jsx(NotchedOutlineRoot$1, _extends({
        "aria-hidden": true,
        className: className,
        ownerState: ownerState
      }, other, {
        children: /*#__PURE__*/jsxRuntime.exports.jsx(NotchedOutlineLegend, {
          ownerState: ownerState,
          children: withLabel ? /*#__PURE__*/jsxRuntime.exports.jsx("span", {
            children: label
          }) : // notranslate needed while Google Translate will not fix zero-width space issue
          _span$1 || (_span$1 = /*#__PURE__*/jsxRuntime.exports.jsx("span", {
            className: "notranslate",
            children: "\u200B"
          }))
        })
      }));
    }
    NotchedOutline.propTypes = {
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The label.
       */
      label: PropTypes.node,
      /**
       * If `true`, the outline is notched to accommodate the label.
       */
      notched: PropTypes.bool.isRequired,
      /**
       * @ignore
       */
      style: PropTypes.object
    } ;

    const _excluded$R = ["components", "fullWidth", "inputComponent", "label", "multiline", "notched", "slots", "type"];
    const useUtilityClasses$J = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        notchedOutline: ['notchedOutline'],
        input: ['input']
      };
      const composedClasses = composeClasses(slots, getOutlinedInputUtilityClass, classes);
      return _extends({}, classes, composedClasses);
    };
    const OutlinedInputRoot = styled$1(InputBaseRoot, {
      shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
      name: 'MuiOutlinedInput',
      slot: 'Root',
      overridesResolver: rootOverridesResolver
    })(({
      theme,
      ownerState
    }) => {
      const borderColor = theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';
      return _extends({
        position: 'relative',
        borderRadius: (theme.vars || theme).shape.borderRadius,
        [`&:hover .${outlinedInputClasses$1.notchedOutline}`]: {
          borderColor: (theme.vars || theme).palette.text.primary
        },
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          [`&:hover .${outlinedInputClasses$1.notchedOutline}`]: {
            borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor
          }
        },
        [`&.${outlinedInputClasses$1.focused} .${outlinedInputClasses$1.notchedOutline}`]: {
          borderColor: (theme.vars || theme).palette[ownerState.color].main,
          borderWidth: 2
        },
        [`&.${outlinedInputClasses$1.error} .${outlinedInputClasses$1.notchedOutline}`]: {
          borderColor: (theme.vars || theme).palette.error.main
        },
        [`&.${outlinedInputClasses$1.disabled} .${outlinedInputClasses$1.notchedOutline}`]: {
          borderColor: (theme.vars || theme).palette.action.disabled
        }
      }, ownerState.startAdornment && {
        paddingLeft: 14
      }, ownerState.endAdornment && {
        paddingRight: 14
      }, ownerState.multiline && _extends({
        padding: '16.5px 14px'
      }, ownerState.size === 'small' && {
        padding: '8.5px 14px'
      }));
    });
    const NotchedOutlineRoot = styled$1(NotchedOutline, {
      name: 'MuiOutlinedInput',
      slot: 'NotchedOutline',
      overridesResolver: (props, styles) => styles.notchedOutline
    })(({
      theme
    }) => {
      const borderColor = theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';
      return {
        borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor
      };
    });
    const OutlinedInputInput = styled$1(InputBaseComponent, {
      name: 'MuiOutlinedInput',
      slot: 'Input',
      overridesResolver: inputOverridesResolver
    })(({
      theme,
      ownerState
    }) => _extends({
      padding: '16.5px 14px'
    }, !theme.vars && {
      '&:-webkit-autofill': {
        WebkitBoxShadow: theme.palette.mode === 'light' ? null : '0 0 0 100px #266798 inset',
        WebkitTextFillColor: theme.palette.mode === 'light' ? null : '#fff',
        caretColor: theme.palette.mode === 'light' ? null : '#fff',
        borderRadius: 'inherit'
      }
    }, theme.vars && {
      '&:-webkit-autofill': {
        borderRadius: 'inherit'
      },
      [theme.getColorSchemeSelector('dark')]: {
        '&:-webkit-autofill': {
          WebkitBoxShadow: '0 0 0 100px #266798 inset',
          WebkitTextFillColor: '#fff',
          caretColor: '#fff'
        }
      }
    }, ownerState.size === 'small' && {
      padding: '8.5px 14px'
    }, ownerState.multiline && {
      padding: 0
    }, ownerState.startAdornment && {
      paddingLeft: 0
    }, ownerState.endAdornment && {
      paddingRight: 0
    }));
    const OutlinedInput = /*#__PURE__*/React__namespace.forwardRef(function OutlinedInput(inProps, ref) {
      var _ref, _slots$root, _ref2, _slots$input, _React$Fragment;
      const props = useThemeProps({
        props: inProps,
        name: 'MuiOutlinedInput'
      });
      const {
          components = {},
          fullWidth = false,
          inputComponent = 'input',
          label,
          multiline = false,
          notched,
          slots = {},
          type = 'text'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$R);
      const classes = useUtilityClasses$J(props);
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ['required']
      });
      const ownerState = _extends({}, props, {
        color: fcs.color || 'primary',
        disabled: fcs.disabled,
        error: fcs.error,
        focused: fcs.focused,
        formControl: muiFormControl,
        fullWidth,
        hiddenLabel: fcs.hiddenLabel,
        multiline,
        size: fcs.size,
        type
      });
      const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : OutlinedInputRoot;
      const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : OutlinedInputInput;
      return /*#__PURE__*/jsxRuntime.exports.jsx(InputBase$1, _extends({
        slots: {
          root: RootSlot,
          input: InputSlot
        },
        renderSuffix: state => /*#__PURE__*/jsxRuntime.exports.jsx(NotchedOutlineRoot, {
          ownerState: ownerState,
          className: classes.notchedOutline,
          label: label != null && label !== '' && fcs.required ? _React$Fragment || (_React$Fragment = /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
            children: [label, "\xA0", '*']
          })) : label,
          notched: typeof notched !== 'undefined' ? notched : Boolean(state.startAdornment || state.filled || state.focused)
        }),
        fullWidth: fullWidth,
        inputComponent: inputComponent,
        multiline: multiline,
        ref: ref,
        type: type
      }, other, {
        classes: _extends({}, classes, {
          notchedOutline: null
        })
      }));
    });
    OutlinedInput.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * This prop helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: PropTypes.string,
      /**
       * If `true`, the `input` element is focused during the first mount.
       */
      autoFocus: PropTypes.bool,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
       * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
       */
      color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary']), PropTypes.string]),
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `slots` prop.
       * It's recommended to use the `slots` prop instead.
       *
       * @default {}
       */
      components: PropTypes.shape({
        Input: PropTypes.elementType,
        Root: PropTypes.elementType
      }),
      /**
       * The default value. Use when the component is not controlled.
       */
      defaultValue: PropTypes.any,
      /**
       * If `true`, the component is disabled.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      disabled: PropTypes.bool,
      /**
       * End `InputAdornment` for this component.
       */
      endAdornment: PropTypes.node,
      /**
       * If `true`, the `input` will indicate an error.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      error: PropTypes.bool,
      /**
       * If `true`, the `input` will take up the full width of its container.
       * @default false
       */
      fullWidth: PropTypes.bool,
      /**
       * The id of the `input` element.
       */
      id: PropTypes.string,
      /**
       * The component used for the `input` element.
       * Either a string to use a HTML element or a component.
       * @default 'input'
       */
      inputComponent: PropTypes.elementType,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       * @default {}
       */
      inputProps: PropTypes.object,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,
      /**
       * The label of the `input`. It is only used for layout. The actual labelling
       * is handled by `InputLabel`.
       */
      label: PropTypes.node,
      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
       */
      margin: PropTypes.oneOf(['dense', 'none']),
      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      /**
       * Minimum number of rows to display when multiline option is set to true.
       */
      minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      /**
       * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
       * @default false
       */
      multiline: PropTypes.bool,
      /**
       * Name attribute of the `input` element.
       */
      name: PropTypes.string,
      /**
       * If `true`, the outline is notched to accommodate the label.
       */
      notched: PropTypes.bool,
      /**
       * Callback fired when the value is changed.
       *
       * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: PropTypes.func,
      /**
       * The short hint displayed in the `input` before the user enters a value.
       */
      placeholder: PropTypes.string,
      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: PropTypes.bool,
      /**
       * If `true`, the `input` element is required.
       * The prop defaults to the value (`false`) inherited from the parent FormControl component.
       */
      required: PropTypes.bool,
      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `components` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slots: PropTypes.shape({
        input: PropTypes.elementType,
        root: PropTypes.elementType
      }),
      /**
       * Start `InputAdornment` for this component.
       */
      startAdornment: PropTypes.node,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       * @default 'text'
       */
      type: PropTypes.string,
      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: PropTypes.any
    } ;
    OutlinedInput.muiName = 'Input';
    var OutlinedInput$1 = OutlinedInput;

    var RadioButtonUncheckedIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
      d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
    }), 'RadioButtonUnchecked');

    var RadioButtonCheckedIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
      d: "M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
    }), 'RadioButtonChecked');

    const RadioButtonIconRoot = styled$1('span')({
      position: 'relative',
      display: 'flex'
    });
    const RadioButtonIconBackground = styled$1(RadioButtonUncheckedIcon)({
      // Scale applied to prevent dot misalignment in Safari
      transform: 'scale(1)'
    });
    const RadioButtonIconDot = styled$1(RadioButtonCheckedIcon)(({
      theme,
      ownerState
    }) => _extends({
      left: 0,
      position: 'absolute',
      transform: 'scale(0)',
      transition: theme.transitions.create('transform', {
        easing: theme.transitions.easing.easeIn,
        duration: theme.transitions.duration.shortest
      })
    }, ownerState.checked && {
      transform: 'scale(1)',
      transition: theme.transitions.create('transform', {
        easing: theme.transitions.easing.easeOut,
        duration: theme.transitions.duration.shortest
      })
    }));

    /**
     * @ignore - internal component.
     */
    function RadioButtonIcon(props) {
      const {
        checked = false,
        classes = {},
        fontSize
      } = props;
      const ownerState = _extends({}, props, {
        checked
      });
      return /*#__PURE__*/jsxRuntime.exports.jsxs(RadioButtonIconRoot, {
        className: classes.root,
        ownerState: ownerState,
        children: [/*#__PURE__*/jsxRuntime.exports.jsx(RadioButtonIconBackground, {
          fontSize: fontSize,
          className: classes.background,
          ownerState: ownerState
        }), /*#__PURE__*/jsxRuntime.exports.jsx(RadioButtonIconDot, {
          fontSize: fontSize,
          className: classes.dot,
          ownerState: ownerState
        })]
      });
    }
    RadioButtonIcon.propTypes = {
      /**
       * If `true`, the component is checked.
       */
      checked: PropTypes.bool,
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: PropTypes.object,
      /**
       * The size of the component.
       * `small` is equivalent to the dense radio styling.
       */
      fontSize: PropTypes.oneOf(['small', 'medium'])
    } ;

    /**
     * @ignore - internal component.
     */
    const RadioGroupContext = /*#__PURE__*/React__namespace.createContext(undefined);
    {
      RadioGroupContext.displayName = 'RadioGroupContext';
    }
    var RadioGroupContext$1 = RadioGroupContext;

    function useRadioGroup() {
      return React__namespace.useContext(RadioGroupContext$1);
    }

    function getRadioUtilityClass(slot) {
      return generateUtilityClass('MuiRadio', slot);
    }
    const radioClasses = generateUtilityClasses('MuiRadio', ['root', 'checked', 'disabled', 'colorPrimary', 'colorSecondary']);
    var radioClasses$1 = radioClasses;

    const _excluded$Q = ["checked", "checkedIcon", "color", "icon", "name", "onChange", "size", "className"];
    const useUtilityClasses$I = ownerState => {
      const {
        classes,
        color
      } = ownerState;
      const slots = {
        root: ['root', `color${capitalize(color)}`]
      };
      return _extends({}, classes, composeClasses(slots, getRadioUtilityClass, classes));
    };
    const RadioRoot = styled$1(SwitchBase$1, {
      shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
      name: 'MuiRadio',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[`color${capitalize(ownerState.color)}`]];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      color: (theme.vars || theme).palette.text.secondary
    }, !ownerState.disableRipple && {
      '&:hover': {
        backgroundColor: theme.vars ? `rgba(${ownerState.color === 'default' ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      }
    }, ownerState.color !== 'default' && {
      [`&.${radioClasses$1.checked}`]: {
        color: (theme.vars || theme).palette[ownerState.color].main
      }
    }, {
      [`&.${radioClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.action.disabled
      }
    }));
    function areEqualValues$1(a, b) {
      if (typeof b === 'object' && b !== null) {
        return a === b;
      }

      // The value could be a number, the DOM will stringify it anyway.
      return String(a) === String(b);
    }
    const defaultCheckedIcon = /*#__PURE__*/jsxRuntime.exports.jsx(RadioButtonIcon, {
      checked: true
    });
    const defaultIcon = /*#__PURE__*/jsxRuntime.exports.jsx(RadioButtonIcon, {});
    const Radio = /*#__PURE__*/React__namespace.forwardRef(function Radio(inProps, ref) {
      var _defaultIcon$props$fo, _defaultCheckedIcon$p;
      const props = useThemeProps({
        props: inProps,
        name: 'MuiRadio'
      });
      const {
          checked: checkedProp,
          checkedIcon = defaultCheckedIcon,
          color = 'primary',
          icon = defaultIcon,
          name: nameProp,
          onChange: onChangeProp,
          size = 'medium',
          className
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$Q);
      const ownerState = _extends({}, props, {
        color,
        size
      });
      const classes = useUtilityClasses$I(ownerState);
      const radioGroup = useRadioGroup();
      let checked = checkedProp;
      const onChange = createChainedFunction(onChangeProp, radioGroup && radioGroup.onChange);
      let name = nameProp;
      if (radioGroup) {
        if (typeof checked === 'undefined') {
          checked = areEqualValues$1(radioGroup.value, props.value);
        }
        if (typeof name === 'undefined') {
          name = radioGroup.name;
        }
      }
      return /*#__PURE__*/jsxRuntime.exports.jsx(RadioRoot, _extends({
        type: "radio",
        icon: /*#__PURE__*/React__namespace.cloneElement(icon, {
          fontSize: (_defaultIcon$props$fo = defaultIcon.props.fontSize) != null ? _defaultIcon$props$fo : size
        }),
        checkedIcon: /*#__PURE__*/React__namespace.cloneElement(checkedIcon, {
          fontSize: (_defaultCheckedIcon$p = defaultCheckedIcon.props.fontSize) != null ? _defaultCheckedIcon$p : size
        }),
        ownerState: ownerState,
        classes: classes,
        name: name,
        checked: checked,
        onChange: onChange,
        ref: ref,
        className: clsx(classes.root, className)
      }, other));
    });
    Radio.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * If `true`, the component is checked.
       */
      checked: PropTypes.bool,
      /**
       * The icon to display when the component is checked.
       * @default <RadioButtonIcon checked />
       */
      checkedIcon: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
       * @default 'primary'
       */
      color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),
      /**
       * If `true`, the component is disabled.
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, the ripple effect is disabled.
       */
      disableRipple: PropTypes.bool,
      /**
       * The icon to display when the component is unchecked.
       * @default <RadioButtonIcon />
       */
      icon: PropTypes.node,
      /**
       * The id of the `input` element.
       */
      id: PropTypes.string,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: PropTypes.object,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,
      /**
       * Name attribute of the `input` element.
       */
      name: PropTypes.string,
      /**
       * Callback fired when the state is changed.
       *
       * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: PropTypes.func,
      /**
       * If `true`, the `input` element is required.
       */
      required: PropTypes.bool,
      /**
       * The size of the component.
       * `small` is equivalent to the dense radio styling.
       * @default 'medium'
       */
      size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The value of the component. The DOM API casts this to a string.
       */
      value: PropTypes.any
    } ;
    var Radio$1 = Radio;

    const _excluded$P = ["actions", "children", "defaultValue", "name", "onChange", "value"];
    const RadioGroup = /*#__PURE__*/React__namespace.forwardRef(function RadioGroup(props, ref) {
      const {
          // private
          // eslint-disable-next-line react/prop-types
          actions,
          children,
          defaultValue,
          name: nameProp,
          onChange,
          value: valueProp
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$P);
      const rootRef = React__namespace.useRef(null);
      const [value, setValueState] = useControlled({
        controlled: valueProp,
        default: defaultValue,
        name: 'RadioGroup'
      });
      React__namespace.useImperativeHandle(actions, () => ({
        focus: () => {
          let input = rootRef.current.querySelector('input:not(:disabled):checked');
          if (!input) {
            input = rootRef.current.querySelector('input:not(:disabled)');
          }
          if (input) {
            input.focus();
          }
        }
      }), []);
      const handleRef = useForkRef(ref, rootRef);
      const name = useId(nameProp);
      const contextValue = React__namespace.useMemo(() => ({
        name,
        onChange(event) {
          setValueState(event.target.value);
          if (onChange) {
            onChange(event, event.target.value);
          }
        },
        value
      }), [name, onChange, setValueState, value]);
      return /*#__PURE__*/jsxRuntime.exports.jsx(RadioGroupContext$1.Provider, {
        value: contextValue,
        children: /*#__PURE__*/jsxRuntime.exports.jsx(FormGroup$1, _extends({
          role: "radiogroup",
          ref: handleRef
        }, other, {
          children: children
        }))
      });
    });
    RadioGroup.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * The default value. Use when the component is not controlled.
       */
      defaultValue: PropTypes.any,
      /**
       * The name used to reference the value of the control.
       * If you don't provide this prop, it falls back to a randomly generated name.
       */
      name: PropTypes.string,
      /**
       * Callback fired when a radio button is selected.
       *
       * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
       * @param {string} value The value of the selected radio button.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: PropTypes.func,
      /**
       * Value of the selected radio button. The DOM API casts this to a string.
       */
      value: PropTypes.any
    } ;
    var RadioGroup$1 = RadioGroup;

    function getSelectUtilityClasses(slot) {
      return generateUtilityClass('MuiSelect', slot);
    }
    const selectClasses = generateUtilityClasses('MuiSelect', ['select', 'multiple', 'filled', 'outlined', 'standard', 'disabled', 'focused', 'icon', 'iconOpen', 'iconFilled', 'iconOutlined', 'iconStandard', 'nativeInput']);
    var selectClasses$1 = selectClasses;

    var _span;
    const _excluded$O = ["aria-describedby", "aria-label", "autoFocus", "autoWidth", "children", "className", "defaultOpen", "defaultValue", "disabled", "displayEmpty", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"];
    const SelectSelect = styled$1('div', {
      name: 'MuiSelect',
      slot: 'Select',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [
        // Win specificity over the input base
        {
          [`&.${selectClasses$1.select}`]: styles.select
        }, {
          [`&.${selectClasses$1.select}`]: styles[ownerState.variant]
        }, {
          [`&.${selectClasses$1.multiple}`]: styles.multiple
        }];
      }
    })(nativeSelectSelectStyles, {
      // Win specificity over the input base
      [`&.${selectClasses$1.select}`]: {
        height: 'auto',
        // Resets for multiple select with chips
        minHeight: '1.4375em',
        // Required for select\text-field height consistency
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap',
        overflow: 'hidden'
      }
    });
    const SelectIcon = styled$1('svg', {
      name: 'MuiSelect',
      slot: 'Icon',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.icon, ownerState.variant && styles[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles.iconOpen];
      }
    })(nativeSelectIconStyles);
    const SelectNativeInput = styled$1('input', {
      shouldForwardProp: prop => slotShouldForwardProp(prop) && prop !== 'classes',
      name: 'MuiSelect',
      slot: 'NativeInput',
      overridesResolver: (props, styles) => styles.nativeInput
    })({
      bottom: 0,
      left: 0,
      position: 'absolute',
      opacity: 0,
      pointerEvents: 'none',
      width: '100%',
      boxSizing: 'border-box'
    });
    function areEqualValues(a, b) {
      if (typeof b === 'object' && b !== null) {
        return a === b;
      }

      // The value could be a number, the DOM will stringify it anyway.
      return String(a) === String(b);
    }
    function isEmpty(display) {
      return display == null || typeof display === 'string' && !display.trim();
    }
    const useUtilityClasses$H = ownerState => {
      const {
        classes,
        variant,
        disabled,
        multiple,
        open
      } = ownerState;
      const slots = {
        select: ['select', variant, disabled && 'disabled', multiple && 'multiple'],
        icon: ['icon', `icon${capitalize(variant)}`, open && 'iconOpen', disabled && 'disabled'],
        nativeInput: ['nativeInput']
      };
      return composeClasses(slots, getSelectUtilityClasses, classes);
    };

    /**
     * @ignore - internal component.
     */
    const SelectInput = /*#__PURE__*/React__namespace.forwardRef(function SelectInput(props, ref) {
      const {
          'aria-describedby': ariaDescribedby,
          'aria-label': ariaLabel,
          autoFocus,
          autoWidth,
          children,
          className,
          defaultOpen,
          defaultValue,
          disabled,
          displayEmpty,
          IconComponent,
          inputRef: inputRefProp,
          labelId,
          MenuProps = {},
          multiple,
          name,
          onBlur,
          onChange,
          onClose,
          onFocus,
          onOpen,
          open: openProp,
          readOnly,
          renderValue,
          SelectDisplayProps = {},
          tabIndex: tabIndexProp,
          value: valueProp,
          variant = 'standard'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$O);
      const [value, setValueState] = useControlled({
        controlled: valueProp,
        default: defaultValue,
        name: 'Select'
      });
      const [openState, setOpenState] = useControlled({
        controlled: openProp,
        default: defaultOpen,
        name: 'Select'
      });
      const inputRef = React__namespace.useRef(null);
      const displayRef = React__namespace.useRef(null);
      const [displayNode, setDisplayNode] = React__namespace.useState(null);
      const {
        current: isOpenControlled
      } = React__namespace.useRef(openProp != null);
      const [menuMinWidthState, setMenuMinWidthState] = React__namespace.useState();
      const handleRef = useForkRef(ref, inputRefProp);
      const handleDisplayRef = React__namespace.useCallback(node => {
        displayRef.current = node;
        if (node) {
          setDisplayNode(node);
        }
      }, []);
      React__namespace.useImperativeHandle(handleRef, () => ({
        focus: () => {
          displayRef.current.focus();
        },
        node: inputRef.current,
        value
      }), [value]);

      // Resize menu on `defaultOpen` automatic toggle.
      React__namespace.useEffect(() => {
        if (defaultOpen && openState && displayNode && !isOpenControlled) {
          setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);
          displayRef.current.focus();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
      }, [displayNode, autoWidth]);
      // `isOpenControlled` is ignored because the component should never switch between controlled and uncontrolled modes.
      // `defaultOpen` and `openState` are ignored to avoid unnecessary callbacks.
      React__namespace.useEffect(() => {
        if (autoFocus) {
          displayRef.current.focus();
        }
      }, [autoFocus]);
      React__namespace.useEffect(() => {
        if (!labelId) {
          return undefined;
        }
        const label = ownerDocument(displayRef.current).getElementById(labelId);
        if (label) {
          const handler = () => {
            if (getSelection().isCollapsed) {
              displayRef.current.focus();
            }
          };
          label.addEventListener('click', handler);
          return () => {
            label.removeEventListener('click', handler);
          };
        }
        return undefined;
      }, [labelId]);
      const update = (open, event) => {
        if (open) {
          if (onOpen) {
            onOpen(event);
          }
        } else if (onClose) {
          onClose(event);
        }
        if (!isOpenControlled) {
          setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);
          setOpenState(open);
        }
      };
      const handleMouseDown = event => {
        // Ignore everything but left-click
        if (event.button !== 0) {
          return;
        }
        // Hijack the default focus behavior.
        event.preventDefault();
        displayRef.current.focus();
        update(true, event);
      };
      const handleClose = event => {
        update(false, event);
      };
      const childrenArray = React__namespace.Children.toArray(children);

      // Support autofill.
      const handleChange = event => {
        const index = childrenArray.map(child => child.props.value).indexOf(event.target.value);
        if (index === -1) {
          return;
        }
        const child = childrenArray[index];
        setValueState(child.props.value);
        if (onChange) {
          onChange(event, child);
        }
      };
      const handleItemClick = child => event => {
        let newValue;

        // We use the tabindex attribute to signal the available options.
        if (!event.currentTarget.hasAttribute('tabindex')) {
          return;
        }
        if (multiple) {
          newValue = Array.isArray(value) ? value.slice() : [];
          const itemIndex = value.indexOf(child.props.value);
          if (itemIndex === -1) {
            newValue.push(child.props.value);
          } else {
            newValue.splice(itemIndex, 1);
          }
        } else {
          newValue = child.props.value;
        }
        if (child.props.onClick) {
          child.props.onClick(event);
        }
        if (value !== newValue) {
          setValueState(newValue);
          if (onChange) {
            // Redefine target to allow name and value to be read.
            // This allows seamless integration with the most popular form libraries.
            // https://github.com/mui/material-ui/issues/13485#issuecomment-676048492
            // Clone the event to not override `target` of the original event.
            const nativeEvent = event.nativeEvent || event;
            const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
            Object.defineProperty(clonedEvent, 'target', {
              writable: true,
              value: {
                value: newValue,
                name
              }
            });
            onChange(clonedEvent, child);
          }
        }
        if (!multiple) {
          update(false, event);
        }
      };
      const handleKeyDown = event => {
        if (!readOnly) {
          const validKeys = [' ', 'ArrowUp', 'ArrowDown',
          // The native select doesn't respond to enter on macOS, but it's recommended by
          // https://www.w3.org/WAI/ARIA/apg/example-index/combobox/combobox-select-only.html
          'Enter'];
          if (validKeys.indexOf(event.key) !== -1) {
            event.preventDefault();
            update(true, event);
          }
        }
      };
      const open = displayNode !== null && openState;
      const handleBlur = event => {
        // if open event.stopImmediatePropagation
        if (!open && onBlur) {
          // Preact support, target is read only property on a native event.
          Object.defineProperty(event, 'target', {
            writable: true,
            value: {
              value,
              name
            }
          });
          onBlur(event);
        }
      };
      delete other['aria-invalid'];
      let display;
      let displaySingle;
      const displayMultiple = [];
      let computeDisplay = false;
      let foundMatch = false;

      // No need to display any value if the field is empty.
      if (isFilled({
        value
      }) || displayEmpty) {
        if (renderValue) {
          display = renderValue(value);
        } else {
          computeDisplay = true;
        }
      }
      const items = childrenArray.map((child, index, arr) => {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return null;
        }
        {
          if (reactIs.exports.isFragment(child)) {
            console.error(["MUI: The Select component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }
        let selected;
        if (multiple) {
          if (!Array.isArray(value)) {
            throw new Error(`MUI: The \`value\` prop must be an array when using the \`Select\` component with \`multiple\`.` );
          }
          selected = value.some(v => areEqualValues(v, child.props.value));
          if (selected && computeDisplay) {
            displayMultiple.push(child.props.children);
          }
        } else {
          selected = areEqualValues(value, child.props.value);
          if (selected && computeDisplay) {
            displaySingle = child.props.children;
          }
        }
        if (selected) {
          foundMatch = true;
        }
        if (child.props.value === undefined) {
          return /*#__PURE__*/React__namespace.cloneElement(child, {
            'aria-readonly': true,
            role: 'option'
          });
        }
        const isFirstSelectableElement = () => {
          if (value) {
            return selected;
          }
          const firstSelectableElement = arr.find(item => item.props.value !== undefined && item.props.disabled !== true);
          if (child === firstSelectableElement) {
            return true;
          }
          return selected;
        };
        return /*#__PURE__*/React__namespace.cloneElement(child, {
          'aria-selected': selected ? 'true' : 'false',
          onClick: handleItemClick(child),
          onKeyUp: event => {
            if (event.key === ' ') {
              // otherwise our MenuItems dispatches a click event
              // it's not behavior of the native <option> and causes
              // the select to close immediately since we open on space keydown
              event.preventDefault();
            }
            if (child.props.onKeyUp) {
              child.props.onKeyUp(event);
            }
          },
          role: 'option',
          selected: arr[0].props.value === undefined || arr[0].props.disabled === true ? isFirstSelectableElement() : selected,
          value: undefined,
          // The value is most likely not a valid HTML attribute.
          'data-value': child.props.value // Instead, we provide it as a data attribute.
        });
      });

      {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__namespace.useEffect(() => {
          if (!foundMatch && !multiple && value !== '') {
            const values = childrenArray.map(child => child.props.value);
            console.warn([`MUI: You have provided an out-of-range value \`${value}\` for the select ${name ? `(name="${name}") ` : ''}component.`, "Consider providing a value that matches one of the available options or ''.", `The available values are ${values.filter(x => x != null).map(x => `\`${x}\``).join(', ') || '""'}.`].join('\n'));
          }
        }, [foundMatch, childrenArray, multiple, name, value]);
      }
      if (computeDisplay) {
        if (multiple) {
          if (displayMultiple.length === 0) {
            display = null;
          } else {
            display = displayMultiple.reduce((output, child, index) => {
              output.push(child);
              if (index < displayMultiple.length - 1) {
                output.push(', ');
              }
              return output;
            }, []);
          }
        } else {
          display = displaySingle;
        }
      }

      // Avoid performing a layout computation in the render method.
      let menuMinWidth = menuMinWidthState;
      if (!autoWidth && isOpenControlled && displayNode) {
        menuMinWidth = displayNode.clientWidth;
      }
      let tabIndex;
      if (typeof tabIndexProp !== 'undefined') {
        tabIndex = tabIndexProp;
      } else {
        tabIndex = disabled ? null : 0;
      }
      const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : undefined);
      const ownerState = _extends({}, props, {
        variant,
        value,
        open
      });
      const classes = useUtilityClasses$H(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
        children: [/*#__PURE__*/jsxRuntime.exports.jsx(SelectSelect, _extends({
          ref: handleDisplayRef,
          tabIndex: tabIndex,
          role: "button",
          "aria-disabled": disabled ? 'true' : undefined,
          "aria-expanded": open ? 'true' : 'false',
          "aria-haspopup": "listbox",
          "aria-label": ariaLabel,
          "aria-labelledby": [labelId, buttonId].filter(Boolean).join(' ') || undefined,
          "aria-describedby": ariaDescribedby,
          onKeyDown: handleKeyDown,
          onMouseDown: disabled || readOnly ? null : handleMouseDown,
          onBlur: handleBlur,
          onFocus: onFocus
        }, SelectDisplayProps, {
          ownerState: ownerState,
          className: clsx(SelectDisplayProps.className, classes.select, className)
          // The id is required for proper a11y
          ,
          id: buttonId,
          children: isEmpty(display) ? // notranslate needed while Google Translate will not fix zero-width space issue
          _span || (_span = /*#__PURE__*/jsxRuntime.exports.jsx("span", {
            className: "notranslate",
            children: "\u200B"
          })) : display
        })), /*#__PURE__*/jsxRuntime.exports.jsx(SelectNativeInput, _extends({
          value: Array.isArray(value) ? value.join(',') : value,
          name: name,
          ref: inputRef,
          "aria-hidden": true,
          onChange: handleChange,
          tabIndex: -1,
          disabled: disabled,
          className: classes.nativeInput,
          autoFocus: autoFocus,
          ownerState: ownerState
        }, other)), /*#__PURE__*/jsxRuntime.exports.jsx(SelectIcon, {
          as: IconComponent,
          className: classes.icon,
          ownerState: ownerState
        }), /*#__PURE__*/jsxRuntime.exports.jsx(Menu$1, _extends({
          id: `menu-${name || ''}`,
          anchorEl: displayNode,
          open: open,
          onClose: handleClose,
          anchorOrigin: {
            vertical: 'bottom',
            horizontal: 'center'
          },
          transformOrigin: {
            vertical: 'top',
            horizontal: 'center'
          }
        }, MenuProps, {
          MenuListProps: _extends({
            'aria-labelledby': labelId,
            role: 'listbox',
            disableListWrap: true
          }, MenuProps.MenuListProps),
          PaperProps: _extends({}, MenuProps.PaperProps, {
            style: _extends({
              minWidth: menuMinWidth
            }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
          }),
          children: items
        }))]
      });
    });
    SelectInput.propTypes = {
      /**
       * @ignore
       */
      'aria-describedby': PropTypes.string,
      /**
       * @ignore
       */
      'aria-label': PropTypes.string,
      /**
       * @ignore
       */
      autoFocus: PropTypes.bool,
      /**
       * If `true`, the width of the popover will automatically be set according to the items inside the
       * menu, otherwise it will be at least the width of the select input.
       */
      autoWidth: PropTypes.bool,
      /**
       * The option elements to populate the select with.
       * Can be some `<MenuItem>` elements.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: PropTypes.object,
      /**
       * The CSS class name of the select element.
       */
      className: PropTypes.string,
      /**
       * If `true`, the component is toggled on mount. Use when the component open state is not controlled.
       * You can only use it when the `native` prop is `false` (default).
       */
      defaultOpen: PropTypes.bool,
      /**
       * The default value. Use when the component is not controlled.
       */
      defaultValue: PropTypes.any,
      /**
       * If `true`, the select is disabled.
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, the selected item is displayed even if its value is empty.
       */
      displayEmpty: PropTypes.bool,
      /**
       * The icon that displays the arrow.
       */
      IconComponent: PropTypes.elementType.isRequired,
      /**
       * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
       * Equivalent to `ref`
       */
      inputRef: refType$1,
      /**
       * The ID of an element that acts as an additional label. The Select will
       * be labelled by the additional label and the selected value.
       */
      labelId: PropTypes.string,
      /**
       * Props applied to the [`Menu`](/material-ui/api/menu/) element.
       */
      MenuProps: PropTypes.object,
      /**
       * If `true`, `value` must be an array and the menu will support multiple selections.
       */
      multiple: PropTypes.bool,
      /**
       * Name attribute of the `select` or hidden `input` element.
       */
      name: PropTypes.string,
      /**
       * @ignore
       */
      onBlur: PropTypes.func,
      /**
       * Callback fired when a menu item is selected.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (any).
       * @param {object} [child] The react element that was selected.
       */
      onChange: PropTypes.func,
      /**
       * Callback fired when the component requests to be closed.
       * Use in controlled mode (see open).
       *
       * @param {object} event The event source of the callback.
       */
      onClose: PropTypes.func,
      /**
       * @ignore
       */
      onFocus: PropTypes.func,
      /**
       * Callback fired when the component requests to be opened.
       * Use in controlled mode (see open).
       *
       * @param {object} event The event source of the callback.
       */
      onOpen: PropTypes.func,
      /**
       * If `true`, the component is shown.
       */
      open: PropTypes.bool,
      /**
       * @ignore
       */
      readOnly: PropTypes.bool,
      /**
       * Render the selected value.
       *
       * @param {any} value The `value` provided to the component.
       * @returns {ReactNode}
       */
      renderValue: PropTypes.func,
      /**
       * Props applied to the clickable div element.
       */
      SelectDisplayProps: PropTypes.object,
      /**
       * @ignore
       */
      tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      /**
       * @ignore
       */
      type: PropTypes.any,
      /**
       * The input value.
       */
      value: PropTypes.any,
      /**
       * The variant to use.
       */
      variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])
    } ;
    var SelectInput$1 = SelectInput;

    var _StyledInput, _StyledFilledInput;
    const _excluded$N = ["autoWidth", "children", "classes", "className", "defaultOpen", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"];
    const useUtilityClasses$G = ownerState => {
      const {
        classes
      } = ownerState;
      return classes;
    };
    const styledRootConfig = {
      name: 'MuiSelect',
      overridesResolver: (props, styles) => styles.root,
      shouldForwardProp: prop => rootShouldForwardProp(prop) && prop !== 'variant',
      slot: 'Root'
    };
    const StyledInput = styled$1(Input$1, styledRootConfig)('');
    const StyledOutlinedInput = styled$1(OutlinedInput$1, styledRootConfig)('');
    const StyledFilledInput = styled$1(FilledInput$1, styledRootConfig)('');
    const Select = /*#__PURE__*/React__namespace.forwardRef(function Select(inProps, ref) {
      const props = useThemeProps({
        name: 'MuiSelect',
        props: inProps
      });
      const {
          autoWidth = false,
          children,
          classes: classesProp = {},
          className,
          defaultOpen = false,
          displayEmpty = false,
          IconComponent = ArrowDropDownIcon,
          id,
          input,
          inputProps,
          label,
          labelId,
          MenuProps,
          multiple = false,
          native = false,
          onClose,
          onOpen,
          open,
          renderValue,
          SelectDisplayProps,
          variant: variantProp = 'outlined'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$N);
      const inputComponent = native ? NativeSelectInput$1 : SelectInput$1;
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ['variant']
      });
      const variant = fcs.variant || variantProp;
      const InputComponent = input || {
        standard: _StyledInput || (_StyledInput = /*#__PURE__*/jsxRuntime.exports.jsx(StyledInput, {})),
        outlined: /*#__PURE__*/jsxRuntime.exports.jsx(StyledOutlinedInput, {
          label: label
        }),
        filled: _StyledFilledInput || (_StyledFilledInput = /*#__PURE__*/jsxRuntime.exports.jsx(StyledFilledInput, {}))
      }[variant];
      const ownerState = _extends({}, props, {
        variant,
        classes: classesProp
      });
      const classes = useUtilityClasses$G(ownerState);
      const inputComponentRef = useForkRef(ref, InputComponent.ref);
      return /*#__PURE__*/jsxRuntime.exports.jsx(React__namespace.Fragment, {
        children: /*#__PURE__*/React__namespace.cloneElement(InputComponent, _extends({
          // Most of the logic is implemented in `SelectInput`.
          // The `Select` component is a simple API wrapper to expose something better to play with.
          inputComponent,
          inputProps: _extends({
            children,
            IconComponent,
            variant,
            type: undefined,
            // We render a select. We can ignore the type provided by the `Input`.
            multiple
          }, native ? {
            id
          } : {
            autoWidth,
            defaultOpen,
            displayEmpty,
            labelId,
            MenuProps,
            onClose,
            onOpen,
            open,
            renderValue,
            SelectDisplayProps: _extends({
              id
            }, SelectDisplayProps)
          }, inputProps, {
            classes: inputProps ? deepmerge(classes, inputProps.classes) : classes
          }, input ? input.props.inputProps : {})
        }, multiple && native && variant === 'outlined' ? {
          notched: true
        } : {}, {
          ref: inputComponentRef,
          className: clsx(InputComponent.props.className, className)
        }, !input && {
          variant
        }, other))
      });
    });
    Select.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * If `true`, the width of the popover will automatically be set according to the items inside the
       * menu, otherwise it will be at least the width of the select input.
       * @default false
       */
      autoWidth: PropTypes.bool,
      /**
       * The option elements to populate the select with.
       * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
       *
       * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       * @default {}
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * If `true`, the component is initially open. Use when the component open state is not controlled (i.e. the `open` prop is not defined).
       * You can only use it when the `native` prop is `false` (default).
       * @default false
       */
      defaultOpen: PropTypes.bool,
      /**
       * The default value. Use when the component is not controlled.
       */
      defaultValue: PropTypes.any,
      /**
       * If `true`, a value is displayed even if no items are selected.
       *
       * In order to display a meaningful value, a function can be passed to the `renderValue` prop which
       * returns the value to be displayed when no items are selected.
       *
       * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.
       * The label should either be hidden or forced to a shrunk state.
       * @default false
       */
      displayEmpty: PropTypes.bool,
      /**
       * The icon that displays the arrow.
       * @default ArrowDropDownIcon
       */
      IconComponent: PropTypes.elementType,
      /**
       * The `id` of the wrapper element or the `select` element when `native`.
       */
      id: PropTypes.string,
      /**
       * An `Input` element; does not have to be a material-ui specific `Input`.
       */
      input: PropTypes.element,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       * When `native` is `true`, the attributes are applied on the `select` element.
       */
      inputProps: PropTypes.object,
      /**
       * See [OutlinedInput#label](/material-ui/api/outlined-input/#props)
       */
      label: PropTypes.node,
      /**
       * The ID of an element that acts as an additional label. The Select will
       * be labelled by the additional label and the selected value.
       */
      labelId: PropTypes.string,
      /**
       * Props applied to the [`Menu`](/material-ui/api/menu/) element.
       */
      MenuProps: PropTypes.object,
      /**
       * If `true`, `value` must be an array and the menu will support multiple selections.
       * @default false
       */
      multiple: PropTypes.bool,
      /**
       * If `true`, the component uses a native `select` element.
       * @default false
       */
      native: PropTypes.bool,
      /**
       * Callback fired when a menu item is selected.
       *
       * @param {SelectChangeEvent<T>} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (any).
       * **Warning**: This is a generic event, not a change event, unless the change event is caused by browser autofill.
       * @param {object} [child] The react element that was selected when `native` is `false` (default).
       */
      onChange: PropTypes.func,
      /**
       * Callback fired when the component requests to be closed.
       * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select collapes).
       *
       * @param {object} event The event source of the callback.
       */
      onClose: PropTypes.func,
      /**
       * Callback fired when the component requests to be opened.
       * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select expands).
       *
       * @param {object} event The event source of the callback.
       */
      onOpen: PropTypes.func,
      /**
       * If `true`, the component is shown.
       * You can only use it when the `native` prop is `false` (default).
       */
      open: PropTypes.bool,
      /**
       * Render the selected value.
       * You can only use it when the `native` prop is `false` (default).
       *
       * @param {any} value The `value` provided to the component.
       * @returns {ReactNode}
       */
      renderValue: PropTypes.func,
      /**
       * Props applied to the clickable div element.
       */
      SelectDisplayProps: PropTypes.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The `input` value. Providing an empty string will select no options.
       * Set to an empty string `''` if you don't want any of the available options to be selected.
       *
       * If the value is an object it must have reference equality with the option in order to be selected.
       * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.
       */
      value: PropTypes.oneOfType([PropTypes.oneOf(['']), PropTypes.any]),
      /**
       * The variant to use.
       * @default 'outlined'
       */
      variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])
    } ;
    Select.muiName = 'Select';
    var Select$1 = Select;

    const _excluded$M = ["component", "components", "componentsProps", "color", "size", "slotProps", "slots"];
    const sliderClasses = _extends({}, sliderUnstyledClasses$1, generateUtilityClasses('MuiSlider', ['colorPrimary', 'colorSecondary', 'thumbColorPrimary', 'thumbColorSecondary', 'sizeSmall', 'thumbSizeSmall']));
    const SliderRoot = styled$1('span', {
      name: 'MuiSlider',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[`color${capitalize(ownerState.color)}`], ownerState.size !== 'medium' && styles[`size${capitalize(ownerState.size)}`], ownerState.marked && styles.marked, ownerState.orientation === 'vertical' && styles.vertical, ownerState.track === 'inverted' && styles.trackInverted, ownerState.track === false && styles.trackFalse];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      borderRadius: 12,
      boxSizing: 'content-box',
      display: 'inline-block',
      position: 'relative',
      cursor: 'pointer',
      touchAction: 'none',
      color: (theme.vars || theme).palette[ownerState.color].main,
      WebkitTapHighlightColor: 'transparent'
    }, ownerState.orientation === 'horizontal' && _extends({
      height: 4,
      width: '100%',
      padding: '13px 0',
      // The primary input mechanism of the device includes a pointing device of limited accuracy.
      '@media (pointer: coarse)': {
        // Reach 42px touch target, about ~8mm on screen.
        padding: '20px 0'
      }
    }, ownerState.size === 'small' && {
      height: 2
    }, ownerState.marked && {
      marginBottom: 20
    }), ownerState.orientation === 'vertical' && _extends({
      height: '100%',
      width: 4,
      padding: '0 13px',
      // The primary input mechanism of the device includes a pointing device of limited accuracy.
      '@media (pointer: coarse)': {
        // Reach 42px touch target, about ~8mm on screen.
        padding: '0 20px'
      }
    }, ownerState.size === 'small' && {
      width: 2
    }, ownerState.marked && {
      marginRight: 44
    }), {
      '@media print': {
        colorAdjust: 'exact'
      },
      [`&.${sliderClasses.disabled}`]: {
        pointerEvents: 'none',
        cursor: 'default',
        color: (theme.vars || theme).palette.grey[400]
      },
      [`&.${sliderClasses.dragging}`]: {
        [`& .${sliderClasses.thumb}, & .${sliderClasses.track}`]: {
          transition: 'none'
        }
      }
    }));
    SliderRoot.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * @ignore
       */
      children: PropTypes.node
    } ;
    const SliderRail = styled$1('span', {
      name: 'MuiSlider',
      slot: 'Rail',
      overridesResolver: (props, styles) => styles.rail
    })(({
      ownerState
    }) => _extends({
      display: 'block',
      position: 'absolute',
      borderRadius: 'inherit',
      backgroundColor: 'currentColor',
      opacity: 0.38
    }, ownerState.orientation === 'horizontal' && {
      width: '100%',
      height: 'inherit',
      top: '50%',
      transform: 'translateY(-50%)'
    }, ownerState.orientation === 'vertical' && {
      height: '100%',
      width: 'inherit',
      left: '50%',
      transform: 'translateX(-50%)'
    }, ownerState.track === 'inverted' && {
      opacity: 1
    }));
    SliderRail.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * @ignore
       */
      children: PropTypes.node
    } ;
    const SliderTrack = styled$1('span', {
      name: 'MuiSlider',
      slot: 'Track',
      overridesResolver: (props, styles) => styles.track
    })(({
      theme,
      ownerState
    }) => {
      const color =
      // Same logic as the LinearProgress track color
      theme.palette.mode === 'light' ? lighten(theme.palette[ownerState.color].main, 0.62) : darken(theme.palette[ownerState.color].main, 0.5);
      return _extends({
        display: 'block',
        position: 'absolute',
        borderRadius: 'inherit',
        border: '1px solid currentColor',
        backgroundColor: 'currentColor',
        transition: theme.transitions.create(['left', 'width', 'bottom', 'height'], {
          duration: theme.transitions.duration.shortest
        })
      }, ownerState.size === 'small' && {
        border: 'none'
      }, ownerState.orientation === 'horizontal' && {
        height: 'inherit',
        top: '50%',
        transform: 'translateY(-50%)'
      }, ownerState.orientation === 'vertical' && {
        width: 'inherit',
        left: '50%',
        transform: 'translateX(-50%)'
      }, ownerState.track === false && {
        display: 'none'
      }, ownerState.track === 'inverted' && {
        backgroundColor: theme.vars ? theme.vars.palette.Slider[`${ownerState.color}Track`] : color,
        borderColor: theme.vars ? theme.vars.palette.Slider[`${ownerState.color}Track`] : color
      });
    });
    SliderTrack.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * @ignore
       */
      children: PropTypes.node
    } ;
    const SliderThumb = styled$1('span', {
      name: 'MuiSlider',
      slot: 'Thumb',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.thumb, styles[`thumbColor${capitalize(ownerState.color)}`], ownerState.size !== 'medium' && styles[`thumbSize${capitalize(ownerState.size)}`]];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      position: 'absolute',
      width: 20,
      height: 20,
      boxSizing: 'border-box',
      borderRadius: '50%',
      outline: 0,
      backgroundColor: 'currentColor',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      transition: theme.transitions.create(['box-shadow', 'left', 'bottom'], {
        duration: theme.transitions.duration.shortest
      })
    }, ownerState.size === 'small' && {
      width: 12,
      height: 12
    }, ownerState.orientation === 'horizontal' && {
      top: '50%',
      transform: 'translate(-50%, -50%)'
    }, ownerState.orientation === 'vertical' && {
      left: '50%',
      transform: 'translate(-50%, 50%)'
    }, {
      '&:before': _extends({
        position: 'absolute',
        content: '""',
        borderRadius: 'inherit',
        width: '100%',
        height: '100%',
        boxShadow: (theme.vars || theme).shadows[2]
      }, ownerState.size === 'small' && {
        boxShadow: 'none'
      }),
      '&::after': {
        position: 'absolute',
        content: '""',
        borderRadius: '50%',
        // 42px is the hit target
        width: 42,
        height: 42,
        top: '50%',
        left: '50%',
        transform: 'translate(-50%, -50%)'
      },
      [`&:hover, &.${sliderClasses.focusVisible}`]: {
        boxShadow: `0px 0px 0px 8px ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.16)` : alpha(theme.palette[ownerState.color].main, 0.16)}`,
        '@media (hover: none)': {
          boxShadow: 'none'
        }
      },
      [`&.${sliderClasses.active}`]: {
        boxShadow: `0px 0px 0px 14px ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.16)` : alpha(theme.palette[ownerState.color].main, 0.16)}`
      },
      [`&.${sliderClasses.disabled}`]: {
        '&:hover': {
          boxShadow: 'none'
        }
      }
    }));
    SliderThumb.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * @ignore
       */
      children: PropTypes.node
    } ;
    const SliderValueLabel = styled$1(SliderValueLabelUnstyled, {
      name: 'MuiSlider',
      slot: 'ValueLabel',
      overridesResolver: (props, styles) => styles.valueLabel
    })(({
      theme,
      ownerState
    }) => _extends({
      [`&.${sliderClasses.valueLabelOpen}`]: {
        transform: 'translateY(-100%) scale(1)'
      },
      zIndex: 1,
      whiteSpace: 'nowrap'
    }, theme.typography.body2, {
      fontWeight: 500,
      transition: theme.transitions.create(['transform'], {
        duration: theme.transitions.duration.shortest
      }),
      transform: 'translateY(-100%) scale(0)',
      position: 'absolute',
      backgroundColor: (theme.vars || theme).palette.grey[600],
      borderRadius: 2,
      color: (theme.vars || theme).palette.common.white,
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      padding: '0.25rem 0.75rem'
    }, ownerState.orientation === 'horizontal' && {
      top: '-10px',
      transformOrigin: 'bottom center',
      '&:before': {
        position: 'absolute',
        content: '""',
        width: 8,
        height: 8,
        transform: 'translate(-50%, 50%) rotate(45deg)',
        backgroundColor: 'inherit',
        bottom: 0,
        left: '50%'
      }
    }, ownerState.orientation === 'vertical' && {
      right: '30px',
      top: '24px',
      transformOrigin: 'right center',
      '&:before': {
        position: 'absolute',
        content: '""',
        width: 8,
        height: 8,
        transform: 'translate(-50%, 50%) rotate(45deg)',
        backgroundColor: 'inherit',
        right: '-20%',
        top: '25%'
      }
    }, ownerState.size === 'small' && {
      fontSize: theme.typography.pxToRem(12),
      padding: '0.25rem 0.5rem'
    }));
    SliderValueLabel.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * @ignore
       */
      children: PropTypes.node
    } ;
    const SliderMark = styled$1('span', {
      name: 'MuiSlider',
      slot: 'Mark',
      shouldForwardProp: prop => slotShouldForwardProp(prop) && prop !== 'markActive',
      overridesResolver: (props, styles) => styles.mark
    })(({
      theme,
      ownerState,
      markActive
    }) => _extends({
      position: 'absolute',
      width: 2,
      height: 2,
      borderRadius: 1,
      backgroundColor: 'currentColor'
    }, ownerState.orientation === 'horizontal' && {
      top: '50%',
      transform: 'translate(-1px, -50%)'
    }, ownerState.orientation === 'vertical' && {
      left: '50%',
      transform: 'translate(-50%, 1px)'
    }, markActive && {
      backgroundColor: (theme.vars || theme).palette.background.paper,
      opacity: 0.8
    }));
    SliderMark.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * @ignore
       */
      children: PropTypes.node
    } ;
    const SliderMarkLabel = styled$1('span', {
      name: 'MuiSlider',
      slot: 'MarkLabel',
      shouldForwardProp: prop => slotShouldForwardProp(prop) && prop !== 'markLabelActive',
      overridesResolver: (props, styles) => styles.markLabel
    })(({
      theme,
      ownerState,
      markLabelActive
    }) => _extends({}, theme.typography.body2, {
      color: (theme.vars || theme).palette.text.secondary,
      position: 'absolute',
      whiteSpace: 'nowrap'
    }, ownerState.orientation === 'horizontal' && {
      top: 30,
      transform: 'translateX(-50%)',
      '@media (pointer: coarse)': {
        top: 40
      }
    }, ownerState.orientation === 'vertical' && {
      left: 36,
      transform: 'translateY(50%)',
      '@media (pointer: coarse)': {
        left: 44
      }
    }, markLabelActive && {
      color: (theme.vars || theme).palette.text.primary
    }));
    SliderMarkLabel.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * @ignore
       */
      children: PropTypes.node
    } ;
    const extendUtilityClasses = ownerState => {
      const {
        color,
        size,
        classes = {}
      } = ownerState;
      return _extends({}, classes, {
        root: clsx(classes.root, getSliderUtilityClass(`color${capitalize(color)}`), classes[`color${capitalize(color)}`], size && [getSliderUtilityClass(`size${capitalize(size)}`), classes[`size${capitalize(size)}`]]),
        thumb: clsx(classes.thumb, getSliderUtilityClass(`thumbColor${capitalize(color)}`), classes[`thumbColor${capitalize(color)}`], size && [getSliderUtilityClass(`thumbSize${capitalize(size)}`), classes[`thumbSize${capitalize(size)}`]])
      });
    };
    const Slider = /*#__PURE__*/React__namespace.forwardRef(function Slider(inputProps, ref) {
      var _ref, _slots$root, _ref2, _slots$rail, _ref3, _slots$track, _ref4, _slots$thumb, _ref5, _slots$valueLabel, _ref6, _slots$mark, _ref7, _slots$markLabel, _slots$input, _slotProps$root, _slotProps$rail, _slotProps$track, _slotProps$thumb, _slotProps$valueLabel, _slotProps$mark, _slotProps$markLabel, _slotProps$input;
      const props = useThemeProps({
        props: inputProps,
        name: 'MuiSlider'
      });
      const theme = useTheme();
      const isRtl = theme.direction === 'rtl';
      const {
          // eslint-disable-next-line react/prop-types
          component = 'span',
          components = {},
          componentsProps = {},
          color = 'primary',
          size = 'medium',
          slotProps,
          slots
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$M);
      const ownerState = _extends({}, props, {
        color,
        size
      });
      const classes = extendUtilityClasses(ownerState);

      // support both `slots` and `components` for backward compatibility
      const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : SliderRoot;
      const RailSlot = (_ref2 = (_slots$rail = slots == null ? void 0 : slots.rail) != null ? _slots$rail : components.Rail) != null ? _ref2 : SliderRail;
      const TrackSlot = (_ref3 = (_slots$track = slots == null ? void 0 : slots.track) != null ? _slots$track : components.Track) != null ? _ref3 : SliderTrack;
      const ThumbSlot = (_ref4 = (_slots$thumb = slots == null ? void 0 : slots.thumb) != null ? _slots$thumb : components.Thumb) != null ? _ref4 : SliderThumb;
      const ValueLabelSlot = (_ref5 = (_slots$valueLabel = slots == null ? void 0 : slots.valueLabel) != null ? _slots$valueLabel : components.ValueLabel) != null ? _ref5 : SliderValueLabel;
      const MarkSlot = (_ref6 = (_slots$mark = slots == null ? void 0 : slots.mark) != null ? _slots$mark : components.Mark) != null ? _ref6 : SliderMark;
      const MarkLabelSlot = (_ref7 = (_slots$markLabel = slots == null ? void 0 : slots.markLabel) != null ? _slots$markLabel : components.MarkLabel) != null ? _ref7 : SliderMarkLabel;
      const InputSlot = (_slots$input = slots == null ? void 0 : slots.input) != null ? _slots$input : components.Input;
      const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
      const railSlotProps = (_slotProps$rail = slotProps == null ? void 0 : slotProps.rail) != null ? _slotProps$rail : componentsProps.rail;
      const trackSlotProps = (_slotProps$track = slotProps == null ? void 0 : slotProps.track) != null ? _slotProps$track : componentsProps.track;
      const thumbSlotProps = (_slotProps$thumb = slotProps == null ? void 0 : slotProps.thumb) != null ? _slotProps$thumb : componentsProps.thumb;
      const valueLabelSlotProps = (_slotProps$valueLabel = slotProps == null ? void 0 : slotProps.valueLabel) != null ? _slotProps$valueLabel : componentsProps.valueLabel;
      const markSlotProps = (_slotProps$mark = slotProps == null ? void 0 : slotProps.mark) != null ? _slotProps$mark : componentsProps.mark;
      const markLabelSlotProps = (_slotProps$markLabel = slotProps == null ? void 0 : slotProps.markLabel) != null ? _slotProps$markLabel : componentsProps.markLabel;
      const inputSlotProps = (_slotProps$input = slotProps == null ? void 0 : slotProps.input) != null ? _slotProps$input : componentsProps.input;
      return /*#__PURE__*/jsxRuntime.exports.jsx(SliderUnstyled$1, _extends({}, other, {
        isRtl: isRtl,
        slots: {
          root: RootSlot,
          rail: RailSlot,
          track: TrackSlot,
          thumb: ThumbSlot,
          valueLabel: ValueLabelSlot,
          mark: MarkSlot,
          markLabel: MarkLabelSlot,
          input: InputSlot
        },
        slotProps: _extends({}, componentsProps, {
          root: _extends({}, rootSlotProps, shouldSpreadAdditionalProps$1(RootSlot) && {
            as: component,
            ownerState: _extends({}, rootSlotProps == null ? void 0 : rootSlotProps.ownerState, {
              color,
              size
            })
          }),
          rail: railSlotProps,
          thumb: _extends({}, thumbSlotProps, shouldSpreadAdditionalProps$1(ThumbSlot) && {
            ownerState: _extends({}, thumbSlotProps == null ? void 0 : thumbSlotProps.ownerState, {
              color,
              size
            })
          }),
          track: _extends({}, trackSlotProps, shouldSpreadAdditionalProps$1(TrackSlot) && {
            ownerState: _extends({}, trackSlotProps == null ? void 0 : trackSlotProps.ownerState, {
              color,
              size
            })
          }),
          valueLabel: _extends({}, valueLabelSlotProps, shouldSpreadAdditionalProps$1(ValueLabelSlot) && {
            ownerState: _extends({}, valueLabelSlotProps == null ? void 0 : valueLabelSlotProps.ownerState, {
              color,
              size
            })
          }),
          mark: markSlotProps,
          markLabel: markLabelSlotProps,
          input: inputSlotProps
        }),
        classes: classes,
        ref: ref
      }));
    });
    Slider.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The label of the slider.
       */
      'aria-label': chainPropTypes(PropTypes.string, props => {
        const range = Array.isArray(props.value || props.defaultValue);
        if (range && props['aria-label'] != null) {
          return new Error('MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.');
        }
        return null;
      }),
      /**
       * The id of the element containing a label for the slider.
       */
      'aria-labelledby': PropTypes.string,
      /**
       * A string value that provides a user-friendly name for the current value of the slider.
       */
      'aria-valuetext': chainPropTypes(PropTypes.string, props => {
        const range = Array.isArray(props.value || props.defaultValue);
        if (range && props['aria-valuetext'] != null) {
          return new Error('MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.');
        }
        return null;
      }),
      /**
       * @ignore
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
       * @default 'primary'
       */
      color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary']), PropTypes.string]),
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `slots` prop.
       * It's recommended to use the `slots` prop instead.
       *
       * @default {}
       */
      components: PropTypes.shape({
        Input: PropTypes.elementType,
        Mark: PropTypes.elementType,
        MarkLabel: PropTypes.elementType,
        Rail: PropTypes.elementType,
        Root: PropTypes.elementType,
        Thumb: PropTypes.elementType,
        Track: PropTypes.elementType,
        ValueLabel: PropTypes.elementType
      }),
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * This prop is an alias for the `slotProps` prop.
       * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
       *
       * @default {}
       */
      componentsProps: PropTypes.shape({
        input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        mark: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        markLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        rail: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        thumb: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        track: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        valueLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
          children: PropTypes.element,
          className: PropTypes.string,
          open: PropTypes.bool,
          style: PropTypes.object,
          value: PropTypes.number,
          valueLabelDisplay: PropTypes.oneOf(['auto', 'off', 'on'])
        })])
      }),
      /**
       * The default value. Use when the component is not controlled.
       */
      defaultValue: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
       * @default false
       */
      disableSwap: PropTypes.bool,
      /**
       * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
       * This is important for screen reader users.
       * @param {number} index The thumb label's index to format.
       * @returns {string}
       */
      getAriaLabel: PropTypes.func,
      /**
       * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
       * This is important for screen reader users.
       * @param {number} value The thumb label's value to format.
       * @param {number} index The thumb label's index to format.
       * @returns {string}
       */
      getAriaValueText: PropTypes.func,
      /**
       * Indicates whether the theme context has rtl direction. It is set automatically.
       * @default false
       */
      isRtl: PropTypes.bool,
      /**
       * Marks indicate predetermined values to which the user can move the slider.
       * If `true` the marks are spaced according the value of the `step` prop.
       * If an array, it should contain objects with `value` and an optional `label` keys.
       * @default false
       */
      marks: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape({
        label: PropTypes.node,
        value: PropTypes.number.isRequired
      })), PropTypes.bool]),
      /**
       * The maximum allowed value of the slider.
       * Should not be equal to min.
       * @default 100
       */
      max: PropTypes.number,
      /**
       * The minimum allowed value of the slider.
       * Should not be equal to max.
       * @default 0
       */
      min: PropTypes.number,
      /**
       * Name attribute of the hidden `input` element.
       */
      name: PropTypes.string,
      /**
       * Callback function that is fired when the slider's value changed.
       *
       * @param {Event} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (any).
       * **Warning**: This is a generic event not a change event.
       * @param {number | number[]} value The new value.
       * @param {number} activeThumb Index of the currently moved thumb.
       */
      onChange: PropTypes.func,
      /**
       * Callback function that is fired when the `mouseup` is triggered.
       *
       * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
       * @param {number | number[]} value The new value.
       */
      onChangeCommitted: PropTypes.func,
      /**
       * The component orientation.
       * @default 'horizontal'
       */
      orientation: PropTypes.oneOf(['horizontal', 'vertical']),
      /**
       * A transformation function, to change the scale of the slider.
       * @default (x) => x
       */
      scale: PropTypes.func,
      /**
       * The size of the slider.
       * @default 'medium'
       */
      size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),
      /**
       * The props used for each slot inside the Slider.
       * @default {}
       */
      slotProps: PropTypes.shape({
        input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        mark: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        markLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        rail: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        thumb: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        track: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        valueLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
          children: PropTypes.element,
          className: PropTypes.string,
          open: PropTypes.bool,
          style: PropTypes.object,
          value: PropTypes.number,
          valueLabelDisplay: PropTypes.oneOf(['auto', 'off', 'on'])
        })])
      }),
      /**
       * The components used for each slot inside the Slider.
       * Either a string to use a HTML element or a component.
       * @default {}
       */
      slots: PropTypes.shape({
        input: PropTypes.elementType,
        mark: PropTypes.elementType,
        markLabel: PropTypes.elementType,
        rail: PropTypes.elementType,
        root: PropTypes.elementType,
        thumb: PropTypes.elementType,
        track: PropTypes.elementType,
        valueLabel: PropTypes.elementType
      }),
      /**
       * The granularity with which the slider can step through values. (A "discrete" slider.)
       * The `min` prop serves as the origin for the valid values.
       * We recommend (max - min) to be evenly divisible by the step.
       *
       * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
       * @default 1
       */
      step: PropTypes.number,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * Tab index attribute of the hidden `input` element.
       */
      tabIndex: PropTypes.number,
      /**
       * The track presentation:
       *
       * - `normal` the track will render a bar representing the slider value.
       * - `inverted` the track will render a bar representing the remaining slider value.
       * - `false` the track will render without a bar.
       * @default 'normal'
       */
      track: PropTypes.oneOf(['inverted', 'normal', false]),
      /**
       * The value of the slider.
       * For ranged sliders, provide an array with two values.
       */
      value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),
      /**
       * Controls when the value label is displayed:
       *
       * - `auto` the value label will display when the thumb is hovered or focused.
       * - `on` will display persistently.
       * - `off` will never display.
       * @default 'off'
       */
      valueLabelDisplay: PropTypes.oneOf(['auto', 'off', 'on']),
      /**
       * The format function the value label's value.
       *
       * When a function is provided, it should have the following signature:
       *
       * - {number} value The value label's value to format
       * - {number} index The value label's index to format
       * @default (x) => x
       */
      valueLabelFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string])
    } ;
    var Slider$1 = Slider;

    function getTooltipUtilityClass(slot) {
      return generateUtilityClass('MuiTooltip', slot);
    }
    const tooltipClasses = generateUtilityClasses('MuiTooltip', ['popper', 'popperInteractive', 'popperArrow', 'popperClose', 'tooltip', 'tooltipArrow', 'touch', 'tooltipPlacementLeft', 'tooltipPlacementRight', 'tooltipPlacementTop', 'tooltipPlacementBottom', 'arrow']);
    var tooltipClasses$1 = tooltipClasses;

    const _excluded$L = ["arrow", "children", "classes", "components", "componentsProps", "describeChild", "disableFocusListener", "disableHoverListener", "disableInteractive", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "followCursor", "id", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "slotProps", "slots", "title", "TransitionComponent", "TransitionProps"];
    function round(value) {
      return Math.round(value * 1e5) / 1e5;
    }
    const useUtilityClasses$F = ownerState => {
      const {
        classes,
        disableInteractive,
        arrow,
        touch,
        placement
      } = ownerState;
      const slots = {
        popper: ['popper', !disableInteractive && 'popperInteractive', arrow && 'popperArrow'],
        tooltip: ['tooltip', arrow && 'tooltipArrow', touch && 'touch', `tooltipPlacement${capitalize(placement.split('-')[0])}`],
        arrow: ['arrow']
      };
      return composeClasses(slots, getTooltipUtilityClass, classes);
    };
    const TooltipPopper = styled$1(Popper$1, {
      name: 'MuiTooltip',
      slot: 'Popper',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.popper, !ownerState.disableInteractive && styles.popperInteractive, ownerState.arrow && styles.popperArrow, !ownerState.open && styles.popperClose];
      }
    })(({
      theme,
      ownerState,
      open
    }) => _extends({
      zIndex: (theme.vars || theme).zIndex.tooltip,
      pointerEvents: 'none'
    }, !ownerState.disableInteractive && {
      pointerEvents: 'auto'
    }, !open && {
      pointerEvents: 'none'
    }, ownerState.arrow && {
      [`&[data-popper-placement*="bottom"] .${tooltipClasses$1.arrow}`]: {
        top: 0,
        marginTop: '-0.71em',
        '&::before': {
          transformOrigin: '0 100%'
        }
      },
      [`&[data-popper-placement*="top"] .${tooltipClasses$1.arrow}`]: {
        bottom: 0,
        marginBottom: '-0.71em',
        '&::before': {
          transformOrigin: '100% 0'
        }
      },
      [`&[data-popper-placement*="right"] .${tooltipClasses$1.arrow}`]: _extends({}, !ownerState.isRtl ? {
        left: 0,
        marginLeft: '-0.71em'
      } : {
        right: 0,
        marginRight: '-0.71em'
      }, {
        height: '1em',
        width: '0.71em',
        '&::before': {
          transformOrigin: '100% 100%'
        }
      }),
      [`&[data-popper-placement*="left"] .${tooltipClasses$1.arrow}`]: _extends({}, !ownerState.isRtl ? {
        right: 0,
        marginRight: '-0.71em'
      } : {
        left: 0,
        marginLeft: '-0.71em'
      }, {
        height: '1em',
        width: '0.71em',
        '&::before': {
          transformOrigin: '0 0'
        }
      })
    }));
    const TooltipTooltip = styled$1('div', {
      name: 'MuiTooltip',
      slot: 'Tooltip',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.tooltip, ownerState.touch && styles.touch, ownerState.arrow && styles.tooltipArrow, styles[`tooltipPlacement${capitalize(ownerState.placement.split('-')[0])}`]];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      backgroundColor: theme.vars ? theme.vars.palette.Tooltip.bg : alpha(theme.palette.grey[700], 0.92),
      borderRadius: (theme.vars || theme).shape.borderRadius,
      color: (theme.vars || theme).palette.common.white,
      fontFamily: theme.typography.fontFamily,
      padding: '4px 8px',
      fontSize: theme.typography.pxToRem(11),
      maxWidth: 300,
      margin: 2,
      wordWrap: 'break-word',
      fontWeight: theme.typography.fontWeightMedium
    }, ownerState.arrow && {
      position: 'relative',
      margin: 0
    }, ownerState.touch && {
      padding: '8px 16px',
      fontSize: theme.typography.pxToRem(14),
      lineHeight: `${round(16 / 14)}em`,
      fontWeight: theme.typography.fontWeightRegular
    }, {
      [`.${tooltipClasses$1.popper}[data-popper-placement*="left"] &`]: _extends({
        transformOrigin: 'right center'
      }, !ownerState.isRtl ? _extends({
        marginRight: '14px'
      }, ownerState.touch && {
        marginRight: '24px'
      }) : _extends({
        marginLeft: '14px'
      }, ownerState.touch && {
        marginLeft: '24px'
      })),
      [`.${tooltipClasses$1.popper}[data-popper-placement*="right"] &`]: _extends({
        transformOrigin: 'left center'
      }, !ownerState.isRtl ? _extends({
        marginLeft: '14px'
      }, ownerState.touch && {
        marginLeft: '24px'
      }) : _extends({
        marginRight: '14px'
      }, ownerState.touch && {
        marginRight: '24px'
      })),
      [`.${tooltipClasses$1.popper}[data-popper-placement*="top"] &`]: _extends({
        transformOrigin: 'center bottom',
        marginBottom: '14px'
      }, ownerState.touch && {
        marginBottom: '24px'
      }),
      [`.${tooltipClasses$1.popper}[data-popper-placement*="bottom"] &`]: _extends({
        transformOrigin: 'center top',
        marginTop: '14px'
      }, ownerState.touch && {
        marginTop: '24px'
      })
    }));
    const TooltipArrow = styled$1('span', {
      name: 'MuiTooltip',
      slot: 'Arrow',
      overridesResolver: (props, styles) => styles.arrow
    })(({
      theme
    }) => ({
      overflow: 'hidden',
      position: 'absolute',
      width: '1em',
      height: '0.71em' /* = width / sqrt(2) = (length of the hypotenuse) */,
      boxSizing: 'border-box',
      color: theme.vars ? theme.vars.palette.Tooltip.bg : alpha(theme.palette.grey[700], 0.9),
      '&::before': {
        content: '""',
        margin: 'auto',
        display: 'block',
        width: '100%',
        height: '100%',
        backgroundColor: 'currentColor',
        transform: 'rotate(45deg)'
      }
    }));
    let hystersisOpen = false;
    let hystersisTimer = null;
    function composeEventHandler(handler, eventHandler) {
      return event => {
        if (eventHandler) {
          eventHandler(event);
        }
        handler(event);
      };
    }

    // TODO v6: Remove PopperComponent, PopperProps, TransitionComponent and TransitionProps.
    const Tooltip = /*#__PURE__*/React__namespace.forwardRef(function Tooltip(inProps, ref) {
      var _ref, _slots$popper, _ref2, _ref3, _slots$transition, _ref4, _slots$tooltip, _ref5, _slots$arrow, _slotProps$popper, _ref6, _slotProps$popper2, _slotProps$transition, _slotProps$tooltip, _ref7, _slotProps$tooltip2, _slotProps$arrow, _ref8, _slotProps$arrow2;
      const props = useThemeProps({
        props: inProps,
        name: 'MuiTooltip'
      });
      const {
          arrow = false,
          children,
          components = {},
          componentsProps = {},
          describeChild = false,
          disableFocusListener = false,
          disableHoverListener = false,
          disableInteractive: disableInteractiveProp = false,
          disableTouchListener = false,
          enterDelay = 100,
          enterNextDelay = 0,
          enterTouchDelay = 700,
          followCursor = false,
          id: idProp,
          leaveDelay = 0,
          leaveTouchDelay = 1500,
          onClose,
          onOpen,
          open: openProp,
          placement = 'bottom',
          PopperComponent: PopperComponentProp,
          PopperProps = {},
          slotProps = {},
          slots = {},
          title,
          TransitionComponent: TransitionComponentProp = Grow$1,
          TransitionProps
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$L);
      const theme = useTheme();
      const isRtl = theme.direction === 'rtl';
      const [childNode, setChildNode] = React__namespace.useState();
      const [arrowRef, setArrowRef] = React__namespace.useState(null);
      const ignoreNonTouchEvents = React__namespace.useRef(false);
      const disableInteractive = disableInteractiveProp || followCursor;
      const closeTimer = React__namespace.useRef();
      const enterTimer = React__namespace.useRef();
      const leaveTimer = React__namespace.useRef();
      const touchTimer = React__namespace.useRef();
      const [openState, setOpenState] = useControlled({
        controlled: openProp,
        default: false,
        name: 'Tooltip',
        state: 'open'
      });
      let open = openState;
      {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        const {
          current: isControlled
        } = React__namespace.useRef(openProp !== undefined);

        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__namespace.useEffect(() => {
          if (childNode && childNode.disabled && !isControlled && title !== '' && childNode.tagName.toLowerCase() === 'button') {
            console.error(['MUI: You are providing a disabled `button` child to the Tooltip component.', 'A disabled element does not fire events.', "Tooltip needs to listen to the child element's events to display the title.", '', 'Add a simple wrapper element, such as a `span`.'].join('\n'));
          }
        }, [title, childNode, isControlled]);
      }
      const id = useId(idProp);
      const prevUserSelect = React__namespace.useRef();
      const stopTouchInteraction = React__namespace.useCallback(() => {
        if (prevUserSelect.current !== undefined) {
          document.body.style.WebkitUserSelect = prevUserSelect.current;
          prevUserSelect.current = undefined;
        }
        clearTimeout(touchTimer.current);
      }, []);
      React__namespace.useEffect(() => {
        return () => {
          clearTimeout(closeTimer.current);
          clearTimeout(enterTimer.current);
          clearTimeout(leaveTimer.current);
          stopTouchInteraction();
        };
      }, [stopTouchInteraction]);
      const handleOpen = event => {
        clearTimeout(hystersisTimer);
        hystersisOpen = true;

        // The mouseover event will trigger for every nested element in the tooltip.
        // We can skip rerendering when the tooltip is already open.
        // We are using the mouseover event instead of the mouseenter event to fix a hide/show issue.
        setOpenState(true);
        if (onOpen && !open) {
          onOpen(event);
        }
      };
      const handleClose = useEventCallback(
      /**
       * @param {React.SyntheticEvent | Event} event
       */
      event => {
        clearTimeout(hystersisTimer);
        hystersisTimer = setTimeout(() => {
          hystersisOpen = false;
        }, 800 + leaveDelay);
        setOpenState(false);
        if (onClose && open) {
          onClose(event);
        }
        clearTimeout(closeTimer.current);
        closeTimer.current = setTimeout(() => {
          ignoreNonTouchEvents.current = false;
        }, theme.transitions.duration.shortest);
      });
      const handleEnter = event => {
        if (ignoreNonTouchEvents.current && event.type !== 'touchstart') {
          return;
        }

        // Remove the title ahead of time.
        // We don't want to wait for the next render commit.
        // We would risk displaying two tooltips at the same time (native + this one).
        if (childNode) {
          childNode.removeAttribute('title');
        }
        clearTimeout(enterTimer.current);
        clearTimeout(leaveTimer.current);
        if (enterDelay || hystersisOpen && enterNextDelay) {
          enterTimer.current = setTimeout(() => {
            handleOpen(event);
          }, hystersisOpen ? enterNextDelay : enterDelay);
        } else {
          handleOpen(event);
        }
      };
      const handleLeave = event => {
        clearTimeout(enterTimer.current);
        clearTimeout(leaveTimer.current);
        leaveTimer.current = setTimeout(() => {
          handleClose(event);
        }, leaveDelay);
      };
      const {
        isFocusVisibleRef,
        onBlur: handleBlurVisible,
        onFocus: handleFocusVisible,
        ref: focusVisibleRef
      } = useIsFocusVisible();
      // We don't necessarily care about the focusVisible state (which is safe to access via ref anyway).
      // We just need to re-render the Tooltip if the focus-visible state changes.
      const [, setChildIsFocusVisible] = React__namespace.useState(false);
      const handleBlur = event => {
        handleBlurVisible(event);
        if (isFocusVisibleRef.current === false) {
          setChildIsFocusVisible(false);
          handleLeave(event);
        }
      };
      const handleFocus = event => {
        // Workaround for https://github.com/facebook/react/issues/7769
        // The autoFocus of React might trigger the event before the componentDidMount.
        // We need to account for this eventuality.
        if (!childNode) {
          setChildNode(event.currentTarget);
        }
        handleFocusVisible(event);
        if (isFocusVisibleRef.current === true) {
          setChildIsFocusVisible(true);
          handleEnter(event);
        }
      };
      const detectTouchStart = event => {
        ignoreNonTouchEvents.current = true;
        const childrenProps = children.props;
        if (childrenProps.onTouchStart) {
          childrenProps.onTouchStart(event);
        }
      };
      const handleMouseOver = handleEnter;
      const handleMouseLeave = handleLeave;
      const handleTouchStart = event => {
        detectTouchStart(event);
        clearTimeout(leaveTimer.current);
        clearTimeout(closeTimer.current);
        stopTouchInteraction();
        prevUserSelect.current = document.body.style.WebkitUserSelect;
        // Prevent iOS text selection on long-tap.
        document.body.style.WebkitUserSelect = 'none';
        touchTimer.current = setTimeout(() => {
          document.body.style.WebkitUserSelect = prevUserSelect.current;
          handleEnter(event);
        }, enterTouchDelay);
      };
      const handleTouchEnd = event => {
        if (children.props.onTouchEnd) {
          children.props.onTouchEnd(event);
        }
        stopTouchInteraction();
        clearTimeout(leaveTimer.current);
        leaveTimer.current = setTimeout(() => {
          handleClose(event);
        }, leaveTouchDelay);
      };
      React__namespace.useEffect(() => {
        if (!open) {
          return undefined;
        }

        /**
         * @param {KeyboardEvent} nativeEvent
         */
        function handleKeyDown(nativeEvent) {
          // IE11, Edge (prior to using Bink?) use 'Esc'
          if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') {
            handleClose(nativeEvent);
          }
        }
        document.addEventListener('keydown', handleKeyDown);
        return () => {
          document.removeEventListener('keydown', handleKeyDown);
        };
      }, [handleClose, open]);
      const handleRef = useForkRef(children.ref, focusVisibleRef, setChildNode, ref);

      // There is no point in displaying an empty tooltip.
      if (!title && title !== 0) {
        open = false;
      }
      const positionRef = React__namespace.useRef({
        x: 0,
        y: 0
      });
      const popperRef = React__namespace.useRef();
      const handleMouseMove = event => {
        const childrenProps = children.props;
        if (childrenProps.onMouseMove) {
          childrenProps.onMouseMove(event);
        }
        positionRef.current = {
          x: event.clientX,
          y: event.clientY
        };
        if (popperRef.current) {
          popperRef.current.update();
        }
      };
      const nameOrDescProps = {};
      const titleIsString = typeof title === 'string';
      if (describeChild) {
        nameOrDescProps.title = !open && titleIsString && !disableHoverListener ? title : null;
        nameOrDescProps['aria-describedby'] = open ? id : null;
      } else {
        nameOrDescProps['aria-label'] = titleIsString ? title : null;
        nameOrDescProps['aria-labelledby'] = open && !titleIsString ? id : null;
      }
      const childrenProps = _extends({}, nameOrDescProps, other, children.props, {
        className: clsx(other.className, children.props.className),
        onTouchStart: detectTouchStart,
        ref: handleRef
      }, followCursor ? {
        onMouseMove: handleMouseMove
      } : {});
      {
        childrenProps['data-mui-internal-clone-element'] = true;

        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__namespace.useEffect(() => {
          if (childNode && !childNode.getAttribute('data-mui-internal-clone-element')) {
            console.error(['MUI: The `children` component of the Tooltip is not forwarding its props correctly.', 'Please make sure that props are spread on the same element that the ref is applied to.'].join('\n'));
          }
        }, [childNode]);
      }
      const interactiveWrapperListeners = {};
      if (!disableTouchListener) {
        childrenProps.onTouchStart = handleTouchStart;
        childrenProps.onTouchEnd = handleTouchEnd;
      }
      if (!disableHoverListener) {
        childrenProps.onMouseOver = composeEventHandler(handleMouseOver, childrenProps.onMouseOver);
        childrenProps.onMouseLeave = composeEventHandler(handleMouseLeave, childrenProps.onMouseLeave);
        if (!disableInteractive) {
          interactiveWrapperListeners.onMouseOver = handleMouseOver;
          interactiveWrapperListeners.onMouseLeave = handleMouseLeave;
        }
      }
      if (!disableFocusListener) {
        childrenProps.onFocus = composeEventHandler(handleFocus, childrenProps.onFocus);
        childrenProps.onBlur = composeEventHandler(handleBlur, childrenProps.onBlur);
        if (!disableInteractive) {
          interactiveWrapperListeners.onFocus = handleFocus;
          interactiveWrapperListeners.onBlur = handleBlur;
        }
      }
      {
        if (children.props.title) {
          console.error(['MUI: You have provided a `title` prop to the child of <Tooltip />.', `Remove this title prop \`${children.props.title}\` or the Tooltip component.`].join('\n'));
        }
      }
      const popperOptions = React__namespace.useMemo(() => {
        var _PopperProps$popperOp;
        let tooltipModifiers = [{
          name: 'arrow',
          enabled: Boolean(arrowRef),
          options: {
            element: arrowRef,
            padding: 4
          }
        }];
        if ((_PopperProps$popperOp = PopperProps.popperOptions) != null && _PopperProps$popperOp.modifiers) {
          tooltipModifiers = tooltipModifiers.concat(PopperProps.popperOptions.modifiers);
        }
        return _extends({}, PopperProps.popperOptions, {
          modifiers: tooltipModifiers
        });
      }, [arrowRef, PopperProps]);
      const ownerState = _extends({}, props, {
        isRtl,
        arrow,
        disableInteractive,
        placement,
        PopperComponentProp,
        touch: ignoreNonTouchEvents.current
      });
      const classes = useUtilityClasses$F(ownerState);
      const PopperComponent = (_ref = (_slots$popper = slots.popper) != null ? _slots$popper : components.Popper) != null ? _ref : TooltipPopper;
      const TransitionComponent = (_ref2 = (_ref3 = (_slots$transition = slots.transition) != null ? _slots$transition : components.Transition) != null ? _ref3 : TransitionComponentProp) != null ? _ref2 : Grow$1;
      const TooltipComponent = (_ref4 = (_slots$tooltip = slots.tooltip) != null ? _slots$tooltip : components.Tooltip) != null ? _ref4 : TooltipTooltip;
      const ArrowComponent = (_ref5 = (_slots$arrow = slots.arrow) != null ? _slots$arrow : components.Arrow) != null ? _ref5 : TooltipArrow;
      const popperProps = appendOwnerState(PopperComponent, _extends({}, PopperProps, (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper, {
        className: clsx(classes.popper, PopperProps == null ? void 0 : PopperProps.className, (_ref6 = (_slotProps$popper2 = slotProps.popper) != null ? _slotProps$popper2 : componentsProps.popper) == null ? void 0 : _ref6.className)
      }), ownerState);
      const transitionProps = appendOwnerState(TransitionComponent, _extends({}, TransitionProps, (_slotProps$transition = slotProps.transition) != null ? _slotProps$transition : componentsProps.transition), ownerState);
      const tooltipProps = appendOwnerState(TooltipComponent, _extends({}, (_slotProps$tooltip = slotProps.tooltip) != null ? _slotProps$tooltip : componentsProps.tooltip, {
        className: clsx(classes.tooltip, (_ref7 = (_slotProps$tooltip2 = slotProps.tooltip) != null ? _slotProps$tooltip2 : componentsProps.tooltip) == null ? void 0 : _ref7.className)
      }), ownerState);
      const tooltipArrowProps = appendOwnerState(ArrowComponent, _extends({}, (_slotProps$arrow = slotProps.arrow) != null ? _slotProps$arrow : componentsProps.arrow, {
        className: clsx(classes.arrow, (_ref8 = (_slotProps$arrow2 = slotProps.arrow) != null ? _slotProps$arrow2 : componentsProps.arrow) == null ? void 0 : _ref8.className)
      }), ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
        children: [/*#__PURE__*/React__namespace.cloneElement(children, childrenProps), /*#__PURE__*/jsxRuntime.exports.jsx(PopperComponent, _extends({
          as: PopperComponentProp != null ? PopperComponentProp : Popper$1,
          placement: placement,
          anchorEl: followCursor ? {
            getBoundingClientRect: () => ({
              top: positionRef.current.y,
              left: positionRef.current.x,
              right: positionRef.current.x,
              bottom: positionRef.current.y,
              width: 0,
              height: 0
            })
          } : childNode,
          popperRef: popperRef,
          open: childNode ? open : false,
          id: id,
          transition: true
        }, interactiveWrapperListeners, popperProps, {
          popperOptions: popperOptions,
          children: ({
            TransitionProps: TransitionPropsInner
          }) => /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
            timeout: theme.transitions.duration.shorter
          }, TransitionPropsInner, transitionProps, {
            "data-foo": "bar",
            children: /*#__PURE__*/jsxRuntime.exports.jsxs(TooltipComponent, _extends({}, tooltipProps, {
              children: [title, arrow ? /*#__PURE__*/jsxRuntime.exports.jsx(ArrowComponent, _extends({}, tooltipArrowProps, {
                ref: setArrowRef
              })) : null]
            }))
          }))
        }))]
      });
    });
    Tooltip.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * If `true`, adds an arrow to the tooltip.
       * @default false
       */
      arrow: PropTypes.bool,
      /**
       * Tooltip reference element.
       */
      children: elementAcceptingRef$1.isRequired,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `slots` prop.
       * It's recommended to use the `slots` prop instead.
       *
       * @default {}
       */
      components: PropTypes.shape({
        Arrow: PropTypes.elementType,
        Popper: PropTypes.elementType,
        Tooltip: PropTypes.elementType,
        Transition: PropTypes.elementType
      }),
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * This prop is an alias for the `slotProps` prop.
       * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
       *
       * @default {}
       */
      componentsProps: PropTypes.shape({
        arrow: PropTypes.object,
        popper: PropTypes.object,
        tooltip: PropTypes.object,
        transition: PropTypes.object
      }),
      /**
       * Set to `true` if the `title` acts as an accessible description.
       * By default the `title` acts as an accessible label for the child.
       * @default false
       */
      describeChild: PropTypes.bool,
      /**
       * Do not respond to focus-visible events.
       * @default false
       */
      disableFocusListener: PropTypes.bool,
      /**
       * Do not respond to hover events.
       * @default false
       */
      disableHoverListener: PropTypes.bool,
      /**
       * Makes a tooltip not interactive, i.e. it will close when the user
       * hovers over the tooltip before the `leaveDelay` is expired.
       * @default false
       */
      disableInteractive: PropTypes.bool,
      /**
       * Do not respond to long press touch events.
       * @default false
       */
      disableTouchListener: PropTypes.bool,
      /**
       * The number of milliseconds to wait before showing the tooltip.
       * This prop won't impact the enter touch delay (`enterTouchDelay`).
       * @default 100
       */
      enterDelay: PropTypes.number,
      /**
       * The number of milliseconds to wait before showing the tooltip when one was already recently opened.
       * @default 0
       */
      enterNextDelay: PropTypes.number,
      /**
       * The number of milliseconds a user must touch the element before showing the tooltip.
       * @default 700
       */
      enterTouchDelay: PropTypes.number,
      /**
       * If `true`, the tooltip follow the cursor over the wrapped element.
       * @default false
       */
      followCursor: PropTypes.bool,
      /**
       * This prop is used to help implement the accessibility logic.
       * If you don't provide this prop. It falls back to a randomly generated id.
       */
      id: PropTypes.string,
      /**
       * The number of milliseconds to wait before hiding the tooltip.
       * This prop won't impact the leave touch delay (`leaveTouchDelay`).
       * @default 0
       */
      leaveDelay: PropTypes.number,
      /**
       * The number of milliseconds after the user stops touching an element before hiding the tooltip.
       * @default 1500
       */
      leaveTouchDelay: PropTypes.number,
      /**
       * Callback fired when the component requests to be closed.
       *
       * @param {React.SyntheticEvent} event The event source of the callback.
       */
      onClose: PropTypes.func,
      /**
       * Callback fired when the component requests to be open.
       *
       * @param {React.SyntheticEvent} event The event source of the callback.
       */
      onOpen: PropTypes.func,
      /**
       * If `true`, the component is shown.
       */
      open: PropTypes.bool,
      /**
       * Tooltip placement.
       * @default 'bottom'
       */
      placement: PropTypes.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),
      /**
       * The component used for the popper.
       * @default Popper
       */
      PopperComponent: PropTypes.elementType,
      /**
       * Props applied to the [`Popper`](/material-ui/api/popper/) element.
       * @default {}
       */
      PopperProps: PropTypes.object,
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slotProps: PropTypes.shape({
        arrow: PropTypes.object,
        popper: PropTypes.object,
        tooltip: PropTypes.object,
        transition: PropTypes.object
      }),
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `components` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slots: PropTypes.shape({
        arrow: PropTypes.elementType,
        popper: PropTypes.elementType,
        tooltip: PropTypes.elementType,
        transition: PropTypes.elementType
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * Tooltip title. Zero-length titles string, undefined, null and false are never displayed.
       */
      title: PropTypes.node,
      /**
       * The component used for the transition.
       * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
       * @default Grow
       */
      TransitionComponent: PropTypes.elementType,
      /**
       * Props applied to the transition element.
       * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
       */
      TransitionProps: PropTypes.object
    } ;
    var Tooltip$1 = Tooltip;

    /**
     * Provides information about the current step in Stepper.
     */
    const StepperContext = /*#__PURE__*/React__namespace.createContext({});
    {
      StepperContext.displayName = 'StepperContext';
    }
    var StepperContext$1 = StepperContext;

    /**
     * Provides information about the current step in Stepper.
     */
    const StepContext = /*#__PURE__*/React__namespace.createContext({});
    {
      StepContext.displayName = 'StepContext';
    }
    var StepContext$1 = StepContext;

    function getStepUtilityClass(slot) {
      return generateUtilityClass('MuiStep', slot);
    }
    generateUtilityClasses('MuiStep', ['root', 'horizontal', 'vertical', 'alternativeLabel', 'completed']);

    const _excluded$K = ["active", "children", "className", "component", "completed", "disabled", "expanded", "index", "last"];
    const useUtilityClasses$E = ownerState => {
      const {
        classes,
        orientation,
        alternativeLabel,
        completed
      } = ownerState;
      const slots = {
        root: ['root', orientation, alternativeLabel && 'alternativeLabel', completed && 'completed']
      };
      return composeClasses(slots, getStepUtilityClass, classes);
    };
    const StepRoot = styled$1('div', {
      name: 'MuiStep',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[ownerState.orientation], ownerState.alternativeLabel && styles.alternativeLabel, ownerState.completed && styles.completed];
      }
    })(({
      ownerState
    }) => _extends({}, ownerState.orientation === 'horizontal' && {
      paddingLeft: 8,
      paddingRight: 8
    }, ownerState.alternativeLabel && {
      flex: 1,
      position: 'relative'
    }));
    const Step = /*#__PURE__*/React__namespace.forwardRef(function Step(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiStep'
      });
      const {
          active: activeProp,
          children,
          className,
          component = 'div',
          completed: completedProp,
          disabled: disabledProp,
          expanded = false,
          index,
          last
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$K);
      const {
        activeStep,
        connector,
        alternativeLabel,
        orientation,
        nonLinear
      } = React__namespace.useContext(StepperContext$1);
      let [active = false, completed = false, disabled = false] = [activeProp, completedProp, disabledProp];
      if (activeStep === index) {
        active = activeProp !== undefined ? activeProp : true;
      } else if (!nonLinear && activeStep > index) {
        completed = completedProp !== undefined ? completedProp : true;
      } else if (!nonLinear && activeStep < index) {
        disabled = disabledProp !== undefined ? disabledProp : true;
      }
      const contextValue = React__namespace.useMemo(() => ({
        index,
        last,
        expanded,
        icon: index + 1,
        active,
        completed,
        disabled
      }), [index, last, expanded, active, completed, disabled]);
      const ownerState = _extends({}, props, {
        active,
        orientation,
        alternativeLabel,
        completed,
        disabled,
        expanded,
        component
      });
      const classes = useUtilityClasses$E(ownerState);
      const newChildren = /*#__PURE__*/jsxRuntime.exports.jsxs(StepRoot, _extends({
        as: component,
        className: clsx(classes.root, className),
        ref: ref,
        ownerState: ownerState
      }, other, {
        children: [connector && alternativeLabel && index !== 0 ? connector : null, children]
      }));
      return /*#__PURE__*/jsxRuntime.exports.jsx(StepContext$1.Provider, {
        value: contextValue,
        children: connector && !alternativeLabel && index !== 0 ? /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
          children: [connector, newChildren]
        }) : newChildren
      });
    });
    Step.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * Sets the step as active. Is passed to child components.
       */
      active: PropTypes.bool,
      /**
       * Should be `Step` sub-components such as `StepLabel`, `StepContent`.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * Mark the step as completed. Is passed to child components.
       */
      completed: PropTypes.bool,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * If `true`, the step is disabled, will also disable the button if
       * `StepButton` is a child of `Step`. Is passed to child components.
       */
      disabled: PropTypes.bool,
      /**
       * Expand the step.
       * @default false
       */
      expanded: PropTypes.bool,
      /**
       * The position of the step.
       * The prop defaults to the value inherited from the parent Stepper component.
       */
      index: integerPropType,
      /**
       * If `true`, the Step is displayed as rendered last.
       * The prop defaults to the value inherited from the parent Stepper component.
       */
      last: PropTypes.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var Step$1 = Step;

    var CheckCircle = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
      d: "M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm-2 17l-5-5 1.4-1.4 3.6 3.6 7.6-7.6L19 8l-9 9z"
    }), 'CheckCircle');

    var Warning = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
      d: "M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"
    }), 'Warning');

    function getStepIconUtilityClass(slot) {
      return generateUtilityClass('MuiStepIcon', slot);
    }
    const stepIconClasses = generateUtilityClasses('MuiStepIcon', ['root', 'active', 'completed', 'error', 'text']);
    var stepIconClasses$1 = stepIconClasses;

    var _circle;
    const _excluded$J = ["active", "className", "completed", "error", "icon"];
    const useUtilityClasses$D = ownerState => {
      const {
        classes,
        active,
        completed,
        error
      } = ownerState;
      const slots = {
        root: ['root', active && 'active', completed && 'completed', error && 'error'],
        text: ['text']
      };
      return composeClasses(slots, getStepIconUtilityClass, classes);
    };
    const StepIconRoot = styled$1(SvgIcon$1, {
      name: 'MuiStepIcon',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })(({
      theme
    }) => ({
      display: 'block',
      transition: theme.transitions.create('color', {
        duration: theme.transitions.duration.shortest
      }),
      color: (theme.vars || theme).palette.text.disabled,
      [`&.${stepIconClasses$1.completed}`]: {
        color: (theme.vars || theme).palette.primary.main
      },
      [`&.${stepIconClasses$1.active}`]: {
        color: (theme.vars || theme).palette.primary.main
      },
      [`&.${stepIconClasses$1.error}`]: {
        color: (theme.vars || theme).palette.error.main
      }
    }));
    const StepIconText = styled$1('text', {
      name: 'MuiStepIcon',
      slot: 'Text',
      overridesResolver: (props, styles) => styles.text
    })(({
      theme
    }) => ({
      fill: (theme.vars || theme).palette.primary.contrastText,
      fontSize: theme.typography.caption.fontSize,
      fontFamily: theme.typography.fontFamily
    }));
    const StepIcon = /*#__PURE__*/React__namespace.forwardRef(function StepIcon(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiStepIcon'
      });
      const {
          active = false,
          className: classNameProp,
          completed = false,
          error = false,
          icon
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$J);
      const ownerState = _extends({}, props, {
        active,
        completed,
        error
      });
      const classes = useUtilityClasses$D(ownerState);
      if (typeof icon === 'number' || typeof icon === 'string') {
        const className = clsx(classNameProp, classes.root);
        if (error) {
          return /*#__PURE__*/jsxRuntime.exports.jsx(StepIconRoot, _extends({
            as: Warning,
            className: className,
            ref: ref,
            ownerState: ownerState
          }, other));
        }
        if (completed) {
          return /*#__PURE__*/jsxRuntime.exports.jsx(StepIconRoot, _extends({
            as: CheckCircle,
            className: className,
            ref: ref,
            ownerState: ownerState
          }, other));
        }
        return /*#__PURE__*/jsxRuntime.exports.jsxs(StepIconRoot, _extends({
          className: className,
          ref: ref,
          ownerState: ownerState
        }, other, {
          children: [_circle || (_circle = /*#__PURE__*/jsxRuntime.exports.jsx("circle", {
            cx: "12",
            cy: "12",
            r: "12"
          })), /*#__PURE__*/jsxRuntime.exports.jsx(StepIconText, {
            className: classes.text,
            x: "12",
            y: "12",
            textAnchor: "middle",
            dominantBaseline: "central",
            ownerState: ownerState,
            children: icon
          })]
        }));
      }
      return icon;
    });
    StepIcon.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * Whether this step is active.
       * @default false
       */
      active: PropTypes.bool,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * Mark the step as completed. Is passed to child components.
       * @default false
       */
      completed: PropTypes.bool,
      /**
       * If `true`, the step is marked as failed.
       * @default false
       */
      error: PropTypes.bool,
      /**
       * The label displayed in the step icon.
       */
      icon: PropTypes.node,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var StepIcon$1 = StepIcon;

    function getStepLabelUtilityClass(slot) {
      return generateUtilityClass('MuiStepLabel', slot);
    }
    const stepLabelClasses = generateUtilityClasses('MuiStepLabel', ['root', 'horizontal', 'vertical', 'label', 'active', 'completed', 'error', 'disabled', 'iconContainer', 'alternativeLabel', 'labelContainer']);
    var stepLabelClasses$1 = stepLabelClasses;

    const _excluded$I = ["children", "className", "componentsProps", "error", "icon", "optional", "slotProps", "StepIconComponent", "StepIconProps"];
    const useUtilityClasses$C = ownerState => {
      const {
        classes,
        orientation,
        active,
        completed,
        error,
        disabled,
        alternativeLabel
      } = ownerState;
      const slots = {
        root: ['root', orientation, error && 'error', disabled && 'disabled', alternativeLabel && 'alternativeLabel'],
        label: ['label', active && 'active', completed && 'completed', error && 'error', disabled && 'disabled', alternativeLabel && 'alternativeLabel'],
        iconContainer: ['iconContainer', active && 'active', completed && 'completed', error && 'error', disabled && 'disabled', alternativeLabel && 'alternativeLabel'],
        labelContainer: ['labelContainer', alternativeLabel && 'alternativeLabel']
      };
      return composeClasses(slots, getStepLabelUtilityClass, classes);
    };
    const StepLabelRoot = styled$1('span', {
      name: 'MuiStepLabel',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[ownerState.orientation]];
      }
    })(({
      ownerState
    }) => _extends({
      display: 'flex',
      alignItems: 'center',
      [`&.${stepLabelClasses$1.alternativeLabel}`]: {
        flexDirection: 'column'
      },
      [`&.${stepLabelClasses$1.disabled}`]: {
        cursor: 'default'
      }
    }, ownerState.orientation === 'vertical' && {
      textAlign: 'left',
      padding: '8px 0'
    }));
    const StepLabelLabel = styled$1('span', {
      name: 'MuiStepLabel',
      slot: 'Label',
      overridesResolver: (props, styles) => styles.label
    })(({
      theme
    }) => _extends({}, theme.typography.body2, {
      display: 'block',
      transition: theme.transitions.create('color', {
        duration: theme.transitions.duration.shortest
      }),
      [`&.${stepLabelClasses$1.active}`]: {
        color: (theme.vars || theme).palette.text.primary,
        fontWeight: 500
      },
      [`&.${stepLabelClasses$1.completed}`]: {
        color: (theme.vars || theme).palette.text.primary,
        fontWeight: 500
      },
      [`&.${stepLabelClasses$1.alternativeLabel}`]: {
        marginTop: 16
      },
      [`&.${stepLabelClasses$1.error}`]: {
        color: (theme.vars || theme).palette.error.main
      }
    }));
    const StepLabelIconContainer = styled$1('span', {
      name: 'MuiStepLabel',
      slot: 'IconContainer',
      overridesResolver: (props, styles) => styles.iconContainer
    })(() => ({
      flexShrink: 0,
      // Fix IE11 issue
      display: 'flex',
      paddingRight: 8,
      [`&.${stepLabelClasses$1.alternativeLabel}`]: {
        paddingRight: 0
      }
    }));
    const StepLabelLabelContainer = styled$1('span', {
      name: 'MuiStepLabel',
      slot: 'LabelContainer',
      overridesResolver: (props, styles) => styles.labelContainer
    })(({
      theme
    }) => ({
      width: '100%',
      color: (theme.vars || theme).palette.text.secondary,
      [`&.${stepLabelClasses$1.alternativeLabel}`]: {
        textAlign: 'center'
      }
    }));
    const StepLabel = /*#__PURE__*/React__namespace.forwardRef(function StepLabel(inProps, ref) {
      var _slotProps$label;
      const props = useThemeProps({
        props: inProps,
        name: 'MuiStepLabel'
      });
      const {
          children,
          className,
          componentsProps = {},
          error = false,
          icon: iconProp,
          optional,
          slotProps = {},
          StepIconComponent: StepIconComponentProp,
          StepIconProps
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$I);
      const {
        alternativeLabel,
        orientation
      } = React__namespace.useContext(StepperContext$1);
      const {
        active,
        disabled,
        completed,
        icon: iconContext
      } = React__namespace.useContext(StepContext$1);
      const icon = iconProp || iconContext;
      let StepIconComponent = StepIconComponentProp;
      if (icon && !StepIconComponent) {
        StepIconComponent = StepIcon$1;
      }
      const ownerState = _extends({}, props, {
        active,
        alternativeLabel,
        completed,
        disabled,
        error,
        orientation
      });
      const classes = useUtilityClasses$C(ownerState);
      const labelSlotProps = (_slotProps$label = slotProps.label) != null ? _slotProps$label : componentsProps.label;
      return /*#__PURE__*/jsxRuntime.exports.jsxs(StepLabelRoot, _extends({
        className: clsx(classes.root, className),
        ref: ref,
        ownerState: ownerState
      }, other, {
        children: [icon || StepIconComponent ? /*#__PURE__*/jsxRuntime.exports.jsx(StepLabelIconContainer, {
          className: classes.iconContainer,
          ownerState: ownerState,
          children: /*#__PURE__*/jsxRuntime.exports.jsx(StepIconComponent, _extends({
            completed: completed,
            active: active,
            error: error,
            icon: icon
          }, StepIconProps))
        }) : null, /*#__PURE__*/jsxRuntime.exports.jsxs(StepLabelLabelContainer, {
          className: classes.labelContainer,
          ownerState: ownerState,
          children: [children ? /*#__PURE__*/jsxRuntime.exports.jsx(StepLabelLabel, _extends({
            ownerState: ownerState
          }, labelSlotProps, {
            className: clsx(classes.label, labelSlotProps == null ? void 0 : labelSlotProps.className),
            children: children
          })) : null, optional]
        })]
      }));
    });
    StepLabel.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * In most cases will simply be a string containing a title for the label.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The props used for each slot inside.
       * @default {}
       */
      componentsProps: PropTypes.shape({
        label: PropTypes.object
      }),
      /**
       * If `true`, the step is marked as failed.
       * @default false
       */
      error: PropTypes.bool,
      /**
       * Override the default label of the step icon.
       */
      icon: PropTypes.node,
      /**
       * The optional node to display.
       */
      optional: PropTypes.node,
      /**
       * The props used for each slot inside.
       * @default {}
       */
      slotProps: PropTypes.shape({
        label: PropTypes.object
      }),
      /**
       * The component to render in place of the [`StepIcon`](/material-ui/api/step-icon/).
       */
      StepIconComponent: PropTypes.elementType,
      /**
       * Props applied to the [`StepIcon`](/material-ui/api/step-icon/) element.
       */
      StepIconProps: PropTypes.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    StepLabel.muiName = 'StepLabel';
    var StepLabel$1 = StepLabel;

    function getStepButtonUtilityClass(slot) {
      return generateUtilityClass('MuiStepButton', slot);
    }
    const stepButtonClasses = generateUtilityClasses('MuiStepButton', ['root', 'horizontal', 'vertical', 'touchRipple']);
    var stepButtonClasses$1 = stepButtonClasses;

    const _excluded$H = ["children", "className", "icon", "optional"];
    const useUtilityClasses$B = ownerState => {
      const {
        classes,
        orientation
      } = ownerState;
      const slots = {
        root: ['root', orientation],
        touchRipple: ['touchRipple']
      };
      return composeClasses(slots, getStepButtonUtilityClass, classes);
    };
    const StepButtonRoot = styled$1(ButtonBase$1, {
      name: 'MuiStepButton',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${stepButtonClasses$1.touchRipple}`]: styles.touchRipple
        }, styles.root, styles[ownerState.orientation]];
      }
    })(({
      ownerState
    }) => _extends({
      width: '100%',
      padding: '24px 16px',
      margin: '-24px -16px',
      boxSizing: 'content-box'
    }, ownerState.orientation === 'vertical' && {
      justifyContent: 'flex-start',
      padding: '8px',
      margin: '-8px'
    }, {
      [`& .${stepButtonClasses$1.touchRipple}`]: {
        color: 'rgba(0, 0, 0, 0.3)'
      }
    }));
    const StepButton = /*#__PURE__*/React__namespace.forwardRef(function StepButton(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiStepButton'
      });
      const {
          children,
          className,
          icon,
          optional
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$H);
      const {
        disabled
      } = React__namespace.useContext(StepContext$1);
      const {
        orientation
      } = React__namespace.useContext(StepperContext$1);
      const ownerState = _extends({}, props, {
        orientation
      });
      const classes = useUtilityClasses$B(ownerState);
      const childProps = {
        icon,
        optional
      };
      const child = isMuiElement(children, ['StepLabel']) ? /*#__PURE__*/React__namespace.cloneElement(children, childProps) : /*#__PURE__*/jsxRuntime.exports.jsx(StepLabel$1, _extends({}, childProps, {
        children: children
      }));
      return /*#__PURE__*/jsxRuntime.exports.jsx(StepButtonRoot, _extends({
        focusRipple: true,
        disabled: disabled,
        TouchRippleProps: {
          className: classes.touchRipple
        },
        className: clsx(classes.root, className),
        ref: ref,
        ownerState: ownerState
      }, other, {
        children: child
      }));
    });
    StepButton.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * Can be a `StepLabel` or a node to place inside `StepLabel` as children.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The icon displayed by the step label.
       */
      icon: PropTypes.node,
      /**
       * The optional node to display.
       */
      optional: PropTypes.node,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var StepButton$1 = StepButton;

    function getStepConnectorUtilityClass(slot) {
      return generateUtilityClass('MuiStepConnector', slot);
    }
    generateUtilityClasses('MuiStepConnector', ['root', 'horizontal', 'vertical', 'alternativeLabel', 'active', 'completed', 'disabled', 'line', 'lineHorizontal', 'lineVertical']);

    const _excluded$G = ["className"];
    const useUtilityClasses$A = ownerState => {
      const {
        classes,
        orientation,
        alternativeLabel,
        active,
        completed,
        disabled
      } = ownerState;
      const slots = {
        root: ['root', orientation, alternativeLabel && 'alternativeLabel', active && 'active', completed && 'completed', disabled && 'disabled'],
        line: ['line', `line${capitalize(orientation)}`]
      };
      return composeClasses(slots, getStepConnectorUtilityClass, classes);
    };
    const StepConnectorRoot = styled$1('div', {
      name: 'MuiStepConnector',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[ownerState.orientation], ownerState.alternativeLabel && styles.alternativeLabel, ownerState.completed && styles.completed];
      }
    })(({
      ownerState
    }) => _extends({
      flex: '1 1 auto'
    }, ownerState.orientation === 'vertical' && {
      marginLeft: 12 // half icon
    }, ownerState.alternativeLabel && {
      position: 'absolute',
      top: 8 + 4,
      left: 'calc(-50% + 20px)',
      right: 'calc(50% + 20px)'
    }));
    const StepConnectorLine = styled$1('span', {
      name: 'MuiStepConnector',
      slot: 'Line',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.line, styles[`line${capitalize(ownerState.orientation)}`]];
      }
    })(({
      ownerState,
      theme
    }) => {
      const borderColor = theme.palette.mode === 'light' ? theme.palette.grey[400] : theme.palette.grey[600];
      return _extends({
        display: 'block',
        borderColor: theme.vars ? theme.vars.palette.StepConnector.border : borderColor
      }, ownerState.orientation === 'horizontal' && {
        borderTopStyle: 'solid',
        borderTopWidth: 1
      }, ownerState.orientation === 'vertical' && {
        borderLeftStyle: 'solid',
        borderLeftWidth: 1,
        minHeight: 24
      });
    });
    const StepConnector = /*#__PURE__*/React__namespace.forwardRef(function StepConnector(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiStepConnector'
      });
      const {
          className
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$G);
      const {
        alternativeLabel,
        orientation = 'horizontal'
      } = React__namespace.useContext(StepperContext$1);
      const {
        active,
        disabled,
        completed
      } = React__namespace.useContext(StepContext$1);
      const ownerState = _extends({}, props, {
        alternativeLabel,
        orientation,
        active,
        completed,
        disabled
      });
      const classes = useUtilityClasses$A(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(StepConnectorRoot, _extends({
        className: clsx(classes.root, className),
        ref: ref,
        ownerState: ownerState
      }, other, {
        children: /*#__PURE__*/jsxRuntime.exports.jsx(StepConnectorLine, {
          className: classes.line,
          ownerState: ownerState
        })
      }));
    });
    StepConnector.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var StepConnector$1 = StepConnector;

    function getStepperUtilityClass(slot) {
      return generateUtilityClass('MuiStepper', slot);
    }
    generateUtilityClasses('MuiStepper', ['root', 'horizontal', 'vertical', 'alternativeLabel']);

    const _excluded$F = ["activeStep", "alternativeLabel", "children", "className", "component", "connector", "nonLinear", "orientation"];
    const useUtilityClasses$z = ownerState => {
      const {
        orientation,
        alternativeLabel,
        classes
      } = ownerState;
      const slots = {
        root: ['root', orientation, alternativeLabel && 'alternativeLabel']
      };
      return composeClasses(slots, getStepperUtilityClass, classes);
    };
    const StepperRoot = styled$1('div', {
      name: 'MuiStepper',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[ownerState.orientation], ownerState.alternativeLabel && styles.alternativeLabel];
      }
    })(({
      ownerState
    }) => _extends({
      display: 'flex'
    }, ownerState.orientation === 'horizontal' && {
      flexDirection: 'row',
      alignItems: 'center'
    }, ownerState.orientation === 'vertical' && {
      flexDirection: 'column'
    }, ownerState.alternativeLabel && {
      alignItems: 'flex-start'
    }));
    const defaultConnector = /*#__PURE__*/jsxRuntime.exports.jsx(StepConnector$1, {});
    const Stepper = /*#__PURE__*/React__namespace.forwardRef(function Stepper(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiStepper'
      });
      const {
          activeStep = 0,
          alternativeLabel = false,
          children,
          className,
          component = 'div',
          connector = defaultConnector,
          nonLinear = false,
          orientation = 'horizontal'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$F);
      const ownerState = _extends({}, props, {
        alternativeLabel,
        orientation,
        component
      });
      const classes = useUtilityClasses$z(ownerState);
      const childrenArray = React__namespace.Children.toArray(children).filter(Boolean);
      const steps = childrenArray.map((step, index) => {
        return /*#__PURE__*/React__namespace.cloneElement(step, _extends({
          index,
          last: index + 1 === childrenArray.length
        }, step.props));
      });
      const contextValue = React__namespace.useMemo(() => ({
        activeStep,
        alternativeLabel,
        connector,
        nonLinear,
        orientation
      }), [activeStep, alternativeLabel, connector, nonLinear, orientation]);
      return /*#__PURE__*/jsxRuntime.exports.jsx(StepperContext$1.Provider, {
        value: contextValue,
        children: /*#__PURE__*/jsxRuntime.exports.jsx(StepperRoot, _extends({
          as: component,
          ownerState: ownerState,
          className: clsx(classes.root, className),
          ref: ref
        }, other, {
          children: steps
        }))
      });
    });
    Stepper.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * Set the active step (zero based index).
       * Set to -1 to disable all the steps.
       * @default 0
       */
      activeStep: integerPropType,
      /**
       * If set to 'true' and orientation is horizontal,
       * then the step label will be positioned under the icon.
       * @default false
       */
      alternativeLabel: PropTypes.bool,
      /**
       * Two or more `<Step />` components.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * An element to be placed between each step.
       * @default <StepConnector />
       */
      connector: PropTypes.element,
      /**
       * If set the `Stepper` will not assist in controlling steps for linear flow.
       * @default false
       */
      nonLinear: PropTypes.bool,
      /**
       * The component orientation (layout flow direction).
       * @default 'horizontal'
       */
      orientation: PropTypes.oneOf(['horizontal', 'vertical']),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var Stepper$1 = Stepper;

    function getSwitchUtilityClass(slot) {
      return generateUtilityClass('MuiSwitch', slot);
    }
    const switchClasses = generateUtilityClasses('MuiSwitch', ['root', 'edgeStart', 'edgeEnd', 'switchBase', 'colorPrimary', 'colorSecondary', 'sizeSmall', 'sizeMedium', 'checked', 'disabled', 'input', 'thumb', 'track']);
    var switchClasses$1 = switchClasses;

    const _excluded$E = ["className", "color", "edge", "size", "sx"];
    const useUtilityClasses$y = ownerState => {
      const {
        classes,
        edge,
        size,
        color,
        checked,
        disabled
      } = ownerState;
      const slots = {
        root: ['root', edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`],
        switchBase: ['switchBase', `color${capitalize(color)}`, checked && 'checked', disabled && 'disabled'],
        thumb: ['thumb'],
        track: ['track'],
        input: ['input']
      };
      const composedClasses = composeClasses(slots, getSwitchUtilityClass, classes);
      return _extends({}, classes, composedClasses);
    };
    const SwitchRoot = styled$1('span', {
      name: 'MuiSwitch',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.edge && styles[`edge${capitalize(ownerState.edge)}`], styles[`size${capitalize(ownerState.size)}`]];
      }
    })(({
      ownerState
    }) => _extends({
      display: 'inline-flex',
      width: 34 + 12 * 2,
      height: 14 + 12 * 2,
      overflow: 'hidden',
      padding: 12,
      boxSizing: 'border-box',
      position: 'relative',
      flexShrink: 0,
      zIndex: 0,
      // Reset the stacking context.
      verticalAlign: 'middle',
      // For correct alignment with the text.
      '@media print': {
        colorAdjust: 'exact'
      }
    }, ownerState.edge === 'start' && {
      marginLeft: -8
    }, ownerState.edge === 'end' && {
      marginRight: -8
    }, ownerState.size === 'small' && {
      width: 40,
      height: 24,
      padding: 7,
      [`& .${switchClasses$1.thumb}`]: {
        width: 16,
        height: 16
      },
      [`& .${switchClasses$1.switchBase}`]: {
        padding: 4,
        [`&.${switchClasses$1.checked}`]: {
          transform: 'translateX(16px)'
        }
      }
    }));
    const SwitchSwitchBase = styled$1(SwitchBase$1, {
      name: 'MuiSwitch',
      slot: 'SwitchBase',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.switchBase, {
          [`& .${switchClasses$1.input}`]: styles.input
        }, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];
      }
    })(({
      theme
    }) => ({
      position: 'absolute',
      top: 0,
      left: 0,
      zIndex: 1,
      // Render above the focus ripple.
      color: theme.vars ? theme.vars.palette.Switch.defaultColor : `${theme.palette.mode === 'light' ? theme.palette.common.white : theme.palette.grey[300]}`,
      transition: theme.transitions.create(['left', 'transform'], {
        duration: theme.transitions.duration.shortest
      }),
      [`&.${switchClasses$1.checked}`]: {
        transform: 'translateX(20px)'
      },
      [`&.${switchClasses$1.disabled}`]: {
        color: theme.vars ? theme.vars.palette.Switch.defaultDisabledColor : `${theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[600]}`
      },
      [`&.${switchClasses$1.checked} + .${switchClasses$1.track}`]: {
        opacity: 0.5
      },
      [`&.${switchClasses$1.disabled} + .${switchClasses$1.track}`]: {
        opacity: theme.vars ? theme.vars.opacity.switchTrackDisabled : `${theme.palette.mode === 'light' ? 0.12 : 0.2}`
      },
      [`& .${switchClasses$1.input}`]: {
        left: '-100%',
        width: '300%'
      }
    }), ({
      theme,
      ownerState
    }) => _extends({
      '&:hover': {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      }
    }, ownerState.color !== 'default' && {
      [`&.${switchClasses$1.checked}`]: {
        color: (theme.vars || theme).palette[ownerState.color].main,
        '&:hover': {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
          '@media (hover: none)': {
            backgroundColor: 'transparent'
          }
        },
        [`&.${switchClasses$1.disabled}`]: {
          color: theme.vars ? theme.vars.palette.Switch[`${ownerState.color}DisabledColor`] : `${theme.palette.mode === 'light' ? lighten(theme.palette[ownerState.color].main, 0.62) : darken(theme.palette[ownerState.color].main, 0.55)}`
        }
      },
      [`&.${switchClasses$1.checked} + .${switchClasses$1.track}`]: {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].main
      }
    }));
    const SwitchTrack = styled$1('span', {
      name: 'MuiSwitch',
      slot: 'Track',
      overridesResolver: (props, styles) => styles.track
    })(({
      theme
    }) => ({
      height: '100%',
      width: '100%',
      borderRadius: 14 / 2,
      zIndex: -1,
      transition: theme.transitions.create(['opacity', 'background-color'], {
        duration: theme.transitions.duration.shortest
      }),
      backgroundColor: theme.vars ? theme.vars.palette.common.onBackground : `${theme.palette.mode === 'light' ? theme.palette.common.black : theme.palette.common.white}`,
      opacity: theme.vars ? theme.vars.opacity.switchTrack : `${theme.palette.mode === 'light' ? 0.38 : 0.3}`
    }));
    const SwitchThumb = styled$1('span', {
      name: 'MuiSwitch',
      slot: 'Thumb',
      overridesResolver: (props, styles) => styles.thumb
    })(({
      theme
    }) => ({
      boxShadow: (theme.vars || theme).shadows[1],
      backgroundColor: 'currentColor',
      width: 20,
      height: 20,
      borderRadius: '50%'
    }));
    const Switch = /*#__PURE__*/React__namespace.forwardRef(function Switch(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiSwitch'
      });
      const {
          className,
          color = 'primary',
          edge = false,
          size = 'medium',
          sx
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$E);
      const ownerState = _extends({}, props, {
        color,
        edge,
        size
      });
      const classes = useUtilityClasses$y(ownerState);
      const icon = /*#__PURE__*/jsxRuntime.exports.jsx(SwitchThumb, {
        className: classes.thumb,
        ownerState: ownerState
      });
      return /*#__PURE__*/jsxRuntime.exports.jsxs(SwitchRoot, {
        className: clsx(classes.root, className),
        sx: sx,
        ownerState: ownerState,
        children: [/*#__PURE__*/jsxRuntime.exports.jsx(SwitchSwitchBase, _extends({
          type: "checkbox",
          icon: icon,
          checkedIcon: icon,
          ref: ref,
          ownerState: ownerState
        }, other, {
          classes: _extends({}, classes, {
            root: classes.switchBase
          })
        })), /*#__PURE__*/jsxRuntime.exports.jsx(SwitchTrack, {
          className: classes.track,
          ownerState: ownerState
        })]
      });
    });
    Switch.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * If `true`, the component is checked.
       */
      checked: PropTypes.bool,
      /**
       * The icon to display when the component is checked.
       */
      checkedIcon: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
       * @default 'primary'
       */
      color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),
      /**
       * The default checked state. Use when the component is not controlled.
       */
      defaultChecked: PropTypes.bool,
      /**
       * If `true`, the component is disabled.
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, the ripple effect is disabled.
       */
      disableRipple: PropTypes.bool,
      /**
       * If given, uses a negative margin to counteract the padding on one
       * side (this is often helpful for aligning the left or right
       * side of the icon with content above or below, without ruining the border
       * size and shape).
       * @default false
       */
      edge: PropTypes.oneOf(['end', 'start', false]),
      /**
       * The icon to display when the component is unchecked.
       */
      icon: PropTypes.node,
      /**
       * The id of the `input` element.
       */
      id: PropTypes.string,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: PropTypes.object,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,
      /**
       * Callback fired when the state is changed.
       *
       * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: PropTypes.func,
      /**
       * If `true`, the `input` element is required.
       */
      required: PropTypes.bool,
      /**
       * The size of the component.
       * `small` is equivalent to the dense switch styling.
       * @default 'medium'
       */
      size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The value of the component. The DOM API casts this to a string.
       * The browser uses "on" as the default value.
       */
      value: PropTypes.any
    } ;
    var Switch$1 = Switch;

    function getTabUtilityClass(slot) {
      return generateUtilityClass('MuiTab', slot);
    }
    const tabClasses = generateUtilityClasses('MuiTab', ['root', 'labelIcon', 'textColorInherit', 'textColorPrimary', 'textColorSecondary', 'selected', 'disabled', 'fullWidth', 'wrapped', 'iconWrapper']);
    var tabClasses$1 = tabClasses;

    const _excluded$D = ["className", "disabled", "disableFocusRipple", "fullWidth", "icon", "iconPosition", "indicator", "label", "onChange", "onClick", "onFocus", "selected", "selectionFollowsFocus", "textColor", "value", "wrapped"];
    const useUtilityClasses$x = ownerState => {
      const {
        classes,
        textColor,
        fullWidth,
        wrapped,
        icon,
        label,
        selected,
        disabled
      } = ownerState;
      const slots = {
        root: ['root', icon && label && 'labelIcon', `textColor${capitalize(textColor)}`, fullWidth && 'fullWidth', wrapped && 'wrapped', selected && 'selected', disabled && 'disabled'],
        iconWrapper: ['iconWrapper']
      };
      return composeClasses(slots, getTabUtilityClass, classes);
    };
    const TabRoot = styled$1(ButtonBase$1, {
      name: 'MuiTab',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.label && ownerState.icon && styles.labelIcon, styles[`textColor${capitalize(ownerState.textColor)}`], ownerState.fullWidth && styles.fullWidth, ownerState.wrapped && styles.wrapped];
      }
    })(({
      theme,
      ownerState
    }) => _extends({}, theme.typography.button, {
      maxWidth: 360,
      minWidth: 90,
      position: 'relative',
      minHeight: 48,
      flexShrink: 0,
      padding: '12px 16px',
      overflow: 'hidden',
      whiteSpace: 'normal',
      textAlign: 'center'
    }, ownerState.label && {
      flexDirection: ownerState.iconPosition === 'top' || ownerState.iconPosition === 'bottom' ? 'column' : 'row'
    }, {
      lineHeight: 1.25
    }, ownerState.icon && ownerState.label && {
      minHeight: 72,
      paddingTop: 9,
      paddingBottom: 9,
      [`& > .${tabClasses$1.iconWrapper}`]: _extends({}, ownerState.iconPosition === 'top' && {
        marginBottom: 6
      }, ownerState.iconPosition === 'bottom' && {
        marginTop: 6
      }, ownerState.iconPosition === 'start' && {
        marginRight: theme.spacing(1)
      }, ownerState.iconPosition === 'end' && {
        marginLeft: theme.spacing(1)
      })
    }, ownerState.textColor === 'inherit' && {
      color: 'inherit',
      opacity: 0.6,
      // same opacity as theme.palette.text.secondary
      [`&.${tabClasses$1.selected}`]: {
        opacity: 1
      },
      [`&.${tabClasses$1.disabled}`]: {
        opacity: (theme.vars || theme).palette.action.disabledOpacity
      }
    }, ownerState.textColor === 'primary' && {
      color: (theme.vars || theme).palette.text.secondary,
      [`&.${tabClasses$1.selected}`]: {
        color: (theme.vars || theme).palette.primary.main
      },
      [`&.${tabClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled
      }
    }, ownerState.textColor === 'secondary' && {
      color: (theme.vars || theme).palette.text.secondary,
      [`&.${tabClasses$1.selected}`]: {
        color: (theme.vars || theme).palette.secondary.main
      },
      [`&.${tabClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled
      }
    }, ownerState.fullWidth && {
      flexShrink: 1,
      flexGrow: 1,
      flexBasis: 0,
      maxWidth: 'none'
    }, ownerState.wrapped && {
      fontSize: theme.typography.pxToRem(12)
    }));
    const Tab = /*#__PURE__*/React__namespace.forwardRef(function Tab(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiTab'
      });
      const {
          className,
          disabled = false,
          disableFocusRipple = false,
          // eslint-disable-next-line react/prop-types
          fullWidth,
          icon: iconProp,
          iconPosition = 'top',
          // eslint-disable-next-line react/prop-types
          indicator,
          label,
          onChange,
          onClick,
          onFocus,
          // eslint-disable-next-line react/prop-types
          selected,
          // eslint-disable-next-line react/prop-types
          selectionFollowsFocus,
          // eslint-disable-next-line react/prop-types
          textColor = 'inherit',
          value,
          wrapped = false
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$D);
      const ownerState = _extends({}, props, {
        disabled,
        disableFocusRipple,
        selected,
        icon: !!iconProp,
        iconPosition,
        label: !!label,
        fullWidth,
        textColor,
        wrapped
      });
      const classes = useUtilityClasses$x(ownerState);
      const icon = iconProp && label && /*#__PURE__*/React__namespace.isValidElement(iconProp) ? /*#__PURE__*/React__namespace.cloneElement(iconProp, {
        className: clsx(classes.iconWrapper, iconProp.props.className)
      }) : iconProp;
      const handleClick = event => {
        if (!selected && onChange) {
          onChange(event, value);
        }
        if (onClick) {
          onClick(event);
        }
      };
      const handleFocus = event => {
        if (selectionFollowsFocus && !selected && onChange) {
          onChange(event, value);
        }
        if (onFocus) {
          onFocus(event);
        }
      };
      return /*#__PURE__*/jsxRuntime.exports.jsxs(TabRoot, _extends({
        focusRipple: !disableFocusRipple,
        className: clsx(classes.root, className),
        ref: ref,
        role: "tab",
        "aria-selected": selected,
        disabled: disabled,
        onClick: handleClick,
        onFocus: handleFocus,
        ownerState: ownerState,
        tabIndex: selected ? 0 : -1
      }, other, {
        children: [iconPosition === 'top' || iconPosition === 'start' ? /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
          children: [icon, label]
        }) : /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
          children: [label, icon]
        }), indicator]
      }));
    });
    Tab.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * This prop isn't supported.
       * Use the `component` prop if you need to change the children structure.
       */
      children: unsupportedProp,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, the  keyboard focus ripple is disabled.
       * @default false
       */
      disableFocusRipple: PropTypes.bool,
      /**
       * If `true`, the ripple effect is disabled.
       *
       * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
       * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
       * @default false
       */
      disableRipple: PropTypes.bool,
      /**
       * The icon to display.
       */
      icon: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),
      /**
       * The position of the icon relative to the label.
       * @default 'top'
       */
      iconPosition: PropTypes.oneOf(['bottom', 'end', 'start', 'top']),
      /**
       * The label element.
       */
      label: PropTypes.node,
      /**
       * @ignore
       */
      onChange: PropTypes.func,
      /**
       * @ignore
       */
      onClick: PropTypes.func,
      /**
       * @ignore
       */
      onFocus: PropTypes.func,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * You can provide your own value. Otherwise, we fallback to the child position index.
       */
      value: PropTypes.any,
      /**
       * Tab labels appear in a single row.
       * They can use a second line if needed.
       * @default false
       */
      wrapped: PropTypes.bool
    } ;
    var Tab$1 = Tab;

    /**
     * @ignore - internal component.
     */
    const TableContext = /*#__PURE__*/React__namespace.createContext();
    {
      TableContext.displayName = 'TableContext';
    }
    var TableContext$1 = TableContext;

    function getTableUtilityClass(slot) {
      return generateUtilityClass('MuiTable', slot);
    }
    generateUtilityClasses('MuiTable', ['root', 'stickyHeader']);

    const _excluded$C = ["className", "component", "padding", "size", "stickyHeader"];
    const useUtilityClasses$w = ownerState => {
      const {
        classes,
        stickyHeader
      } = ownerState;
      const slots = {
        root: ['root', stickyHeader && 'stickyHeader']
      };
      return composeClasses(slots, getTableUtilityClass, classes);
    };
    const TableRoot = styled$1('table', {
      name: 'MuiTable',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.stickyHeader && styles.stickyHeader];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      display: 'table',
      width: '100%',
      borderCollapse: 'collapse',
      borderSpacing: 0,
      '& caption': _extends({}, theme.typography.body2, {
        padding: theme.spacing(2),
        color: (theme.vars || theme).palette.text.secondary,
        textAlign: 'left',
        captionSide: 'bottom'
      })
    }, ownerState.stickyHeader && {
      borderCollapse: 'separate'
    }));
    const defaultComponent$3 = 'table';
    const Table = /*#__PURE__*/React__namespace.forwardRef(function Table(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiTable'
      });
      const {
          className,
          component = defaultComponent$3,
          padding = 'normal',
          size = 'medium',
          stickyHeader = false
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$C);
      const ownerState = _extends({}, props, {
        component,
        padding,
        size,
        stickyHeader
      });
      const classes = useUtilityClasses$w(ownerState);
      const table = React__namespace.useMemo(() => ({
        padding,
        size,
        stickyHeader
      }), [padding, size, stickyHeader]);
      return /*#__PURE__*/jsxRuntime.exports.jsx(TableContext$1.Provider, {
        value: table,
        children: /*#__PURE__*/jsxRuntime.exports.jsx(TableRoot, _extends({
          as: component,
          role: component === defaultComponent$3 ? null : 'table',
          ref: ref,
          className: clsx(classes.root, className),
          ownerState: ownerState
        }, other))
      });
    });
    Table.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the table, normally `TableHead` and `TableBody`.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * Allows TableCells to inherit padding of the Table.
       * @default 'normal'
       */
      padding: PropTypes.oneOf(['checkbox', 'none', 'normal']),
      /**
       * Allows TableCells to inherit size of the Table.
       * @default 'medium'
       */
      size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),
      /**
       * Set the header sticky.
       *
       * ⚠️ It doesn't work with IE11.
       * @default false
       */
      stickyHeader: PropTypes.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var Table$1 = Table;

    /**
     * @ignore - internal component.
     */
    const Tablelvl2Context = /*#__PURE__*/React__namespace.createContext();
    {
      Tablelvl2Context.displayName = 'Tablelvl2Context';
    }
    var Tablelvl2Context$1 = Tablelvl2Context;

    function getTableBodyUtilityClass(slot) {
      return generateUtilityClass('MuiTableBody', slot);
    }
    generateUtilityClasses('MuiTableBody', ['root']);

    const _excluded$B = ["className", "component"];
    const useUtilityClasses$v = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root']
      };
      return composeClasses(slots, getTableBodyUtilityClass, classes);
    };
    const TableBodyRoot = styled$1('tbody', {
      name: 'MuiTableBody',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({
      display: 'table-row-group'
    });
    const tablelvl2$1 = {
      variant: 'body'
    };
    const defaultComponent$2 = 'tbody';
    const TableBody = /*#__PURE__*/React__namespace.forwardRef(function TableBody(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiTableBody'
      });
      const {
          className,
          component = defaultComponent$2
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$B);
      const ownerState = _extends({}, props, {
        component
      });
      const classes = useUtilityClasses$v(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(Tablelvl2Context$1.Provider, {
        value: tablelvl2$1,
        children: /*#__PURE__*/jsxRuntime.exports.jsx(TableBodyRoot, _extends({
          className: clsx(classes.root, className),
          as: component,
          ref: ref,
          role: component === defaultComponent$2 ? null : 'rowgroup',
          ownerState: ownerState
        }, other))
      });
    });
    TableBody.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component, normally `TableRow`.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var TableBody$1 = TableBody;

    function getTableCellUtilityClass(slot) {
      return generateUtilityClass('MuiTableCell', slot);
    }
    const tableCellClasses = generateUtilityClasses('MuiTableCell', ['root', 'head', 'body', 'footer', 'sizeSmall', 'sizeMedium', 'paddingCheckbox', 'paddingNone', 'alignLeft', 'alignCenter', 'alignRight', 'alignJustify', 'stickyHeader']);
    var tableCellClasses$1 = tableCellClasses;

    const _excluded$A = ["align", "className", "component", "padding", "scope", "size", "sortDirection", "variant"];
    const useUtilityClasses$u = ownerState => {
      const {
        classes,
        variant,
        align,
        padding,
        size,
        stickyHeader
      } = ownerState;
      const slots = {
        root: ['root', variant, stickyHeader && 'stickyHeader', align !== 'inherit' && `align${capitalize(align)}`, padding !== 'normal' && `padding${capitalize(padding)}`, `size${capitalize(size)}`]
      };
      return composeClasses(slots, getTableCellUtilityClass, classes);
    };
    const TableCellRoot = styled$1('td', {
      name: 'MuiTableCell',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[ownerState.variant], styles[`size${capitalize(ownerState.size)}`], ownerState.padding !== 'normal' && styles[`padding${capitalize(ownerState.padding)}`], ownerState.align !== 'inherit' && styles[`align${capitalize(ownerState.align)}`], ownerState.stickyHeader && styles.stickyHeader];
      }
    })(({
      theme,
      ownerState
    }) => _extends({}, theme.typography.body2, {
      display: 'table-cell',
      verticalAlign: 'inherit',
      // Workaround for a rendering bug with spanned columns in Chrome 62.0.
      // Removes the alpha (sets it to 1), and lightens or darkens the theme color.
      borderBottom: theme.vars ? `1px solid ${theme.vars.palette.TableCell.border}` : `1px solid
    ${theme.palette.mode === 'light' ? lighten(alpha(theme.palette.divider, 1), 0.88) : darken(alpha(theme.palette.divider, 1), 0.68)}`,
      textAlign: 'left',
      padding: 16
    }, ownerState.variant === 'head' && {
      color: (theme.vars || theme).palette.text.primary,
      lineHeight: theme.typography.pxToRem(24),
      fontWeight: theme.typography.fontWeightMedium
    }, ownerState.variant === 'body' && {
      color: (theme.vars || theme).palette.text.primary
    }, ownerState.variant === 'footer' && {
      color: (theme.vars || theme).palette.text.secondary,
      lineHeight: theme.typography.pxToRem(21),
      fontSize: theme.typography.pxToRem(12)
    }, ownerState.size === 'small' && {
      padding: '6px 16px',
      [`&.${tableCellClasses$1.paddingCheckbox}`]: {
        width: 24,
        // prevent the checkbox column from growing
        padding: '0 12px 0 16px',
        '& > *': {
          padding: 0
        }
      }
    }, ownerState.padding === 'checkbox' && {
      width: 48,
      // prevent the checkbox column from growing
      padding: '0 0 0 4px'
    }, ownerState.padding === 'none' && {
      padding: 0
    }, ownerState.align === 'left' && {
      textAlign: 'left'
    }, ownerState.align === 'center' && {
      textAlign: 'center'
    }, ownerState.align === 'right' && {
      textAlign: 'right',
      flexDirection: 'row-reverse'
    }, ownerState.align === 'justify' && {
      textAlign: 'justify'
    }, ownerState.stickyHeader && {
      position: 'sticky',
      top: 0,
      zIndex: 2,
      backgroundColor: (theme.vars || theme).palette.background.default
    }));

    /**
     * The component renders a `<th>` element when the parent context is a header
     * or otherwise a `<td>` element.
     */
    const TableCell = /*#__PURE__*/React__namespace.forwardRef(function TableCell(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiTableCell'
      });
      const {
          align = 'inherit',
          className,
          component: componentProp,
          padding: paddingProp,
          scope: scopeProp,
          size: sizeProp,
          sortDirection,
          variant: variantProp
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$A);
      const table = React__namespace.useContext(TableContext$1);
      const tablelvl2 = React__namespace.useContext(Tablelvl2Context$1);
      const isHeadCell = tablelvl2 && tablelvl2.variant === 'head';
      let component;
      if (componentProp) {
        component = componentProp;
      } else {
        component = isHeadCell ? 'th' : 'td';
      }
      let scope = scopeProp;
      if (!scope && isHeadCell) {
        scope = 'col';
      }
      const variant = variantProp || tablelvl2 && tablelvl2.variant;
      const ownerState = _extends({}, props, {
        align,
        component,
        padding: paddingProp || (table && table.padding ? table.padding : 'normal'),
        size: sizeProp || (table && table.size ? table.size : 'medium'),
        sortDirection,
        stickyHeader: variant === 'head' && table && table.stickyHeader,
        variant
      });
      const classes = useUtilityClasses$u(ownerState);
      let ariaSort = null;
      if (sortDirection) {
        ariaSort = sortDirection === 'asc' ? 'ascending' : 'descending';
      }
      return /*#__PURE__*/jsxRuntime.exports.jsx(TableCellRoot, _extends({
        as: component,
        ref: ref,
        className: clsx(classes.root, className),
        "aria-sort": ariaSort,
        scope: scope,
        ownerState: ownerState
      }, other));
    });
    TableCell.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * Set the text-align on the table cell content.
       *
       * Monetary or generally number fields **should be right aligned** as that allows
       * you to add them up quickly in your head without having to worry about decimals.
       * @default 'inherit'
       */
      align: PropTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * Sets the padding applied to the cell.
       * The prop defaults to the value (`'default'`) inherited from the parent Table component.
       */
      padding: PropTypes.oneOf(['checkbox', 'none', 'normal']),
      /**
       * Set scope attribute.
       */
      scope: PropTypes.string,
      /**
       * Specify the size of the cell.
       * The prop defaults to the value (`'medium'`) inherited from the parent Table component.
       */
      size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),
      /**
       * Set aria-sort direction.
       */
      sortDirection: PropTypes.oneOf(['asc', 'desc', false]),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * Specify the cell type.
       * The prop defaults to the value inherited from the parent TableHead, TableBody, or TableFooter components.
       */
      variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['body', 'footer', 'head']), PropTypes.string])
    } ;
    var TableCell$1 = TableCell;

    function getTableHeadUtilityClass(slot) {
      return generateUtilityClass('MuiTableHead', slot);
    }
    generateUtilityClasses('MuiTableHead', ['root']);

    const _excluded$z = ["className", "component"];
    const useUtilityClasses$t = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root']
      };
      return composeClasses(slots, getTableHeadUtilityClass, classes);
    };
    const TableHeadRoot = styled$1('thead', {
      name: 'MuiTableHead',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({
      display: 'table-header-group'
    });
    const tablelvl2 = {
      variant: 'head'
    };
    const defaultComponent$1 = 'thead';
    const TableHead = /*#__PURE__*/React__namespace.forwardRef(function TableHead(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiTableHead'
      });
      const {
          className,
          component = defaultComponent$1
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$z);
      const ownerState = _extends({}, props, {
        component
      });
      const classes = useUtilityClasses$t(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(Tablelvl2Context$1.Provider, {
        value: tablelvl2,
        children: /*#__PURE__*/jsxRuntime.exports.jsx(TableHeadRoot, _extends({
          as: component,
          className: clsx(classes.root, className),
          ref: ref,
          role: component === defaultComponent$1 ? null : 'rowgroup',
          ownerState: ownerState
        }, other))
      });
    });
    TableHead.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component, normally `TableRow`.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var TableHead$1 = TableHead;

    function getToolbarUtilityClass(slot) {
      return generateUtilityClass('MuiToolbar', slot);
    }
    generateUtilityClasses('MuiToolbar', ['root', 'gutters', 'regular', 'dense']);

    const _excluded$y = ["className", "component", "disableGutters", "variant"];
    const useUtilityClasses$s = ownerState => {
      const {
        classes,
        disableGutters,
        variant
      } = ownerState;
      const slots = {
        root: ['root', !disableGutters && 'gutters', variant]
      };
      return composeClasses(slots, getToolbarUtilityClass, classes);
    };
    const ToolbarRoot = styled$1('div', {
      name: 'MuiToolbar',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, !ownerState.disableGutters && styles.gutters, styles[ownerState.variant]];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      position: 'relative',
      display: 'flex',
      alignItems: 'center'
    }, !ownerState.disableGutters && {
      paddingLeft: theme.spacing(2),
      paddingRight: theme.spacing(2),
      [theme.breakpoints.up('sm')]: {
        paddingLeft: theme.spacing(3),
        paddingRight: theme.spacing(3)
      }
    }, ownerState.variant === 'dense' && {
      minHeight: 48
    }), ({
      theme,
      ownerState
    }) => ownerState.variant === 'regular' && theme.mixins.toolbar);
    const Toolbar = /*#__PURE__*/React__namespace.forwardRef(function Toolbar(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiToolbar'
      });
      const {
          className,
          component = 'div',
          disableGutters = false,
          variant = 'regular'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$y);
      const ownerState = _extends({}, props, {
        component,
        disableGutters,
        variant
      });
      const classes = useUtilityClasses$s(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(ToolbarRoot, _extends({
        as: component,
        className: clsx(classes.root, className),
        ref: ref,
        ownerState: ownerState
      }, other));
    });
    Toolbar.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
       * The Toolbar is a flex container, allowing flex item properites to be used to lay out the children.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * If `true`, disables gutter padding.
       * @default false
       */
      disableGutters: PropTypes.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The variant to use.
       * @default 'regular'
       */
      variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['dense', 'regular']), PropTypes.string])
    } ;
    var Toolbar$1 = Toolbar;

    var KeyboardArrowLeft = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
      d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
    }), 'KeyboardArrowLeft');

    var KeyboardArrowRight = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
      d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
    }), 'KeyboardArrowRight');

    function getTableRowUtilityClass(slot) {
      return generateUtilityClass('MuiTableRow', slot);
    }
    const tableRowClasses = generateUtilityClasses('MuiTableRow', ['root', 'selected', 'hover', 'head', 'footer']);
    var tableRowClasses$1 = tableRowClasses;

    const _excluded$x = ["className", "component", "hover", "selected"];
    const useUtilityClasses$r = ownerState => {
      const {
        classes,
        selected,
        hover,
        head,
        footer
      } = ownerState;
      const slots = {
        root: ['root', selected && 'selected', hover && 'hover', head && 'head', footer && 'footer']
      };
      return composeClasses(slots, getTableRowUtilityClass, classes);
    };
    const TableRowRoot = styled$1('tr', {
      name: 'MuiTableRow',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.head && styles.head, ownerState.footer && styles.footer];
      }
    })(({
      theme
    }) => ({
      color: 'inherit',
      display: 'table-row',
      verticalAlign: 'middle',
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0,
      [`&.${tableRowClasses$1.hover}:hover`]: {
        backgroundColor: (theme.vars || theme).palette.action.hover
      },
      [`&.${tableRowClasses$1.selected}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
        '&:hover': {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
        }
      }
    }));
    const defaultComponent = 'tr';
    /**
     * Will automatically set dynamic row height
     * based on the material table element parent (head, body, etc).
     */
    const TableRow = /*#__PURE__*/React__namespace.forwardRef(function TableRow(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiTableRow'
      });
      const {
          className,
          component = defaultComponent,
          hover = false,
          selected = false
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$x);
      const tablelvl2 = React__namespace.useContext(Tablelvl2Context$1);
      const ownerState = _extends({}, props, {
        component,
        hover,
        selected,
        head: tablelvl2 && tablelvl2.variant === 'head',
        footer: tablelvl2 && tablelvl2.variant === 'footer'
      });
      const classes = useUtilityClasses$r(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(TableRowRoot, _extends({
        as: component,
        ref: ref,
        className: clsx(classes.root, className),
        role: component === defaultComponent ? null : 'row',
        ownerState: ownerState
      }, other));
    });
    TableRow.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * Should be valid <tr> children such as `TableCell`.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * If `true`, the table row will shade on hover.
       * @default false
       */
      hover: PropTypes.bool,
      /**
       * If `true`, the table row will have the selected shading.
       * @default false
       */
      selected: PropTypes.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var TableRow$1 = TableRow;

    function easeInOutSin(time) {
      return (1 + Math.sin(Math.PI * time - Math.PI / 2)) / 2;
    }
    function animate(property, element, to, options = {}, cb = () => {}) {
      const {
        ease = easeInOutSin,
        duration = 300 // standard
      } = options;
      let start = null;
      const from = element[property];
      let cancelled = false;
      const cancel = () => {
        cancelled = true;
      };
      const step = timestamp => {
        if (cancelled) {
          cb(new Error('Animation cancelled'));
          return;
        }
        if (start === null) {
          start = timestamp;
        }
        const time = Math.min(1, (timestamp - start) / duration);
        element[property] = ease(time) * (to - from) + from;
        if (time >= 1) {
          requestAnimationFrame(() => {
            cb(null);
          });
          return;
        }
        requestAnimationFrame(step);
      };
      if (from === to) {
        cb(new Error('Element already at target position'));
        return cancel;
      }
      requestAnimationFrame(step);
      return cancel;
    }

    const _excluded$w = ["onChange"];
    const styles$1 = {
      width: 99,
      height: 99,
      position: 'absolute',
      top: -9999,
      overflow: 'scroll'
    };

    /**
     * @ignore - internal component.
     * The component originates from https://github.com/STORIS/react-scrollbar-size.
     * It has been moved into the core in order to minimize the bundle size.
     */
    function ScrollbarSize(props) {
      const {
          onChange
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$w);
      const scrollbarHeight = React__namespace.useRef();
      const nodeRef = React__namespace.useRef(null);
      const setMeasurements = () => {
        scrollbarHeight.current = nodeRef.current.offsetHeight - nodeRef.current.clientHeight;
      };
      React__namespace.useEffect(() => {
        const handleResize = debounce$1(() => {
          const prevHeight = scrollbarHeight.current;
          setMeasurements();
          if (prevHeight !== scrollbarHeight.current) {
            onChange(scrollbarHeight.current);
          }
        });
        const containerWindow = ownerWindow(nodeRef.current);
        containerWindow.addEventListener('resize', handleResize);
        return () => {
          handleResize.clear();
          containerWindow.removeEventListener('resize', handleResize);
        };
      }, [onChange]);
      React__namespace.useEffect(() => {
        setMeasurements();
        onChange(scrollbarHeight.current);
      }, [onChange]);
      return /*#__PURE__*/jsxRuntime.exports.jsx("div", _extends({
        style: styles$1,
        ref: nodeRef
      }, other));
    }
    ScrollbarSize.propTypes = {
      onChange: PropTypes.func.isRequired
    } ;

    function getTabScrollButtonUtilityClass(slot) {
      return generateUtilityClass('MuiTabScrollButton', slot);
    }
    const tabScrollButtonClasses = generateUtilityClasses('MuiTabScrollButton', ['root', 'vertical', 'horizontal', 'disabled']);
    var tabScrollButtonClasses$1 = tabScrollButtonClasses;

    var _KeyboardArrowLeft, _KeyboardArrowRight;
    const _excluded$v = ["className", "direction", "orientation", "disabled"];
    const useUtilityClasses$q = ownerState => {
      const {
        classes,
        orientation,
        disabled
      } = ownerState;
      const slots = {
        root: ['root', orientation, disabled && 'disabled']
      };
      return composeClasses(slots, getTabScrollButtonUtilityClass, classes);
    };
    const TabScrollButtonRoot = styled$1(ButtonBase$1, {
      name: 'MuiTabScrollButton',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.orientation && styles[ownerState.orientation]];
      }
    })(({
      ownerState
    }) => _extends({
      width: 40,
      flexShrink: 0,
      opacity: 0.8,
      [`&.${tabScrollButtonClasses$1.disabled}`]: {
        opacity: 0
      }
    }, ownerState.orientation === 'vertical' && {
      width: '100%',
      height: 40,
      '& svg': {
        transform: `rotate(${ownerState.isRtl ? -90 : 90}deg)`
      }
    }));
    const TabScrollButton = /*#__PURE__*/React__namespace.forwardRef(function TabScrollButton(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiTabScrollButton'
      });
      const {
          className,
          direction
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$v);
      const theme = useTheme();
      const isRtl = theme.direction === 'rtl';
      const ownerState = _extends({
        isRtl
      }, props);
      const classes = useUtilityClasses$q(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsx(TabScrollButtonRoot, _extends({
        component: "div",
        className: clsx(classes.root, className),
        ref: ref,
        role: null,
        ownerState: ownerState,
        tabIndex: null
      }, other, {
        children: direction === 'left' ? _KeyboardArrowLeft || (_KeyboardArrowLeft = /*#__PURE__*/jsxRuntime.exports.jsx(KeyboardArrowLeft, {
          fontSize: "small"
        })) : _KeyboardArrowRight || (_KeyboardArrowRight = /*#__PURE__*/jsxRuntime.exports.jsx(KeyboardArrowRight, {
          fontSize: "small"
        }))
      }));
    });
    TabScrollButton.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The direction the button should indicate.
       */
      direction: PropTypes.oneOf(['left', 'right']).isRequired,
      /**
       * If `true`, the component is disabled.
       */
      disabled: PropTypes.bool,
      /**
       * The component orientation (layout flow direction).
       */
      orientation: PropTypes.oneOf(['horizontal', 'vertical']).isRequired,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;
    var TabScrollButton$1 = TabScrollButton;

    function getTabsUtilityClass(slot) {
      return generateUtilityClass('MuiTabs', slot);
    }
    const tabsClasses = generateUtilityClasses('MuiTabs', ['root', 'vertical', 'flexContainer', 'flexContainerVertical', 'centered', 'scroller', 'fixed', 'scrollableX', 'scrollableY', 'hideScrollbar', 'scrollButtons', 'scrollButtonsHideMobile', 'indicator']);
    var tabsClasses$1 = tabsClasses;

    const _excluded$u = ["aria-label", "aria-labelledby", "action", "centered", "children", "className", "component", "allowScrollButtonsMobile", "indicatorColor", "onChange", "orientation", "ScrollButtonComponent", "scrollButtons", "selectionFollowsFocus", "TabIndicatorProps", "TabScrollButtonProps", "textColor", "value", "variant", "visibleScrollbar"];
    const nextItem = (list, item) => {
      if (list === item) {
        return list.firstChild;
      }
      if (item && item.nextElementSibling) {
        return item.nextElementSibling;
      }
      return list.firstChild;
    };
    const previousItem = (list, item) => {
      if (list === item) {
        return list.lastChild;
      }
      if (item && item.previousElementSibling) {
        return item.previousElementSibling;
      }
      return list.lastChild;
    };
    const moveFocus = (list, currentFocus, traversalFunction) => {
      let wrappedOnce = false;
      let nextFocus = traversalFunction(list, currentFocus);
      while (nextFocus) {
        // Prevent infinite loop.
        if (nextFocus === list.firstChild) {
          if (wrappedOnce) {
            return;
          }
          wrappedOnce = true;
        }

        // Same logic as useAutocomplete.js
        const nextFocusDisabled = nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';
        if (!nextFocus.hasAttribute('tabindex') || nextFocusDisabled) {
          // Move to the next element.
          nextFocus = traversalFunction(list, nextFocus);
        } else {
          nextFocus.focus();
          return;
        }
      }
    };
    const useUtilityClasses$p = ownerState => {
      const {
        vertical,
        fixed,
        hideScrollbar,
        scrollableX,
        scrollableY,
        centered,
        scrollButtonsHideMobile,
        classes
      } = ownerState;
      const slots = {
        root: ['root', vertical && 'vertical'],
        scroller: ['scroller', fixed && 'fixed', hideScrollbar && 'hideScrollbar', scrollableX && 'scrollableX', scrollableY && 'scrollableY'],
        flexContainer: ['flexContainer', vertical && 'flexContainerVertical', centered && 'centered'],
        indicator: ['indicator'],
        scrollButtons: ['scrollButtons', scrollButtonsHideMobile && 'scrollButtonsHideMobile'],
        scrollableX: [scrollableX && 'scrollableX'],
        hideScrollbar: [hideScrollbar && 'hideScrollbar']
      };
      return composeClasses(slots, getTabsUtilityClass, classes);
    };
    const TabsRoot = styled$1('div', {
      name: 'MuiTabs',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${tabsClasses$1.scrollButtons}`]: styles.scrollButtons
        }, {
          [`& .${tabsClasses$1.scrollButtons}`]: ownerState.scrollButtonsHideMobile && styles.scrollButtonsHideMobile
        }, styles.root, ownerState.vertical && styles.vertical];
      }
    })(({
      ownerState,
      theme
    }) => _extends({
      overflow: 'hidden',
      minHeight: 48,
      // Add iOS momentum scrolling for iOS < 13.0
      WebkitOverflowScrolling: 'touch',
      display: 'flex'
    }, ownerState.vertical && {
      flexDirection: 'column'
    }, ownerState.scrollButtonsHideMobile && {
      [`& .${tabsClasses$1.scrollButtons}`]: {
        [theme.breakpoints.down('sm')]: {
          display: 'none'
        }
      }
    }));
    const TabsScroller = styled$1('div', {
      name: 'MuiTabs',
      slot: 'Scroller',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.scroller, ownerState.fixed && styles.fixed, ownerState.hideScrollbar && styles.hideScrollbar, ownerState.scrollableX && styles.scrollableX, ownerState.scrollableY && styles.scrollableY];
      }
    })(({
      ownerState
    }) => _extends({
      position: 'relative',
      display: 'inline-block',
      flex: '1 1 auto',
      whiteSpace: 'nowrap'
    }, ownerState.fixed && {
      overflowX: 'hidden',
      width: '100%'
    }, ownerState.hideScrollbar && {
      // Hide dimensionless scrollbar on macOS
      scrollbarWidth: 'none',
      // Firefox
      '&::-webkit-scrollbar': {
        display: 'none' // Safari + Chrome
      }
    }, ownerState.scrollableX && {
      overflowX: 'auto',
      overflowY: 'hidden'
    }, ownerState.scrollableY && {
      overflowY: 'auto',
      overflowX: 'hidden'
    }));
    const FlexContainer = styled$1('div', {
      name: 'MuiTabs',
      slot: 'FlexContainer',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.flexContainer, ownerState.vertical && styles.flexContainerVertical, ownerState.centered && styles.centered];
      }
    })(({
      ownerState
    }) => _extends({
      display: 'flex'
    }, ownerState.vertical && {
      flexDirection: 'column'
    }, ownerState.centered && {
      justifyContent: 'center'
    }));
    const TabsIndicator = styled$1('span', {
      name: 'MuiTabs',
      slot: 'Indicator',
      overridesResolver: (props, styles) => styles.indicator
    })(({
      ownerState,
      theme
    }) => _extends({
      position: 'absolute',
      height: 2,
      bottom: 0,
      width: '100%',
      transition: theme.transitions.create()
    }, ownerState.indicatorColor === 'primary' && {
      backgroundColor: (theme.vars || theme).palette.primary.main
    }, ownerState.indicatorColor === 'secondary' && {
      backgroundColor: (theme.vars || theme).palette.secondary.main
    }, ownerState.vertical && {
      height: '100%',
      width: 2,
      right: 0
    }));
    const TabsScrollbarSize = styled$1(ScrollbarSize, {
      name: 'MuiTabs',
      slot: 'ScrollbarSize'
    })({
      overflowX: 'auto',
      overflowY: 'hidden',
      // Hide dimensionless scrollbar on macOS
      scrollbarWidth: 'none',
      // Firefox
      '&::-webkit-scrollbar': {
        display: 'none' // Safari + Chrome
      }
    });

    const defaultIndicatorStyle = {};
    let warnedOnceTabPresent = false;
    const Tabs = /*#__PURE__*/React__namespace.forwardRef(function Tabs(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiTabs'
      });
      const theme = useTheme();
      const isRtl = theme.direction === 'rtl';
      const {
          'aria-label': ariaLabel,
          'aria-labelledby': ariaLabelledBy,
          action,
          centered = false,
          children: childrenProp,
          className,
          component = 'div',
          allowScrollButtonsMobile = false,
          indicatorColor = 'primary',
          onChange,
          orientation = 'horizontal',
          ScrollButtonComponent = TabScrollButton$1,
          scrollButtons = 'auto',
          selectionFollowsFocus,
          TabIndicatorProps = {},
          TabScrollButtonProps = {},
          textColor = 'primary',
          value,
          variant = 'standard',
          visibleScrollbar = false
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$u);
      const scrollable = variant === 'scrollable';
      const vertical = orientation === 'vertical';
      const scrollStart = vertical ? 'scrollTop' : 'scrollLeft';
      const start = vertical ? 'top' : 'left';
      const end = vertical ? 'bottom' : 'right';
      const clientSize = vertical ? 'clientHeight' : 'clientWidth';
      const size = vertical ? 'height' : 'width';
      const ownerState = _extends({}, props, {
        component,
        allowScrollButtonsMobile,
        indicatorColor,
        orientation,
        vertical,
        scrollButtons,
        textColor,
        variant,
        visibleScrollbar,
        fixed: !scrollable,
        hideScrollbar: scrollable && !visibleScrollbar,
        scrollableX: scrollable && !vertical,
        scrollableY: scrollable && vertical,
        centered: centered && !scrollable,
        scrollButtonsHideMobile: !allowScrollButtonsMobile
      });
      const classes = useUtilityClasses$p(ownerState);
      {
        if (centered && scrollable) {
          console.error('MUI: You can not use the `centered={true}` and `variant="scrollable"` properties ' + 'at the same time on a `Tabs` component.');
        }
      }
      const [mounted, setMounted] = React__namespace.useState(false);
      const [indicatorStyle, setIndicatorStyle] = React__namespace.useState(defaultIndicatorStyle);
      const [displayScroll, setDisplayScroll] = React__namespace.useState({
        start: false,
        end: false
      });
      const [scrollerStyle, setScrollerStyle] = React__namespace.useState({
        overflow: 'hidden',
        scrollbarWidth: 0
      });
      const valueToIndex = new Map();
      const tabsRef = React__namespace.useRef(null);
      const tabListRef = React__namespace.useRef(null);
      const getTabsMeta = () => {
        const tabsNode = tabsRef.current;
        let tabsMeta;
        if (tabsNode) {
          const rect = tabsNode.getBoundingClientRect();
          // create a new object with ClientRect class props + scrollLeft
          tabsMeta = {
            clientWidth: tabsNode.clientWidth,
            scrollLeft: tabsNode.scrollLeft,
            scrollTop: tabsNode.scrollTop,
            scrollLeftNormalized: getNormalizedScrollLeft(tabsNode, theme.direction),
            scrollWidth: tabsNode.scrollWidth,
            top: rect.top,
            bottom: rect.bottom,
            left: rect.left,
            right: rect.right
          };
        }
        let tabMeta;
        if (tabsNode && value !== false) {
          const children = tabListRef.current.children;
          if (children.length > 0) {
            const tab = children[valueToIndex.get(value)];
            {
              if (!tab) {
                console.error([`MUI: The \`value\` provided to the Tabs component is invalid.`, `None of the Tabs' children match with "${value}".`, valueToIndex.keys ? `You can provide one of the following values: ${Array.from(valueToIndex.keys()).join(', ')}.` : null].join('\n'));
              }
            }
            tabMeta = tab ? tab.getBoundingClientRect() : null;
            {
              if (!warnedOnceTabPresent && tabMeta && tabMeta.width === 0 && tabMeta.height === 0) {
                tabsMeta = null;
                console.error(['MUI: The `value` provided to the Tabs component is invalid.', `The Tab with this \`value\` ("${value}") is not part of the document layout.`, "Make sure the tab item is present in the document or that it's not `display: none`."].join('\n'));
                warnedOnceTabPresent = true;
              }
            }
          }
        }
        return {
          tabsMeta,
          tabMeta
        };
      };
      const updateIndicatorState = useEventCallback(() => {
        const {
          tabsMeta,
          tabMeta
        } = getTabsMeta();
        let startValue = 0;
        let startIndicator;
        if (vertical) {
          startIndicator = 'top';
          if (tabMeta && tabsMeta) {
            startValue = tabMeta.top - tabsMeta.top + tabsMeta.scrollTop;
          }
        } else {
          startIndicator = isRtl ? 'right' : 'left';
          if (tabMeta && tabsMeta) {
            const correction = isRtl ? tabsMeta.scrollLeftNormalized + tabsMeta.clientWidth - tabsMeta.scrollWidth : tabsMeta.scrollLeft;
            startValue = (isRtl ? -1 : 1) * (tabMeta[startIndicator] - tabsMeta[startIndicator] + correction);
          }
        }
        const newIndicatorStyle = {
          [startIndicator]: startValue,
          // May be wrong until the font is loaded.
          [size]: tabMeta ? tabMeta[size] : 0
        };

        // IE11 support, replace with Number.isNaN
        // eslint-disable-next-line no-restricted-globals
        if (isNaN(indicatorStyle[startIndicator]) || isNaN(indicatorStyle[size])) {
          setIndicatorStyle(newIndicatorStyle);
        } else {
          const dStart = Math.abs(indicatorStyle[startIndicator] - newIndicatorStyle[startIndicator]);
          const dSize = Math.abs(indicatorStyle[size] - newIndicatorStyle[size]);
          if (dStart >= 1 || dSize >= 1) {
            setIndicatorStyle(newIndicatorStyle);
          }
        }
      });
      const scroll = (scrollValue, {
        animation = true
      } = {}) => {
        if (animation) {
          animate(scrollStart, tabsRef.current, scrollValue, {
            duration: theme.transitions.duration.standard
          });
        } else {
          tabsRef.current[scrollStart] = scrollValue;
        }
      };
      const moveTabsScroll = delta => {
        let scrollValue = tabsRef.current[scrollStart];
        if (vertical) {
          scrollValue += delta;
        } else {
          scrollValue += delta * (isRtl ? -1 : 1);
          // Fix for Edge
          scrollValue *= isRtl && detectScrollType() === 'reverse' ? -1 : 1;
        }
        scroll(scrollValue);
      };
      const getScrollSize = () => {
        const containerSize = tabsRef.current[clientSize];
        let totalSize = 0;
        const children = Array.from(tabListRef.current.children);
        for (let i = 0; i < children.length; i += 1) {
          const tab = children[i];
          if (totalSize + tab[clientSize] > containerSize) {
            // If the first item is longer than the container size, then only scroll
            // by the container size.
            if (i === 0) {
              totalSize = containerSize;
            }
            break;
          }
          totalSize += tab[clientSize];
        }
        return totalSize;
      };
      const handleStartScrollClick = () => {
        moveTabsScroll(-1 * getScrollSize());
      };
      const handleEndScrollClick = () => {
        moveTabsScroll(getScrollSize());
      };

      // TODO Remove <ScrollbarSize /> as browser support for hidding the scrollbar
      // with CSS improves.
      const handleScrollbarSizeChange = React__namespace.useCallback(scrollbarWidth => {
        setScrollerStyle({
          overflow: null,
          scrollbarWidth
        });
      }, []);
      const getConditionalElements = () => {
        const conditionalElements = {};
        conditionalElements.scrollbarSizeListener = scrollable ? /*#__PURE__*/jsxRuntime.exports.jsx(TabsScrollbarSize, {
          onChange: handleScrollbarSizeChange,
          className: clsx(classes.scrollableX, classes.hideScrollbar)
        }) : null;
        const scrollButtonsActive = displayScroll.start || displayScroll.end;
        const showScrollButtons = scrollable && (scrollButtons === 'auto' && scrollButtonsActive || scrollButtons === true);
        conditionalElements.scrollButtonStart = showScrollButtons ? /*#__PURE__*/jsxRuntime.exports.jsx(ScrollButtonComponent, _extends({
          orientation: orientation,
          direction: isRtl ? 'right' : 'left',
          onClick: handleStartScrollClick,
          disabled: !displayScroll.start
        }, TabScrollButtonProps, {
          className: clsx(classes.scrollButtons, TabScrollButtonProps.className)
        })) : null;
        conditionalElements.scrollButtonEnd = showScrollButtons ? /*#__PURE__*/jsxRuntime.exports.jsx(ScrollButtonComponent, _extends({
          orientation: orientation,
          direction: isRtl ? 'left' : 'right',
          onClick: handleEndScrollClick,
          disabled: !displayScroll.end
        }, TabScrollButtonProps, {
          className: clsx(classes.scrollButtons, TabScrollButtonProps.className)
        })) : null;
        return conditionalElements;
      };
      const scrollSelectedIntoView = useEventCallback(animation => {
        const {
          tabsMeta,
          tabMeta
        } = getTabsMeta();
        if (!tabMeta || !tabsMeta) {
          return;
        }
        if (tabMeta[start] < tabsMeta[start]) {
          // left side of button is out of view
          const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[start] - tabsMeta[start]);
          scroll(nextScrollStart, {
            animation
          });
        } else if (tabMeta[end] > tabsMeta[end]) {
          // right side of button is out of view
          const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[end] - tabsMeta[end]);
          scroll(nextScrollStart, {
            animation
          });
        }
      });
      const updateScrollButtonState = useEventCallback(() => {
        if (scrollable && scrollButtons !== false) {
          const {
            scrollTop,
            scrollHeight,
            clientHeight,
            scrollWidth,
            clientWidth
          } = tabsRef.current;
          let showStartScroll;
          let showEndScroll;
          if (vertical) {
            showStartScroll = scrollTop > 1;
            showEndScroll = scrollTop < scrollHeight - clientHeight - 1;
          } else {
            const scrollLeft = getNormalizedScrollLeft(tabsRef.current, theme.direction);
            // use 1 for the potential rounding error with browser zooms.
            showStartScroll = isRtl ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;
            showEndScroll = !isRtl ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;
          }
          if (showStartScroll !== displayScroll.start || showEndScroll !== displayScroll.end) {
            setDisplayScroll({
              start: showStartScroll,
              end: showEndScroll
            });
          }
        }
      });
      React__namespace.useEffect(() => {
        const handleResize = debounce$1(() => {
          // If the Tabs component is replaced by Suspense with a fallback, the last
          // ResizeObserver's handler that runs because of the change in the layout is trying to
          // access a dom node that is no longer there (as the fallback component is being shown instead).
          // See https://github.com/mui/material-ui/issues/33276
          // TODO: Add tests that will ensure the component is not failing when
          // replaced by Suspense with a fallback, once React is updated to version 18
          if (tabsRef.current) {
            updateIndicatorState();
            updateScrollButtonState();
          }
        });
        const win = ownerWindow(tabsRef.current);
        win.addEventListener('resize', handleResize);
        let resizeObserver;
        if (typeof ResizeObserver !== 'undefined') {
          resizeObserver = new ResizeObserver(handleResize);
          Array.from(tabListRef.current.children).forEach(child => {
            resizeObserver.observe(child);
          });
        }
        return () => {
          handleResize.clear();
          win.removeEventListener('resize', handleResize);
          if (resizeObserver) {
            resizeObserver.disconnect();
          }
        };
      }, [updateIndicatorState, updateScrollButtonState]);
      const handleTabsScroll = React__namespace.useMemo(() => debounce$1(() => {
        updateScrollButtonState();
      }), [updateScrollButtonState]);
      React__namespace.useEffect(() => {
        return () => {
          handleTabsScroll.clear();
        };
      }, [handleTabsScroll]);
      React__namespace.useEffect(() => {
        setMounted(true);
      }, []);
      React__namespace.useEffect(() => {
        updateIndicatorState();
        updateScrollButtonState();
      });
      React__namespace.useEffect(() => {
        // Don't animate on the first render.
        scrollSelectedIntoView(defaultIndicatorStyle !== indicatorStyle);
      }, [scrollSelectedIntoView, indicatorStyle]);
      React__namespace.useImperativeHandle(action, () => ({
        updateIndicator: updateIndicatorState,
        updateScrollButtons: updateScrollButtonState
      }), [updateIndicatorState, updateScrollButtonState]);
      const indicator = /*#__PURE__*/jsxRuntime.exports.jsx(TabsIndicator, _extends({}, TabIndicatorProps, {
        className: clsx(classes.indicator, TabIndicatorProps.className),
        ownerState: ownerState,
        style: _extends({}, indicatorStyle, TabIndicatorProps.style)
      }));
      let childIndex = 0;
      const children = React__namespace.Children.map(childrenProp, child => {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return null;
        }
        {
          if (reactIs.exports.isFragment(child)) {
            console.error(["MUI: The Tabs component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }
        const childValue = child.props.value === undefined ? childIndex : child.props.value;
        valueToIndex.set(childValue, childIndex);
        const selected = childValue === value;
        childIndex += 1;
        return /*#__PURE__*/React__namespace.cloneElement(child, _extends({
          fullWidth: variant === 'fullWidth',
          indicator: selected && !mounted && indicator,
          selected,
          selectionFollowsFocus,
          onChange,
          textColor,
          value: childValue
        }, childIndex === 1 && value === false && !child.props.tabIndex ? {
          tabIndex: 0
        } : {}));
      });
      const handleKeyDown = event => {
        const list = tabListRef.current;
        const currentFocus = ownerDocument(list).activeElement;
        // Keyboard navigation assumes that [role="tab"] are siblings
        // though we might warn in the future about nested, interactive elements
        // as a a11y violation
        const role = currentFocus.getAttribute('role');
        if (role !== 'tab') {
          return;
        }
        let previousItemKey = orientation === 'horizontal' ? 'ArrowLeft' : 'ArrowUp';
        let nextItemKey = orientation === 'horizontal' ? 'ArrowRight' : 'ArrowDown';
        if (orientation === 'horizontal' && isRtl) {
          // swap previousItemKey with nextItemKey
          previousItemKey = 'ArrowRight';
          nextItemKey = 'ArrowLeft';
        }
        switch (event.key) {
          case previousItemKey:
            event.preventDefault();
            moveFocus(list, currentFocus, previousItem);
            break;
          case nextItemKey:
            event.preventDefault();
            moveFocus(list, currentFocus, nextItem);
            break;
          case 'Home':
            event.preventDefault();
            moveFocus(list, null, nextItem);
            break;
          case 'End':
            event.preventDefault();
            moveFocus(list, null, previousItem);
            break;
        }
      };
      const conditionalElements = getConditionalElements();
      return /*#__PURE__*/jsxRuntime.exports.jsxs(TabsRoot, _extends({
        className: clsx(classes.root, className),
        ownerState: ownerState,
        ref: ref,
        as: component
      }, other, {
        children: [conditionalElements.scrollButtonStart, conditionalElements.scrollbarSizeListener, /*#__PURE__*/jsxRuntime.exports.jsxs(TabsScroller, {
          className: classes.scroller,
          ownerState: ownerState,
          style: {
            overflow: scrollerStyle.overflow,
            [vertical ? `margin${isRtl ? 'Left' : 'Right'}` : 'marginBottom']: visibleScrollbar ? undefined : -scrollerStyle.scrollbarWidth
          },
          ref: tabsRef,
          onScroll: handleTabsScroll,
          children: [/*#__PURE__*/jsxRuntime.exports.jsx(FlexContainer, {
            "aria-label": ariaLabel,
            "aria-labelledby": ariaLabelledBy,
            "aria-orientation": orientation === 'vertical' ? 'vertical' : null,
            className: classes.flexContainer,
            ownerState: ownerState,
            onKeyDown: handleKeyDown,
            ref: tabListRef,
            role: "tablist",
            children: children
          }), mounted && indicator]
        }), conditionalElements.scrollButtonEnd]
      }));
    });
    Tabs.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * Callback fired when the component mounts.
       * This is useful when you want to trigger an action programmatically.
       * It supports two actions: `updateIndicator()` and `updateScrollButtons()`
       *
       * @param {object} actions This object contains all possible actions
       * that can be triggered programmatically.
       */
      action: refType$1,
      /**
       * If `true`, the scroll buttons aren't forced hidden on mobile.
       * By default the scroll buttons are hidden on mobile and takes precedence over `scrollButtons`.
       * @default false
       */
      allowScrollButtonsMobile: PropTypes.bool,
      /**
       * The label for the Tabs as a string.
       */
      'aria-label': PropTypes.string,
      /**
       * An id or list of ids separated by a space that label the Tabs.
       */
      'aria-labelledby': PropTypes.string,
      /**
       * If `true`, the tabs are centered.
       * This prop is intended for large views.
       * @default false
       */
      centered: PropTypes.bool,
      /**
       * The content of the component.
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: PropTypes.elementType,
      /**
       * Determines the color of the indicator.
       * @default 'primary'
       */
      indicatorColor: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary']), PropTypes.string]),
      /**
       * Callback fired when the value changes.
       *
       * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
       * @param {any} value We default to the index of the child (number)
       */
      onChange: PropTypes.func,
      /**
       * The component orientation (layout flow direction).
       * @default 'horizontal'
       */
      orientation: PropTypes.oneOf(['horizontal', 'vertical']),
      /**
       * The component used to render the scroll buttons.
       * @default TabScrollButton
       */
      ScrollButtonComponent: PropTypes.elementType,
      /**
       * Determine behavior of scroll buttons when tabs are set to scroll:
       *
       * - `auto` will only present them when not all the items are visible.
       * - `true` will always present them.
       * - `false` will never present them.
       *
       * By default the scroll buttons are hidden on mobile.
       * This behavior can be disabled with `allowScrollButtonsMobile`.
       * @default 'auto'
       */
      scrollButtons: PropTypes /* @typescript-to-proptypes-ignore */.oneOf(['auto', false, true]),
      /**
       * If `true` the selected tab changes on focus. Otherwise it only
       * changes on activation.
       */
      selectionFollowsFocus: PropTypes.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * Props applied to the tab indicator element.
       * @default  {}
       */
      TabIndicatorProps: PropTypes.object,
      /**
       * Props applied to the [`TabScrollButton`](/material-ui/api/tab-scroll-button/) element.
       * @default {}
       */
      TabScrollButtonProps: PropTypes.object,
      /**
       * Determines the color of the `Tab`.
       * @default 'primary'
       */
      textColor: PropTypes.oneOf(['inherit', 'primary', 'secondary']),
      /**
       * The value of the currently selected `Tab`.
       * If you don't want any selected `Tab`, you can set this prop to `false`.
       */
      value: PropTypes.any,
      /**
       * Determines additional display behavior of the tabs:
       *
       *  - `scrollable` will invoke scrolling properties and allow for horizontally
       *  scrolling (or swiping) of the tab bar.
       *  -`fullWidth` will make the tabs grow to use all the available space,
       *  which should be used for small views, like on mobile.
       *  - `standard` will render the default state.
       * @default 'standard'
       */
      variant: PropTypes.oneOf(['fullWidth', 'scrollable', 'standard']),
      /**
       * If `true`, the scrollbar is visible. It can be useful when displaying
       * a long vertical list of tabs.
       * @default false
       */
      visibleScrollbar: PropTypes.bool
    } ;
    var Tabs$1 = Tabs;

    function getTextFieldUtilityClass(slot) {
      return generateUtilityClass('MuiTextField', slot);
    }
    generateUtilityClasses('MuiTextField', ['root']);

    const _excluded$t = ["autoComplete", "autoFocus", "children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "select", "SelectProps", "type", "value", "variant"];
    const variantComponent = {
      standard: Input$1,
      filled: FilledInput$1,
      outlined: OutlinedInput$1
    };
    const useUtilityClasses$o = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root']
      };
      return composeClasses(slots, getTextFieldUtilityClass, classes);
    };
    const TextFieldRoot = styled$1(FormControl$1, {
      name: 'MuiTextField',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({});

    /**
     * The `TextField` is a convenience wrapper for the most common cases (80%).
     * It cannot be all things to all people, otherwise the API would grow out of control.
     *
     * ## Advanced Configuration
     *
     * It's important to understand that the text field is a simple abstraction
     * on top of the following components:
     *
     * - [FormControl](/material-ui/api/form-control/)
     * - [InputLabel](/material-ui/api/input-label/)
     * - [FilledInput](/material-ui/api/filled-input/)
     * - [OutlinedInput](/material-ui/api/outlined-input/)
     * - [Input](/material-ui/api/input/)
     * - [FormHelperText](/material-ui/api/form-helper-text/)
     *
     * If you wish to alter the props applied to the `input` element, you can do so as follows:
     *
     * ```jsx
     * const inputProps = {
     *   step: 300,
     * };
     *
     * return <TextField id="time" type="time" inputProps={inputProps} />;
     * ```
     *
     * For advanced cases, please look at the source of TextField by clicking on the
     * "Edit this page" button above. Consider either:
     *
     * - using the upper case props for passing values directly to the components
     * - using the underlying components directly as shown in the demos
     */
    const TextField = /*#__PURE__*/React__namespace.forwardRef(function TextField(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiTextField'
      });
      const {
          autoComplete,
          autoFocus = false,
          children,
          className,
          color = 'primary',
          defaultValue,
          disabled = false,
          error = false,
          FormHelperTextProps,
          fullWidth = false,
          helperText,
          id: idOverride,
          InputLabelProps,
          inputProps,
          InputProps,
          inputRef,
          label,
          maxRows,
          minRows,
          multiline = false,
          name,
          onBlur,
          onChange,
          onFocus,
          placeholder,
          required = false,
          rows,
          select = false,
          SelectProps,
          type,
          value,
          variant = 'outlined'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$t);
      const ownerState = _extends({}, props, {
        autoFocus,
        color,
        disabled,
        error,
        fullWidth,
        multiline,
        required,
        select,
        variant
      });
      const classes = useUtilityClasses$o(ownerState);
      {
        if (select && !children) {
          console.error('MUI: `children` must be passed when using the `TextField` component with `select`.');
        }
      }
      const InputMore = {};
      if (variant === 'outlined') {
        if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {
          InputMore.notched = InputLabelProps.shrink;
        }
        InputMore.label = label;
      }
      if (select) {
        // unset defaults from textbox inputs
        if (!SelectProps || !SelectProps.native) {
          InputMore.id = undefined;
        }
        InputMore['aria-describedby'] = undefined;
      }
      const id = useId(idOverride);
      const helperTextId = helperText && id ? `${id}-helper-text` : undefined;
      const inputLabelId = label && id ? `${id}-label` : undefined;
      const InputComponent = variantComponent[variant];
      const InputElement = /*#__PURE__*/jsxRuntime.exports.jsx(InputComponent, _extends({
        "aria-describedby": helperTextId,
        autoComplete: autoComplete,
        autoFocus: autoFocus,
        defaultValue: defaultValue,
        fullWidth: fullWidth,
        multiline: multiline,
        name: name,
        rows: rows,
        maxRows: maxRows,
        minRows: minRows,
        type: type,
        value: value,
        id: id,
        inputRef: inputRef,
        onBlur: onBlur,
        onChange: onChange,
        onFocus: onFocus,
        placeholder: placeholder,
        inputProps: inputProps
      }, InputMore, InputProps));
      return /*#__PURE__*/jsxRuntime.exports.jsxs(TextFieldRoot, _extends({
        className: clsx(classes.root, className),
        disabled: disabled,
        error: error,
        fullWidth: fullWidth,
        ref: ref,
        required: required,
        color: color,
        variant: variant,
        ownerState: ownerState
      }, other, {
        children: [label != null && label !== '' && /*#__PURE__*/jsxRuntime.exports.jsx(InputLabel$1, _extends({
          htmlFor: id,
          id: inputLabelId
        }, InputLabelProps, {
          children: label
        })), select ? /*#__PURE__*/jsxRuntime.exports.jsx(Select$1, _extends({
          "aria-describedby": helperTextId,
          id: id,
          labelId: inputLabelId,
          value: value,
          input: InputElement
        }, SelectProps, {
          children: children
        })) : InputElement, helperText && /*#__PURE__*/jsxRuntime.exports.jsx(FormHelperText$1, _extends({
          id: helperTextId
        }, FormHelperTextProps, {
          children: helperText
        }))]
      }));
    });
    TextField.propTypes /* remove-proptypes */ = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * This prop helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: PropTypes.string,
      /**
       * If `true`, the `input` element is focused during the first mount.
       * @default false
       */
      autoFocus: PropTypes.bool,
      /**
       * @ignore
       */
      children: PropTypes.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      /**
       * @ignore
       */
      className: PropTypes.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
       * @default 'primary'
       */
      color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),
      /**
       * The default value. Use when the component is not controlled.
       */
      defaultValue: PropTypes.any,
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, the label is displayed in an error state.
       * @default false
       */
      error: PropTypes.bool,
      /**
       * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.
       */
      FormHelperTextProps: PropTypes.object,
      /**
       * If `true`, the input will take up the full width of its container.
       * @default false
       */
      fullWidth: PropTypes.bool,
      /**
       * The helper text content.
       */
      helperText: PropTypes.node,
      /**
       * The id of the `input` element.
       * Use this prop to make `label` and `helperText` accessible for screen readers.
       */
      id: PropTypes.string,
      /**
       * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.
       * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
       */
      InputLabelProps: PropTypes.object,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: PropTypes.object,
      /**
       * Props applied to the Input element.
       * It will be a [`FilledInput`](/material-ui/api/filled-input/),
       * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)
       * component depending on the `variant` prop value.
       */
      InputProps: PropTypes.object,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,
      /**
       * The label content.
       */
      label: PropTypes.node,
      /**
       * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
       * @default 'none'
       */
      margin: PropTypes.oneOf(['dense', 'none', 'normal']),
      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      /**
       * Minimum number of rows to display when multiline option is set to true.
       */
      minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      /**
       * If `true`, a `textarea` element is rendered instead of an input.
       * @default false
       */
      multiline: PropTypes.bool,
      /**
       * Name attribute of the `input` element.
       */
      name: PropTypes.string,
      /**
       * @ignore
       */
      onBlur: PropTypes.func,
      /**
       * Callback fired when the value is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: PropTypes.func,
      /**
       * @ignore
       */
      onFocus: PropTypes.func,
      /**
       * The short hint displayed in the `input` before the user enters a value.
       */
      placeholder: PropTypes.string,
      /**
       * If `true`, the label is displayed as required and the `input` element is required.
       * @default false
       */
      required: PropTypes.bool,
      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      /**
       * Render a [`Select`](/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.
       * If this option is set you must pass the options of the select as children.
       * @default false
       */
      select: PropTypes.bool,
      /**
       * Props applied to the [`Select`](/material-ui/api/select/) element.
       */
      SelectProps: PropTypes.object,
      /**
       * The size of the component.
       */
      size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       */
      type: PropTypes /* @typescript-to-proptypes-ignore */.string,
      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: PropTypes.any,
      /**
       * The variant to use.
       * @default 'outlined'
       */
      variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])
    } ;
    var TextField$1 = TextField;

    var Delete = {};

    var interopRequireDefault = {exports: {}};

    (function (module) {
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(interopRequireDefault));

    var createSvgIcon = {};

    (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function () {
        return _utils.createSvgIcon;
      }
    });
    var _utils = utils;
    }(createSvgIcon));

    var _interopRequireDefault$f = interopRequireDefault.exports;
    Object.defineProperty(Delete, "__esModule", {
      value: true
    });
    var default_1$f = Delete.default = void 0;
    var _createSvgIcon$f = _interopRequireDefault$f(createSvgIcon);
    var _jsxRuntime$f = jsxRuntime.exports;
    var _default$f = (0, _createSvgIcon$f.default)( /*#__PURE__*/(0, _jsxRuntime$f.jsx)("path", {
      d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
    }), 'Delete');
    default_1$f = Delete.default = _default$f;

    var ArrowDownward = {};

    var _interopRequireDefault$e = interopRequireDefault.exports;
    Object.defineProperty(ArrowDownward, "__esModule", {
      value: true
    });
    var default_1$e = ArrowDownward.default = void 0;
    var _createSvgIcon$e = _interopRequireDefault$e(createSvgIcon);
    var _jsxRuntime$e = jsxRuntime.exports;
    var _default$e = (0, _createSvgIcon$e.default)( /*#__PURE__*/(0, _jsxRuntime$e.jsx)("path", {
      d: "m20 12-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
    }), 'ArrowDownward');
    default_1$e = ArrowDownward.default = _default$e;

    var ArrowUpward = {};

    var _interopRequireDefault$d = interopRequireDefault.exports;
    Object.defineProperty(ArrowUpward, "__esModule", {
      value: true
    });
    var default_1$d = ArrowUpward.default = void 0;
    var _createSvgIcon$d = _interopRequireDefault$d(createSvgIcon);
    var _jsxRuntime$d = jsxRuntime.exports;
    var _default$d = (0, _createSvgIcon$d.default)( /*#__PURE__*/(0, _jsxRuntime$d.jsx)("path", {
      d: "m4 12 1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z"
    }), 'ArrowUpward');
    default_1$d = ArrowUpward.default = _default$d;

    var Add = {};

    var _interopRequireDefault$c = interopRequireDefault.exports;
    Object.defineProperty(Add, "__esModule", {
      value: true
    });
    var default_1$c = Add.default = void 0;
    var _createSvgIcon$c = _interopRequireDefault$c(createSvgIcon);
    var _jsxRuntime$c = jsxRuntime.exports;
    var _default$c = (0, _createSvgIcon$c.default)( /*#__PURE__*/(0, _jsxRuntime$c.jsx)("path", {
      d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
    }), 'Add');
    default_1$c = Add.default = _default$c;

    var ErrorOutline = {};

    var _interopRequireDefault$b = interopRequireDefault.exports;
    Object.defineProperty(ErrorOutline, "__esModule", {
      value: true
    });
    var default_1$b = ErrorOutline.default = void 0;
    var _createSvgIcon$b = _interopRequireDefault$b(createSvgIcon);
    var _jsxRuntime$b = jsxRuntime.exports;
    var _default$b = (0, _createSvgIcon$b.default)( /*#__PURE__*/(0, _jsxRuntime$b.jsx)("path", {
      d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
    }), 'ErrorOutline');
    default_1$b = ErrorOutline.default = _default$b;

    var isPlainObject = isPlainObject_1;

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone$1(value) {
      return isPlainObject(value) ? undefined : value;
    }

    var _customOmitClone = customOmitClone$1;

    var arrayMap$1 = _arrayMap,
        baseClone = _baseClone,
        baseUnset = _baseUnset,
        castPath = _castPath,
        copyObject = _copyObject,
        customOmitClone = _customOmitClone,
        flatRest = _flatRest,
        getAllKeysIn = _getAllKeysIn;

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG = 4;

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap$1(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    var omit_1 = omit;

    var dayjs_min$1 = {exports: {}};

    (function (module, exports) {
    !function(t,e){module.exports=e();}(commonjsGlobal,(function(){var t=1e3,e=6e4,n=36e5,r="millisecond",i="second",s="minute",u="hour",a="day",o="week",f="month",h="quarter",c="year",d="date",$="Invalid Date",l=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,y=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},m=function(t,e,n){var r=String(t);return !r||r.length>=e?t:""+Array(e+1-r.length).join(n)+t},g={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return (e<=0?"+":"-")+m(r,2,"0")+":"+m(i,2,"0")},m:function t(e,n){if(e.date()<n.date())return -t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,f),s=n-i<0,u=e.clone().add(r+(s?-1:1),f);return +(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return {M:f,y:c,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:h}[t]||String(t||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},D="en",v={};v[D]=M;var p=function(t){return t instanceof _},S=function(t,e,n){var r;if(!t)return D;if("string"==typeof t)v[t]&&(r=t),e&&(v[t]=e,r=t);else {var i=t.name;v[i]=t,r=i;}return !n&&r&&(D=r),r||!n&&D},w=function(t,e){if(p(t))return t.clone();var n="object"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},O=g;O.l=S,O.i=p,O.w=function(t,e){return w(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=S(t.locale,null,!0),this.parse(t);}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(O.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var r=e.match(l);if(r){var i=r[2]-1||0,s=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init();},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds();},m.$utils=function(){return O},m.isValid=function(){return !(this.$d.toString()===$)},m.isSame=function(t,e){var n=w(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return w(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<w(t)},m.$g=function(t,e,n){return O.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!O.u(e)||e,h=O.p(t),$=function(t,e){var i=O.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},l=function(t,e){return O.w(n.toDate()[t].apply(n.toDate("s"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,g="set"+(this.$u?"UTC":"");switch(h){case c:return r?$(1,0):$(31,11);case f:return r?$(1,M):$(0,M+1);case o:var D=this.$locale().weekStart||0,v=(y<D?y+7:y)-D;return $(r?m-v:m+(6-v),M);case a:case d:return l(g+"Hours",0);case u:return l(g+"Minutes",1);case s:return l(g+"Seconds",2);case i:return l(g+"Milliseconds",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=O.p(t),h="set"+(this.$u?"UTC":""),$=(n={},n[a]=h+"Date",n[d]=h+"Date",n[f]=h+"Month",n[c]=h+"FullYear",n[u]=h+"Hours",n[s]=h+"Minutes",n[i]=h+"Seconds",n[r]=h+"Milliseconds",n)[o],l=o===a?this.$D+(e-this.$W):e;if(o===f||o===c){var y=this.clone().set(d,1);y.$d[$](l),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d;}else $&&this.$d[$](l);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[O.p(t)]()},m.add=function(r,h){var d,$=this;r=Number(r);var l=O.p(h),y=function(t){var e=w($);return O.w(e.date(e.date()+Math.round(t*r)),$)};if(l===f)return this.set(f,this.$M+r);if(l===c)return this.set(c,this.$y+r);if(l===a)return y(1);if(l===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[l]||1,m=this.$d.getTime()+r*M;return O.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||$;var r=t||"YYYY-MM-DDTHH:mm:ssZ",i=O.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,f=n.months,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].substr(0,s)},c=function(t){return O.s(s%12||12,t,"0")},d=n.meridiem||function(t,e,n){var r=t<12?"AM":"PM";return n?r.toLowerCase():r},l={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:O.s(a+1,2,"0"),MMM:h(n.monthsShort,a,f,3),MMMM:h(f,a),D:this.$D,DD:O.s(this.$D,2,"0"),d:String(this.$W),dd:h(n.weekdaysMin,this.$W,o,2),ddd:h(n.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:O.s(s,2,"0"),h:c(1),hh:c(2),a:d(s,u,!0),A:d(s,u,!1),m:String(u),mm:O.s(u,2,"0"),s:String(this.$s),ss:O.s(this.$s,2,"0"),SSS:O.s(this.$ms,3,"0"),Z:i};return r.replace(y,(function(t,e){return e||l[t]||i.replace(":","")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,$){var l,y=O.p(d),M=w(r),m=(M.utcOffset()-this.utcOffset())*e,g=this-M,D=O.m(this,M);return D=(l={},l[c]=D/12,l[f]=D,l[h]=D/3,l[o]=(g-m)/6048e5,l[a]=(g-m)/864e5,l[u]=g/n,l[s]=g/e,l[i]=g/t,l)[y]||g,$?D:O.a(D)},m.daysInMonth=function(){return this.endOf(f).$D},m.$locale=function(){return v[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=S(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return O.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),b=_.prototype;return w.prototype=b,[["$ms",r],["$s",i],["$m",s],["$H",u],["$W",a],["$M",f],["$y",c],["$D",d]].forEach((function(t){b[t[1]]=function(e){return this.$g(e,t[0],t[1])};})),w.extend=function(t,e){return t.$i||(t(e,_,w),t.$i=!0),w},w.locale=S,w.isDayjs=p,w.unix=function(t){return w(1e3*t)},w.en=v[D],w.Ls=v,w.p={},w}));
    }(dayjs_min$1));

    var dayjs = dayjs_min$1.exports;

    var customParseFormat$1 = {exports: {}};

    (function (module, exports) {
    !function(t,e){module.exports=e();}(commonjsGlobal,(function(){var t={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},e=/(\[[^[]*\])|([-:/.()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,n=/\d\d/,r=/\d\d?/,i=/\d*[^\s\d-_:/()]+/,o={},s=function(t){return (t=+t)+(t>68?1900:2e3)};var a=function(t){return function(e){this[t]=+e;}},f=[/[+-]\d\d:?(\d\d)?|Z/,function(t){(this.zone||(this.zone={})).offset=function(t){if(!t)return 0;if("Z"===t)return 0;var e=t.match(/([+-]|\d\d)/g),n=60*e[1]+(+e[2]||0);return 0===n?0:"+"===e[0]?-n:n}(t);}],u=function(t){var e=o[t];return e&&(e.indexOf?e:e.s.concat(e.f))},h=function(t,e){var n,r=o.meridiem;if(r){for(var i=1;i<=24;i+=1)if(t.indexOf(r(i,0,e))>-1){n=i>12;break}}else n=t===(e?"pm":"PM");return n},d={A:[i,function(t){this.afternoon=h(t,!1);}],a:[i,function(t){this.afternoon=h(t,!0);}],S:[/\d/,function(t){this.milliseconds=100*+t;}],SS:[n,function(t){this.milliseconds=10*+t;}],SSS:[/\d{3}/,function(t){this.milliseconds=+t;}],s:[r,a("seconds")],ss:[r,a("seconds")],m:[r,a("minutes")],mm:[r,a("minutes")],H:[r,a("hours")],h:[r,a("hours")],HH:[r,a("hours")],hh:[r,a("hours")],D:[r,a("day")],DD:[n,a("day")],Do:[i,function(t){var e=o.ordinal,n=t.match(/\d+/);if(this.day=n[0],e)for(var r=1;r<=31;r+=1)e(r).replace(/\[|\]/g,"")===t&&(this.day=r);}],M:[r,a("month")],MM:[n,a("month")],MMM:[i,function(t){var e=u("months"),n=(u("monthsShort")||e.map((function(t){return t.substr(0,3)}))).indexOf(t)+1;if(n<1)throw new Error;this.month=n%12||n;}],MMMM:[i,function(t){var e=u("months").indexOf(t)+1;if(e<1)throw new Error;this.month=e%12||e;}],Y:[/[+-]?\d+/,a("year")],YY:[n,function(t){this.year=s(t);}],YYYY:[/\d{4}/,a("year")],Z:f,ZZ:f};function c(n){var r,i;r=n,i=o&&o.formats;for(var s=(n=r.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g,(function(e,n,r){var o=r&&r.toUpperCase();return n||i[r]||t[r]||i[o].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,(function(t,e,n){return e||n.slice(1)}))}))).match(e),a=s.length,f=0;f<a;f+=1){var u=s[f],h=d[u],c=h&&h[0],l=h&&h[1];s[f]=l?{regex:c,parser:l}:u.replace(/^\[|\]$/g,"");}return function(t){for(var e={},n=0,r=0;n<a;n+=1){var i=s[n];if("string"==typeof i)r+=i.length;else {var o=i.regex,f=i.parser,u=t.substr(r),h=o.exec(u)[0];f.call(e,h),t=t.replace(h,"");}}return function(t){var e=t.afternoon;if(void 0!==e){var n=t.hours;e?n<12&&(t.hours+=12):12===n&&(t.hours=0),delete t.afternoon;}}(e),e}}return function(t,e,n){n.p.customParseFormat=!0,t&&t.parseTwoDigitYear&&(s=t.parseTwoDigitYear);var r=e.prototype,i=r.parse;r.parse=function(t){var e=t.date,r=t.utc,s=t.args;this.$u=r;var a=s[1];if("string"==typeof a){var f=!0===s[2],u=!0===s[3],h=f||u,d=s[2];u&&(d=s[2]),o=this.$locale(),!f&&d&&(o=n.Ls[d]),this.$d=function(t,e,n){try{if(["x","X"].indexOf(e)>-1)return new Date(("X"===e?1e3:1)*t);var r=c(e)(t),i=r.year,o=r.month,s=r.day,a=r.hours,f=r.minutes,u=r.seconds,h=r.milliseconds,d=r.zone,l=new Date,m=s||(i||o?1:l.getDate()),M=i||l.getFullYear(),Y=0;i&&!o||(Y=o>0?o-1:l.getMonth());var p=a||0,v=f||0,D=u||0,g=h||0;return d?new Date(Date.UTC(M,Y,m,p,v,D,g+60*d.offset*1e3)):n?new Date(Date.UTC(M,Y,m,p,v,D,g)):new Date(M,Y,m,p,v,D,g)}catch(t){return new Date("")}}(e,a,r),this.init(),d&&!0!==d&&(this.$L=this.locale(d).$L),h&&e!==this.format(a)&&(this.$d=new Date("")),o={};}else if(a instanceof Array)for(var l=a.length,m=1;m<=l;m+=1){s[1]=a[m-1];var M=n.apply(this,s);if(M.isValid()){this.$d=M.$d,this.$L=M.$L,this.init();break}m===l&&(this.$d=new Date(""));}else i.call(this,t);};}}));
    }(customParseFormat$1));

    var customParsing = customParseFormat$1.exports;

    var Close = {};

    var _interopRequireDefault$a = interopRequireDefault.exports;
    Object.defineProperty(Close, "__esModule", {
      value: true
    });
    var default_1$a = Close.default = void 0;
    var _createSvgIcon$a = _interopRequireDefault$a(createSvgIcon);
    var _jsxRuntime$a = jsxRuntime.exports;
    var _default$a = (0, _createSvgIcon$a.default)( /*#__PURE__*/(0, _jsxRuntime$a.jsx)("path", {
      d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
    }), 'Close');
    default_1$a = Close.default = _default$a;

    var baseEach = _baseEach,
        isArrayLike = isArrayLike_1;

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap$1(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    var _baseMap = baseMap$1;

    var arrayMap = _arrayMap,
        baseIteratee = _baseIteratee,
        baseMap = _baseMap,
        isArray = isArray_1;

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, baseIteratee(iteratee));
    }

    var map_1 = map;

    /* Use it instead of .includes method for IE support */
    function arrayIncludes(array, itemOrItems) {
      if (Array.isArray(itemOrItems)) {
        return itemOrItems.every(item => array.indexOf(item) !== -1);
      }

      return array.indexOf(itemOrItems) !== -1;
    }
    const onSpaceOrEnter = (innerFn, onFocus) => event => {
      if (event.key === 'Enter' || event.key === ' ') {
        innerFn(event); // prevent any side effects

        event.preventDefault();
        event.stopPropagation();
      }

      if (onFocus) {
        onFocus(event);
      }
    };

    const getActiveElement = (root = document) => {
      const activeEl = root.activeElement;

      if (!activeEl) {
        return null;
      }

      if (activeEl.shadowRoot) {
        return getActiveElement(activeEl.shadowRoot);
      }

      return activeEl;
    };

    function getPickersMonthUtilityClass(slot) {
      // TODO v6 Rename 'PrivatePickersMonth' to 'MuiPickersMonth' to follow convention
      return generateUtilityClass('PrivatePickersMonth', slot);
    }
    const pickersMonthClasses = generateUtilityClasses( // TODO v6 Rename 'PrivatePickersMonth' to 'MuiPickersMonth' to follow convention
    'PrivatePickersMonth', ['root', 'selected']);

    const _excluded$s = ["disabled", "onSelect", "selected", "value", "tabIndex", "hasFocus", "onFocus", "onBlur"];

    const useUtilityClasses$n = ownerState => {
      const {
        classes,
        selected
      } = ownerState;
      const slots = {
        root: ['root', selected && 'selected']
      };
      return composeClasses(slots, getPickersMonthUtilityClass, classes);
    };

    const PickersMonthRoot = styled$1(Typography$1, {
      name: 'PrivatePickersMonth',
      slot: 'Root',
      overridesResolver: (_, styles) => [styles.root, {
        [`&.${pickersMonthClasses.selected}`]: styles.selected
      }]
    })(({
      theme
    }) => _extends({
      flex: '1 0 33.33%',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      color: 'unset',
      backgroundColor: 'transparent',
      border: 0,
      outline: 0
    }, theme.typography.subtitle1, {
      margin: '8px 0',
      height: 36,
      borderRadius: 18,
      cursor: 'pointer',
      '&:focus, &:hover': {
        backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
      },
      '&:disabled': {
        pointerEvents: 'none',
        color: theme.palette.text.secondary
      },
      [`&.${pickersMonthClasses.selected}`]: {
        color: theme.palette.primary.contrastText,
        backgroundColor: theme.palette.primary.main,
        '&:focus, &:hover': {
          backgroundColor: theme.palette.primary.dark
        }
      }
    }));

    const noop$2 = () => {};
    /**
     * @ignore - do not document.
     */


    const PickersMonth = props => {
      // TODO v6 add 'useThemeProps' once the component class names are aligned
      const {
        disabled,
        onSelect,
        selected,
        value,
        tabIndex,
        hasFocus,
        onFocus = noop$2,
        onBlur = noop$2
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$s);

      const classes = useUtilityClasses$n(props);

      const handleSelection = () => {
        onSelect(value);
      };

      const ref = React__namespace.useRef(null);
      useEnhancedEffect$1(() => {
        if (hasFocus) {
          var _ref$current;

          (_ref$current = ref.current) == null ? void 0 : _ref$current.focus();
        }
      }, [hasFocus]);
      return /*#__PURE__*/jsxRuntime.exports.jsx(PickersMonthRoot, _extends({
        ref: ref,
        component: "button",
        type: "button",
        className: classes.root,
        tabIndex: tabIndex,
        onClick: handleSelection,
        onKeyDown: onSpaceOrEnter(handleSelection),
        color: selected ? 'primary' : undefined,
        variant: selected ? 'h5' : 'subtitle1',
        disabled: disabled,
        onFocus: event => onFocus(event, value),
        onBlur: event => onBlur(event, value)
      }, other));
    };

    const getPickersLocalization = pickersTranslations => {
      return {
        components: {
          MuiLocalizationProvider: {
            defaultProps: {
              localeText: _extends({}, pickersTranslations)
            }
          }
        }
      };
    };

    // This object is not Partial<PickersLocaleText> because it is the default values
    const enUSPickers = {
      // Calendar navigation
      previousMonth: 'Previous month',
      nextMonth: 'Next month',
      // View navigation
      openPreviousView: 'open previous view',
      openNextView: 'open next view',
      calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'year view is open, switch to calendar view' : 'calendar view is open, switch to year view',
      inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `text input view is open, go to ${viewType} view` : `${viewType} view is open, go to text input view`,
      // DateRange placeholders
      start: 'Start',
      end: 'End',
      // Action bar
      cancelButtonLabel: 'Cancel',
      clearButtonLabel: 'Clear',
      okButtonLabel: 'OK',
      todayButtonLabel: 'Today',
      // Toolbar titles
      datePickerDefaultToolbarTitle: 'Select date',
      dateTimePickerDefaultToolbarTitle: 'Select date & time',
      timePickerDefaultToolbarTitle: 'Select time',
      dateRangePickerDefaultToolbarTitle: 'Select date range',
      // Clock labels
      clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`}`,
      hoursClockNumberText: hours => `${hours} hours`,
      minutesClockNumberText: minutes => `${minutes} minutes`,
      secondsClockNumberText: seconds => `${seconds} seconds`,
      // Open picker labels
      openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choose date, selected date is ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Choose date',
      openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choose time, selected time is ${utils.format(utils.date(rawValue), 'fullTime')}` : 'Choose time',
      // Table labels
      timeTableLabel: 'pick time',
      dateTableLabel: 'pick date'
    };
    const DEFAULT_LOCALE = enUSPickers;
    getPickersLocalization(enUSPickers);

    const MuiPickersAdapterContext = /*#__PURE__*/React__namespace.createContext(null);

    {
      MuiPickersAdapterContext.displayName = 'MuiPickersAdapterContext';
    }

    let warnedOnce = false;
    /**
     * @ignore - do not document.
     */

    function LocalizationProvider(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiLocalizationProvider'
      });
      const {
        children,
        dateAdapter: Utils,
        dateFormats,
        dateLibInstance,
        locale,
        adapterLocale,
        localeText
      } = props;

      {
        if (!warnedOnce && locale !== undefined) {
          warnedOnce = true;
          console.warn("LocalizationProvider's prop `locale` is deprecated and replaced by `adapterLocale`");
        }
      }

      const utils = React__namespace.useMemo(() => new Utils({
        locale: adapterLocale != null ? adapterLocale : locale,
        formats: dateFormats,
        instance: dateLibInstance
      }), [Utils, locale, adapterLocale, dateFormats, dateLibInstance]);
      const defaultDates = React__namespace.useMemo(() => {
        return {
          minDate: utils.date('1900-01-01T00:00:00.000'),
          maxDate: utils.date('2099-12-31T00:00:00.000')
        };
      }, [utils]);
      const contextValue = React__namespace.useMemo(() => {
        return {
          utils,
          defaultDates,
          localeText: _extends({}, DEFAULT_LOCALE, localeText != null ? localeText : {})
        };
      }, [defaultDates, utils, localeText]);
      return /*#__PURE__*/jsxRuntime.exports.jsx(MuiPickersAdapterContext.Provider, {
        value: contextValue,
        children: children
      });
    }
    LocalizationProvider.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------

      /**
       * Locale for the date library you are using
       */
      adapterLocale: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
      children: PropTypes.node,

      /**
       * DateIO adapter class function
       */
      dateAdapter: PropTypes.func.isRequired,

      /**
       * Formats that are used for any child pickers
       */
      dateFormats: PropTypes.shape({
        dayOfMonth: PropTypes.string,
        fullDate: PropTypes.string,
        fullDateTime: PropTypes.string,
        fullDateTime12h: PropTypes.string,
        fullDateTime24h: PropTypes.string,
        fullDateWithWeekday: PropTypes.string,
        fullTime: PropTypes.string,
        fullTime12h: PropTypes.string,
        fullTime24h: PropTypes.string,
        hours12h: PropTypes.string,
        hours24h: PropTypes.string,
        keyboardDate: PropTypes.string,
        keyboardDateTime: PropTypes.string,
        keyboardDateTime12h: PropTypes.string,
        keyboardDateTime24h: PropTypes.string,
        minutes: PropTypes.string,
        month: PropTypes.string,
        monthAndDate: PropTypes.string,
        monthAndYear: PropTypes.string,
        monthShort: PropTypes.string,
        normalDate: PropTypes.string,
        normalDateWithWeekday: PropTypes.string,
        seconds: PropTypes.string,
        shortDate: PropTypes.string,
        weekday: PropTypes.string,
        weekdayShort: PropTypes.string,
        year: PropTypes.string
      }),

      /**
       * Date library instance you are using, if it has some global overrides
       * ```jsx
       * dateLibInstance={momentTimeZone}
       * ```
       */
      dateLibInstance: PropTypes.any,

      /**
       * Locale for the date library you are using
       * @deprecated Use `adapterLocale` instead
       */
      locale: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),

      /**
       * Locale for components texts
       */
      localeText: PropTypes.object
    } ;

    const useLocalizationContext = () => {
      const localization = React__namespace.useContext(MuiPickersAdapterContext);

      if (localization === null) {
        throw new Error('MUI: Can not find utils in context. It looks like you forgot to wrap your component in LocalizationProvider, or pass dateAdapter prop directly.');
      }

      return localization;
    };
    const useUtils = () => useLocalizationContext().utils;
    const useDefaultDates = () => useLocalizationContext().defaultDates;
    const useLocaleText = () => useLocalizationContext().localeText;
    const useNow = () => {
      const utils = useUtils();
      const now = React__namespace.useRef(utils.date());
      return now.current;
    };

    function getMonthPickerUtilityClass(slot) {
      return generateUtilityClass('MuiMonthPicker', slot);
    }
    generateUtilityClasses('MuiMonthPicker', ['root']);

    const findClosestEnabledDate = ({
      date,
      disableFuture,
      disablePast,
      maxDate,
      minDate,
      isDateDisabled,
      utils
    }) => {
      const today = utils.startOfDay(utils.date());

      if (disablePast && utils.isBefore(minDate, today)) {
        minDate = today;
      }

      if (disableFuture && utils.isAfter(maxDate, today)) {
        maxDate = today;
      }

      let forward = date;
      let backward = date;

      if (utils.isBefore(date, minDate)) {
        forward = utils.date(minDate);
        backward = null;
      }

      if (utils.isAfter(date, maxDate)) {
        if (backward) {
          backward = utils.date(maxDate);
        }

        forward = null;
      }

      while (forward || backward) {
        if (forward && utils.isAfter(forward, maxDate)) {
          forward = null;
        }

        if (backward && utils.isBefore(backward, minDate)) {
          backward = null;
        }

        if (forward) {
          if (!isDateDisabled(forward)) {
            return forward;
          }

          forward = utils.addDays(forward, 1);
        }

        if (backward) {
          if (!isDateDisabled(backward)) {
            return backward;
          }

          backward = utils.addDays(backward, -1);
        }
      }

      return null;
    };
    const parsePickerInputValue = (utils, value) => {
      const parsedValue = utils.date(value);
      return utils.isValid(parsedValue) ? parsedValue : null;
    };
    const parseNonNullablePickerDate = (utils, value, defaultValue) => {
      if (value == null) {
        return defaultValue;
      }

      const parsedValue = utils.date(value);
      const isDateValid = utils.isValid(parsedValue);

      if (isDateValid) {
        return parsedValue;
      }

      return defaultValue;
    };

    const _excluded$r = ["className", "date", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onChange", "shouldDisableMonth", "readOnly", "disableHighlightToday", "autoFocus", "onMonthFocus", "hasFocus", "onFocusedViewChange"];

    const useUtilityClasses$m = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root']
      };
      return composeClasses(slots, getMonthPickerUtilityClass, classes);
    };

    function useMonthPickerDefaultizedProps(props, name) {
      const utils = useUtils();
      const defaultDates = useDefaultDates();
      const themeProps = useThemeProps({
        props,
        name
      });
      return _extends({
        disableFuture: false,
        disablePast: false
      }, themeProps, {
        minDate: parseNonNullablePickerDate(utils, themeProps.minDate, defaultDates.minDate),
        maxDate: parseNonNullablePickerDate(utils, themeProps.maxDate, defaultDates.maxDate)
      });
    }
    const MonthPickerRoot = styled$1('div', {
      name: 'MuiMonthPicker',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({
      width: 310,
      display: 'flex',
      flexWrap: 'wrap',
      alignContent: 'stretch',
      margin: '0 4px'
    });
    const MonthPicker = /*#__PURE__*/React__namespace.forwardRef(function MonthPicker(inProps, ref) {
      const utils = useUtils();
      const now = useNow();
      const props = useMonthPickerDefaultizedProps(inProps, 'MuiMonthPicker');

      const {
        className,
        date,
        disabled,
        disableFuture,
        disablePast,
        maxDate,
        minDate,
        onChange,
        shouldDisableMonth,
        readOnly,
        disableHighlightToday,
        autoFocus = false,
        onMonthFocus,
        hasFocus,
        onFocusedViewChange
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$r);

      const ownerState = props;
      const classes = useUtilityClasses$m(ownerState);
      const theme = useTheme$1();
      const selectedDateOrToday = date != null ? date : now;
      const selectedMonth = React__namespace.useMemo(() => {
        if (date != null) {
          return utils.getMonth(date);
        }

        if (disableHighlightToday) {
          return null;
        }

        return utils.getMonth(now);
      }, [now, date, utils, disableHighlightToday]);
      const [focusedMonth, setFocusedMonth] = React__namespace.useState(() => selectedMonth || utils.getMonth(now));
      const isMonthDisabled = React__namespace.useCallback(month => {
        const firstEnabledMonth = utils.startOfMonth(disablePast && utils.isAfter(now, minDate) ? now : minDate);
        const lastEnabledMonth = utils.startOfMonth(disableFuture && utils.isBefore(now, maxDate) ? now : maxDate);

        if (utils.isBefore(month, firstEnabledMonth)) {
          return true;
        }

        if (utils.isAfter(month, lastEnabledMonth)) {
          return true;
        }

        if (!shouldDisableMonth) {
          return false;
        }

        return shouldDisableMonth(month);
      }, [disableFuture, disablePast, maxDate, minDate, now, shouldDisableMonth, utils]);

      const onMonthSelect = month => {
        if (readOnly) {
          return;
        }

        const newDate = utils.setMonth(selectedDateOrToday, month);
        onChange(newDate, 'finish');
      };

      const [internalHasFocus, setInternalHasFocus] = useControlled({
        name: 'MonthPicker',
        state: 'hasFocus',
        controlled: hasFocus,
        default: autoFocus
      });
      const changeHasFocus = React__namespace.useCallback(newHasFocus => {
        setInternalHasFocus(newHasFocus);

        if (onFocusedViewChange) {
          onFocusedViewChange(newHasFocus);
        }
      }, [setInternalHasFocus, onFocusedViewChange]);
      const focusMonth = React__namespace.useCallback(month => {
        if (!isMonthDisabled(utils.setMonth(selectedDateOrToday, month))) {
          setFocusedMonth(month);
          changeHasFocus(true);

          if (onMonthFocus) {
            onMonthFocus(month);
          }
        }
      }, [selectedDateOrToday, isMonthDisabled, utils, onMonthFocus, changeHasFocus]);
      React__namespace.useEffect(() => {
        setFocusedMonth(prevFocusedMonth => selectedMonth !== null && prevFocusedMonth !== selectedMonth ? selectedMonth : prevFocusedMonth);
      }, [selectedMonth]);
      const handleKeyDown = useEventCallback(event => {
        const monthsInYear = 12;
        const monthsInRow = 3;

        switch (event.key) {
          case 'ArrowUp':
            focusMonth((monthsInYear + focusedMonth - monthsInRow) % monthsInYear);
            event.preventDefault();
            break;

          case 'ArrowDown':
            focusMonth((monthsInYear + focusedMonth + monthsInRow) % monthsInYear);
            event.preventDefault();
            break;

          case 'ArrowLeft':
            focusMonth((monthsInYear + focusedMonth + (theme.direction === 'ltr' ? -1 : 1)) % monthsInYear);
            event.preventDefault();
            break;

          case 'ArrowRight':
            focusMonth((monthsInYear + focusedMonth + (theme.direction === 'ltr' ? 1 : -1)) % monthsInYear);
            event.preventDefault();
            break;
        }
      });
      const handleMonthFocus = React__namespace.useCallback((event, month) => {
        focusMonth(month);
      }, [focusMonth]);
      const handleMonthBlur = React__namespace.useCallback(() => {
        changeHasFocus(false);
      }, [changeHasFocus]);
      const currentMonthNumber = utils.getMonth(now);
      return /*#__PURE__*/jsxRuntime.exports.jsx(MonthPickerRoot, _extends({
        ref: ref,
        className: clsx(classes.root, className),
        ownerState: ownerState,
        onKeyDown: handleKeyDown
      }, other, {
        children: utils.getMonthArray(selectedDateOrToday).map(month => {
          const monthNumber = utils.getMonth(month);
          const monthText = utils.format(month, 'monthShort');
          const isDisabled = disabled || isMonthDisabled(month);
          return /*#__PURE__*/jsxRuntime.exports.jsx(PickersMonth, {
            value: monthNumber,
            selected: monthNumber === selectedMonth,
            tabIndex: monthNumber === focusedMonth && !isDisabled ? 0 : -1,
            hasFocus: internalHasFocus && monthNumber === focusedMonth,
            onSelect: onMonthSelect,
            onFocus: handleMonthFocus,
            onBlur: handleMonthBlur,
            disabled: isDisabled,
            "aria-current": currentMonthNumber === monthNumber ? 'date' : undefined,
            children: monthText
          }, monthText);
        })
      }));
    });
    MonthPicker.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------
      autoFocus: PropTypes.bool,

      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,

      /**
       * className applied to the root element.
       */
      className: PropTypes.string,

      /**
       * Date value for the MonthPicker
       */
      date: PropTypes.any,

      /**
       * If `true` picker is disabled
       */
      disabled: PropTypes.bool,

      /**
       * If `true` future days are disabled.
       * @default false
       */
      disableFuture: PropTypes.bool,

      /**
       * If `true`, today's date is rendering without highlighting with circle.
       * @default false
       */
      disableHighlightToday: PropTypes.bool,

      /**
       * If `true` past days are disabled.
       * @default false
       */
      disablePast: PropTypes.bool,
      hasFocus: PropTypes.bool,

      /**
       * Maximal selectable date. @DateIOType
       */
      maxDate: PropTypes.any,

      /**
       * Minimal selectable date. @DateIOType
       */
      minDate: PropTypes.any,

      /**
       * Callback fired on date change.
       */
      onChange: PropTypes.func.isRequired,
      onFocusedViewChange: PropTypes.func,
      onMonthFocus: PropTypes.func,

      /**
       * If `true` picker is readonly
       */
      readOnly: PropTypes.bool,

      /**
       * Disable specific months dynamically.
       * Works like `shouldDisableDate` but for month selection view @DateIOType.
       * @template TDate
       * @param {TDate} month The month to check.
       * @returns {boolean} If `true` the month will be disabled.
       */
      shouldDisableMonth: PropTypes.func,

      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } ;

    function useValidation(props, validate, isSameError) {
      const {
        value,
        onError
      } = props;
      const adapter = useLocalizationContext();
      const previousValidationErrorRef = React__namespace.useRef(null);
      const validationError = validate({
        adapter,
        value,
        props
      });
      React__namespace.useEffect(() => {
        if (onError && !isSameError(validationError, previousValidationErrorRef.current)) {
          onError(validationError, value);
        }

        previousValidationErrorRef.current = validationError;
      }, [isSameError, onError, previousValidationErrorRef, validationError, value]);
      return validationError;
    }

    const validateDate = ({
      props,
      value,
      adapter
    }) => {
      const now = adapter.utils.date();
      const date = adapter.utils.date(value);
      const minDate = parseNonNullablePickerDate(adapter.utils, props.minDate, adapter.defaultDates.minDate);
      const maxDate = parseNonNullablePickerDate(adapter.utils, props.maxDate, adapter.defaultDates.maxDate);

      if (date === null) {
        return null;
      }

      switch (true) {
        case !adapter.utils.isValid(value):
          return 'invalidDate';

        case Boolean(props.shouldDisableDate && props.shouldDisableDate(date)):
          return 'shouldDisableDate';

        case Boolean(props.disableFuture && adapter.utils.isAfterDay(date, now)):
          return 'disableFuture';

        case Boolean(props.disablePast && adapter.utils.isBeforeDay(date, now)):
          return 'disablePast';

        case Boolean(minDate && adapter.utils.isBeforeDay(date, minDate)):
          return 'minDate';

        case Boolean(maxDate && adapter.utils.isAfterDay(date, maxDate)):
          return 'maxDate';

        default:
          return null;
      }
    };
    const useIsDayDisabled = ({
      shouldDisableDate,
      minDate,
      maxDate,
      disableFuture,
      disablePast
    }) => {
      const adapter = useLocalizationContext();
      return React__namespace.useCallback(day => validateDate({
        adapter,
        value: day,
        props: {
          shouldDisableDate,
          minDate,
          maxDate,
          disableFuture,
          disablePast
        }
      }) !== null, [adapter, shouldDisableDate, minDate, maxDate, disableFuture, disablePast]);
    };
    const isSameDateError = (a, b) => a === b;
    const useDateValidation = props => useValidation(props, validateDate, isSameDateError);

    const createCalendarStateReducer = (reduceAnimations, disableSwitchToMonthOnDayFocus, utils) => (state, action) => {
      switch (action.type) {
        case 'changeMonth':
          return _extends({}, state, {
            slideDirection: action.direction,
            currentMonth: action.newMonth,
            isMonthSwitchingAnimating: !reduceAnimations
          });

        case 'finishMonthSwitchingAnimation':
          return _extends({}, state, {
            isMonthSwitchingAnimating: false
          });

        case 'changeFocusedDay':
          {
            if (state.focusedDay != null && action.focusedDay != null && utils.isSameDay(action.focusedDay, state.focusedDay)) {
              return state;
            }

            const needMonthSwitch = action.focusedDay != null && !disableSwitchToMonthOnDayFocus && !utils.isSameMonth(state.currentMonth, action.focusedDay);
            return _extends({}, state, {
              focusedDay: action.focusedDay,
              isMonthSwitchingAnimating: needMonthSwitch && !reduceAnimations && !action.withoutMonthSwitchingAnimation,
              currentMonth: needMonthSwitch ? utils.startOfMonth(action.focusedDay) : state.currentMonth,
              slideDirection: action.focusedDay != null && utils.isAfterDay(action.focusedDay, state.currentMonth) ? 'left' : 'right'
            });
          }

        default:
          throw new Error('missing support');
      }
    };
    const useCalendarState = ({
      date,
      defaultCalendarMonth,
      disableFuture,
      disablePast,
      disableSwitchToMonthOnDayFocus = false,
      maxDate,
      minDate,
      onMonthChange,
      reduceAnimations,
      shouldDisableDate
    }) => {
      var _ref;

      const now = useNow();
      const utils = useUtils();
      const reducerFn = React__namespace.useRef(createCalendarStateReducer(Boolean(reduceAnimations), disableSwitchToMonthOnDayFocus, utils)).current;
      const [calendarState, dispatch] = React__namespace.useReducer(reducerFn, {
        isMonthSwitchingAnimating: false,
        focusedDay: date || now,
        currentMonth: utils.startOfMonth((_ref = date != null ? date : defaultCalendarMonth) != null ? _ref : now),
        slideDirection: 'left'
      });
      const handleChangeMonth = React__namespace.useCallback(payload => {
        dispatch(_extends({
          type: 'changeMonth'
        }, payload));

        if (onMonthChange) {
          onMonthChange(payload.newMonth);
        }
      }, [onMonthChange]);
      const changeMonth = React__namespace.useCallback(newDate => {
        const newDateRequested = newDate != null ? newDate : now;

        if (utils.isSameMonth(newDateRequested, calendarState.currentMonth)) {
          return;
        }

        handleChangeMonth({
          newMonth: utils.startOfMonth(newDateRequested),
          direction: utils.isAfterDay(newDateRequested, calendarState.currentMonth) ? 'left' : 'right'
        });
      }, [calendarState.currentMonth, handleChangeMonth, now, utils]);
      const isDateDisabled = useIsDayDisabled({
        shouldDisableDate,
        minDate,
        maxDate,
        disableFuture,
        disablePast
      });
      const onMonthSwitchingAnimationEnd = React__namespace.useCallback(() => {
        dispatch({
          type: 'finishMonthSwitchingAnimation'
        });
      }, []);
      const changeFocusedDay = React__namespace.useCallback((newFocusedDate, withoutMonthSwitchingAnimation) => {
        if (!isDateDisabled(newFocusedDate)) {
          dispatch({
            type: 'changeFocusedDay',
            focusedDay: newFocusedDate,
            withoutMonthSwitchingAnimation
          });
        }
      }, [isDateDisabled]);
      return {
        calendarState,
        changeMonth,
        changeFocusedDay,
        isDateDisabled,
        onMonthSwitchingAnimationEnd,
        handleChangeMonth
      };
    };

    const getPickersFadeTransitionGroupUtilityClass = slot => generateUtilityClass('MuiPickersFadeTransitionGroup', slot);
    generateUtilityClasses('MuiPickersFadeTransitionGroup', ['root']);

    const useUtilityClasses$l = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root']
      };
      return composeClasses(slots, getPickersFadeTransitionGroupUtilityClass, classes);
    };

    const animationDuration = 500;
    const PickersFadeTransitionGroupRoot = styled$1(TransitionGroup$1, {
      name: 'MuiPickersFadeTransitionGroup',
      slot: 'Root',
      overridesResolver: (_, styles) => styles.root
    })({
      display: 'block',
      position: 'relative'
    });
    /**
     * @ignore - do not document.
     */

    function PickersFadeTransitionGroup(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiPickersFadeTransitionGroup'
      });
      const {
        children,
        className,
        reduceAnimations,
        transKey
      } = props;
      const classes = useUtilityClasses$l(props);

      if (reduceAnimations) {
        return children;
      }

      return /*#__PURE__*/jsxRuntime.exports.jsx(PickersFadeTransitionGroupRoot, {
        className: clsx(classes.root, className),
        children: /*#__PURE__*/jsxRuntime.exports.jsx(Fade$1, {
          appear: false,
          mountOnEnter: true,
          unmountOnExit: true,
          timeout: {
            appear: animationDuration,
            enter: animationDuration / 2,
            exit: 0
          },
          children: children
        }, transKey)
      });
    }

    const DAY_SIZE = 36;
    const DAY_MARGIN = 2;
    const DIALOG_WIDTH = 320;
    const VIEW_HEIGHT = 358;

    function getPickersDayUtilityClass(slot) {
      return generateUtilityClass('MuiPickersDay', slot);
    }
    const pickersDayClasses = generateUtilityClasses('MuiPickersDay', ['root', 'dayWithMargin', 'dayOutsideMonth', 'hiddenDaySpacingFiller', 'today', 'selected', 'disabled']);

    const _excluded$q = ["autoFocus", "className", "day", "disabled", "disableHighlightToday", "disableMargin", "hidden", "isAnimating", "onClick", "onDaySelect", "onFocus", "onBlur", "onKeyDown", "onMouseDown", "outsideCurrentMonth", "selected", "showDaysOutsideCurrentMonth", "children", "today"];

    const useUtilityClasses$k = ownerState => {
      const {
        selected,
        disableMargin,
        disableHighlightToday,
        today,
        disabled,
        outsideCurrentMonth,
        showDaysOutsideCurrentMonth,
        classes
      } = ownerState;
      const slots = {
        root: ['root', selected && 'selected', disabled && 'disabled', !disableMargin && 'dayWithMargin', !disableHighlightToday && today && 'today', outsideCurrentMonth && showDaysOutsideCurrentMonth && 'dayOutsideMonth', outsideCurrentMonth && !showDaysOutsideCurrentMonth && 'hiddenDaySpacingFiller'],
        hiddenDaySpacingFiller: ['hiddenDaySpacingFiller']
      };
      return composeClasses(slots, getPickersDayUtilityClass, classes);
    };

    const styleArg = ({
      theme,
      ownerState
    }) => _extends({}, theme.typography.caption, {
      width: DAY_SIZE,
      height: DAY_SIZE,
      borderRadius: '50%',
      padding: 0,
      // background required here to prevent collides with the other days when animating with transition group
      backgroundColor: theme.palette.background.paper,
      color: theme.palette.text.primary,
      '&:hover': {
        backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
      },
      '&:focus': {
        backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
        [`&.${pickersDayClasses.selected}`]: {
          willChange: 'background-color',
          backgroundColor: theme.palette.primary.dark
        }
      },
      [`&.${pickersDayClasses.selected}`]: {
        color: theme.palette.primary.contrastText,
        backgroundColor: theme.palette.primary.main,
        fontWeight: theme.typography.fontWeightMedium,
        transition: theme.transitions.create('background-color', {
          duration: theme.transitions.duration.short
        }),
        '&:hover': {
          willChange: 'background-color',
          backgroundColor: theme.palette.primary.dark
        }
      },
      [`&.${pickersDayClasses.disabled}`]: {
        color: theme.palette.text.disabled
      }
    }, !ownerState.disableMargin && {
      margin: `0 ${DAY_MARGIN}px`
    }, ownerState.outsideCurrentMonth && ownerState.showDaysOutsideCurrentMonth && {
      color: theme.palette.text.secondary
    }, !ownerState.disableHighlightToday && ownerState.today && {
      [`&:not(.${pickersDayClasses.selected})`]: {
        border: `1px solid ${theme.palette.text.secondary}`
      }
    });

    const overridesResolver = (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, !ownerState.disableMargin && styles.dayWithMargin, !ownerState.disableHighlightToday && ownerState.today && styles.today, !ownerState.outsideCurrentMonth && ownerState.showDaysOutsideCurrentMonth && styles.dayOutsideMonth, ownerState.outsideCurrentMonth && !ownerState.showDaysOutsideCurrentMonth && styles.hiddenDaySpacingFiller];
    };

    const PickersDayRoot = styled$1(ButtonBase$1, {
      name: 'MuiPickersDay',
      slot: 'Root',
      overridesResolver
    })(styleArg);
    const PickersDayFiller = styled$1('div', {
      name: 'MuiPickersDay',
      slot: 'Root',
      overridesResolver
    })(({
      theme,
      ownerState
    }) => _extends({}, styleArg({
      theme,
      ownerState
    }), {
      // visibility: 'hidden' does not work here as it hides the element from screen readers as well
      opacity: 0,
      pointerEvents: 'none'
    }));

    const noop$1 = () => {};

    const PickersDayRaw = /*#__PURE__*/React__namespace.forwardRef(function PickersDay(inProps, forwardedRef) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiPickersDay'
      });

      const {
        autoFocus = false,
        className,
        day,
        disabled = false,
        disableHighlightToday = false,
        disableMargin = false,
        isAnimating,
        onClick,
        onDaySelect,
        onFocus = noop$1,
        onBlur = noop$1,
        onKeyDown = noop$1,
        onMouseDown,
        outsideCurrentMonth,
        selected = false,
        showDaysOutsideCurrentMonth = false,
        children,
        today: isToday = false
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$q);

      const ownerState = _extends({}, props, {
        autoFocus,
        disabled,
        disableHighlightToday,
        disableMargin,
        selected,
        showDaysOutsideCurrentMonth,
        today: isToday
      });

      const classes = useUtilityClasses$k(ownerState);
      const utils = useUtils();
      const ref = React__namespace.useRef(null);
      const handleRef = useForkRef(ref, forwardedRef); // Since this is rendered when a Popper is opened we can't use passive effects.
      // Focusing in passive effects in Popper causes scroll jump.

      useEnhancedEffect$1(() => {
        if (autoFocus && !disabled && !isAnimating && !outsideCurrentMonth) {
          // ref.current being null would be a bug in MUI
          ref.current.focus();
        }
      }, [autoFocus, disabled, isAnimating, outsideCurrentMonth]); // For day outside of current month, move focus from mouseDown to mouseUp
      // Goal: have the onClick ends before sliding to the new month

      const handleMouseDown = event => {
        if (onMouseDown) {
          onMouseDown(event);
        }

        if (outsideCurrentMonth) {
          event.preventDefault();
        }
      };

      const handleClick = event => {
        if (!disabled) {
          onDaySelect(day, 'finish');
        }

        if (outsideCurrentMonth) {
          event.currentTarget.focus();
        }

        if (onClick) {
          onClick(event);
        }
      };

      if (outsideCurrentMonth && !showDaysOutsideCurrentMonth) {
        return /*#__PURE__*/jsxRuntime.exports.jsx(PickersDayFiller, {
          className: clsx(classes.root, classes.hiddenDaySpacingFiller, className),
          ownerState: ownerState,
          role: other.role
        });
      }

      return /*#__PURE__*/jsxRuntime.exports.jsx(PickersDayRoot, _extends({
        className: clsx(classes.root, className),
        ownerState: ownerState,
        ref: handleRef,
        centerRipple: true,
        disabled: disabled,
        tabIndex: selected ? 0 : -1,
        onKeyDown: event => onKeyDown(event, day),
        onFocus: event => onFocus(event, day),
        onBlur: event => onBlur(event, day),
        onClick: handleClick,
        onMouseDown: handleMouseDown
      }, other, {
        children: !children ? utils.format(day, 'dayOfMonth') : children
      }));
    });
    const areDayPropsEqual = (prevProps, nextProps) => {
      return prevProps.autoFocus === nextProps.autoFocus && prevProps.isAnimating === nextProps.isAnimating && prevProps.today === nextProps.today && prevProps.disabled === nextProps.disabled && prevProps.selected === nextProps.selected && prevProps.disableMargin === nextProps.disableMargin && prevProps.showDaysOutsideCurrentMonth === nextProps.showDaysOutsideCurrentMonth && prevProps.disableHighlightToday === nextProps.disableHighlightToday && prevProps.className === nextProps.className && prevProps.sx === nextProps.sx && prevProps.outsideCurrentMonth === nextProps.outsideCurrentMonth && prevProps.onFocus === nextProps.onFocus && prevProps.onBlur === nextProps.onBlur && prevProps.onDaySelect === nextProps.onDaySelect;
    };
    PickersDayRaw.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------

      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,

      /**
       * The date to show.
       */
      day: PropTypes.any.isRequired,

      /**
       * If `true`, renders as disabled.
       * @default false
       */
      disabled: PropTypes.bool,

      /**
       * If `true`, today's date is rendering without highlighting with circle.
       * @default false
       */
      disableHighlightToday: PropTypes.bool,

      /**
       * If `true`, days are rendering without margin. Useful for displaying linked range of days.
       * @default false
       */
      disableMargin: PropTypes.bool,
      isAnimating: PropTypes.bool,
      onBlur: PropTypes.func,
      onDaySelect: PropTypes.func.isRequired,
      onFocus: PropTypes.func,
      onKeyDown: PropTypes.func,

      /**
       * If `true`, day is outside of month and will be hidden.
       */
      outsideCurrentMonth: PropTypes.bool.isRequired,

      /**
       * If `true`, renders as selected.
       * @default false
       */
      selected: PropTypes.bool,

      /**
       * If `true`, days that have `outsideCurrentMonth={true}` are displayed.
       * @default false
       */
      showDaysOutsideCurrentMonth: PropTypes.bool,

      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),

      /**
       * If `true`, renders as today date.
       * @default false
       */
      today: PropTypes.bool
    } ;
    /**
     *
     * Demos:
     *
     * - [Date Picker](https://mui.com/x/react-date-pickers/date-picker/)
     *
     * API:
     *
     * - [PickersDay API](https://mui.com/x/api/date-pickers/pickers-day/)
     */

    const PickersDay = /*#__PURE__*/React__namespace.memo(PickersDayRaw, areDayPropsEqual);

    const getPickersSlideTransitionUtilityClass = slot => // TODO v6: Rename 'PrivatePickersSlideTransition' to 'MuiPickersSlideTransition' to follow convention
    generateUtilityClass('PrivatePickersSlideTransition', slot);
    const pickersSlideTransitionClasses = generateUtilityClasses( // TODO v6: Rename 'PrivatePickersSlideTransition' to 'MuiPickersSlideTransition' to follow convention
    'PrivatePickersSlideTransition', ['root', 'slideEnter-left', 'slideEnter-right', 'slideEnterActive', 'slideExit', 'slideExitActiveLeft-left', 'slideExitActiveLeft-right']);

    const _excluded$p = ["children", "className", "reduceAnimations", "slideDirection", "transKey"];

    const useUtilityClasses$j = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root']
      };
      return composeClasses(slots, getPickersSlideTransitionUtilityClass, classes);
    };

    const slideAnimationDuration = 350;
    const PickersSlideTransitionRoot = styled$1(TransitionGroup$1, {
      name: 'PrivatePickersSlideTransition',
      slot: 'Root',
      overridesResolver: (_, styles) => [styles.root, {
        [`.${pickersSlideTransitionClasses['slideEnter-left']}`]: styles['slideEnter-left']
      }, {
        [`.${pickersSlideTransitionClasses['slideEnter-right']}`]: styles['slideEnter-right']
      }, {
        [`.${pickersSlideTransitionClasses.slideEnterActive}`]: styles.slideEnterActive
      }, {
        [`.${pickersSlideTransitionClasses.slideExit}`]: styles.slideExit
      }, {
        [`.${pickersSlideTransitionClasses['slideExitActiveLeft-left']}`]: styles['slideExitActiveLeft-left']
      }, {
        [`.${pickersSlideTransitionClasses['slideExitActiveLeft-right']}`]: styles['slideExitActiveLeft-right']
      }]
    })(({
      theme
    }) => {
      const slideTransition = theme.transitions.create('transform', {
        duration: slideAnimationDuration,
        easing: 'cubic-bezier(0.35, 0.8, 0.4, 1)'
      });
      return {
        display: 'block',
        position: 'relative',
        overflowX: 'hidden',
        '& > *': {
          position: 'absolute',
          top: 0,
          right: 0,
          left: 0
        },
        [`& .${pickersSlideTransitionClasses['slideEnter-left']}`]: {
          willChange: 'transform',
          transform: 'translate(100%)',
          zIndex: 1
        },
        [`& .${pickersSlideTransitionClasses['slideEnter-right']}`]: {
          willChange: 'transform',
          transform: 'translate(-100%)',
          zIndex: 1
        },
        [`& .${pickersSlideTransitionClasses.slideEnterActive}`]: {
          transform: 'translate(0%)',
          transition: slideTransition
        },
        [`& .${pickersSlideTransitionClasses.slideExit}`]: {
          transform: 'translate(0%)'
        },
        [`& .${pickersSlideTransitionClasses['slideExitActiveLeft-left']}`]: {
          willChange: 'transform',
          transform: 'translate(-100%)',
          transition: slideTransition,
          zIndex: 0
        },
        [`& .${pickersSlideTransitionClasses['slideExitActiveLeft-right']}`]: {
          willChange: 'transform',
          transform: 'translate(100%)',
          transition: slideTransition,
          zIndex: 0
        }
      };
    });
    /**
     * @ignore - do not document.
     */

    const PickersSlideTransition = props => {
      // TODO v6: add 'useThemeProps' once the component class names are aligned
      const {
        children,
        className,
        reduceAnimations,
        slideDirection,
        transKey
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$p);

      const classes = useUtilityClasses$j(props);

      if (reduceAnimations) {
        return /*#__PURE__*/jsxRuntime.exports.jsx("div", {
          className: clsx(classes.root, className),
          children: children
        });
      }

      const transitionClasses = {
        exit: pickersSlideTransitionClasses.slideExit,
        enterActive: pickersSlideTransitionClasses.slideEnterActive,
        enter: pickersSlideTransitionClasses[`slideEnter-${slideDirection}`],
        exitActive: pickersSlideTransitionClasses[`slideExitActiveLeft-${slideDirection}`]
      };
      return /*#__PURE__*/jsxRuntime.exports.jsx(PickersSlideTransitionRoot, {
        className: clsx(classes.root, className),
        childFactory: element => /*#__PURE__*/React__namespace.cloneElement(element, {
          classNames: transitionClasses
        }),
        role: "presentation",
        children: /*#__PURE__*/jsxRuntime.exports.jsx(CSSTransition$1, _extends({
          mountOnEnter: true,
          unmountOnExit: true,
          timeout: slideAnimationDuration,
          classNames: transitionClasses
        }, other, {
          children: children
        }), transKey)
      });
    };

    const getDayPickerUtilityClass = slot => generateUtilityClass('MuiDayPicker', slot);
    generateUtilityClasses('MuiDayPicker', ['header', 'weekDayLabel', 'loadingContainer', 'slideTransition', 'monthContainer', 'weekContainer']);

    const useUtilityClasses$i = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        header: ['header'],
        weekDayLabel: ['weekDayLabel'],
        loadingContainer: ['loadingContainer'],
        slideTransition: ['slideTransition'],
        monthContainer: ['monthContainer'],
        weekContainer: ['weekContainer']
      };
      return composeClasses(slots, getDayPickerUtilityClass, classes);
    };

    const defaultDayOfWeekFormatter = day => day.charAt(0).toUpperCase();

    const weeksContainerHeight = (DAY_SIZE + DAY_MARGIN * 2) * 6;
    const PickersCalendarDayHeader = styled$1('div', {
      name: 'MuiDayPicker',
      slot: 'Header',
      overridesResolver: (_, styles) => styles.header
    })({
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center'
    });
    const PickersCalendarWeekDayLabel = styled$1(Typography$1, {
      name: 'MuiDayPicker',
      slot: 'WeekDayLabel',
      overridesResolver: (_, styles) => styles.weekDayLabel
    })(({
      theme
    }) => ({
      width: 36,
      height: 40,
      margin: '0 2px',
      textAlign: 'center',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      color: theme.palette.text.secondary
    }));
    const PickersCalendarLoadingContainer = styled$1('div', {
      name: 'MuiDayPicker',
      slot: 'LoadingContainer',
      overridesResolver: (_, styles) => styles.loadingContainer
    })({
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      minHeight: weeksContainerHeight
    });
    const PickersCalendarSlideTransition = styled$1(PickersSlideTransition, {
      name: 'MuiDayPicker',
      slot: 'SlideTransition',
      overridesResolver: (_, styles) => styles.slideTransition
    })({
      minHeight: weeksContainerHeight
    });
    const PickersCalendarWeekContainer = styled$1('div', {
      name: 'MuiDayPicker',
      slot: 'MonthContainer',
      overridesResolver: (_, styles) => styles.monthContainer
    })({
      overflow: 'hidden'
    });
    const PickersCalendarWeek = styled$1('div', {
      name: 'MuiDayPicker',
      slot: 'WeekContainer',
      overridesResolver: (_, styles) => styles.weekContainer
    })({
      margin: `${DAY_MARGIN}px 0`,
      display: 'flex',
      justifyContent: 'center'
    });
    /**
     * @ignore - do not document.
     */

    function DayPicker(inProps) {
      const now = useNow();
      const utils = useUtils();
      const props = useThemeProps({
        props: inProps,
        name: 'MuiDayPicker'
      });
      const classes = useUtilityClasses$i(props);
      const {
        onFocusedDayChange,
        className,
        currentMonth,
        selectedDays,
        disabled,
        disableHighlightToday,
        focusedDay,
        isMonthSwitchingAnimating,
        loading,
        onSelectedDaysChange,
        onMonthSwitchingAnimationEnd,
        readOnly,
        reduceAnimations,
        renderDay,
        renderLoading = () => /*#__PURE__*/jsxRuntime.exports.jsx("span", {
          children: "..."
        }),
        showDaysOutsideCurrentMonth,
        slideDirection,
        TransitionProps,
        disablePast,
        disableFuture,
        minDate,
        maxDate,
        shouldDisableDate,
        dayOfWeekFormatter = defaultDayOfWeekFormatter,
        hasFocus,
        onFocusedViewChange,
        gridLabelId
      } = props;
      const isDateDisabled = useIsDayDisabled({
        shouldDisableDate,
        minDate,
        maxDate,
        disablePast,
        disableFuture
      });
      const [internalFocusedDay, setInternalFocusedDay] = React__namespace.useState(() => focusedDay || now);
      const changeHasFocus = React__namespace.useCallback(newHasFocus => {
        if (onFocusedViewChange) {
          onFocusedViewChange(newHasFocus);
        }
      }, [onFocusedViewChange]);
      const handleDaySelect = React__namespace.useCallback((day, isFinish = 'finish') => {
        if (readOnly) {
          return;
        }

        onSelectedDaysChange(day, isFinish);
      }, [onSelectedDaysChange, readOnly]);
      const focusDay = React__namespace.useCallback(day => {
        if (!isDateDisabled(day)) {
          onFocusedDayChange(day);
          setInternalFocusedDay(day);
          changeHasFocus(true);
        }
      }, [isDateDisabled, onFocusedDayChange, changeHasFocus]);
      const theme = useTheme();

      function handleKeyDown(event, day) {
        switch (event.key) {
          case 'ArrowUp':
            focusDay(utils.addDays(day, -7));
            event.preventDefault();
            break;

          case 'ArrowDown':
            focusDay(utils.addDays(day, 7));
            event.preventDefault();
            break;

          case 'ArrowLeft':
            {
              const newFocusedDayDefault = utils.addDays(day, theme.direction === 'ltr' ? -1 : 1);
              const nextAvailableMonth = theme.direction === 'ltr' ? utils.getPreviousMonth(day) : utils.getNextMonth(day);
              const closestDayToFocus = findClosestEnabledDate({
                utils,
                date: newFocusedDayDefault,
                minDate: theme.direction === 'ltr' ? utils.startOfMonth(nextAvailableMonth) : newFocusedDayDefault,
                maxDate: theme.direction === 'ltr' ? newFocusedDayDefault : utils.endOfMonth(nextAvailableMonth),
                isDateDisabled
              });
              focusDay(closestDayToFocus || newFocusedDayDefault);
              event.preventDefault();
              break;
            }

          case 'ArrowRight':
            {
              const newFocusedDayDefault = utils.addDays(day, theme.direction === 'ltr' ? 1 : -1);
              const nextAvailableMonth = theme.direction === 'ltr' ? utils.getNextMonth(day) : utils.getPreviousMonth(day);
              const closestDayToFocus = findClosestEnabledDate({
                utils,
                date: newFocusedDayDefault,
                minDate: theme.direction === 'ltr' ? newFocusedDayDefault : utils.startOfMonth(nextAvailableMonth),
                maxDate: theme.direction === 'ltr' ? utils.endOfMonth(nextAvailableMonth) : newFocusedDayDefault,
                isDateDisabled
              });
              focusDay(closestDayToFocus || newFocusedDayDefault);
              event.preventDefault();
              break;
            }

          case 'Home':
            focusDay(utils.startOfWeek(day));
            event.preventDefault();
            break;

          case 'End':
            focusDay(utils.endOfWeek(day));
            event.preventDefault();
            break;

          case 'PageUp':
            focusDay(utils.getNextMonth(day));
            event.preventDefault();
            break;

          case 'PageDown':
            focusDay(utils.getPreviousMonth(day));
            event.preventDefault();
            break;
        }
      }

      function handleFocus(event, day) {
        focusDay(day);
      }

      function handleBlur(event, day) {
        if (hasFocus && utils.isSameDay(internalFocusedDay, day)) {
          changeHasFocus(false);
        }
      }

      const currentMonthNumber = utils.getMonth(currentMonth);
      const validSelectedDays = selectedDays.filter(day => !!day).map(day => utils.startOfDay(day)); // need a new ref whenever the `key` of the transition changes: http://reactcommunity.org/react-transition-group/transition/#Transition-prop-nodeRef.

      const transitionKey = currentMonthNumber; // eslint-disable-next-line react-hooks/exhaustive-deps

      const slideNodeRef = React__namespace.useMemo(() => /*#__PURE__*/React__namespace.createRef(), [transitionKey]);
      const startOfCurrentWeek = utils.startOfWeek(now);
      const focusableDay = React__namespace.useMemo(() => {
        const startOfMonth = utils.startOfMonth(currentMonth);
        const endOfMonth = utils.endOfMonth(currentMonth);

        if (isDateDisabled(internalFocusedDay) || utils.isAfterDay(internalFocusedDay, endOfMonth) || utils.isBeforeDay(internalFocusedDay, startOfMonth)) {
          return findClosestEnabledDate({
            utils,
            date: internalFocusedDay,
            minDate: startOfMonth,
            maxDate: endOfMonth,
            disablePast,
            disableFuture,
            isDateDisabled
          });
        }

        return internalFocusedDay;
      }, [currentMonth, disableFuture, disablePast, internalFocusedDay, isDateDisabled, utils]);
      return /*#__PURE__*/jsxRuntime.exports.jsxs("div", {
        role: "grid",
        "aria-labelledby": gridLabelId,
        children: [/*#__PURE__*/jsxRuntime.exports.jsx(PickersCalendarDayHeader, {
          role: "row",
          className: classes.header,
          children: utils.getWeekdays().map((day, i) => {
            var _dayOfWeekFormatter;

            return /*#__PURE__*/jsxRuntime.exports.jsx(PickersCalendarWeekDayLabel, {
              variant: "caption",
              role: "columnheader",
              "aria-label": utils.format(utils.addDays(startOfCurrentWeek, i), 'weekday'),
              className: classes.weekDayLabel,
              children: (_dayOfWeekFormatter = dayOfWeekFormatter == null ? void 0 : dayOfWeekFormatter(day)) != null ? _dayOfWeekFormatter : day
            }, day + i.toString());
          })
        }), loading ? /*#__PURE__*/jsxRuntime.exports.jsx(PickersCalendarLoadingContainer, {
          className: classes.loadingContainer,
          children: renderLoading()
        }) : /*#__PURE__*/jsxRuntime.exports.jsx(PickersCalendarSlideTransition, _extends({
          transKey: transitionKey,
          onExited: onMonthSwitchingAnimationEnd,
          reduceAnimations: reduceAnimations,
          slideDirection: slideDirection,
          className: clsx(className, classes.slideTransition)
        }, TransitionProps, {
          nodeRef: slideNodeRef,
          children: /*#__PURE__*/jsxRuntime.exports.jsx(PickersCalendarWeekContainer, {
            ref: slideNodeRef,
            role: "rowgroup",
            className: classes.monthContainer,
            children: utils.getWeekArray(currentMonth).map(week => /*#__PURE__*/jsxRuntime.exports.jsx(PickersCalendarWeek, {
              role: "row",
              className: classes.weekContainer,
              children: week.map(day => {
                const isFocusableDay = focusableDay !== null && utils.isSameDay(day, focusableDay);
                const isSelected = validSelectedDays.some(selectedDay => utils.isSameDay(selectedDay, day));
                const isToday = utils.isSameDay(day, now);
                const pickersDayProps = {
                  key: day == null ? void 0 : day.toString(),
                  day,
                  isAnimating: isMonthSwitchingAnimating,
                  disabled: disabled || isDateDisabled(day),
                  autoFocus: hasFocus && isFocusableDay,
                  today: isToday,
                  outsideCurrentMonth: utils.getMonth(day) !== currentMonthNumber,
                  selected: isSelected,
                  disableHighlightToday,
                  showDaysOutsideCurrentMonth,
                  onKeyDown: handleKeyDown,
                  onFocus: handleFocus,
                  onBlur: handleBlur,
                  onDaySelect: handleDaySelect,
                  tabIndex: isFocusableDay ? 0 : -1,
                  role: 'gridcell',
                  'aria-selected': isSelected
                };

                if (isToday) {
                  pickersDayProps['aria-current'] = 'date';
                }

                return renderDay ? renderDay(day, validSelectedDays, pickersDayProps) : /*#__PURE__*/jsxRuntime.exports.jsx(PickersDay, _extends({}, pickersDayProps), pickersDayProps.key);
              })
            }, `week-${week[0]}`))
          })
        }))]
      });
    }

    function useViews({
      onChange,
      onViewChange,
      openTo,
      view,
      views
    }) {
      var _views, _views2;

      const [openView, setOpenView] = useControlled({
        name: 'Picker',
        state: 'view',
        controlled: view,
        default: openTo && arrayIncludes(views, openTo) ? openTo : views[0]
      });
      const previousView = (_views = views[views.indexOf(openView) - 1]) != null ? _views : null;
      const nextView = (_views2 = views[views.indexOf(openView) + 1]) != null ? _views2 : null;
      const changeView = React__namespace.useCallback(newView => {
        setOpenView(newView);

        if (onViewChange) {
          onViewChange(newView);
        }
      }, [setOpenView, onViewChange]);
      const openNext = React__namespace.useCallback(() => {
        if (nextView) {
          changeView(nextView);
        }
      }, [nextView, changeView]);
      const handleChangeAndOpenNext = React__namespace.useCallback((date, currentViewSelectionState) => {
        const isSelectionFinishedOnCurrentView = currentViewSelectionState === 'finish';
        const globalSelectionState = isSelectionFinishedOnCurrentView && Boolean(nextView) ? 'partial' : currentViewSelectionState;
        onChange(date, globalSelectionState);

        if (isSelectionFinishedOnCurrentView) {
          openNext();
        }
      }, [nextView, onChange, openNext]);
      return {
        handleChangeAndOpenNext,
        nextView,
        previousView,
        openNext,
        openView,
        setOpenView: changeView
      };
    }

    const ArrowDropDown = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
      d: "M7 10l5 5 5-5z"
    }), 'ArrowDropDown');
    /**
     * @ignore - internal component.
     */

    const ArrowLeft = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
      d: "M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"
    }), 'ArrowLeft');
    /**
     * @ignore - internal component.
     */

    const ArrowRight = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
      d: "M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
    }), 'ArrowRight');
    /**
     * @ignore - internal component.
     */

    const Calendar = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
      d: "M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
    }), 'Calendar');
    /**
     * @ignore - internal component.
     */

    const Clock$1 = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
      children: [/*#__PURE__*/jsxRuntime.exports.jsx("path", {
        d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
      }), /*#__PURE__*/jsxRuntime.exports.jsx("path", {
        d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
      })]
    }), 'Clock');
    /**
     * @ignore - internal component.
     */

    const DateRange = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
      d: "M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z"
    }), 'DateRange');
    /**
     * @ignore - internal component.
     */

    const Pen = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
      d: "M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"
    }), 'Pen');
    /**
     * @ignore - internal component.
     */

    const Time = createSvgIcon$1( /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
      children: [/*#__PURE__*/jsxRuntime.exports.jsx("path", {
        d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
      }), /*#__PURE__*/jsxRuntime.exports.jsx("path", {
        d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
      })]
    }), 'Time');

    function getPickersArrowSwitcherUtilityClass(slot) {
      return generateUtilityClass('MuiPickersArrowSwitcher', slot);
    }
    generateUtilityClasses('MuiPickersArrowSwitcher', ['root', 'spacer', 'button']);

    const _excluded$o = ["children", "className", "components", "componentsProps", "isLeftDisabled", "isLeftHidden", "isRightDisabled", "isRightHidden", "leftArrowButtonText", "onLeftClick", "onRightClick", "rightArrowButtonText"];

    const useUtilityClasses$h = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        spacer: ['spacer'],
        button: ['button']
      };
      return composeClasses(slots, getPickersArrowSwitcherUtilityClass, classes);
    };

    const PickersArrowSwitcherRoot = styled$1('div', {
      name: 'MuiPickersArrowSwitcher',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({
      display: 'flex'
    });
    const PickersArrowSwitcherSpacer = styled$1('div', {
      name: 'MuiPickersArrowSwitcher',
      slot: 'Spacer',
      overridesResolver: (props, styles) => styles.spacer
    })(({
      theme
    }) => ({
      width: theme.spacing(3)
    }));
    const PickersArrowSwitcherButton = styled$1(IconButton$1, {
      name: 'MuiPickersArrowSwitcher',
      slot: 'Button',
      overridesResolver: (props, styles) => styles.button
    })(({
      ownerState
    }) => _extends({}, ownerState.hidden && {
      visibility: 'hidden'
    }));
    const PickersArrowSwitcher = /*#__PURE__*/React__namespace.forwardRef(function PickersArrowSwitcher(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiPickersArrowSwitcher'
      });

      const {
        children,
        className,
        components,
        componentsProps,
        isLeftDisabled,
        isLeftHidden,
        isRightDisabled,
        isRightHidden,
        leftArrowButtonText,
        onLeftClick,
        onRightClick,
        rightArrowButtonText
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$o);

      const theme = useTheme();
      const isRtl = theme.direction === 'rtl';
      const leftArrowButtonProps = (componentsProps == null ? void 0 : componentsProps.leftArrowButton) || {};
      const LeftArrowIcon = (components == null ? void 0 : components.LeftArrowIcon) || ArrowLeft;
      const rightArrowButtonProps = (componentsProps == null ? void 0 : componentsProps.rightArrowButton) || {};
      const RightArrowIcon = (components == null ? void 0 : components.RightArrowIcon) || ArrowRight;
      const ownerState = props;
      const classes = useUtilityClasses$h(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsxs(PickersArrowSwitcherRoot, _extends({
        ref: ref,
        className: clsx(classes.root, className),
        ownerState: ownerState
      }, other, {
        children: [/*#__PURE__*/jsxRuntime.exports.jsx(PickersArrowSwitcherButton, _extends({
          as: components == null ? void 0 : components.LeftArrowButton,
          size: "small",
          "aria-label": leftArrowButtonText,
          title: leftArrowButtonText,
          disabled: isLeftDisabled,
          edge: "end",
          onClick: onLeftClick
        }, leftArrowButtonProps, {
          className: clsx(classes.button, leftArrowButtonProps.className),
          ownerState: _extends({}, ownerState, leftArrowButtonProps, {
            hidden: isLeftHidden
          }),
          children: isRtl ? /*#__PURE__*/jsxRuntime.exports.jsx(RightArrowIcon, {}) : /*#__PURE__*/jsxRuntime.exports.jsx(LeftArrowIcon, {})
        })), children ? /*#__PURE__*/jsxRuntime.exports.jsx(Typography$1, {
          variant: "subtitle1",
          component: "span",
          children: children
        }) : /*#__PURE__*/jsxRuntime.exports.jsx(PickersArrowSwitcherSpacer, {
          className: classes.spacer,
          ownerState: ownerState
        }), /*#__PURE__*/jsxRuntime.exports.jsx(PickersArrowSwitcherButton, _extends({
          as: components == null ? void 0 : components.RightArrowButton,
          size: "small",
          "aria-label": rightArrowButtonText,
          title: rightArrowButtonText,
          edge: "start",
          disabled: isRightDisabled,
          onClick: onRightClick
        }, rightArrowButtonProps, {
          className: clsx(classes.button, rightArrowButtonProps.className),
          ownerState: _extends({}, ownerState, rightArrowButtonProps, {
            hidden: isRightHidden
          }),
          children: isRtl ? /*#__PURE__*/jsxRuntime.exports.jsx(LeftArrowIcon, {}) : /*#__PURE__*/jsxRuntime.exports.jsx(RightArrowIcon, {})
        }))]
      }));
    });

    const getMeridiem = (date, utils) => {
      if (!date) {
        return null;
      }

      return utils.getHours(date) >= 12 ? 'pm' : 'am';
    };
    const convertValueToMeridiem = (value, meridiem, ampm) => {
      if (ampm) {
        const currentMeridiem = value >= 12 ? 'pm' : 'am';

        if (currentMeridiem !== meridiem) {
          return meridiem === 'am' ? value - 12 : value + 12;
        }
      }

      return value;
    };
    const convertToMeridiem = (time, meridiem, ampm, utils) => {
      const newHoursAmount = convertValueToMeridiem(utils.getHours(time), meridiem, ampm);
      return utils.setHours(time, newHoursAmount);
    };
    const getSecondsInDay = (date, utils) => {
      return utils.getHours(date) * 3600 + utils.getMinutes(date) * 60 + utils.getSeconds(date);
    };
    const createIsAfterIgnoreDatePart = (disableIgnoringDatePartForTimeValidation = false, utils) => (dateLeft, dateRight) => {
      if (disableIgnoringDatePartForTimeValidation) {
        return utils.isAfter(dateLeft, dateRight);
      }

      return getSecondsInDay(dateLeft, utils) > getSecondsInDay(dateRight, utils);
    };

    function useNextMonthDisabled(month, {
      disableFuture,
      maxDate
    }) {
      const utils = useUtils();
      return React__namespace.useMemo(() => {
        const now = utils.date();
        const lastEnabledMonth = utils.startOfMonth(disableFuture && utils.isBefore(now, maxDate) ? now : maxDate);
        return !utils.isAfter(lastEnabledMonth, month);
      }, [disableFuture, maxDate, month, utils]);
    }
    function usePreviousMonthDisabled(month, {
      disablePast,
      minDate
    }) {
      const utils = useUtils();
      return React__namespace.useMemo(() => {
        const now = utils.date();
        const firstEnabledMonth = utils.startOfMonth(disablePast && utils.isAfter(now, minDate) ? now : minDate);
        return !utils.isBefore(firstEnabledMonth, month);
      }, [disablePast, minDate, month, utils]);
    }
    function useMeridiemMode(date, ampm, onChange) {
      const utils = useUtils();
      const meridiemMode = getMeridiem(date, utils);
      const handleMeridiemChange = React__namespace.useCallback(mode => {
        const timeWithMeridiem = date == null ? null : convertToMeridiem(date, mode, Boolean(ampm), utils);
        onChange(timeWithMeridiem, 'partial');
      }, [ampm, date, onChange, utils]);
      return {
        meridiemMode,
        handleMeridiemChange
      };
    }

    const buildDeprecatedPropsWarning = message => {
      let alreadyWarned = false;

      const cleanMessage = Array.isArray(message) ? message.join('\n') : message;
      return deprecatedProps => {
        const deprecatedKeys = Object.entries(deprecatedProps).filter(([, value]) => value !== undefined).map(([key]) => `- ${key}`);

        if (!alreadyWarned && deprecatedKeys.length > 0) {
          alreadyWarned = true;
          console.warn([cleanMessage, 'deprecated props observed:', ...deprecatedKeys].join('\n'));
        }
      };
    };

    const getPickersCalendarHeaderUtilityClass = slot => generateUtilityClass('MuiPickersCalendarHeader', slot);
    generateUtilityClasses('MuiPickersCalendarHeader', ['root', 'labelContainer', 'label', 'switchViewButton', 'switchViewIcon']);

    const useUtilityClasses$g = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        labelContainer: ['labelContainer'],
        label: ['label'],
        switchViewButton: ['switchViewButton'],
        switchViewIcon: ['switchViewIcon']
      };
      return composeClasses(slots, getPickersCalendarHeaderUtilityClass, classes);
    };

    const PickersCalendarHeaderRoot = styled$1('div', {
      name: 'MuiPickersCalendarHeader',
      slot: 'Root',
      overridesResolver: (_, styles) => styles.root
    })({
      display: 'flex',
      alignItems: 'center',
      marginTop: 16,
      marginBottom: 8,
      paddingLeft: 24,
      paddingRight: 12,
      // prevent jumping in safari
      maxHeight: 30,
      minHeight: 30
    });
    const PickersCalendarHeaderLabelContainer = styled$1('div', {
      name: 'MuiPickersCalendarHeader',
      slot: 'LabelContainer',
      overridesResolver: (_, styles) => styles.labelContainer
    })(({
      theme
    }) => _extends({
      display: 'flex',
      maxHeight: 30,
      overflow: 'hidden',
      alignItems: 'center',
      cursor: 'pointer',
      marginRight: 'auto'
    }, theme.typography.body1, {
      fontWeight: theme.typography.fontWeightMedium
    }));
    const PickersCalendarHeaderLabel = styled$1('div', {
      name: 'MuiPickersCalendarHeader',
      slot: 'Label',
      overridesResolver: (_, styles) => styles.label
    })({
      marginRight: 6
    });
    const PickersCalendarHeaderSwitchViewButton = styled$1(IconButton$1, {
      name: 'MuiPickersCalendarHeader',
      slot: 'SwitchViewButton',
      overridesResolver: (_, styles) => styles.switchViewButton
    })({
      marginRight: 'auto'
    });
    const PickersCalendarHeaderSwitchViewIcon = styled$1(ArrowDropDown, {
      name: 'MuiPickersCalendarHeader',
      slot: 'SwitchViewIcon',
      overridesResolver: (_, styles) => styles.switchViewIcon
    })(({
      theme,
      ownerState
    }) => _extends({
      willChange: 'transform',
      transition: theme.transitions.create('transform'),
      transform: 'rotate(0deg)'
    }, ownerState.openView === 'year' && {
      transform: 'rotate(180deg)'
    }));
    const deprecatedPropsWarning$1 = buildDeprecatedPropsWarning('Props for translation are deprecated. See https://mui.com/x/react-date-pickers/localization for more information.');
    /**
     * @ignore - do not document.
     */

    function PickersCalendarHeader(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiPickersCalendarHeader'
      });
      const {
        components = {},
        componentsProps = {},
        currentMonth: month,
        disabled,
        disableFuture,
        disablePast,
        getViewSwitchingButtonText: getViewSwitchingButtonTextProp,
        leftArrowButtonText: leftArrowButtonTextProp,
        maxDate,
        minDate,
        onMonthChange,
        onViewChange,
        openView: currentView,
        reduceAnimations,
        rightArrowButtonText: rightArrowButtonTextProp,
        views,
        labelId
      } = props;
      deprecatedPropsWarning$1({
        leftArrowButtonText: leftArrowButtonTextProp,
        rightArrowButtonText: rightArrowButtonTextProp,
        getViewSwitchingButtonText: getViewSwitchingButtonTextProp
      });
      const localeText = useLocaleText();
      const leftArrowButtonText = leftArrowButtonTextProp != null ? leftArrowButtonTextProp : localeText.previousMonth;
      const rightArrowButtonText = rightArrowButtonTextProp != null ? rightArrowButtonTextProp : localeText.nextMonth;
      const getViewSwitchingButtonText = getViewSwitchingButtonTextProp != null ? getViewSwitchingButtonTextProp : localeText.calendarViewSwitchingButtonAriaLabel;
      const utils = useUtils();
      const classes = useUtilityClasses$g(props);
      const switchViewButtonProps = componentsProps.switchViewButton || {};

      const selectNextMonth = () => onMonthChange(utils.getNextMonth(month), 'left');

      const selectPreviousMonth = () => onMonthChange(utils.getPreviousMonth(month), 'right');

      const isNextMonthDisabled = useNextMonthDisabled(month, {
        disableFuture,
        maxDate
      });
      const isPreviousMonthDisabled = usePreviousMonthDisabled(month, {
        disablePast,
        minDate
      });

      const handleToggleView = () => {
        if (views.length === 1 || !onViewChange || disabled) {
          return;
        }

        if (views.length === 2) {
          onViewChange(views.find(view => view !== currentView) || views[0]);
        } else {
          // switching only between first 2
          const nextIndexToOpen = views.indexOf(currentView) !== 0 ? 0 : 1;
          onViewChange(views[nextIndexToOpen]);
        }
      }; // No need to display more information


      if (views.length === 1 && views[0] === 'year') {
        return null;
      }

      const ownerState = props;
      return /*#__PURE__*/jsxRuntime.exports.jsxs(PickersCalendarHeaderRoot, {
        ownerState: ownerState,
        className: classes.root,
        children: [/*#__PURE__*/jsxRuntime.exports.jsxs(PickersCalendarHeaderLabelContainer, {
          role: "presentation",
          onClick: handleToggleView,
          ownerState: ownerState // putting this on the label item element below breaks when using transition
          ,
          "aria-live": "polite",
          className: classes.labelContainer,
          children: [/*#__PURE__*/jsxRuntime.exports.jsx(PickersFadeTransitionGroup, {
            reduceAnimations: reduceAnimations,
            transKey: utils.format(month, 'monthAndYear'),
            children: /*#__PURE__*/jsxRuntime.exports.jsx(PickersCalendarHeaderLabel, {
              id: labelId,
              ownerState: ownerState,
              className: classes.label,
              children: utils.format(month, 'monthAndYear')
            })
          }), views.length > 1 && !disabled && /*#__PURE__*/jsxRuntime.exports.jsx(PickersCalendarHeaderSwitchViewButton, _extends({
            size: "small",
            as: components.SwitchViewButton,
            "aria-label": getViewSwitchingButtonText(currentView),
            className: classes.switchViewButton
          }, switchViewButtonProps, {
            children: /*#__PURE__*/jsxRuntime.exports.jsx(PickersCalendarHeaderSwitchViewIcon, {
              as: components.SwitchViewIcon,
              ownerState: ownerState,
              className: classes.switchViewIcon
            })
          }))]
        }), /*#__PURE__*/jsxRuntime.exports.jsx(Fade$1, {
          in: currentView === 'day',
          children: /*#__PURE__*/jsxRuntime.exports.jsx(PickersArrowSwitcher, {
            leftArrowButtonText: leftArrowButtonText,
            rightArrowButtonText: rightArrowButtonText,
            components: components,
            componentsProps: componentsProps,
            onLeftClick: selectPreviousMonth,
            onRightClick: selectNextMonth,
            isLeftDisabled: isPreviousMonthDisabled,
            isRightDisabled: isNextMonthDisabled
          })
        })]
      });
    }

    /**
     * TODO consider getting rid from wrapper variant
     * @ignore - internal component.
     */
    const WrapperVariantContext = /*#__PURE__*/React__namespace.createContext(null);

    function getPickersYearUtilityClass(slot) {
      // TODO v6: Rename 'PrivatePickersYear' to 'MuiPickersYear' to follow convention
      return generateUtilityClass('PrivatePickersYear', slot);
    } // TODO v6: Rename 'PrivatePickersYear' to 'MuiPickersYear' to follow convention

    const pickersYearClasses = generateUtilityClasses('PrivatePickersYear', ['root', 'modeDesktop', 'modeMobile', 'yearButton', 'selected', 'disabled']);

    const _excluded$n = ["autoFocus", "className", "children", "disabled", "onClick", "onKeyDown", "value", "tabIndex", "onFocus", "onBlur"];

    const useUtilityClasses$f = ownerState => {
      const {
        wrapperVariant,
        disabled,
        selected,
        classes
      } = ownerState;
      const slots = {
        root: ['root', wrapperVariant && `mode${capitalize(wrapperVariant)}`],
        yearButton: ['yearButton', disabled && 'disabled', selected && 'selected']
      };
      return composeClasses(slots, getPickersYearUtilityClass, classes);
    };

    const PickersYearRoot = styled$1('div', {
      name: 'PrivatePickersYear',
      slot: 'Root',
      overridesResolver: (_, styles) => [styles.root, {
        [`&.${pickersYearClasses.modeDesktop}`]: styles.modeDesktop
      }, {
        [`&.${pickersYearClasses.modeMobile}`]: styles.modeMobile
      }]
    })(({
      ownerState
    }) => _extends({
      flexBasis: '33.3%',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center'
    }, (ownerState == null ? void 0 : ownerState.wrapperVariant) === 'desktop' && {
      flexBasis: '25%'
    }));
    const PickersYearButton = styled$1('button', {
      name: 'PrivatePickersYear',
      slot: 'Button',
      overridesResolver: (_, styles) => [styles.button, {
        [`&.${pickersYearClasses.disabled}`]: styles.disabled
      }, {
        [`&.${pickersYearClasses.selected}`]: styles.selected
      }]
    })(({
      theme
    }) => _extends({
      color: 'unset',
      backgroundColor: 'transparent',
      border: 0,
      outline: 0
    }, theme.typography.subtitle1, {
      margin: '8px 0',
      height: 36,
      width: 72,
      borderRadius: 18,
      cursor: 'pointer',
      '&:focus, &:hover': {
        backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
      },
      [`&.${pickersYearClasses.disabled}`]: {
        color: theme.palette.text.secondary
      },
      [`&.${pickersYearClasses.selected}`]: {
        color: theme.palette.primary.contrastText,
        backgroundColor: theme.palette.primary.main,
        '&:focus, &:hover': {
          backgroundColor: theme.palette.primary.dark
        }
      }
    }));

    const noop = () => {};
    /**
     * @ignore - internal component.
     */


    const PickersYear = /*#__PURE__*/React__namespace.forwardRef(function PickersYear(props, forwardedRef) {
      // TODO v6: add 'useThemeProps' once the component class names are aligned
      const {
        autoFocus,
        className,
        children,
        disabled,
        onClick,
        onKeyDown,
        value,
        tabIndex,
        onFocus = noop,
        onBlur = noop
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$n);

      const ref = React__namespace.useRef(null);
      const refHandle = useForkRef(ref, forwardedRef);
      const wrapperVariant = React__namespace.useContext(WrapperVariantContext);

      const ownerState = _extends({}, props, {
        wrapperVariant
      });

      const classes = useUtilityClasses$f(ownerState); // We can't forward the `autoFocus` to the button because it is a native button, not a MUI Button

      React__namespace.useEffect(() => {
        if (autoFocus) {
          // `ref.current` being `null` would be a bug in MUI.
          ref.current.focus();
        }
      }, [autoFocus]);
      return /*#__PURE__*/jsxRuntime.exports.jsx(PickersYearRoot, {
        className: clsx(classes.root, className),
        ownerState: ownerState,
        children: /*#__PURE__*/jsxRuntime.exports.jsx(PickersYearButton, _extends({
          ref: refHandle,
          disabled: disabled,
          type: "button",
          tabIndex: disabled ? -1 : tabIndex,
          onClick: event => onClick(event, value),
          onKeyDown: event => onKeyDown(event, value),
          onFocus: event => onFocus(event, value),
          onBlur: event => onBlur(event, value),
          className: classes.yearButton,
          ownerState: ownerState
        }, other, {
          children: children
        }))
      });
    });

    function getYearPickerUtilityClass(slot) {
      return generateUtilityClass('MuiYearPicker', slot);
    }
    generateUtilityClasses('MuiYearPicker', ['root']);

    const useUtilityClasses$e = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root']
      };
      return composeClasses(slots, getYearPickerUtilityClass, classes);
    };

    function useYearPickerDefaultizedProps(props, name) {
      const utils = useUtils();
      const defaultDates = useDefaultDates();
      const themeProps = useThemeProps({
        props,
        name
      });
      return _extends({
        disablePast: false,
        disableFuture: false
      }, themeProps, {
        minDate: parseNonNullablePickerDate(utils, themeProps.minDate, defaultDates.minDate),
        maxDate: parseNonNullablePickerDate(utils, themeProps.maxDate, defaultDates.maxDate)
      });
    }

    const YearPickerRoot = styled$1('div', {
      name: 'MuiYearPicker',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({
      display: 'flex',
      flexDirection: 'row',
      flexWrap: 'wrap',
      overflowY: 'auto',
      height: '100%',
      padding: '0 4px',
      maxHeight: '304px'
    });
    const YearPicker = /*#__PURE__*/React__namespace.forwardRef(function YearPicker(inProps, ref) {
      const now = useNow();
      const theme = useTheme();
      const utils = useUtils();
      const props = useYearPickerDefaultizedProps(inProps, 'MuiYearPicker');
      const {
        autoFocus,
        className,
        date,
        disabled,
        disableFuture,
        disablePast,
        maxDate,
        minDate,
        onChange,
        readOnly,
        shouldDisableYear,
        disableHighlightToday,
        onYearFocus,
        hasFocus,
        onFocusedViewChange
      } = props;
      const ownerState = props;
      const classes = useUtilityClasses$e(ownerState);
      const selectedDateOrToday = date != null ? date : now;
      const currentYear = React__namespace.useMemo(() => {
        if (date != null) {
          return utils.getYear(date);
        }

        if (disableHighlightToday) {
          return null;
        }

        return utils.getYear(now);
      }, [now, date, utils, disableHighlightToday]);
      const wrapperVariant = React__namespace.useContext(WrapperVariantContext);
      const selectedYearRef = React__namespace.useRef(null);
      const [focusedYear, setFocusedYear] = React__namespace.useState(() => currentYear || utils.getYear(now));
      const [internalHasFocus, setInternalHasFocus] = useControlled({
        name: 'YearPicker',
        state: 'hasFocus',
        controlled: hasFocus,
        default: autoFocus
      });
      const changeHasFocus = React__namespace.useCallback(newHasFocus => {
        setInternalHasFocus(newHasFocus);

        if (onFocusedViewChange) {
          onFocusedViewChange(newHasFocus);
        }
      }, [setInternalHasFocus, onFocusedViewChange]);
      const isYearDisabled = React__namespace.useCallback(dateToValidate => {
        if (disablePast && utils.isBeforeYear(dateToValidate, now)) {
          return true;
        }

        if (disableFuture && utils.isAfterYear(dateToValidate, now)) {
          return true;
        }

        if (minDate && utils.isBeforeYear(dateToValidate, minDate)) {
          return true;
        }

        if (maxDate && utils.isAfterYear(dateToValidate, maxDate)) {
          return true;
        }

        if (shouldDisableYear && shouldDisableYear(dateToValidate)) {
          return true;
        }

        return false;
      }, [disableFuture, disablePast, maxDate, minDate, now, shouldDisableYear, utils]);

      const handleYearSelection = (event, year, isFinish = 'finish') => {
        if (readOnly) {
          return;
        }

        const newDate = utils.setYear(selectedDateOrToday, year);
        onChange(newDate, isFinish);
      };

      const focusYear = React__namespace.useCallback(year => {
        if (!isYearDisabled(utils.setYear(selectedDateOrToday, year))) {
          setFocusedYear(year);
          changeHasFocus(true);
          onYearFocus == null ? void 0 : onYearFocus(year);
        }
      }, [isYearDisabled, utils, selectedDateOrToday, changeHasFocus, onYearFocus]);
      React__namespace.useEffect(() => {
        setFocusedYear(prevFocusedYear => currentYear !== null && prevFocusedYear !== currentYear ? currentYear : prevFocusedYear);
      }, [currentYear]);
      const yearsInRow = wrapperVariant === 'desktop' ? 4 : 3;
      const handleKeyDown = React__namespace.useCallback((event, year) => {
        switch (event.key) {
          case 'ArrowUp':
            focusYear(year - yearsInRow);
            event.preventDefault();
            break;

          case 'ArrowDown':
            focusYear(year + yearsInRow);
            event.preventDefault();
            break;

          case 'ArrowLeft':
            focusYear(year + (theme.direction === 'ltr' ? -1 : 1));
            event.preventDefault();
            break;

          case 'ArrowRight':
            focusYear(year + (theme.direction === 'ltr' ? 1 : -1));
            event.preventDefault();
            break;
        }
      }, [focusYear, theme.direction, yearsInRow]);
      const handleFocus = React__namespace.useCallback((event, year) => {
        focusYear(year);
      }, [focusYear]);
      const handleBlur = React__namespace.useCallback((event, year) => {
        if (focusedYear === year) {
          changeHasFocus(false);
        }
      }, [focusedYear, changeHasFocus]);
      const nowYear = utils.getYear(now);
      const scrollerRef = React__namespace.useRef(null);
      const handleRef = useForkRef(ref, scrollerRef);
      React__namespace.useEffect(() => {
        if (autoFocus || scrollerRef.current === null) {
          return;
        }

        const tabbableButton = scrollerRef.current.querySelector('[tabindex="0"]');

        if (!tabbableButton) {
          return;
        } // Taken from useScroll in x-data-grid, but vertically centered


        const offsetHeight = tabbableButton.offsetHeight;
        const offsetTop = tabbableButton.offsetTop;
        const clientHeight = scrollerRef.current.clientHeight;
        const scrollTop = scrollerRef.current.scrollTop;
        const elementBottom = offsetTop + offsetHeight;

        if (offsetHeight > clientHeight || offsetTop < scrollTop) {
          // Button already visible
          return;
        }

        scrollerRef.current.scrollTop = elementBottom - clientHeight / 2 - offsetHeight / 2;
      }, [autoFocus]);
      return /*#__PURE__*/jsxRuntime.exports.jsx(YearPickerRoot, {
        ref: handleRef,
        className: clsx(classes.root, className),
        ownerState: ownerState,
        children: utils.getYearRange(minDate, maxDate).map(year => {
          const yearNumber = utils.getYear(year);
          const selected = yearNumber === currentYear;
          return /*#__PURE__*/jsxRuntime.exports.jsx(PickersYear, {
            selected: selected,
            value: yearNumber,
            onClick: handleYearSelection,
            onKeyDown: handleKeyDown,
            autoFocus: internalHasFocus && yearNumber === focusedYear,
            ref: selected ? selectedYearRef : undefined,
            disabled: disabled || isYearDisabled(year),
            tabIndex: yearNumber === focusedYear ? 0 : -1,
            onFocus: handleFocus,
            onBlur: handleBlur,
            "aria-current": nowYear === yearNumber ? 'date' : undefined,
            children: utils.format(year, 'year')
          }, utils.format(year, 'year'));
        })
      });
    });
    YearPicker.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------
      autoFocus: PropTypes.bool,
      classes: PropTypes.object,
      className: PropTypes.string,
      date: PropTypes.any,
      disabled: PropTypes.bool,

      /**
       * If `true` future days are disabled.
       * @default false
       */
      disableFuture: PropTypes.bool,

      /**
       * If `true`, today's date is rendering without highlighting with circle.
       * @default false
       */
      disableHighlightToday: PropTypes.bool,

      /**
       * If `true` past days are disabled.
       * @default false
       */
      disablePast: PropTypes.bool,
      hasFocus: PropTypes.bool,

      /**
       * Maximal selectable date. @DateIOType
       */
      maxDate: PropTypes.any,

      /**
       * Minimal selectable date. @DateIOType
       */
      minDate: PropTypes.any,
      onChange: PropTypes.func.isRequired,
      onFocusedDayChange: PropTypes.func,
      onFocusedViewChange: PropTypes.func,
      onYearFocus: PropTypes.func,
      readOnly: PropTypes.bool,

      /**
       * Disable specific years dynamically.
       * Works like `shouldDisableDate` but for year selection view @DateIOType.
       * @template TDate
       * @param {TDate} year The year to test.
       * @returns {boolean} Returns `true` if the year should be disabled.
       */
      shouldDisableYear: PropTypes.func
    } ;

    const PickerViewRoot = styled$1('div')({
      overflowX: 'hidden',
      width: DIALOG_WIDTH,
      maxHeight: VIEW_HEIGHT,
      display: 'flex',
      flexDirection: 'column',
      margin: '0 auto'
    });

    const defaultReduceAnimations = typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent);

    const getCalendarPickerUtilityClass = slot => generateUtilityClass('MuiCalendarPicker', slot);
    generateUtilityClasses('MuiCalendarPicker', ['root', 'viewTransitionContainer']);

    const _excluded$m = ["autoFocus", "onViewChange", "date", "disableFuture", "disablePast", "defaultCalendarMonth", "onChange", "onYearChange", "onMonthChange", "reduceAnimations", "shouldDisableDate", "shouldDisableMonth", "shouldDisableYear", "view", "views", "openTo", "className", "disabled", "readOnly", "minDate", "maxDate", "disableHighlightToday", "focusedView", "onFocusedViewChange", "classes"];

    const useUtilityClasses$d = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        viewTransitionContainer: ['viewTransitionContainer']
      };
      return composeClasses(slots, getCalendarPickerUtilityClass, classes);
    };

    function useCalendarPickerDefaultizedProps(props, name) {
      const utils = useUtils();
      const defaultDates = useDefaultDates();
      const themeProps = useThemeProps({
        props,
        name
      });
      return _extends({
        loading: false,
        disablePast: false,
        disableFuture: false,
        openTo: 'day',
        views: ['year', 'day'],
        reduceAnimations: defaultReduceAnimations,
        renderLoading: () => /*#__PURE__*/jsxRuntime.exports.jsx("span", {
          children: "..."
        })
      }, themeProps, {
        minDate: parseNonNullablePickerDate(utils, themeProps.minDate, defaultDates.minDate),
        maxDate: parseNonNullablePickerDate(utils, themeProps.maxDate, defaultDates.maxDate)
      });
    }

    const CalendarPickerRoot = styled$1(PickerViewRoot, {
      name: 'MuiCalendarPicker',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({
      display: 'flex',
      flexDirection: 'column'
    });
    const CalendarPickerViewTransitionContainer = styled$1(PickersFadeTransitionGroup, {
      name: 'MuiCalendarPicker',
      slot: 'ViewTransitionContainer',
      overridesResolver: (props, styles) => styles.viewTransitionContainer
    })({});

    /**
     *
     * Demos:
     *
     * - [Date Picker](https://mui.com/x/react-date-pickers/date-picker/)
     *
     * API:
     *
     * - [CalendarPicker API](https://mui.com/x/api/date-pickers/calendar-picker/)
     */
    const CalendarPicker = /*#__PURE__*/React__namespace.forwardRef(function CalendarPicker(inProps, ref) {
      const utils = useUtils();
      const id = useId();
      const props = useCalendarPickerDefaultizedProps(inProps, 'MuiCalendarPicker');

      const {
        autoFocus,
        onViewChange,
        date,
        disableFuture,
        disablePast,
        defaultCalendarMonth,
        onChange,
        onYearChange,
        onMonthChange,
        reduceAnimations,
        shouldDisableDate,
        shouldDisableMonth,
        shouldDisableYear,
        view,
        views,
        openTo,
        className,
        disabled,
        readOnly,
        minDate,
        maxDate,
        disableHighlightToday,
        focusedView,
        onFocusedViewChange
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$m);

      const {
        openView,
        setOpenView,
        openNext
      } = useViews({
        view,
        views,
        openTo,
        onChange,
        onViewChange
      });
      const {
        calendarState,
        changeFocusedDay,
        changeMonth,
        handleChangeMonth,
        isDateDisabled,
        onMonthSwitchingAnimationEnd
      } = useCalendarState({
        date,
        defaultCalendarMonth,
        reduceAnimations,
        onMonthChange,
        minDate,
        maxDate,
        shouldDisableDate,
        disablePast,
        disableFuture
      });
      const handleDateMonthChange = React__namespace.useCallback((newDate, selectionState) => {
        const startOfMonth = utils.startOfMonth(newDate);
        const endOfMonth = utils.endOfMonth(newDate);
        const closestEnabledDate = isDateDisabled(newDate) ? findClosestEnabledDate({
          utils,
          date: newDate,
          minDate: utils.isBefore(minDate, startOfMonth) ? startOfMonth : minDate,
          maxDate: utils.isAfter(maxDate, endOfMonth) ? endOfMonth : maxDate,
          disablePast,
          disableFuture,
          isDateDisabled
        }) : newDate;

        if (closestEnabledDate) {
          onChange(closestEnabledDate, selectionState);
          onMonthChange == null ? void 0 : onMonthChange(startOfMonth);
        } else {
          openNext();
          changeMonth(startOfMonth);
        }

        changeFocusedDay(closestEnabledDate, true);
      }, [changeFocusedDay, disableFuture, disablePast, isDateDisabled, maxDate, minDate, onChange, onMonthChange, changeMonth, openNext, utils]);
      const handleDateYearChange = React__namespace.useCallback((newDate, selectionState) => {
        const startOfYear = utils.startOfYear(newDate);
        const endOfYear = utils.endOfYear(newDate);
        const closestEnabledDate = isDateDisabled(newDate) ? findClosestEnabledDate({
          utils,
          date: newDate,
          minDate: utils.isBefore(minDate, startOfYear) ? startOfYear : minDate,
          maxDate: utils.isAfter(maxDate, endOfYear) ? endOfYear : maxDate,
          disablePast,
          disableFuture,
          isDateDisabled
        }) : newDate;

        if (closestEnabledDate) {
          onChange(closestEnabledDate, selectionState);
          onYearChange == null ? void 0 : onYearChange(closestEnabledDate);
        } else {
          openNext();
          changeMonth(startOfYear);
        }

        changeFocusedDay(closestEnabledDate, true);
      }, [changeFocusedDay, disableFuture, disablePast, isDateDisabled, maxDate, minDate, onChange, onYearChange, openNext, utils, changeMonth]);
      const onSelectedDayChange = React__namespace.useCallback((day, isFinish) => {
        if (date && day) {
          // If there is a date already selected, then we want to keep its time
          return onChange(utils.mergeDateAndTime(day, date), isFinish);
        }

        return onChange(day, isFinish);
      }, [utils, date, onChange]);
      React__namespace.useEffect(() => {
        if (date) {
          changeMonth(date);
        }
      }, [date]); // eslint-disable-line

      const ownerState = props;
      const classes = useUtilityClasses$d(ownerState);
      const baseDateValidationProps = {
        disablePast,
        disableFuture,
        maxDate,
        minDate
      }; // When disabled, limit the view to the selected date

      const minDateWithDisabled = disabled && date || minDate;
      const maxDateWithDisabled = disabled && date || maxDate;
      const commonViewProps = {
        disableHighlightToday,
        readOnly,
        disabled
      };
      const gridLabelId = `${id}-grid-label`;
      const [internalFocusedView, setInternalFocusedView] = useControlled({
        name: 'DayPicker',
        state: 'focusedView',
        controlled: focusedView,
        default: autoFocus ? openView : null
      });
      const hasFocus = internalFocusedView !== null;
      const handleFocusedViewChange = useEventCallback(eventView => newHasFocus => {
        if (onFocusedViewChange) {
          // Use the calendar or clock logic
          onFocusedViewChange(eventView)(newHasFocus);
          return;
        } // If alone, do the local modifications


        if (newHasFocus) {
          setInternalFocusedView(eventView);
        } else {
          setInternalFocusedView(prevView => prevView === eventView ? null : prevView);
        }
      });
      const prevOpenViewRef = React__namespace.useRef(openView);
      React__namespace.useEffect(() => {
        // Set focus to the button when switching from a view to another
        if (prevOpenViewRef.current === openView) {
          return;
        }

        prevOpenViewRef.current = openView;
        handleFocusedViewChange(openView)(true);
      }, [openView, handleFocusedViewChange]);
      return /*#__PURE__*/jsxRuntime.exports.jsxs(CalendarPickerRoot, {
        ref: ref,
        className: clsx(classes.root, className),
        ownerState: ownerState,
        children: [/*#__PURE__*/jsxRuntime.exports.jsx(PickersCalendarHeader, _extends({}, other, {
          views: views,
          openView: openView,
          currentMonth: calendarState.currentMonth,
          onViewChange: setOpenView,
          onMonthChange: (newMonth, direction) => handleChangeMonth({
            newMonth,
            direction
          }),
          minDate: minDateWithDisabled,
          maxDate: maxDateWithDisabled,
          disabled: disabled,
          disablePast: disablePast,
          disableFuture: disableFuture,
          reduceAnimations: reduceAnimations,
          labelId: gridLabelId
        })), /*#__PURE__*/jsxRuntime.exports.jsx(CalendarPickerViewTransitionContainer, {
          reduceAnimations: reduceAnimations,
          className: classes.viewTransitionContainer,
          transKey: openView,
          ownerState: ownerState,
          children: /*#__PURE__*/jsxRuntime.exports.jsxs("div", {
            children: [openView === 'year' && /*#__PURE__*/jsxRuntime.exports.jsx(YearPicker, _extends({}, other, baseDateValidationProps, commonViewProps, {
              autoFocus: autoFocus,
              date: date,
              onChange: handleDateYearChange,
              shouldDisableYear: shouldDisableYear,
              hasFocus: hasFocus,
              onFocusedViewChange: handleFocusedViewChange('year')
            })), openView === 'month' && /*#__PURE__*/jsxRuntime.exports.jsx(MonthPicker, _extends({}, baseDateValidationProps, commonViewProps, {
              autoFocus: autoFocus,
              hasFocus: hasFocus,
              className: className,
              date: date,
              onChange: handleDateMonthChange,
              shouldDisableMonth: shouldDisableMonth,
              onFocusedViewChange: handleFocusedViewChange('month')
            })), openView === 'day' && /*#__PURE__*/jsxRuntime.exports.jsx(DayPicker, _extends({}, other, calendarState, baseDateValidationProps, commonViewProps, {
              autoFocus: autoFocus,
              onMonthSwitchingAnimationEnd: onMonthSwitchingAnimationEnd,
              onFocusedDayChange: changeFocusedDay,
              reduceAnimations: reduceAnimations,
              selectedDays: [date],
              onSelectedDaysChange: onSelectedDayChange,
              shouldDisableDate: shouldDisableDate,
              hasFocus: hasFocus,
              onFocusedViewChange: handleFocusedViewChange('day'),
              gridLabelId: gridLabelId
            }))]
          })
        })]
      });
    });
    CalendarPicker.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------
      autoFocus: PropTypes.bool,
      classes: PropTypes.object,
      className: PropTypes.string,

      /**
       * Overrideable components.
       * @default {}
       */
      components: PropTypes.object,

      /**
       * The props used for each component slot.
       * @default {}
       */
      componentsProps: PropTypes.object,
      date: PropTypes.any,

      /**
       * Formats the day of week displayed in the calendar header.
       * @param {string} day The day of week provided by the adapter's method `getWeekdays`.
       * @returns {string} The name to display.
       * @default (day) => day.charAt(0).toUpperCase()
       */
      dayOfWeekFormatter: PropTypes.func,

      /**
       * Default calendar month displayed when `value={null}`.
       */
      defaultCalendarMonth: PropTypes.any,

      /**
       * If `true`, the picker and text field are disabled.
       * @default false
       */
      disabled: PropTypes.bool,

      /**
       * If `true` future days are disabled.
       * @default false
       */
      disableFuture: PropTypes.bool,

      /**
       * If `true`, today's date is rendering without highlighting with circle.
       * @default false
       */
      disableHighlightToday: PropTypes.bool,

      /**
       * If `true` past days are disabled.
       * @default false
       */
      disablePast: PropTypes.bool,
      focusedView: PropTypes.oneOf(['day', 'month', 'year']),

      /**
       * Get aria-label text for switching between views button.
       * @param {CalendarPickerView} currentView The view from which we want to get the button text.
       * @returns {string} The label of the view.
       * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.
       */
      getViewSwitchingButtonText: PropTypes.func,

      /**
       * Left arrow icon aria-label text.
       * @deprecated
       */
      leftArrowButtonText: PropTypes.string,

      /**
       * If `true` renders `LoadingComponent` in calendar instead of calendar view.
       * Can be used to preload information and show it in calendar.
       * @default false
       */
      loading: PropTypes.bool,

      /**
       * Maximal selectable date. @DateIOType
       */
      maxDate: PropTypes.any,

      /**
       * Minimal selectable date. @DateIOType
       */
      minDate: PropTypes.any,

      /**
       * Callback fired on date change
       */
      onChange: PropTypes.func.isRequired,
      onFocusedViewChange: PropTypes.func,

      /**
       * Callback firing on month change @DateIOType.
       * @template TDate
       * @param {TDate} month The new month.
       * @returns {void|Promise} -
       */
      onMonthChange: PropTypes.func,

      /**
       * Callback fired on view change.
       * @param {CalendarPickerView} view The new view.
       */
      onViewChange: PropTypes.func,

      /**
       * Callback firing on year change @DateIOType.
       * @template TDate
       * @param {TDate} year The new year.
       */
      onYearChange: PropTypes.func,

      /**
       * Initially open view.
       * @default 'day'
       */
      openTo: PropTypes.oneOf(['day', 'month', 'year']),

      /**
       * Make picker read only.
       * @default false
       */
      readOnly: PropTypes.bool,

      /**
       * Disable heavy animations.
       * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)
       */
      reduceAnimations: PropTypes.bool,

      /**
       * Custom renderer for day. Check the [PickersDay](https://mui.com/x/api/date-pickers/pickers-day/) component.
       * @template TDate
       * @param {TDate} day The day to render.
       * @param {Array<TDate | null>} selectedDays The days currently selected.
       * @param {PickersDayProps<TDate>} pickersDayProps The props of the day to render.
       * @returns {JSX.Element} The element representing the day.
       */
      renderDay: PropTypes.func,

      /**
       * Component displaying when passed `loading` true.
       * @returns {React.ReactNode} The node to render when loading.
       * @default () => <span data-mui-test="loading-progress">...</span>
       */
      renderLoading: PropTypes.func,

      /**
       * Right arrow icon aria-label text.
       * @deprecated
       */
      rightArrowButtonText: PropTypes.string,

      /**
       * Disable specific date. @DateIOType
       * @template TDate
       * @param {TDate} day The date to test.
       * @returns {boolean} Returns `true` if the date should be disabled.
       */
      shouldDisableDate: PropTypes.func,

      /**
       * Disable specific months dynamically.
       * Works like `shouldDisableDate` but for month selection view @DateIOType.
       * @template TDate
       * @param {TDate} month The month to check.
       * @returns {boolean} If `true` the month will be disabled.
       */
      shouldDisableMonth: PropTypes.func,

      /**
       * Disable specific years dynamically.
       * Works like `shouldDisableDate` but for year selection view @DateIOType.
       * @template TDate
       * @param {TDate} year The year to test.
       * @returns {boolean} Returns `true` if the year should be disabled.
       */
      shouldDisableYear: PropTypes.func,

      /**
       * If `true`, days that have `outsideCurrentMonth={true}` are displayed.
       * @default false
       */
      showDaysOutsideCurrentMonth: PropTypes.bool,

      /**
       * Controlled open view.
       */
      view: PropTypes.oneOf(['day', 'month', 'year']),

      /**
       * Views for calendar picker.
       * @default ['year', 'day']
       */
      views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired)
    } ;

    const CLOCK_WIDTH = 220;
    const CLOCK_HOUR_WIDTH = 36;
    const clockCenter = {
      x: CLOCK_WIDTH / 2,
      y: CLOCK_WIDTH / 2
    };
    const baseClockPoint = {
      x: clockCenter.x,
      y: 0
    };
    const cx = baseClockPoint.x - clockCenter.x;
    const cy = baseClockPoint.y - clockCenter.y;

    const rad2deg = rad => rad * (180 / Math.PI);

    const getAngleValue = (step, offsetX, offsetY) => {
      const x = offsetX - clockCenter.x;
      const y = offsetY - clockCenter.y;
      const atan = Math.atan2(cx, cy) - Math.atan2(x, y);
      let deg = rad2deg(atan);
      deg = Math.round(deg / step) * step;
      deg %= 360;
      const value = Math.floor(deg / step) || 0;
      const delta = x ** 2 + y ** 2;
      const distance = Math.sqrt(delta);
      return {
        value,
        distance
      };
    };

    const getMinutes = (offsetX, offsetY, step = 1) => {
      const angleStep = step * 6;
      let {
        value
      } = getAngleValue(angleStep, offsetX, offsetY);
      value = value * step % 60;
      return value;
    };
    const getHours = (offsetX, offsetY, ampm) => {
      const {
        value,
        distance
      } = getAngleValue(30, offsetX, offsetY);
      let hour = value || 12;

      if (!ampm) {
        if (distance < CLOCK_WIDTH / 2 - CLOCK_HOUR_WIDTH) {
          hour += 12;
          hour %= 24;
        }
      } else {
        hour %= 12;
      }

      return hour;
    };

    function getClockPointerUtilityClass(slot) {
      return generateUtilityClass('MuiClockPointer', slot);
    }
    generateUtilityClasses('MuiClockPointer', ['root', 'thumb']);

    const _excluded$l = ["className", "hasSelected", "isInner", "type", "value"];

    const useUtilityClasses$c = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        thumb: ['thumb']
      };
      return composeClasses(slots, getClockPointerUtilityClass, classes);
    };

    const ClockPointerRoot = styled$1('div', {
      name: 'MuiClockPointer',
      slot: 'Root',
      overridesResolver: (_, styles) => styles.root
    })(({
      theme,
      ownerState
    }) => _extends({
      width: 2,
      backgroundColor: theme.palette.primary.main,
      position: 'absolute',
      left: 'calc(50% - 1px)',
      bottom: '50%',
      transformOrigin: 'center bottom 0px'
    }, ownerState.shouldAnimate && {
      transition: theme.transitions.create(['transform', 'height'])
    }));
    const ClockPointerThumb = styled$1('div', {
      name: 'MuiClockPointer',
      slot: 'Thumb',
      overridesResolver: (_, styles) => styles.thumb
    })(({
      theme,
      ownerState
    }) => _extends({
      width: 4,
      height: 4,
      backgroundColor: theme.palette.primary.contrastText,
      borderRadius: '50%',
      position: 'absolute',
      top: -21,
      left: `calc(50% - ${CLOCK_HOUR_WIDTH / 2}px)`,
      border: `${(CLOCK_HOUR_WIDTH - 4) / 2}px solid ${theme.palette.primary.main}`,
      boxSizing: 'content-box'
    }, ownerState.hasSelected && {
      backgroundColor: theme.palette.primary.main
    }));
    /**
     * @ignore - internal component.
     */

    function ClockPointer(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiClockPointer'
      });

      const {
        className,
        isInner,
        type,
        value
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$l);

      const previousType = React__namespace.useRef(type);
      React__namespace.useEffect(() => {
        previousType.current = type;
      }, [type]);

      const ownerState = _extends({}, props, {
        shouldAnimate: previousType.current !== type
      });

      const classes = useUtilityClasses$c(ownerState);

      const getAngleStyle = () => {
        const max = type === 'hours' ? 12 : 60;
        let angle = 360 / max * value;

        if (type === 'hours' && value > 12) {
          angle -= 360; // round up angle to max 360 degrees
        }

        return {
          height: Math.round((isInner ? 0.26 : 0.4) * CLOCK_WIDTH),
          transform: `rotateZ(${angle}deg)`
        };
      };

      return /*#__PURE__*/jsxRuntime.exports.jsx(ClockPointerRoot, _extends({
        style: getAngleStyle(),
        className: clsx(className, classes.root),
        ownerState: ownerState
      }, other, {
        children: /*#__PURE__*/jsxRuntime.exports.jsx(ClockPointerThumb, {
          ownerState: ownerState,
          className: classes.thumb
        })
      }));
    }

    function getClockUtilityClass(slot) {
      return generateUtilityClass('MuiClock', slot);
    }
    generateUtilityClasses('MuiClock', ['root', 'clock', 'wrapper', 'squareMask', 'pin', 'amButton', 'pmButton']);

    const useUtilityClasses$b = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        clock: ['clock'],
        wrapper: ['wrapper'],
        squareMask: ['squareMask'],
        pin: ['pin'],
        amButton: ['amButton'],
        pmButton: ['pmButton']
      };
      return composeClasses(slots, getClockUtilityClass, classes);
    };

    const ClockRoot = styled$1('div', {
      name: 'MuiClock',
      slot: 'Root',
      overridesResolver: (_, styles) => styles.root
    })(({
      theme
    }) => ({
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      margin: theme.spacing(2)
    }));
    const ClockClock = styled$1('div', {
      name: 'MuiClock',
      slot: 'Clock',
      overridesResolver: (_, styles) => styles.clock
    })({
      backgroundColor: 'rgba(0,0,0,.07)',
      borderRadius: '50%',
      height: 220,
      width: 220,
      flexShrink: 0,
      position: 'relative',
      pointerEvents: 'none'
    });
    const ClockWrapper = styled$1('div', {
      name: 'MuiClock',
      slot: 'Wrapper',
      overridesResolver: (_, styles) => styles.wrapper
    })({
      '&:focus': {
        outline: 'none'
      }
    });
    const ClockSquareMask = styled$1('div', {
      name: 'MuiClock',
      slot: 'SquareMask',
      overridesResolver: (_, styles) => styles.squareMask
    })(({
      ownerState
    }) => _extends({
      width: '100%',
      height: '100%',
      position: 'absolute',
      pointerEvents: 'auto',
      outline: 0,
      // Disable scroll capabilities.
      touchAction: 'none',
      userSelect: 'none'
    }, ownerState.disabled ? {} : {
      '@media (pointer: fine)': {
        cursor: 'pointer',
        borderRadius: '50%'
      },
      '&:active': {
        cursor: 'move'
      }
    }));
    const ClockPin = styled$1('div', {
      name: 'MuiClock',
      slot: 'Pin',
      overridesResolver: (_, styles) => styles.pin
    })(({
      theme
    }) => ({
      width: 6,
      height: 6,
      borderRadius: '50%',
      backgroundColor: theme.palette.primary.main,
      position: 'absolute',
      top: '50%',
      left: '50%',
      transform: 'translate(-50%, -50%)'
    }));
    const ClockAmButton = styled$1(IconButton$1, {
      name: 'MuiClock',
      slot: 'AmButton',
      overridesResolver: (_, styles) => styles.amButton
    })(({
      theme,
      ownerState
    }) => _extends({
      zIndex: 1,
      position: 'absolute',
      bottom: ownerState.ampmInClock ? 64 : 8,
      left: 8
    }, ownerState.meridiemMode === 'am' && {
      backgroundColor: theme.palette.primary.main,
      color: theme.palette.primary.contrastText,
      '&:hover': {
        backgroundColor: theme.palette.primary.light
      }
    }));
    const ClockPmButton = styled$1(IconButton$1, {
      name: 'MuiClock',
      slot: 'PmButton',
      overridesResolver: (_, styles) => styles.pmButton
    })(({
      theme,
      ownerState
    }) => _extends({
      zIndex: 1,
      position: 'absolute',
      bottom: ownerState.ampmInClock ? 64 : 8,
      right: 8
    }, ownerState.meridiemMode === 'pm' && {
      backgroundColor: theme.palette.primary.main,
      color: theme.palette.primary.contrastText,
      '&:hover': {
        backgroundColor: theme.palette.primary.light
      }
    }));
    /**
     * @ignore - internal component.
     */

    function Clock(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiClock'
      });
      const {
        ampm,
        ampmInClock,
        autoFocus,
        children,
        date,
        getClockLabelText,
        handleMeridiemChange,
        isTimeDisabled,
        meridiemMode,
        minutesStep = 1,
        onChange,
        selectedId,
        type,
        value,
        disabled,
        readOnly,
        className
      } = props;
      const ownerState = props;
      const utils = useUtils();
      const wrapperVariant = React__namespace.useContext(WrapperVariantContext);
      const isMoving = React__namespace.useRef(false);
      const classes = useUtilityClasses$b(ownerState);
      const isSelectedTimeDisabled = isTimeDisabled(value, type);
      const isPointerInner = !ampm && type === 'hours' && (value < 1 || value > 12);

      const handleValueChange = (newValue, isFinish) => {
        if (disabled || readOnly) {
          return;
        }

        if (isTimeDisabled(newValue, type)) {
          return;
        }

        onChange(newValue, isFinish);
      };

      const setTime = (event, isFinish) => {
        let {
          offsetX,
          offsetY
        } = event;

        if (offsetX === undefined) {
          const rect = event.target.getBoundingClientRect();
          offsetX = event.changedTouches[0].clientX - rect.left;
          offsetY = event.changedTouches[0].clientY - rect.top;
        }

        const newSelectedValue = type === 'seconds' || type === 'minutes' ? getMinutes(offsetX, offsetY, minutesStep) : getHours(offsetX, offsetY, Boolean(ampm));
        handleValueChange(newSelectedValue, isFinish);
      };

      const handleTouchMove = event => {
        isMoving.current = true;
        setTime(event, 'shallow');
      };

      const handleTouchEnd = event => {
        if (isMoving.current) {
          setTime(event, 'finish');
          isMoving.current = false;
        }
      };

      const handleMouseMove = event => {
        // event.buttons & PRIMARY_MOUSE_BUTTON
        if (event.buttons > 0) {
          setTime(event.nativeEvent, 'shallow');
        }
      };

      const handleMouseUp = event => {
        if (isMoving.current) {
          isMoving.current = false;
        }

        setTime(event.nativeEvent, 'finish');
      };

      const hasSelected = React__namespace.useMemo(() => {
        if (type === 'hours') {
          return true;
        }

        return value % 5 === 0;
      }, [type, value]);
      const keyboardControlStep = type === 'minutes' ? minutesStep : 1;
      const listboxRef = React__namespace.useRef(null); // Since this is rendered when a Popper is opened we can't use passive effects.
      // Focusing in passive effects in Popper causes scroll jump.

      useEnhancedEffect$1(() => {
        if (autoFocus) {
          // The ref not being resolved would be a bug in MUI.
          listboxRef.current.focus();
        }
      }, [autoFocus]);

      const handleKeyDown = event => {
        // TODO: Why this early exit?
        if (isMoving.current) {
          return;
        }

        switch (event.key) {
          case 'Home':
            // annulate both hours and minutes
            handleValueChange(0, 'partial');
            event.preventDefault();
            break;

          case 'End':
            handleValueChange(type === 'minutes' ? 59 : 23, 'partial');
            event.preventDefault();
            break;

          case 'ArrowUp':
            handleValueChange(value + keyboardControlStep, 'partial');
            event.preventDefault();
            break;

          case 'ArrowDown':
            handleValueChange(value - keyboardControlStep, 'partial');
            event.preventDefault();
            break;

        }
      };

      return /*#__PURE__*/jsxRuntime.exports.jsxs(ClockRoot, {
        className: clsx(className, classes.root),
        children: [/*#__PURE__*/jsxRuntime.exports.jsxs(ClockClock, {
          className: classes.clock,
          children: [/*#__PURE__*/jsxRuntime.exports.jsx(ClockSquareMask, {
            onTouchMove: handleTouchMove,
            onTouchEnd: handleTouchEnd,
            onMouseUp: handleMouseUp,
            onMouseMove: handleMouseMove,
            ownerState: {
              disabled
            },
            className: classes.squareMask
          }), !isSelectedTimeDisabled && /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
            children: [/*#__PURE__*/jsxRuntime.exports.jsx(ClockPin, {
              className: classes.pin
            }), date && /*#__PURE__*/jsxRuntime.exports.jsx(ClockPointer, {
              type: type,
              value: value,
              isInner: isPointerInner,
              hasSelected: hasSelected
            })]
          }), /*#__PURE__*/jsxRuntime.exports.jsx(ClockWrapper, {
            "aria-activedescendant": selectedId,
            "aria-label": getClockLabelText(type, date, utils),
            ref: listboxRef,
            role: "listbox",
            onKeyDown: handleKeyDown,
            tabIndex: 0,
            className: classes.wrapper,
            children: children
          })]
        }), ampm && (wrapperVariant === 'desktop' || ampmInClock) && /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
          children: [/*#__PURE__*/jsxRuntime.exports.jsx(ClockAmButton, {
            onClick: readOnly ? undefined : () => handleMeridiemChange('am'),
            disabled: disabled || meridiemMode === null,
            ownerState: ownerState,
            className: classes.amButton,
            children: /*#__PURE__*/jsxRuntime.exports.jsx(Typography$1, {
              variant: "caption",
              children: "AM"
            })
          }), /*#__PURE__*/jsxRuntime.exports.jsx(ClockPmButton, {
            disabled: disabled || meridiemMode === null,
            onClick: readOnly ? undefined : () => handleMeridiemChange('pm'),
            ownerState: ownerState,
            className: classes.pmButton,
            children: /*#__PURE__*/jsxRuntime.exports.jsx(Typography$1, {
              variant: "caption",
              children: "PM"
            })
          })]
        })]
      });
    }

    function getClockNumberUtilityClass(slot) {
      return generateUtilityClass('MuiClockNumber', slot);
    }
    const clockNumberClasses = generateUtilityClasses('MuiClockNumber', ['root', 'selected', 'disabled']);

    const _excluded$k = ["className", "disabled", "index", "inner", "label", "selected"];

    const useUtilityClasses$a = ownerState => {
      const {
        classes,
        selected,
        disabled
      } = ownerState;
      const slots = {
        root: ['root', selected && 'selected', disabled && 'disabled']
      };
      return composeClasses(slots, getClockNumberUtilityClass, classes);
    };

    const ClockNumberRoot = styled$1('span', {
      name: 'MuiClockNumber',
      slot: 'Root',
      overridesResolver: (_, styles) => [styles.root, {
        [`&.${clockNumberClasses.disabled}`]: styles.disabled
      }, {
        [`&.${clockNumberClasses.selected}`]: styles.selected
      }]
    })(({
      theme,
      ownerState
    }) => _extends({
      height: CLOCK_HOUR_WIDTH,
      width: CLOCK_HOUR_WIDTH,
      position: 'absolute',
      left: `calc((100% - ${CLOCK_HOUR_WIDTH}px) / 2)`,
      display: 'inline-flex',
      justifyContent: 'center',
      alignItems: 'center',
      borderRadius: '50%',
      color: theme.palette.text.primary,
      fontFamily: theme.typography.fontFamily,
      '&:focused': {
        backgroundColor: theme.palette.background.paper
      },
      [`&.${clockNumberClasses.selected}`]: {
        color: theme.palette.primary.contrastText
      },
      [`&.${clockNumberClasses.disabled}`]: {
        pointerEvents: 'none',
        color: theme.palette.text.disabled
      }
    }, ownerState.inner && _extends({}, theme.typography.body2, {
      color: theme.palette.text.secondary
    })));
    /**
     * @ignore - internal component.
     */

    function ClockNumber(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiClockNumber'
      });

      const {
        className,
        disabled,
        index,
        inner,
        label,
        selected
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$k);

      const ownerState = props;
      const classes = useUtilityClasses$a(ownerState);
      const angle = index % 12 / 12 * Math.PI * 2 - Math.PI / 2;
      const length = (CLOCK_WIDTH - CLOCK_HOUR_WIDTH - 2) / 2 * (inner ? 0.65 : 1);
      const x = Math.round(Math.cos(angle) * length);
      const y = Math.round(Math.sin(angle) * length);
      return /*#__PURE__*/jsxRuntime.exports.jsx(ClockNumberRoot, _extends({
        className: clsx(className, classes.root),
        "aria-disabled": disabled ? true : undefined,
        "aria-selected": selected ? true : undefined,
        role: "option",
        style: {
          transform: `translate(${x}px, ${y + (CLOCK_WIDTH - CLOCK_HOUR_WIDTH) / 2}px`
        },
        ownerState: ownerState
      }, other, {
        children: label
      }));
    }

    /**
     * @ignore - internal component.
     */
    const getHourNumbers = ({
      ampm,
      date,
      getClockNumberText,
      isDisabled,
      selectedId,
      utils
    }) => {
      const currentHours = date ? utils.getHours(date) : null;
      const hourNumbers = [];
      const startHour = ampm ? 1 : 0;
      const endHour = ampm ? 12 : 23;

      const isSelected = hour => {
        if (currentHours === null) {
          return false;
        }

        if (ampm) {
          if (hour === 12) {
            return currentHours === 12 || currentHours === 0;
          }

          return currentHours === hour || currentHours - 12 === hour;
        }

        return currentHours === hour;
      };

      for (let hour = startHour; hour <= endHour; hour += 1) {
        let label = hour.toString();

        if (hour === 0) {
          label = '00';
        }

        const inner = !ampm && (hour === 0 || hour > 12);
        label = utils.formatNumber(label);
        const selected = isSelected(hour);
        hourNumbers.push( /*#__PURE__*/jsxRuntime.exports.jsx(ClockNumber, {
          id: selected ? selectedId : undefined,
          index: hour,
          inner: inner,
          selected: selected,
          disabled: isDisabled(hour),
          label: label,
          "aria-label": getClockNumberText(label)
        }, hour));
      }

      return hourNumbers;
    };
    const getMinutesNumbers = ({
      utils,
      value,
      isDisabled,
      getClockNumberText,
      selectedId
    }) => {
      const f = utils.formatNumber;
      return [[5, f('05')], [10, f('10')], [15, f('15')], [20, f('20')], [25, f('25')], [30, f('30')], [35, f('35')], [40, f('40')], [45, f('45')], [50, f('50')], [55, f('55')], [0, f('00')]].map(([numberValue, label], index) => {
        const selected = numberValue === value;
        return /*#__PURE__*/jsxRuntime.exports.jsx(ClockNumber, {
          label: label,
          id: selected ? selectedId : undefined,
          index: index + 1,
          inner: false,
          disabled: isDisabled(numberValue),
          selected: selected,
          "aria-label": getClockNumberText(label)
        }, numberValue);
      });
    };

    function getClockPickerUtilityClass(slot) {
      return generateUtilityClass('MuiClockPicker', slot);
    }
    generateUtilityClasses('MuiClockPicker', ['root', 'arrowSwitcher']);

    const useUtilityClasses$9 = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        arrowSwitcher: ['arrowSwitcher']
      };
      return composeClasses(slots, getClockPickerUtilityClass, classes);
    };

    const ClockPickerRoot = styled$1(PickerViewRoot, {
      name: 'MuiClockPicker',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({
      display: 'flex',
      flexDirection: 'column'
    });
    const ClockPickerArrowSwitcher = styled$1(PickersArrowSwitcher, {
      name: 'MuiClockPicker',
      slot: 'ArrowSwitcher',
      overridesResolver: (props, styles) => styles.arrowSwitcher
    })({
      position: 'absolute',
      right: 12,
      top: 15
    });
    const deprecatedPropsWarning = buildDeprecatedPropsWarning('Props for translation are deprecated. See https://mui.com/x/react-date-pickers/localization for more information.');
    /**
     *
     * API:
     *
     * - [ClockPicker API](https://mui.com/x/api/date-pickers/clock-picker/)
     */

    const ClockPicker = /*#__PURE__*/React__namespace.forwardRef(function ClockPicker(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiClockPicker'
      });
      const {
        ampm = false,
        ampmInClock = false,
        autoFocus,
        components,
        componentsProps,
        date,
        disableIgnoringDatePartForTimeValidation,
        getClockLabelText: getClockLabelTextProp,
        getHoursClockNumberText: getHoursClockNumberTextProp,
        getMinutesClockNumberText: getMinutesClockNumberTextProp,
        getSecondsClockNumberText: getSecondsClockNumberTextProp,
        leftArrowButtonText: leftArrowButtonTextProp,
        maxTime,
        minTime,
        minutesStep = 1,
        rightArrowButtonText: rightArrowButtonTextProp,
        shouldDisableTime,
        showViewSwitcher,
        onChange,
        view,
        views = ['hours', 'minutes'],
        openTo,
        onViewChange,
        className,
        disabled,
        readOnly
      } = props;
      deprecatedPropsWarning({
        leftArrowButtonText: leftArrowButtonTextProp,
        rightArrowButtonText: rightArrowButtonTextProp,
        getClockLabelText: getClockLabelTextProp,
        getHoursClockNumberText: getHoursClockNumberTextProp,
        getMinutesClockNumberText: getMinutesClockNumberTextProp,
        getSecondsClockNumberText: getSecondsClockNumberTextProp
      });
      const localeText = useLocaleText();
      const leftArrowButtonText = leftArrowButtonTextProp != null ? leftArrowButtonTextProp : localeText.openPreviousView;
      const rightArrowButtonText = rightArrowButtonTextProp != null ? rightArrowButtonTextProp : localeText.openNextView;
      const getClockLabelText = getClockLabelTextProp != null ? getClockLabelTextProp : localeText.clockLabelText;
      const getHoursClockNumberText = getHoursClockNumberTextProp != null ? getHoursClockNumberTextProp : localeText.hoursClockNumberText;
      const getMinutesClockNumberText = getMinutesClockNumberTextProp != null ? getMinutesClockNumberTextProp : localeText.minutesClockNumberText;
      const getSecondsClockNumberText = getSecondsClockNumberTextProp != null ? getSecondsClockNumberTextProp : localeText.secondsClockNumberText;
      const {
        openView,
        setOpenView,
        nextView,
        previousView,
        handleChangeAndOpenNext
      } = useViews({
        view,
        views,
        openTo,
        onViewChange,
        onChange
      });
      const now = useNow();
      const utils = useUtils();
      const dateOrMidnight = React__namespace.useMemo(() => date || utils.setSeconds(utils.setMinutes(utils.setHours(now, 0), 0), 0), [date, now, utils]);
      const {
        meridiemMode,
        handleMeridiemChange
      } = useMeridiemMode(dateOrMidnight, ampm, handleChangeAndOpenNext);
      const isTimeDisabled = React__namespace.useCallback((rawValue, viewType) => {
        const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);

        const containsValidTime = ({
          start,
          end
        }) => {
          if (minTime && isAfter(minTime, end)) {
            return false;
          }

          if (maxTime && isAfter(start, maxTime)) {
            return false;
          }

          return true;
        };

        const isValidValue = (value, step = 1) => {
          if (value % step !== 0) {
            return false;
          }

          if (shouldDisableTime) {
            return !shouldDisableTime(value, viewType);
          }

          return true;
        };

        switch (viewType) {
          case 'hours':
            {
              const value = convertValueToMeridiem(rawValue, meridiemMode, ampm);
              const dateWithNewHours = utils.setHours(dateOrMidnight, value);
              const start = utils.setSeconds(utils.setMinutes(dateWithNewHours, 0), 0);
              const end = utils.setSeconds(utils.setMinutes(dateWithNewHours, 59), 59);
              return !containsValidTime({
                start,
                end
              }) || !isValidValue(value);
            }

          case 'minutes':
            {
              const dateWithNewMinutes = utils.setMinutes(dateOrMidnight, rawValue);
              const start = utils.setSeconds(dateWithNewMinutes, 0);
              const end = utils.setSeconds(dateWithNewMinutes, 59);
              return !containsValidTime({
                start,
                end
              }) || !isValidValue(rawValue, minutesStep);
            }

          case 'seconds':
            {
              const dateWithNewSeconds = utils.setSeconds(dateOrMidnight, rawValue);
              const start = dateWithNewSeconds;
              const end = dateWithNewSeconds;
              return !containsValidTime({
                start,
                end
              }) || !isValidValue(rawValue);
            }

          default:
            throw new Error('not supported');
        }
      }, [ampm, dateOrMidnight, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableTime, utils]);
      const selectedId = useId();
      const viewProps = React__namespace.useMemo(() => {
        switch (openView) {
          case 'hours':
            {
              const handleHoursChange = (value, isFinish) => {
                const valueWithMeridiem = convertValueToMeridiem(value, meridiemMode, ampm);
                handleChangeAndOpenNext(utils.setHours(dateOrMidnight, valueWithMeridiem), isFinish);
              };

              return {
                onChange: handleHoursChange,
                value: utils.getHours(dateOrMidnight),
                children: getHourNumbers({
                  date,
                  utils,
                  ampm,
                  onChange: handleHoursChange,
                  getClockNumberText: getHoursClockNumberText,
                  isDisabled: value => disabled || isTimeDisabled(value, 'hours'),
                  selectedId
                })
              };
            }

          case 'minutes':
            {
              const minutesValue = utils.getMinutes(dateOrMidnight);

              const handleMinutesChange = (value, isFinish) => {
                handleChangeAndOpenNext(utils.setMinutes(dateOrMidnight, value), isFinish);
              };

              return {
                value: minutesValue,
                onChange: handleMinutesChange,
                children: getMinutesNumbers({
                  utils,
                  value: minutesValue,
                  onChange: handleMinutesChange,
                  getClockNumberText: getMinutesClockNumberText,
                  isDisabled: value => disabled || isTimeDisabled(value, 'minutes'),
                  selectedId
                })
              };
            }

          case 'seconds':
            {
              const secondsValue = utils.getSeconds(dateOrMidnight);

              const handleSecondsChange = (value, isFinish) => {
                handleChangeAndOpenNext(utils.setSeconds(dateOrMidnight, value), isFinish);
              };

              return {
                value: secondsValue,
                onChange: handleSecondsChange,
                children: getMinutesNumbers({
                  utils,
                  value: secondsValue,
                  onChange: handleSecondsChange,
                  getClockNumberText: getSecondsClockNumberText,
                  isDisabled: value => disabled || isTimeDisabled(value, 'seconds'),
                  selectedId
                })
              };
            }

          default:
            throw new Error('You must provide the type for ClockView');
        }
      }, [openView, utils, date, ampm, getHoursClockNumberText, getMinutesClockNumberText, getSecondsClockNumberText, meridiemMode, handleChangeAndOpenNext, dateOrMidnight, isTimeDisabled, selectedId, disabled]);
      const ownerState = props;
      const classes = useUtilityClasses$9(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsxs(ClockPickerRoot, {
        ref: ref,
        className: clsx(classes.root, className),
        ownerState: ownerState,
        children: [showViewSwitcher && /*#__PURE__*/jsxRuntime.exports.jsx(ClockPickerArrowSwitcher, {
          className: classes.arrowSwitcher,
          leftArrowButtonText: leftArrowButtonText,
          rightArrowButtonText: rightArrowButtonText,
          components: components,
          componentsProps: componentsProps,
          onLeftClick: () => setOpenView(previousView),
          onRightClick: () => setOpenView(nextView),
          isLeftDisabled: !previousView,
          isRightDisabled: !nextView,
          ownerState: ownerState
        }), /*#__PURE__*/jsxRuntime.exports.jsx(Clock, _extends({
          autoFocus: autoFocus,
          date: date,
          ampmInClock: ampmInClock,
          type: openView,
          ampm: ampm,
          getClockLabelText: getClockLabelText,
          minutesStep: minutesStep,
          isTimeDisabled: isTimeDisabled,
          meridiemMode: meridiemMode,
          handleMeridiemChange: handleMeridiemChange,
          selectedId: selectedId,
          disabled: disabled,
          readOnly: readOnly
        }, viewProps))]
      });
    });
    ClockPicker.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------

      /**
       * 12h/24h view for hour selection clock.
       * @default false
       */
      ampm: PropTypes.bool,

      /**
       * Display ampm controls under the clock (instead of in the toolbar).
       * @default false
       */
      ampmInClock: PropTypes.bool,

      /**
       * Set to `true` if focus should be moved to clock picker.
       */
      autoFocus: PropTypes.bool,

      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,
      className: PropTypes.string,

      /**
       * Overrideable components.
       * @default {}
       */
      components: PropTypes.object,

      /**
       * The props used for each component slot.
       * @default {}
       */
      componentsProps: PropTypes.object,

      /**
       * Selected date @DateIOType.
       */
      date: PropTypes.any,

      /**
       * If `true`, the picker and text field are disabled.
       * @default false
       */
      disabled: PropTypes.bool,

      /**
       * Do not ignore date part when validating min/max time.
       * @default false
       */
      disableIgnoringDatePartForTimeValidation: PropTypes.bool,

      /**
       * Accessible text that helps user to understand which time and view is selected.
       * @template TDate
       * @param {ClockPickerView} view The current view rendered.
       * @param {TDate | null} time The current time.
       * @param {MuiPickersAdapter<TDate>} adapter The current date adapter.
       * @returns {string} The clock label.
       * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.
       * @default <TDate extends any>(
       *   view: ClockView,
       *   time: TDate | null,
       *   adapter: MuiPickersAdapter<TDate>,
       * ) =>
       *   `Select ${view}. ${
       *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`
       *   }`
       */
      getClockLabelText: PropTypes.func,

      /**
       * Get clock number aria-text for hours.
       * @param {string} hours The hours to format.
       * @returns {string} the formatted hours text.
       * @default (hours: string) => `${hours} hours`
       * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.
       */
      getHoursClockNumberText: PropTypes.func,

      /**
       * Get clock number aria-text for minutes.
       * @param {string} minutes The minutes to format.
       * @returns {string} the formatted minutes text.
       * @default (minutes: string) => `${minutes} minutes`
       * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.
       */
      getMinutesClockNumberText: PropTypes.func,

      /**
       * Get clock number aria-text for seconds.
       * @param {string} seconds The seconds to format.
       * @returns {string} the formatted seconds text.
       * @default (seconds: string) => `${seconds} seconds`
       * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.
       */
      getSecondsClockNumberText: PropTypes.func,

      /**
       * Left arrow icon aria-label text.
       * @default 'open previous view'
       * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.
       */
      leftArrowButtonText: PropTypes.string,

      /**
       * Max time acceptable time.
       * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.
       */
      maxTime: PropTypes.any,

      /**
       * Min time acceptable time.
       * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.
       */
      minTime: PropTypes.any,

      /**
       * Step over minutes.
       * @default 1
       */
      minutesStep: PropTypes.number,

      /**
       * On change callback @DateIOType.
       */
      onChange: PropTypes.func.isRequired,

      /**
       * Callback fired on view change.
       * @param {ClockPickerView} view The new view.
       */
      onViewChange: PropTypes.func,

      /**
       * Initially open view.
       * @default 'hours'
       */
      openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),

      /**
       * Make picker read only.
       * @default false
       */
      readOnly: PropTypes.bool,

      /**
       * Right arrow icon aria-label text.
       * @default 'open next view'
       * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.
       */
      rightArrowButtonText: PropTypes.string,

      /**
       * Dynamically check if time is disabled or not.
       * If returns `false` appropriate time point will ot be acceptable.
       * @param {number} timeValue The value to check.
       * @param {ClockPickerView} clockType The clock type of the timeValue.
       * @returns {boolean} Returns `true` if the time should be disabled
       */
      shouldDisableTime: PropTypes.func,
      showViewSwitcher: PropTypes.bool,

      /**
       * Controlled open view.
       */
      view: PropTypes.oneOf(['hours', 'minutes', 'seconds']),

      /**
       * Views for calendar picker.
       * @default ['hours', 'minutes']
       */
      views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)
    } ;

    const isYearOnlyView = views => views.length === 1 && views[0] === 'year';
    const isYearAndMonthViews = views => views.length === 2 && views.indexOf('month') !== -1 && views.indexOf('year') !== -1;

    const getFormatAndMaskByViews = (views, utils) => {
      if (isYearOnlyView(views)) {
        return {
          inputFormat: utils.formats.year
        };
      }

      if (isYearAndMonthViews(views)) {
        return {
          disableMaskedInput: true,
          inputFormat: utils.formats.monthAndYear
        };
      }

      return {
        inputFormat: utils.formats.keyboardDate
      };
    };

    function useDatePickerDefaultizedProps(props, name) {
      var _themeProps$views;

      const utils = useUtils();
      const defaultDates = useDefaultDates(); // This is technically unsound if the type parameters appear in optional props.
      // Optional props can be filled by `useThemeProps` with types that don't match the type parameters.

      const themeProps = useThemeProps({
        props,
        name
      });
      const views = (_themeProps$views = themeProps.views) != null ? _themeProps$views : ['year', 'day'];
      return _extends({
        openTo: 'day',
        disableFuture: false,
        disablePast: false
      }, getFormatAndMaskByViews(views, utils), themeProps, {
        views,
        minDate: parseNonNullablePickerDate(utils, themeProps.minDate, defaultDates.minDate),
        maxDate: parseNonNullablePickerDate(utils, themeProps.maxDate, defaultDates.maxDate)
      });
    }
    const datePickerValueManager = {
      emptyValue: null,
      getTodayValue: utils => utils.date(),
      parseInput: parsePickerInputValue,
      areValuesEqual: (utils, a, b) => utils.isEqual(a, b)
    };

    function getPickersToolbarUtilityClass(slot) {
      return generateUtilityClass('MuiPickersToolbar', slot);
    }
    const pickersToolbarClasses = generateUtilityClasses('MuiPickersToolbar', ['root', 'content', 'penIconButton', 'penIconButtonLandscape']);

    const useUtilityClasses$8 = ownerState => {
      const {
        classes,
        isLandscape
      } = ownerState;
      const slots = {
        root: ['root'],
        content: ['content'],
        penIconButton: ['penIconButton', isLandscape && 'penIconButtonLandscape']
      };
      return composeClasses(slots, getPickersToolbarUtilityClass, classes);
    };

    const PickersToolbarRoot = styled$1('div', {
      name: 'MuiPickersToolbar',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })(({
      theme,
      ownerState
    }) => _extends({
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'flex-start',
      justifyContent: 'space-between',
      padding: theme.spacing(2, 3)
    }, ownerState.isLandscape && {
      height: 'auto',
      maxWidth: 160,
      padding: 16,
      justifyContent: 'flex-start',
      flexWrap: 'wrap'
    }));
    const PickersToolbarContent = styled$1(Grid$1, {
      name: 'MuiPickersToolbar',
      slot: 'Content',
      overridesResolver: (props, styles) => styles.content
    })(({
      ownerState
    }) => _extends({
      flex: 1
    }, !ownerState.isLandscape && {
      alignItems: 'center'
    }));
    const PickersToolbarPenIconButton = styled$1(IconButton$1, {
      name: 'MuiPickersToolbar',
      slot: 'PenIconButton',
      overridesResolver: (props, styles) => [{
        [`&.${pickersToolbarClasses.penIconButtonLandscape}`]: styles.penIconButtonLandscape
      }, styles.penIconButton]
    })({});

    const getViewTypeIcon = viewType => viewType === 'clock' ? /*#__PURE__*/jsxRuntime.exports.jsx(Clock$1, {
      color: "inherit"
    }) : /*#__PURE__*/jsxRuntime.exports.jsx(Calendar, {
      color: "inherit"
    });

    const PickersToolbar = /*#__PURE__*/React__namespace.forwardRef(function PickersToolbar(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiPickersToolbar'
      });
      const {
        children,
        className,
        getMobileKeyboardInputViewButtonText,
        isLandscape,
        isMobileKeyboardViewOpen,
        landscapeDirection = 'column',
        toggleMobileKeyboardView,
        toolbarTitle,
        viewType = 'calendar'
      } = props;
      const ownerState = props;
      const localeText = useLocaleText();
      const classes = useUtilityClasses$8(ownerState);
      return /*#__PURE__*/jsxRuntime.exports.jsxs(PickersToolbarRoot, {
        ref: ref,
        className: clsx(classes.root, className),
        ownerState: ownerState,
        children: [/*#__PURE__*/jsxRuntime.exports.jsx(Typography$1, {
          color: "text.secondary",
          variant: "overline",
          children: toolbarTitle
        }), /*#__PURE__*/jsxRuntime.exports.jsxs(PickersToolbarContent, {
          container: true,
          justifyContent: "space-between",
          className: classes.content,
          ownerState: ownerState,
          direction: isLandscape ? landscapeDirection : 'row',
          alignItems: isLandscape ? 'flex-start' : 'flex-end',
          children: [children, /*#__PURE__*/jsxRuntime.exports.jsx(PickersToolbarPenIconButton, {
            onClick: toggleMobileKeyboardView,
            className: classes.penIconButton,
            ownerState: ownerState,
            color: "inherit",
            "aria-label": getMobileKeyboardInputViewButtonText ? getMobileKeyboardInputViewButtonText(isMobileKeyboardViewOpen, viewType) : localeText.inputModeToggleButtonAriaLabel(isMobileKeyboardViewOpen, viewType),
            children: isMobileKeyboardViewOpen ? getViewTypeIcon(viewType) : /*#__PURE__*/jsxRuntime.exports.jsx(Pen, {
              color: "inherit"
            })
          })]
        })]
      });
    });

    function getDatePickerToolbarUtilityClass(slot) {
      return generateUtilityClass('MuiDatePickerToolbar', slot);
    }
    generateUtilityClasses('MuiDatePickerToolbar', ['root', 'title']);

    const _excluded$j = ["parsedValue", "isLandscape", "isMobileKeyboardViewOpen", "onChange", "toggleMobileKeyboardView", "toolbarFormat", "toolbarPlaceholder", "toolbarTitle", "views"];

    const useUtilityClasses$7 = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        title: ['title']
      };
      return composeClasses(slots, getDatePickerToolbarUtilityClass, classes);
    };

    const DatePickerToolbarRoot = styled$1(PickersToolbar, {
      name: 'MuiDatePickerToolbar',
      slot: 'Root',
      overridesResolver: (_, styles) => styles.root
    })({});
    const DatePickerToolbarTitle = styled$1(Typography$1, {
      name: 'MuiDatePickerToolbar',
      slot: 'Title',
      overridesResolver: (_, styles) => styles.title
    })(({
      ownerState
    }) => _extends({}, ownerState.isLandscape && {
      margin: 'auto 16px auto auto'
    }));

    /**
     * @ignore - internal component.
     */
    const DatePickerToolbar = /*#__PURE__*/React__namespace.forwardRef(function DatePickerToolbar(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiDatePickerToolbar'
      });

      const {
        parsedValue,
        isLandscape,
        isMobileKeyboardViewOpen,
        toggleMobileKeyboardView,
        toolbarFormat,
        toolbarPlaceholder = '––',
        toolbarTitle: toolbarTitleProp,
        views
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$j);

      const utils = useUtils();
      const localeText = useLocaleText();
      const classes = useUtilityClasses$7(props);
      const toolbarTitle = toolbarTitleProp != null ? toolbarTitleProp : localeText.datePickerDefaultToolbarTitle;
      const dateText = React__namespace.useMemo(() => {
        if (!parsedValue) {
          return toolbarPlaceholder;
        }

        if (toolbarFormat) {
          return utils.formatByString(parsedValue, toolbarFormat);
        }

        if (isYearOnlyView(views)) {
          return utils.format(parsedValue, 'year');
        }

        if (isYearAndMonthViews(views)) {
          return utils.format(parsedValue, 'month');
        } // Little localization hack (Google is doing the same for android native pickers):
        // For english localization it is convenient to include weekday into the date "Mon, Jun 1".
        // For other locales using strings like "June 1", without weekday.


        return /en/.test(utils.getCurrentLocaleCode()) ? utils.format(parsedValue, 'normalDateWithWeekday') : utils.format(parsedValue, 'normalDate');
      }, [parsedValue, toolbarFormat, toolbarPlaceholder, utils, views]);
      const ownerState = props;
      return /*#__PURE__*/jsxRuntime.exports.jsx(DatePickerToolbarRoot, _extends({
        ref: ref,
        toolbarTitle: toolbarTitle,
        isMobileKeyboardViewOpen: isMobileKeyboardViewOpen,
        toggleMobileKeyboardView: toggleMobileKeyboardView,
        isLandscape: isLandscape,
        className: classes.root
      }, other, {
        children: /*#__PURE__*/jsxRuntime.exports.jsx(DatePickerToolbarTitle, {
          variant: "h4",
          align: isLandscape ? 'left' : 'center',
          ownerState: ownerState,
          className: classes.title,
          children: dateText
        })
      }));
    });

    const _excluded$i = ["onAccept", "onClear", "onCancel", "onSetToday", "actions"];
    const PickersActionBar = props => {
      const {
        onAccept,
        onClear,
        onCancel,
        onSetToday,
        actions
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$i);

      const wrapperVariant = React__namespace.useContext(WrapperVariantContext);
      const localeText = useLocaleText();
      const actionsArray = typeof actions === 'function' ? actions(wrapperVariant) : actions;

      if (actionsArray == null || actionsArray.length === 0) {
        return null;
      }

      const buttons = actionsArray == null ? void 0 : actionsArray.map(actionType => {
        switch (actionType) {
          case 'clear':
            return /*#__PURE__*/jsxRuntime.exports.jsx(Button$1, {
              onClick: onClear,
              children: localeText.clearButtonLabel
            }, actionType);

          case 'cancel':
            return /*#__PURE__*/jsxRuntime.exports.jsx(Button$1, {
              onClick: onCancel,
              children: localeText.cancelButtonLabel
            }, actionType);

          case 'accept':
            return /*#__PURE__*/jsxRuntime.exports.jsx(Button$1, {
              onClick: onAccept,
              children: localeText.okButtonLabel
            }, actionType);

          case 'today':
            return /*#__PURE__*/jsxRuntime.exports.jsx(Button$1, {
              onClick: onSetToday,
              children: localeText.todayButtonLabel
            }, actionType);

          default:
            return null;
        }
      });
      return /*#__PURE__*/jsxRuntime.exports.jsx(DialogActions$1, _extends({}, other, {
        children: buttons
      }));
    };

    function getPickersPopperUtilityClass(slot) {
      return generateUtilityClass('MuiPickersPopper', slot);
    }
    generateUtilityClasses('MuiPickersPopper', ['root', 'paper']);

    const _excluded$h = ["onClick", "onTouchStart"];

    const useUtilityClasses$6 = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        paper: ['paper']
      };
      return composeClasses(slots, getPickersPopperUtilityClass, classes);
    };

    const PickersPopperRoot = styled$1(Popper$1, {
      name: 'MuiPickersPopper',
      slot: 'Root',
      overridesResolver: (_, styles) => styles.root
    })(({
      theme
    }) => ({
      zIndex: theme.zIndex.modal
    }));
    const PickersPopperPaper = styled$1(Paper$1, {
      name: 'MuiPickersPopper',
      slot: 'Paper',
      overridesResolver: (_, styles) => styles.paper
    })(({
      ownerState
    }) => _extends({
      transformOrigin: 'top center',
      outline: 0
    }, ownerState.placement === 'top' && {
      transformOrigin: 'bottom center'
    }));

    function clickedRootScrollbar(event, doc) {
      return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
    }

    /**
     * Based on @mui/material/ClickAwayListener without the customization.
     * We can probably strip away even more since children won't be portaled.
     * @param {boolean} active Only listen to clicks when the popper is opened.
     * @param {(event: MouseEvent | TouchEvent) => void} onClickAway The callback to call when clicking outside the popper.
     * @returns {Array} The ref and event handler to listen to the outside clicks.
     */
    function useClickAwayListener(active, onClickAway) {
      const movedRef = React__namespace.useRef(false);
      const syntheticEventRef = React__namespace.useRef(false);
      const nodeRef = React__namespace.useRef(null);
      const activatedRef = React__namespace.useRef(false);
      React__namespace.useEffect(() => {
        if (!active) {
          return undefined;
        } // Ensure that this hook is not "activated" synchronously.
        // https://github.com/facebook/react/issues/20074


        function armClickAwayListener() {
          activatedRef.current = true;
        }

        document.addEventListener('mousedown', armClickAwayListener, true);
        document.addEventListener('touchstart', armClickAwayListener, true);
        return () => {
          document.removeEventListener('mousedown', armClickAwayListener, true);
          document.removeEventListener('touchstart', armClickAwayListener, true);
          activatedRef.current = false;
        };
      }, [active]); // The handler doesn't take event.defaultPrevented into account:
      //
      // event.preventDefault() is meant to stop default behaviors like
      // clicking a checkbox to check it, hitting a button to submit a form,
      // and hitting left arrow to move the cursor in a text input etc.
      // Only special HTML elements have these default behaviors.

      const handleClickAway = useEventCallback(event => {
        if (!activatedRef.current) {
          return;
        } // Given developers can stop the propagation of the synthetic event,
        // we can only be confident with a positive value.


        const insideReactTree = syntheticEventRef.current;
        syntheticEventRef.current = false;
        const doc = ownerDocument(nodeRef.current); // 1. IE11 support, which trigger the handleClickAway even after the unbind
        // 2. The child might render null.
        // 3. Behave like a blur listener.

        if (!nodeRef.current || // is a TouchEvent?
        'clientX' in event && clickedRootScrollbar(event, doc)) {
          return;
        } // Do not act if user performed touchmove


        if (movedRef.current) {
          movedRef.current = false;
          return;
        }

        let insideDOM; // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js

        if (event.composedPath) {
          insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
        } else {
          insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
        }

        if (!insideDOM && !insideReactTree) {
          onClickAway(event);
        }
      }); // Keep track of mouse/touch events that bubbled up through the portal.

      const handleSynthetic = () => {
        syntheticEventRef.current = true;
      };

      React__namespace.useEffect(() => {
        if (active) {
          const doc = ownerDocument(nodeRef.current);

          const handleTouchMove = () => {
            movedRef.current = true;
          };

          doc.addEventListener('touchstart', handleClickAway);
          doc.addEventListener('touchmove', handleTouchMove);
          return () => {
            doc.removeEventListener('touchstart', handleClickAway);
            doc.removeEventListener('touchmove', handleTouchMove);
          };
        }

        return undefined;
      }, [active, handleClickAway]);
      React__namespace.useEffect(() => {
        // TODO This behavior is not tested automatically
        // It's unclear whether this is due to different update semantics in test (batched in act() vs discrete on click).
        // Or if this is a timing related issues due to different Transition components
        // Once we get rid of all the manual scheduling (e.g. setTimeout(update, 0)) we can revisit this code+test.
        if (active) {
          const doc = ownerDocument(nodeRef.current);
          doc.addEventListener('click', handleClickAway);
          return () => {
            doc.removeEventListener('click', handleClickAway); // cleanup `handleClickAway`

            syntheticEventRef.current = false;
          };
        }

        return undefined;
      }, [active, handleClickAway]);
      return [nodeRef, handleSynthetic, handleSynthetic];
    }

    function PickersPopper(inProps) {
      var _components$ActionBar;

      const props = useThemeProps({
        props: inProps,
        name: 'MuiPickersPopper'
      });
      const {
        anchorEl,
        children,
        containerRef = null,
        onBlur,
        onClose,
        onClear,
        onAccept,
        onCancel,
        onSetToday,
        open,
        PopperProps,
        role,
        TransitionComponent = Grow$1,
        TrapFocusProps,
        PaperProps = {},
        components,
        componentsProps
      } = props;
      React__namespace.useEffect(() => {
        function handleKeyDown(nativeEvent) {
          // IE11, Edge (prior to using Bink?) use 'Esc'
          if (open && (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc')) {
            onClose();
          }
        }

        document.addEventListener('keydown', handleKeyDown);
        return () => {
          document.removeEventListener('keydown', handleKeyDown);
        };
      }, [onClose, open]);
      const lastFocusedElementRef = React__namespace.useRef(null);
      React__namespace.useEffect(() => {
        if (role === 'tooltip') {
          return;
        }

        if (open) {
          lastFocusedElementRef.current = getActiveElement(document);
        } else if (lastFocusedElementRef.current && lastFocusedElementRef.current instanceof HTMLElement) {
          // make sure the button is flushed with updated label, before returning focus to it
          // avoids issue, where screen reader could fail to announce selected date after selection
          setTimeout(() => {
            if (lastFocusedElementRef.current instanceof HTMLElement) {
              lastFocusedElementRef.current.focus();
            }
          });
        }
      }, [open, role]);
      const [clickAwayRef, onPaperClick, onPaperTouchStart] = useClickAwayListener(open, onBlur != null ? onBlur : onClose);
      const paperRef = React__namespace.useRef(null);
      const handleRef = useForkRef(paperRef, containerRef);
      const handlePaperRef = useForkRef(handleRef, clickAwayRef);
      const ownerState = props;
      const classes = useUtilityClasses$6(ownerState);

      const {
        onClick: onPaperClickProp,
        onTouchStart: onPaperTouchStartProp
      } = PaperProps,
            otherPaperProps = _objectWithoutPropertiesLoose(PaperProps, _excluded$h);

      const handleKeyDown = event => {
        if (event.key === 'Escape') {
          // stop the propagation to avoid closing parent modal
          event.stopPropagation();
          onClose();
        }
      };

      const ActionBar = (_components$ActionBar = components == null ? void 0 : components.ActionBar) != null ? _components$ActionBar : PickersActionBar;
      const PaperContent = (components == null ? void 0 : components.PaperContent) || React__namespace.Fragment;
      return /*#__PURE__*/jsxRuntime.exports.jsx(PickersPopperRoot, _extends({
        transition: true,
        role: role,
        open: open,
        anchorEl: anchorEl,
        onKeyDown: handleKeyDown,
        className: classes.root
      }, PopperProps, {
        children: ({
          TransitionProps,
          placement
        }) => /*#__PURE__*/jsxRuntime.exports.jsx(FocusTrap, _extends({
          open: open,
          disableAutoFocus: true // pickers are managing focus position manually
          // without this prop the focus is returned to the button before `aria-label` is updated
          // which would force screen readers to read too old label
          ,
          disableRestoreFocus: true,
          disableEnforceFocus: role === 'tooltip',
          isEnabled: () => true
        }, TrapFocusProps, {
          children: /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({}, TransitionProps, {
            children: /*#__PURE__*/jsxRuntime.exports.jsx(PickersPopperPaper, _extends({
              tabIndex: -1,
              elevation: 8,
              ref: handlePaperRef,
              onClick: event => {
                onPaperClick(event);

                if (onPaperClickProp) {
                  onPaperClickProp(event);
                }
              },
              onTouchStart: event => {
                onPaperTouchStart(event);

                if (onPaperTouchStartProp) {
                  onPaperTouchStartProp(event);
                }
              },
              ownerState: _extends({}, ownerState, {
                placement
              }),
              className: classes.paper
            }, otherPaperProps, {
              children: /*#__PURE__*/jsxRuntime.exports.jsxs(PaperContent, _extends({}, componentsProps == null ? void 0 : componentsProps.paperContent, {
                children: [children, /*#__PURE__*/jsxRuntime.exports.jsx(ActionBar, _extends({
                  onAccept: onAccept,
                  onClear: onClear,
                  onCancel: onCancel,
                  onSetToday: onSetToday,
                  actions: []
                }, componentsProps == null ? void 0 : componentsProps.actionBar))]
              }))
            }))
          }))
        }))
      }));
    }

    function DesktopWrapper(props) {
      const {
        children,
        DateInputProps,
        KeyboardDateInputComponent,
        onClear,
        onDismiss,
        onCancel,
        onAccept,
        onSetToday,
        open,
        PopperProps,
        PaperProps,
        TransitionComponent,
        components,
        componentsProps
      } = props;
      const ownInputRef = React__namespace.useRef(null);
      const inputRef = useForkRef(DateInputProps.inputRef, ownInputRef);
      return /*#__PURE__*/jsxRuntime.exports.jsxs(WrapperVariantContext.Provider, {
        value: "desktop",
        children: [/*#__PURE__*/jsxRuntime.exports.jsx(KeyboardDateInputComponent, _extends({}, DateInputProps, {
          inputRef: inputRef
        })), /*#__PURE__*/jsxRuntime.exports.jsx(PickersPopper, {
          role: "dialog",
          open: open,
          anchorEl: ownInputRef.current,
          TransitionComponent: TransitionComponent,
          PopperProps: PopperProps,
          PaperProps: PaperProps,
          onClose: onDismiss,
          onCancel: onCancel,
          onClear: onClear,
          onAccept: onAccept,
          onSetToday: onSetToday,
          components: components,
          componentsProps: componentsProps,
          children: children
        })]
      });
    }

    const useRifm = props => {
      const [, refresh] = React.useReducer(c => c + 1, 0);
      const valueRef = React.useRef(null);
      const {
        replace,
        append
      } = props;
      const userValue = replace ? replace(props.format(props.value)) : props.format(props.value); // state of delete button see comments below about inputType support

      const isDeleleteButtonDownRef = React.useRef(false);

      const onChange = evt => {
        {
          if (evt.target.type === 'number') {
            console.error('Rifm does not support input type=number, use type=tel instead.');
            return;
          }

          if (evt.target.type === 'date') {
            console.error('Rifm does not support input type=date.');
            return;
          }
        }

        const eventValue = evt.target.value;
        valueRef.current = [eventValue, // eventValue
        evt.target, // input
        eventValue.length > userValue.length, // isSizeIncreaseOperation
        isDeleleteButtonDownRef.current, // isDeleleteButtonDown
        userValue === props.format(eventValue) // isNoOperation
        ];

        {
          const formattedEventValue = props.format(eventValue);

          if (eventValue !== formattedEventValue && eventValue.toLowerCase() === formattedEventValue.toLowerCase()) {
            console.warn('Case enforcement does not work with format. Please use replace={value => value.toLowerCase()} instead');
          }
        } // The main trick is to update underlying input with non formatted value (= eventValue)
        // that allows us to calculate right cursor position after formatting (see getCursorPosition)
        // then we format new value and call props.onChange with masked/formatted value
        // and finally we are able to set cursor position into right place


        refresh();
      }; // React prints warn on server in non production mode about useLayoutEffect usage
      // in both cases it's noop


      if (typeof window !== 'undefined') {
        React.useLayoutEffect(() => {
          if (valueRef.current == null) return;
          let [eventValue, input, isSizeIncreaseOperation, isDeleleteButtonDown, // No operation means that value itself hasn't been changed, BTW cursor, selection etc can be changed
          isNoOperation] = valueRef.current;
          valueRef.current = null; // this usually occurs on deleting special symbols like ' here 123'123.00
          // in case of isDeleleteButtonDown cursor should move differently vs backspace

          const deleteWasNoOp = isDeleleteButtonDown && isNoOperation;
          const valueAfterSelectionStart = eventValue.slice(input.selectionStart);
          const acceptedCharIndexAfterDelete = valueAfterSelectionStart.search(props.accept || /\d/g);
          const charsToSkipAfterDelete = acceptedCharIndexAfterDelete !== -1 ? acceptedCharIndexAfterDelete : 0; // Create string from only accepted symbols

          const clean = str => (str.match(props.accept || /\d/g) || []).join('');

          const valueBeforeSelectionStart = clean(eventValue.substr(0, input.selectionStart)); // trying to find cursor position in formatted value having knowledge about valueBeforeSelectionStart
          // This works because we assume that format doesn't change the order of accepted symbols.
          // Imagine we have formatter which adds ' symbol between numbers, and by default we refuse all non numeric symbols
          // for example we had input = 1'2|'4 (| means cursor position) then user entered '3' symbol
          // inputValue = 1'23'|4 so valueBeforeSelectionStart = 123 and formatted value = 1'2'3'4
          // calling getCursorPosition("1'2'3'4") will give us position after 3, 1'2'3|'4
          // so for formatting just this function to determine cursor position after formatting is enough
          // with masking we need to do some additional checks see `mask` below

          const getCursorPosition = val => {
            let start = 0;
            let cleanPos = 0;

            for (let i = 0; i !== valueBeforeSelectionStart.length; ++i) {
              let newPos = val.indexOf(valueBeforeSelectionStart[i], start) + 1;
              let newCleanPos = clean(val).indexOf(valueBeforeSelectionStart[i], cleanPos) + 1; // this skips position change if accepted symbols order was broken
              // For example fixes edge case with fixed point numbers:
              // You have '0|.00', then press 1, it becomes 01|.00 and after format 1.00, this breaks our assumption
              // that order of accepted symbols is not changed after format,
              // so here we don't update start position if other accepted symbols was inbetween current and new position

              if (newCleanPos - cleanPos > 1) {
                newPos = start;
                newCleanPos = cleanPos;
              }

              cleanPos = Math.max(newCleanPos, cleanPos);
              start = Math.max(start, newPos);
            }

            return start;
          }; // Masking part, for masks if size of mask is above some value
          // we need to replace symbols instead of do nothing as like in format


          if (props.mask === true && isSizeIncreaseOperation && !isNoOperation) {
            let start = getCursorPosition(eventValue);
            const c = clean(eventValue.substr(start))[0];
            start = eventValue.indexOf(c, start);
            eventValue = `${eventValue.substr(0, start)}${eventValue.substr(start + 1)}`;
          }

          let formattedValue = props.format(eventValue);

          if (append != null && // cursor at the end
          input.selectionStart === eventValue.length && !isNoOperation) {
            if (isSizeIncreaseOperation) {
              formattedValue = append(formattedValue);
            } else {
              // If after delete last char is special character and we use append
              // delete it too
              // was: "12-3|" backspace pressed, then should be "12|"
              if (clean(formattedValue.slice(-1)) === '') {
                formattedValue = formattedValue.slice(0, -1);
              }
            }
          }

          const replacedValue = replace ? replace(formattedValue) : formattedValue;

          if (userValue === replacedValue) {
            // if nothing changed for formatted value, just refresh so userValue will be used at render
            refresh();
          } else {
            props.onChange(replacedValue);
          }

          return () => {
            let start = getCursorPosition(formattedValue); // Visually improves working with masked values,
            // like cursor jumping over refused symbols
            // as an example date mask: was "5|1-24-3" then user pressed "6"
            // it becomes "56-|12-43" with this code, and "56|-12-43" without

            if (props.mask != null && (isSizeIncreaseOperation || isDeleleteButtonDown && !deleteWasNoOp)) {
              while (formattedValue[start] && clean(formattedValue[start]) === '') {
                start += 1;
              }
            }

            input.selectionStart = input.selectionEnd = start + (deleteWasNoOp ? 1 + charsToSkipAfterDelete : 0);
          };
        });
      }

      React.useEffect(() => {
        // until https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/inputType will be supported
        // by all major browsers (now supported by: +chrome, +safari, ?edge, !firefox)
        // there is no way I found to distinguish in onChange
        // backspace or delete was called in some situations
        // firefox track https://bugzilla.mozilla.org/show_bug.cgi?id=1447239
        const handleKeyDown = evt => {
          if (evt.code === 'Delete') {
            isDeleleteButtonDownRef.current = true;
          }
        };

        const handleKeyUp = evt => {
          if (evt.code === 'Delete') {
            isDeleleteButtonDownRef.current = false;
          }
        };

        document.addEventListener('keydown', handleKeyDown);
        document.addEventListener('keyup', handleKeyUp);
        return () => {
          document.removeEventListener('keydown', handleKeyDown);
          document.removeEventListener('keyup', handleKeyUp);
        };
      }, []);
      return {
        value: valueRef.current != null ? valueRef.current[0] : userValue,
        onChange
      };
    };

    const getDisplayDate = (utils, rawValue, inputFormat) => {
      const date = utils.date(rawValue);
      const isEmpty = rawValue === null;

      if (isEmpty) {
        return '';
      }

      return utils.isValid(date) ? utils.formatByString( // TODO: should `isValid` narrow `TDate | null` to `NonNullable<TDate>`?
      // Either we allow `TDate | null` to be valid and guard against calling `formatByString` with `null`.
      // Or we ensure `formatByString` is callable with `null`.
      date, inputFormat) : '';
    };
    const MASK_USER_INPUT_SYMBOL = '_';
    const staticDateWith2DigitTokens = '2019-11-21T22:30:00.000';
    const staticDateWith1DigitTokens = '2019-01-01T09:00:00.000';
    function getMaskFromCurrentFormat(mask, format, acceptRegex, utils) {
      if (mask) {
        return mask;
      }

      const formattedDateWith1Digit = utils.formatByString(utils.date(staticDateWith1DigitTokens), format);
      const inferredFormatPatternWith1Digits = formattedDateWith1Digit.replace(acceptRegex, MASK_USER_INPUT_SYMBOL);
      const inferredFormatPatternWith2Digits = utils.formatByString(utils.date(staticDateWith2DigitTokens), format).replace(acceptRegex, '_');

      if (inferredFormatPatternWith1Digits === inferredFormatPatternWith2Digits) {
        return inferredFormatPatternWith1Digits;
      }

      {
        console.warn([`Mask does not support numbers with variable length such as 'M'.`, `Either use numbers with fix length or disable mask feature with 'disableMaskedInput' prop`, `Falling down to uncontrolled no-mask input.`].join('\n'));
      }

      return '';
    }
    function checkMaskIsValidForCurrentFormat(mask, format, acceptRegex, utils) {
      if (!mask) {
        return false;
      }

      const formattedDateWith1Digit = utils.formatByString(utils.date(staticDateWith1DigitTokens), format);
      const inferredFormatPatternWith1Digits = formattedDateWith1Digit.replace(acceptRegex, MASK_USER_INPUT_SYMBOL);
      const inferredFormatPatternWith2Digits = utils.formatByString(utils.date(staticDateWith2DigitTokens), format).replace(acceptRegex, '_');
      const isMaskValid = inferredFormatPatternWith2Digits === inferredFormatPatternWith1Digits && mask === inferredFormatPatternWith2Digits;

      if (!isMaskValid && utils.lib !== 'luxon' && "development" !== 'production') {
        if (format.includes('MMM')) {
          console.warn([`Mask does not support literals such as 'MMM'.`, `Either use numbers with fix length or disable mask feature with 'disableMaskedInput' prop`, `Falling down to uncontrolled no-mask input.`].join('\n'));
        } else if (inferredFormatPatternWith2Digits && inferredFormatPatternWith2Digits !== inferredFormatPatternWith1Digits) {
          console.warn([`Mask does not support numbers with variable length such as 'M'.`, `Either use numbers with fix length or disable mask feature with 'disableMaskedInput' prop`, `Falling down to uncontrolled no-mask input.`].join('\n'));
        } else if (mask) {
          console.warn([`The mask "${mask}" you passed is not valid for the format used ${format}.`, `Falling down to uncontrolled no-mask input.`].join('\n'));
        }
      }

      return isMaskValid;
    }
    const maskedDateFormatter = (mask, acceptRegexp) => value => {
      let outputCharIndex = 0;
      return value.split('').map((char, inputCharIndex) => {
        acceptRegexp.lastIndex = 0;

        if (outputCharIndex > mask.length - 1) {
          return '';
        }

        const maskChar = mask[outputCharIndex];
        const nextMaskChar = mask[outputCharIndex + 1];
        const acceptedChar = acceptRegexp.test(char) ? char : '';
        const formattedChar = maskChar === MASK_USER_INPUT_SYMBOL ? acceptedChar : maskChar + acceptedChar;
        outputCharIndex += formattedChar.length;
        const isLastCharacter = inputCharIndex === value.length - 1;

        if (isLastCharacter && nextMaskChar && nextMaskChar !== MASK_USER_INPUT_SYMBOL) {
          // when cursor at the end of mask part (e.g. month) prerender next symbol "21" -> "21/"
          return formattedChar ? formattedChar + nextMaskChar : '';
        }

        return formattedChar;
      }).join('');
    };

    const useMaskedInput = ({
      acceptRegex = /[\d]/gi,
      disabled,
      disableMaskedInput,
      ignoreInvalidInputs,
      inputFormat,
      inputProps,
      label,
      mask,
      onChange,
      rawValue,
      readOnly,
      rifmFormatter,
      TextFieldProps,
      validationError
    }) => {
      const utils = useUtils();
      const formatHelperText = utils.getFormatHelperText(inputFormat);
      const {
        shouldUseMaskedInput,
        maskToUse
      } = React__namespace.useMemo(() => {
        // formatting of dates is a quite slow thing, so do not make useless .format calls
        if (disableMaskedInput) {
          return {
            shouldUseMaskedInput: false,
            maskToUse: ''
          };
        }

        const computedMaskToUse = getMaskFromCurrentFormat(mask, inputFormat, acceptRegex, utils);
        return {
          shouldUseMaskedInput: checkMaskIsValidForCurrentFormat(computedMaskToUse, inputFormat, acceptRegex, utils),
          maskToUse: computedMaskToUse
        };
      }, [acceptRegex, disableMaskedInput, inputFormat, mask, utils]);
      const formatter = React__namespace.useMemo(() => shouldUseMaskedInput && maskToUse ? maskedDateFormatter(maskToUse, acceptRegex) : st => st, [acceptRegex, maskToUse, shouldUseMaskedInput]); // TODO: Implement with controlled vs uncontrolled `rawValue`

      const parsedValue = rawValue === null ? null : utils.date(rawValue); // Track the value of the input

      const [innerInputValue, setInnerInputValue] = React__namespace.useState(parsedValue); // control the input text

      const [innerDisplayedInputValue, setInnerDisplayedInputValue] = React__namespace.useState(getDisplayDate(utils, rawValue, inputFormat)); // Inspired from autocomplete: https://github.com/mui/material-ui/blob/2c89d036dc2e16f100528f161600dffc83241768/packages/mui-base/src/AutocompleteUnstyled/useAutocomplete.js#L185:L201

      const prevRawValue = React__namespace.useRef();
      const prevLocale = React__namespace.useRef(utils.locale);
      const prevInputFormat = React__namespace.useRef(inputFormat);
      React__namespace.useEffect(() => {
        const rawValueHasChanged = rawValue !== prevRawValue.current;
        const localeHasChanged = utils.locale !== prevLocale.current;
        const inputFormatHasChanged = inputFormat !== prevInputFormat.current;
        prevRawValue.current = rawValue;
        prevLocale.current = utils.locale;
        prevInputFormat.current = inputFormat;

        if (!rawValueHasChanged && !localeHasChanged && !inputFormatHasChanged) {
          return;
        }

        const newParsedValue = rawValue === null ? null : utils.date(rawValue);
        const isAcceptedValue = rawValue === null || utils.isValid(newParsedValue);
        const innerEqualsParsed = innerInputValue === null ? newParsedValue === null : newParsedValue !== null && Math.abs(utils.getDiff(innerInputValue, newParsedValue, 'seconds')) === 0;

        if (!localeHasChanged && !inputFormatHasChanged && (!isAcceptedValue || innerEqualsParsed)) {
          return;
        } // When dev set a new valid value, we trust them


        const newDisplayDate = getDisplayDate(utils, rawValue, inputFormat);
        setInnerInputValue(newParsedValue);
        setInnerDisplayedInputValue(newDisplayDate);
      }, [utils, rawValue, inputFormat, innerInputValue]);

      const handleChange = text => {
        const finalString = text === '' || text === mask ? '' : text;
        setInnerDisplayedInputValue(finalString);
        const date = finalString === null ? null : utils.parse(finalString, inputFormat);

        if (ignoreInvalidInputs && !utils.isValid(date)) {
          return;
        }

        setInnerInputValue(date);
        onChange(date, finalString || undefined);
      };

      const rifmProps = useRifm({
        value: innerDisplayedInputValue,
        onChange: handleChange,
        format: rifmFormatter || formatter
      });
      const inputStateArgs = shouldUseMaskedInput ? rifmProps : {
        value: innerDisplayedInputValue,
        onChange: event => {
          handleChange(event.currentTarget.value);
        }
      };
      return _extends({
        label,
        disabled,
        error: validationError,
        inputProps: _extends({}, inputStateArgs, {
          disabled,
          placeholder: formatHelperText,
          readOnly,
          type: shouldUseMaskedInput ? 'tel' : 'text'
        }, inputProps)
      }, TextFieldProps);
    };

    const _excluded$g = ["className", "components", "disableOpenPicker", "getOpenDialogAriaText", "InputAdornmentProps", "InputProps", "inputRef", "openPicker", "OpenPickerButtonProps", "renderInput"];
    const KeyboardDateInput = /*#__PURE__*/React__namespace.forwardRef(function KeyboardDateInput(props, ref) {
      const {
        className,
        components = {},
        disableOpenPicker,
        getOpenDialogAriaText: getOpenDialogAriaTextProp,
        InputAdornmentProps,
        InputProps,
        inputRef,
        openPicker,
        OpenPickerButtonProps,
        renderInput
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$g);

      const localeText = useLocaleText();
      const getOpenDialogAriaText = getOpenDialogAriaTextProp != null ? getOpenDialogAriaTextProp : localeText.openDatePickerDialogue;
      const utils = useUtils();
      const textFieldProps = useMaskedInput(other);
      const adornmentPosition = (InputAdornmentProps == null ? void 0 : InputAdornmentProps.position) || 'end';
      const OpenPickerIcon = components.OpenPickerIcon || Calendar;
      return renderInput(_extends({
        ref,
        inputRef,
        className
      }, textFieldProps, {
        InputProps: _extends({}, InputProps, {
          [`${adornmentPosition}Adornment`]: disableOpenPicker ? undefined : /*#__PURE__*/jsxRuntime.exports.jsx(InputAdornment$1, _extends({
            position: adornmentPosition
          }, InputAdornmentProps, {
            children: /*#__PURE__*/jsxRuntime.exports.jsx(IconButton$1, _extends({
              edge: adornmentPosition,
              disabled: other.disabled || other.readOnly,
              "aria-label": getOpenDialogAriaText(other.rawValue, utils)
            }, OpenPickerButtonProps, {
              onClick: openPicker,
              children: /*#__PURE__*/jsxRuntime.exports.jsx(OpenPickerIcon, {})
            }))
          }))
        })
      }));
    });

    function getOrientation() {
      if (typeof window === 'undefined') {
        return 'portrait';
      }

      if (window.screen && window.screen.orientation && window.screen.orientation.angle) {
        return Math.abs(window.screen.orientation.angle) === 90 ? 'landscape' : 'portrait';
      } // Support IOS safari


      if (window.orientation) {
        return Math.abs(Number(window.orientation)) === 90 ? 'landscape' : 'portrait';
      }

      return 'portrait';
    }

    const useIsLandscape = (views, customOrientation) => {
      const [orientation, setOrientation] = React__namespace.useState(getOrientation);
      useEnhancedEffect$1(() => {
        const eventHandler = () => {
          setOrientation(getOrientation());
        };

        window.addEventListener('orientationchange', eventHandler);
        return () => {
          window.removeEventListener('orientationchange', eventHandler);
        };
      }, []);

      if (arrayIncludes(views, ['hours', 'minutes', 'seconds'])) {
        // could not display 13:34:44 in landscape mode
        return false;
      }

      const orientationToUse = customOrientation || orientation;
      return orientationToUse === 'landscape';
    };

    const useFocusManagement = ({
      autoFocus,
      openView
    }) => {
      const [focusedView, setFocusedView] = React__namespace.useState(autoFocus ? openView : null);
      const setFocusedViewCallback = React__namespace.useCallback(view => newHasFocus => {
        if (newHasFocus) {
          setFocusedView(view);
        } else {
          setFocusedView(prevFocusedView => view === prevFocusedView ? null : prevFocusedView);
        }
      }, []);
      return {
        focusedView,
        setFocusedView: setFocusedViewCallback
      };
    };

    function getCalendarOrClockPickerUtilityClass(slot) {
      return generateUtilityClass('MuiCalendarOrClockPicker', slot);
    }
    generateUtilityClasses('MuiCalendarOrClockPicker', ['root', 'mobileKeyboardInputView']);

    const _excluded$f = ["autoFocus", "className", "parsedValue", "DateInputProps", "isMobileKeyboardViewOpen", "onDateChange", "onViewChange", "openTo", "orientation", "showToolbar", "toggleMobileKeyboardView", "ToolbarComponent", "toolbarFormat", "toolbarPlaceholder", "toolbarTitle", "views", "dateRangeIcon", "timeIcon", "hideTabs", "classes"];

    const useUtilityClasses$5 = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        mobileKeyboardInputView: ['mobileKeyboardInputView']
      };
      return composeClasses(slots, getCalendarOrClockPickerUtilityClass, classes);
    };

    const MobileKeyboardInputView = styled$1('div', {
      name: 'MuiCalendarOrClockPicker',
      slot: 'MobileKeyboardInputView',
      overridesResolver: (_, styles) => styles.mobileKeyboardInputView
    })({
      padding: '16px 24px'
    });
    const PickerRoot = styled$1('div', {
      name: 'MuiCalendarOrClockPicker',
      slot: 'Root',
      overridesResolver: (_, styles) => styles.root
    })(({
      ownerState
    }) => _extends({
      display: 'flex',
      flexDirection: 'column'
    }, ownerState.isLandscape && {
      flexDirection: 'row'
    }));
    const MobileKeyboardTextFieldProps = {
      fullWidth: true
    };

    const isDatePickerView = view => view === 'year' || view === 'month' || view === 'day';

    const isTimePickerView = view => view === 'hours' || view === 'minutes' || view === 'seconds';

    let warnedOnceNotValidOpenTo = false;
    function CalendarOrClockPicker(inProps) {
      var _other$components, _other$componentsProp;

      const props = useThemeProps({
        props: inProps,
        name: 'MuiCalendarOrClockPicker'
      });

      const {
        autoFocus,
        parsedValue,
        DateInputProps,
        isMobileKeyboardViewOpen,
        onDateChange,
        onViewChange,
        openTo,
        orientation,
        showToolbar,
        toggleMobileKeyboardView,
        ToolbarComponent = () => null,
        toolbarFormat,
        toolbarPlaceholder,
        toolbarTitle,
        views,
        dateRangeIcon,
        timeIcon,
        hideTabs
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$f);

      const TabsComponent = (_other$components = other.components) == null ? void 0 : _other$components.Tabs;
      const isLandscape = useIsLandscape(views, orientation);
      const wrapperVariant = React__namespace.useContext(WrapperVariantContext);
      const classes = useUtilityClasses$5(props);
      const toShowToolbar = showToolbar != null ? showToolbar : wrapperVariant !== 'desktop';
      const showTabs = !hideTabs && typeof window !== 'undefined' && window.innerHeight > 667;
      const handleDateChange = React__namespace.useCallback((newDate, selectionState) => {
        onDateChange(newDate, wrapperVariant, selectionState);
      }, [onDateChange, wrapperVariant]);
      const handleViewChange = React__namespace.useCallback(newView => {
        if (isMobileKeyboardViewOpen) {
          toggleMobileKeyboardView();
        }

        if (onViewChange) {
          onViewChange(newView);
        }
      }, [isMobileKeyboardViewOpen, onViewChange, toggleMobileKeyboardView]);

      {
        if (!warnedOnceNotValidOpenTo && !views.includes(openTo)) {
          console.warn(`MUI: \`openTo="${openTo}"\` is not a valid prop.`, `It must be an element of \`views=["${views.join('", "')}"]\`.`);
          warnedOnceNotValidOpenTo = true;
        }
      }

      const {
        openView,
        setOpenView,
        handleChangeAndOpenNext
      } = useViews({
        view: undefined,
        views,
        openTo,
        onChange: handleDateChange,
        onViewChange: handleViewChange
      });
      const {
        focusedView,
        setFocusedView
      } = useFocusManagement({
        autoFocus,
        openView
      });
      return /*#__PURE__*/jsxRuntime.exports.jsxs(PickerRoot, {
        ownerState: {
          isLandscape
        },
        className: classes.root,
        children: [toShowToolbar && /*#__PURE__*/jsxRuntime.exports.jsx(ToolbarComponent, _extends({}, other, {
          views: views,
          isLandscape: isLandscape,
          parsedValue: parsedValue,
          onChange: handleDateChange,
          setOpenView: setOpenView,
          openView: openView,
          toolbarTitle: toolbarTitle,
          toolbarFormat: toolbarFormat,
          toolbarPlaceholder: toolbarPlaceholder,
          isMobileKeyboardViewOpen: isMobileKeyboardViewOpen,
          toggleMobileKeyboardView: toggleMobileKeyboardView
        })), showTabs && !!TabsComponent && /*#__PURE__*/jsxRuntime.exports.jsx(TabsComponent, _extends({
          dateRangeIcon: dateRangeIcon,
          timeIcon: timeIcon,
          view: openView,
          onChange: setOpenView
        }, (_other$componentsProp = other.componentsProps) == null ? void 0 : _other$componentsProp.tabs)), /*#__PURE__*/jsxRuntime.exports.jsx(PickerViewRoot, {
          children: isMobileKeyboardViewOpen ? /*#__PURE__*/jsxRuntime.exports.jsx(MobileKeyboardInputView, {
            className: classes.mobileKeyboardInputView,
            children: /*#__PURE__*/jsxRuntime.exports.jsx(KeyboardDateInput, _extends({}, DateInputProps, {
              ignoreInvalidInputs: true,
              disableOpenPicker: true,
              TextFieldProps: MobileKeyboardTextFieldProps
            }))
          }) : /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
            children: [isDatePickerView(openView) && /*#__PURE__*/jsxRuntime.exports.jsx(CalendarPicker, _extends({
              autoFocus: autoFocus,
              date: parsedValue,
              onViewChange: setOpenView,
              onChange: handleChangeAndOpenNext,
              view: openView // Unclear why the predicate `isDatePickerView` does not imply the casted type
              ,
              views: views.filter(isDatePickerView),
              focusedView: focusedView,
              onFocusedViewChange: setFocusedView
            }, other)), isTimePickerView(openView) && /*#__PURE__*/jsxRuntime.exports.jsx(ClockPicker, _extends({}, other, {
              autoFocus: autoFocus,
              date: parsedValue,
              view: openView // Unclear why the predicate `isDatePickerView` does not imply the casted type
              ,
              views: views.filter(isTimePickerView),
              onChange: handleChangeAndOpenNext,
              onViewChange: setOpenView,
              showViewSwitcher: wrapperVariant === 'desktop'
            }))]
          })
        })]
      });
    }

    const useOpenState = ({
      open,
      onOpen,
      onClose
    }) => {
      const isControllingOpenProp = React__namespace.useRef(typeof open === 'boolean').current;
      const [openState, setIsOpenState] = React__namespace.useState(false); // It is required to update inner state in useEffect in order to avoid situation when
      // Our component is not mounted yet, but `open` state is set to `true` (e.g. initially opened)

      React__namespace.useEffect(() => {
        if (isControllingOpenProp) {
          if (typeof open !== 'boolean') {
            throw new Error('You must not mix controlling and uncontrolled mode for `open` prop');
          }

          setIsOpenState(open);
        }
      }, [isControllingOpenProp, open]);
      const setIsOpen = React__namespace.useCallback(newIsOpen => {
        if (!isControllingOpenProp) {
          setIsOpenState(newIsOpen);
        }

        if (newIsOpen && onOpen) {
          onOpen();
        }

        if (!newIsOpen && onClose) {
          onClose();
        }
      }, [isControllingOpenProp, onOpen, onClose]);
      return {
        isOpen: openState,
        setIsOpen
      };
    };

    const usePickerState = (props, valueManager) => {
      const {
        onAccept,
        onChange,
        value,
        closeOnSelect
      } = props;
      const utils = useUtils();
      const {
        isOpen,
        setIsOpen
      } = useOpenState(props);
      const parsedDateValue = React__namespace.useMemo(() => valueManager.parseInput(utils, value), [valueManager, utils, value]);
      const [lastValidDateValue, setLastValidDateValue] = React__namespace.useState(parsedDateValue);
      const [dateState, setDateState] = React__namespace.useState(() => ({
        committed: parsedDateValue,
        draft: parsedDateValue,
        resetFallback: parsedDateValue
      }));
      const setDate = React__namespace.useCallback(params => {
        setDateState(prev => {
          switch (params.action) {
            case 'setAll':
            case 'acceptAndClose':
              {
                return {
                  draft: params.value,
                  committed: params.value,
                  resetFallback: params.value
                };
              }

            case 'setCommitted':
              {
                return _extends({}, prev, {
                  draft: params.value,
                  committed: params.value
                });
              }

            case 'setDraft':
              {
                return _extends({}, prev, {
                  draft: params.value
                });
              }

            default:
              {
                return prev;
              }
          }
        });

        if (params.forceOnChangeCall || !params.skipOnChangeCall && !valueManager.areValuesEqual(utils, dateState.committed, params.value)) {
          onChange(params.value);
        }

        if (params.action === 'acceptAndClose') {
          setIsOpen(false);

          if (onAccept && !valueManager.areValuesEqual(utils, dateState.resetFallback, params.value)) {
            onAccept(params.value);
          }
        }
      }, [onAccept, onChange, setIsOpen, dateState, utils, valueManager]);
      React__namespace.useEffect(() => {
        if (utils.isValid(parsedDateValue)) {
          setLastValidDateValue(parsedDateValue);
        }
      }, [utils, parsedDateValue]);
      React__namespace.useEffect(() => {
        if (isOpen) {
          // Update all dates in state to equal the current prop value
          setDate({
            action: 'setAll',
            value: parsedDateValue,
            skipOnChangeCall: true
          });
        }
      }, [isOpen]); // eslint-disable-line react-hooks/exhaustive-deps
      // Set the draft and committed date to equal the new prop value.

      if (!valueManager.areValuesEqual(utils, dateState.committed, parsedDateValue)) {
        setDate({
          action: 'setCommitted',
          value: parsedDateValue,
          skipOnChangeCall: true
        });
      }

      const wrapperProps = React__namespace.useMemo(() => ({
        open: isOpen,
        onClear: () => {
          // Reset all date in state to the empty value and close picker.
          setDate({
            value: valueManager.emptyValue,
            action: 'acceptAndClose',
            // force `onChange` in cases like input (value) === `Invalid date`
            forceOnChangeCall: !valueManager.areValuesEqual(utils, value, valueManager.emptyValue)
          });
        },
        onAccept: () => {
          // Set all date in state to equal the current draft value and close picker.
          setDate({
            value: dateState.draft,
            action: 'acceptAndClose',
            // force `onChange` in cases like input (value) === `Invalid date`
            forceOnChangeCall: !valueManager.areValuesEqual(utils, value, parsedDateValue)
          });
        },
        onDismiss: () => {
          // Set all dates in state to equal the last committed date.
          // e.g. Reset the state to the last committed value.
          setDate({
            value: dateState.committed,
            action: 'acceptAndClose'
          });
        },
        onCancel: () => {
          // Set all dates in state to equal the last accepted date and close picker.
          // e.g. Reset the state to the last accepted value
          setDate({
            value: dateState.resetFallback,
            action: 'acceptAndClose'
          });
        },
        onSetToday: () => {
          // Set all dates in state to equal today and close picker.
          setDate({
            value: valueManager.getTodayValue(utils),
            action: 'acceptAndClose'
          });
        }
      }), [setDate, isOpen, utils, dateState, valueManager, value, parsedDateValue]); // Mobile keyboard view is a special case.
      // When it's open picker should work like closed, because we are just showing text field

      const [isMobileKeyboardViewOpen, setMobileKeyboardViewOpen] = React__namespace.useState(false);
      const pickerProps = React__namespace.useMemo(() => ({
        parsedValue: dateState.draft,
        isMobileKeyboardViewOpen,
        toggleMobileKeyboardView: () => setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen),
        onDateChange: (newDate, wrapperVariant, selectionState = 'partial') => {
          switch (selectionState) {
            case 'shallow':
              {
                // Update the `draft` state but do not fire `onChange`
                return setDate({
                  action: 'setDraft',
                  value: newDate,
                  skipOnChangeCall: true
                });
              }

            case 'partial':
              {
                // Update the `draft` state and fire `onChange`
                return setDate({
                  action: 'setDraft',
                  value: newDate
                });
              }

            case 'finish':
              {
                if (closeOnSelect != null ? closeOnSelect : wrapperVariant === 'desktop') {
                  // Set all dates in state to equal the new date and close picker.
                  return setDate({
                    value: newDate,
                    action: 'acceptAndClose'
                  });
                } // Updates the `committed` state and fire `onChange`


                return setDate({
                  value: newDate,
                  action: 'setCommitted'
                });
              }

            default:
              {
                throw new Error('MUI: Invalid selectionState passed to `onDateChange`');
              }
          }
        }
      }), [setDate, isMobileKeyboardViewOpen, dateState.draft, closeOnSelect]);
      const handleInputChange = React__namespace.useCallback((newParsedValue, keyboardInputValue) => {
        const cleanParsedValue = valueManager.valueReducer ? valueManager.valueReducer(utils, lastValidDateValue, newParsedValue) : newParsedValue;
        onChange(cleanParsedValue, keyboardInputValue);
      }, [onChange, valueManager, lastValidDateValue, utils]);
      const inputProps = React__namespace.useMemo(() => ({
        onChange: handleInputChange,
        open: isOpen,
        rawValue: value,
        openPicker: () => setIsOpen(true)
      }), [handleInputChange, isOpen, value, setIsOpen]);
      const pickerState = {
        pickerProps,
        inputProps,
        wrapperProps
      };
      React__namespace.useDebugValue(pickerState, () => ({
        MuiPickerState: {
          dateState,
          other: pickerState
        }
      }));
      return pickerState;
    };

    const _excluded$e = ["onChange", "PopperProps", "PaperProps", "ToolbarComponent", "TransitionComponent", "value", "components", "componentsProps"];

    /**
     *
     * Demos:
     *
     * - [Date Picker](https://mui.com/x/react-date-pickers/date-picker/)
     *
     * API:
     *
     * - [DesktopDatePicker API](https://mui.com/x/api/date-pickers/desktop-date-picker/)
     */
    const DesktopDatePicker = /*#__PURE__*/React__namespace.forwardRef(function DesktopDatePicker(inProps, ref) {
      const props = useDatePickerDefaultizedProps(inProps, 'MuiDesktopDatePicker');
      const validationError = useDateValidation(props) !== null;
      const {
        pickerProps,
        inputProps,
        wrapperProps
      } = usePickerState(props, datePickerValueManager);

      const {
        PopperProps,
        PaperProps,
        ToolbarComponent = DatePickerToolbar,
        TransitionComponent,
        components,
        componentsProps
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$e);

      const AllDateInputProps = _extends({}, inputProps, other, {
        components,
        componentsProps,
        ref,
        validationError
      });

      return /*#__PURE__*/jsxRuntime.exports.jsx(DesktopWrapper, _extends({}, wrapperProps, {
        DateInputProps: AllDateInputProps,
        KeyboardDateInputComponent: KeyboardDateInput,
        PopperProps: PopperProps,
        PaperProps: PaperProps,
        TransitionComponent: TransitionComponent,
        components: components,
        componentsProps: componentsProps,
        children: /*#__PURE__*/jsxRuntime.exports.jsx(CalendarOrClockPicker, _extends({}, pickerProps, {
          autoFocus: true,
          toolbarTitle: props.label || props.toolbarTitle,
          ToolbarComponent: ToolbarComponent,
          DateInputProps: AllDateInputProps,
          components: components,
          componentsProps: componentsProps
        }, other))
      }));
    });
    DesktopDatePicker.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------

      /**
       * Regular expression to detect "accepted" symbols.
       * @default /\dap/gi
       */
      acceptRegex: PropTypes.instanceOf(RegExp),
      autoFocus: PropTypes.bool,
      children: PropTypes.node,

      /**
       * className applied to the root component.
       */
      className: PropTypes.string,

      /**
       * If `true` the popup or dialog will immediately close after submitting full date.
       * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
       */
      closeOnSelect: PropTypes.bool,

      /**
       * Overrideable components.
       * @default {}
       */
      components: PropTypes.object,

      /**
       * The props used for each component slot.
       * @default {}
       */
      componentsProps: PropTypes.object,

      /**
       * Formats the day of week displayed in the calendar header.
       * @param {string} day The day of week provided by the adapter's method `getWeekdays`.
       * @returns {string} The name to display.
       * @default (day) => day.charAt(0).toUpperCase()
       */
      dayOfWeekFormatter: PropTypes.func,

      /**
       * Default calendar month displayed when `value={null}`.
       */
      defaultCalendarMonth: PropTypes.any,

      /**
       * If `true`, the picker and text field are disabled.
       * @default false
       */
      disabled: PropTypes.bool,

      /**
       * If `true` future days are disabled.
       * @default false
       */
      disableFuture: PropTypes.bool,

      /**
       * If `true`, today's date is rendering without highlighting with circle.
       * @default false
       */
      disableHighlightToday: PropTypes.bool,

      /**
       * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.
       * @default false
       */
      disableMaskedInput: PropTypes.bool,

      /**
       * Do not render open picker button (renders only text field with validation).
       * @default false
       */
      disableOpenPicker: PropTypes.bool,

      /**
       * If `true` past days are disabled.
       * @default false
       */
      disablePast: PropTypes.bool,

      /**
       * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType
       * @template TInputDate, TDate
       * @param {TInputDate} date The date from which we want to add an aria-text.
       * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.
       * @returns {string} The aria-text to render inside the dialog.
       * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`
       */
      getOpenDialogAriaText: PropTypes.func,

      /**
       * Get aria-label text for switching between views button.
       * @param {CalendarPickerView} currentView The view from which we want to get the button text.
       * @returns {string} The label of the view.
       * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.
       */
      getViewSwitchingButtonText: PropTypes.func,
      ignoreInvalidInputs: PropTypes.bool,

      /**
       * Props to pass to keyboard input adornment.
       */
      InputAdornmentProps: PropTypes.object,

      /**
       * Format string.
       */
      inputFormat: PropTypes.string,
      InputProps: PropTypes.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
        current: PropTypes.object
      })]),
      label: PropTypes.node,

      /**
       * Left arrow icon aria-label text.
       * @deprecated
       */
      leftArrowButtonText: PropTypes.string,

      /**
       * If `true` renders `LoadingComponent` in calendar instead of calendar view.
       * Can be used to preload information and show it in calendar.
       * @default false
       */
      loading: PropTypes.bool,

      /**
       * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).
       */
      mask: PropTypes.string,

      /**
       * Maximal selectable date. @DateIOType
       */
      maxDate: PropTypes.any,

      /**
       * Minimal selectable date. @DateIOType
       */
      minDate: PropTypes.any,

      /**
       * Callback fired when date is accepted @DateIOType.
       * @template TValue
       * @param {TValue} value The value that was just accepted.
       */
      onAccept: PropTypes.func,

      /**
       * Callback fired when the value (the selected date) changes @DateIOType.
       * @template TValue
       * @param {TValue} value The new parsed value.
       * @param {string} keyboardInputValue The current value of the keyboard input.
       */
      onChange: PropTypes.func.isRequired,

      /**
       * Callback fired when the popup requests to be closed.
       * Use in controlled mode (see open).
       */
      onClose: PropTypes.func,

      /**
       * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).
       * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.
       * This can be used to render appropriate form error.
       *
       * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.
       * @DateIOType
       *
       * @template TError, TInputValue
       * @param {TError} reason The reason why the current value is not valid.
       * @param {TInputValue} value The invalid value.
       */
      onError: PropTypes.func,

      /**
       * Callback firing on month change @DateIOType.
       * @template TDate
       * @param {TDate} month The new month.
       * @returns {void|Promise} -
       */
      onMonthChange: PropTypes.func,

      /**
       * Callback fired when the popup requests to be opened.
       * Use in controlled mode (see open).
       */
      onOpen: PropTypes.func,

      /**
       * Callback fired on view change.
       * @param {CalendarPickerView} view The new view.
       */
      onViewChange: PropTypes.func,

      /**
       * Callback firing on year change @DateIOType.
       * @template TDate
       * @param {TDate} year The new year.
       */
      onYearChange: PropTypes.func,

      /**
       * Control the popup or dialog open state.
       */
      open: PropTypes.bool,

      /**
       * Props to pass to keyboard adornment button.
       */
      OpenPickerButtonProps: PropTypes.object,

      /**
       * First view to show.
       * Must be a valid option from `views` list
       * @default 'day'
       */
      openTo: PropTypes.oneOf(['day', 'month', 'year']),

      /**
       * Force rendering in particular orientation.
       */
      orientation: PropTypes.oneOf(['landscape', 'portrait']),

      /**
       * Paper props passed down to [Paper](https://mui.com/material-ui/api/paper/) component.
       */
      PaperProps: PropTypes.object,

      /**
       * Popper props passed down to [Popper](https://mui.com/material-ui/api/popper/) component.
       */
      PopperProps: PropTypes.object,

      /**
       * Make picker read only.
       * @default false
       */
      readOnly: PropTypes.bool,

      /**
       * Disable heavy animations.
       * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)
       */
      reduceAnimations: PropTypes.bool,

      /**
       * Custom renderer for day. Check the [PickersDay](https://mui.com/x/api/date-pickers/pickers-day/) component.
       * @template TDate
       * @param {TDate} day The day to render.
       * @param {Array<TDate | null>} selectedDays The days currently selected.
       * @param {PickersDayProps<TDate>} pickersDayProps The props of the day to render.
       * @returns {JSX.Element} The element representing the day.
       */
      renderDay: PropTypes.func,

      /**
       * The `renderInput` prop allows you to customize the rendered input.
       * The `props` argument of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props) that you need to forward.
       * Pay specific attention to the `ref` and `inputProps` keys.
       * @example ```jsx
       * renderInput={props => <TextField {...props} />}
       * ````
       * @param {MuiTextFieldPropsType} props The props of the input.
       * @returns {React.ReactNode} The node to render as the input.
       */
      renderInput: PropTypes.func.isRequired,

      /**
       * Component displaying when passed `loading` true.
       * @returns {React.ReactNode} The node to render when loading.
       * @default () => <span data-mui-test="loading-progress">...</span>
       */
      renderLoading: PropTypes.func,

      /**
       * Custom formatter to be passed into Rifm component.
       * @param {string} str The un-formatted string.
       * @returns {string} The formatted string.
       */
      rifmFormatter: PropTypes.func,

      /**
       * Right arrow icon aria-label text.
       * @deprecated
       */
      rightArrowButtonText: PropTypes.string,

      /**
       * Disable specific date. @DateIOType
       * @template TDate
       * @param {TDate} day The date to test.
       * @returns {boolean} Returns `true` if the date should be disabled.
       */
      shouldDisableDate: PropTypes.func,

      /**
       * Disable specific months dynamically.
       * Works like `shouldDisableDate` but for month selection view @DateIOType.
       * @template TDate
       * @param {TDate} month The month to check.
       * @returns {boolean} If `true` the month will be disabled.
       */
      shouldDisableMonth: PropTypes.func,

      /**
       * Disable specific years dynamically.
       * Works like `shouldDisableDate` but for year selection view @DateIOType.
       * @template TDate
       * @param {TDate} year The year to test.
       * @returns {boolean} Returns `true` if the year should be disabled.
       */
      shouldDisableYear: PropTypes.func,

      /**
       * If `true`, days that have `outsideCurrentMonth={true}` are displayed.
       * @default false
       */
      showDaysOutsideCurrentMonth: PropTypes.bool,

      /**
       * If `true`, show the toolbar even in desktop mode.
       */
      showToolbar: PropTypes.bool,

      /**
       * Component that will replace default toolbar renderer.
       * @default DatePickerToolbar
       */
      ToolbarComponent: PropTypes.elementType,

      /**
       * Date format, that is displaying in toolbar.
       */
      toolbarFormat: PropTypes.string,

      /**
       * Mobile picker date value placeholder, displaying if `value` === `null`.
       * @default '–'
       */
      toolbarPlaceholder: PropTypes.node,

      /**
       * Mobile picker title, displaying in the toolbar.
       * @default 'Select date'
       */
      toolbarTitle: PropTypes.node,

      /**
       * Custom component for popper [Transition](https://mui.com/material-ui/transitions/#transitioncomponent-prop).
       */
      TransitionComponent: PropTypes.elementType,

      /**
       * The value of the picker.
       */
      value: PropTypes.any,

      /**
       * Array of views to show.
       * @default ['year', 'day']
       */
      views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired)
    } ;

    const PickersModalDialogRoot = styled$1(Dialog$1)({
      [`& .${dialogClasses$1.container}`]: {
        outline: 0
      },
      [`& .${dialogClasses$1.paper}`]: {
        outline: 0,
        minWidth: DIALOG_WIDTH
      }
    });
    const PickersModalDialogContent = styled$1(DialogContent$1)({
      '&:first-of-type': {
        padding: 0
      }
    });
    const PickersModalDialog = props => {
      var _components$ActionBar;

      const {
        children,
        DialogProps = {},
        onAccept,
        onClear,
        onDismiss,
        onCancel,
        onSetToday,
        open,
        components,
        componentsProps
      } = props;
      const ActionBar = (_components$ActionBar = components == null ? void 0 : components.ActionBar) != null ? _components$ActionBar : PickersActionBar;
      return /*#__PURE__*/jsxRuntime.exports.jsxs(PickersModalDialogRoot, _extends({
        open: open,
        onClose: onDismiss
      }, DialogProps, {
        children: [/*#__PURE__*/jsxRuntime.exports.jsx(PickersModalDialogContent, {
          children: children
        }), /*#__PURE__*/jsxRuntime.exports.jsx(ActionBar, _extends({
          onAccept: onAccept,
          onClear: onClear,
          onCancel: onCancel,
          onSetToday: onSetToday,
          actions: ['cancel', 'accept']
        }, componentsProps == null ? void 0 : componentsProps.actionBar))]
      }));
    };

    const _excluded$d = ["children", "DateInputProps", "DialogProps", "onAccept", "onClear", "onDismiss", "onCancel", "onSetToday", "open", "PureDateInputComponent", "components", "componentsProps"];
    function MobileWrapper(props) {
      const {
        children,
        DateInputProps,
        DialogProps,
        onAccept,
        onClear,
        onDismiss,
        onCancel,
        onSetToday,
        open,
        PureDateInputComponent,
        components,
        componentsProps
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$d);

      return /*#__PURE__*/jsxRuntime.exports.jsxs(WrapperVariantContext.Provider, {
        value: "mobile",
        children: [/*#__PURE__*/jsxRuntime.exports.jsx(PureDateInputComponent, _extends({
          components: components
        }, other, DateInputProps)), /*#__PURE__*/jsxRuntime.exports.jsx(PickersModalDialog, {
          DialogProps: DialogProps,
          onAccept: onAccept,
          onClear: onClear,
          onDismiss: onDismiss,
          onCancel: onCancel,
          onSetToday: onSetToday,
          open: open,
          components: components,
          componentsProps: componentsProps,
          children: children
        })]
      });
    }

    // TODO: why is this called "Pure*" when it's not memoized? Does "Pure" mean "readonly"?
    const PureDateInput = /*#__PURE__*/React__namespace.forwardRef(function PureDateInput(props, ref) {
      const {
        disabled,
        getOpenDialogAriaText: getOpenDialogAriaTextProp,
        inputFormat,
        InputProps,
        inputRef,
        label,
        openPicker: onOpen,
        rawValue,
        renderInput,
        TextFieldProps = {},
        validationError,
        className
      } = props;
      const localeText = useLocaleText(); // The prop can not be deprecated
      // Default is "Choose date, ...", but time pickers override it with "Choose time, ..."

      const getOpenDialogAriaText = getOpenDialogAriaTextProp != null ? getOpenDialogAriaTextProp : localeText.openDatePickerDialogue;
      const utils = useUtils();
      const PureDateInputProps = React__namespace.useMemo(() => _extends({}, InputProps, {
        readOnly: true
      }), [InputProps]);
      const inputValue = getDisplayDate(utils, rawValue, inputFormat);
      const handleOnClick = useEventCallback(event => {
        event.stopPropagation();
        onOpen();
      });
      return renderInput(_extends({
        label,
        disabled,
        ref,
        inputRef,
        error: validationError,
        InputProps: PureDateInputProps,
        className
      }, !props.readOnly && !props.disabled && {
        onClick: handleOnClick
      }, {
        inputProps: _extends({
          disabled,
          readOnly: true,
          'aria-readonly': true,
          'aria-label': getOpenDialogAriaText(rawValue, utils),
          value: inputValue
        }, !props.readOnly && {
          onClick: handleOnClick
        }, {
          onKeyDown: onSpaceOrEnter(onOpen)
        })
      }, TextFieldProps));
    });

    const _excluded$c = ["ToolbarComponent", "value", "onChange", "components", "componentsProps"];

    /**
     *
     * Demos:
     *
     * - [Date Picker](https://mui.com/x/react-date-pickers/date-picker/)
     *
     * API:
     *
     * - [MobileDatePicker API](https://mui.com/x/api/date-pickers/mobile-date-picker/)
     */
    const MobileDatePicker = /*#__PURE__*/React__namespace.forwardRef(function MobileDatePicker(inProps, ref) {
      const props = useDatePickerDefaultizedProps(inProps, 'MuiMobileDatePicker');
      const validationError = useDateValidation(props) !== null;
      const {
        pickerProps,
        inputProps,
        wrapperProps
      } = usePickerState(props, datePickerValueManager); // Note that we are passing down all the value without spread.
      // It saves us >1kb gzip and make any prop available automatically on any level down.

      const {
        ToolbarComponent = DatePickerToolbar,
        components,
        componentsProps
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$c);

      const DateInputProps = _extends({}, inputProps, other, {
        components,
        componentsProps,
        ref,
        validationError
      });

      return /*#__PURE__*/jsxRuntime.exports.jsx(MobileWrapper, _extends({}, other, wrapperProps, {
        DateInputProps: DateInputProps,
        PureDateInputComponent: PureDateInput,
        components: components,
        componentsProps: componentsProps,
        children: /*#__PURE__*/jsxRuntime.exports.jsx(CalendarOrClockPicker, _extends({}, pickerProps, {
          autoFocus: true,
          toolbarTitle: props.label || props.toolbarTitle,
          ToolbarComponent: ToolbarComponent,
          DateInputProps: DateInputProps,
          components: components,
          componentsProps: componentsProps
        }, other))
      }));
    });
    MobileDatePicker.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------

      /**
       * Regular expression to detect "accepted" symbols.
       * @default /\dap/gi
       */
      acceptRegex: PropTypes.instanceOf(RegExp),
      autoFocus: PropTypes.bool,
      children: PropTypes.node,

      /**
       * className applied to the root component.
       */
      className: PropTypes.string,

      /**
       * If `true` the popup or dialog will immediately close after submitting full date.
       * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
       */
      closeOnSelect: PropTypes.bool,

      /**
       * Overrideable components.
       * @default {}
       */
      components: PropTypes.object,

      /**
       * The props used for each component slot.
       * @default {}
       */
      componentsProps: PropTypes.object,

      /**
       * Formats the day of week displayed in the calendar header.
       * @param {string} day The day of week provided by the adapter's method `getWeekdays`.
       * @returns {string} The name to display.
       * @default (day) => day.charAt(0).toUpperCase()
       */
      dayOfWeekFormatter: PropTypes.func,

      /**
       * Default calendar month displayed when `value={null}`.
       */
      defaultCalendarMonth: PropTypes.any,

      /**
       * Props applied to the [`Dialog`](https://mui.com/material-ui/api/dialog/) element.
       */
      DialogProps: PropTypes.object,

      /**
       * If `true`, the picker and text field are disabled.
       * @default false
       */
      disabled: PropTypes.bool,

      /**
       * If `true` future days are disabled.
       * @default false
       */
      disableFuture: PropTypes.bool,

      /**
       * If `true`, today's date is rendering without highlighting with circle.
       * @default false
       */
      disableHighlightToday: PropTypes.bool,

      /**
       * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.
       * @default false
       */
      disableMaskedInput: PropTypes.bool,

      /**
       * Do not render open picker button (renders only text field with validation).
       * @default false
       */
      disableOpenPicker: PropTypes.bool,

      /**
       * If `true` past days are disabled.
       * @default false
       */
      disablePast: PropTypes.bool,

      /**
       * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType
       * @template TInputDate, TDate
       * @param {TInputDate} date The date from which we want to add an aria-text.
       * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.
       * @returns {string} The aria-text to render inside the dialog.
       * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`
       */
      getOpenDialogAriaText: PropTypes.func,

      /**
       * Get aria-label text for switching between views button.
       * @param {CalendarPickerView} currentView The view from which we want to get the button text.
       * @returns {string} The label of the view.
       * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.
       */
      getViewSwitchingButtonText: PropTypes.func,
      ignoreInvalidInputs: PropTypes.bool,

      /**
       * Props to pass to keyboard input adornment.
       */
      InputAdornmentProps: PropTypes.object,

      /**
       * Format string.
       */
      inputFormat: PropTypes.string,
      InputProps: PropTypes.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
        current: PropTypes.object
      })]),
      label: PropTypes.node,

      /**
       * Left arrow icon aria-label text.
       * @deprecated
       */
      leftArrowButtonText: PropTypes.string,

      /**
       * If `true` renders `LoadingComponent` in calendar instead of calendar view.
       * Can be used to preload information and show it in calendar.
       * @default false
       */
      loading: PropTypes.bool,

      /**
       * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).
       */
      mask: PropTypes.string,

      /**
       * Maximal selectable date. @DateIOType
       */
      maxDate: PropTypes.any,

      /**
       * Minimal selectable date. @DateIOType
       */
      minDate: PropTypes.any,

      /**
       * Callback fired when date is accepted @DateIOType.
       * @template TValue
       * @param {TValue} value The value that was just accepted.
       */
      onAccept: PropTypes.func,

      /**
       * Callback fired when the value (the selected date) changes @DateIOType.
       * @template TValue
       * @param {TValue} value The new parsed value.
       * @param {string} keyboardInputValue The current value of the keyboard input.
       */
      onChange: PropTypes.func.isRequired,

      /**
       * Callback fired when the popup requests to be closed.
       * Use in controlled mode (see open).
       */
      onClose: PropTypes.func,

      /**
       * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).
       * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.
       * This can be used to render appropriate form error.
       *
       * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.
       * @DateIOType
       *
       * @template TError, TInputValue
       * @param {TError} reason The reason why the current value is not valid.
       * @param {TInputValue} value The invalid value.
       */
      onError: PropTypes.func,

      /**
       * Callback firing on month change @DateIOType.
       * @template TDate
       * @param {TDate} month The new month.
       * @returns {void|Promise} -
       */
      onMonthChange: PropTypes.func,

      /**
       * Callback fired when the popup requests to be opened.
       * Use in controlled mode (see open).
       */
      onOpen: PropTypes.func,

      /**
       * Callback fired on view change.
       * @param {CalendarPickerView} view The new view.
       */
      onViewChange: PropTypes.func,

      /**
       * Callback firing on year change @DateIOType.
       * @template TDate
       * @param {TDate} year The new year.
       */
      onYearChange: PropTypes.func,

      /**
       * Control the popup or dialog open state.
       */
      open: PropTypes.bool,

      /**
       * Props to pass to keyboard adornment button.
       */
      OpenPickerButtonProps: PropTypes.object,

      /**
       * First view to show.
       * Must be a valid option from `views` list
       * @default 'day'
       */
      openTo: PropTypes.oneOf(['day', 'month', 'year']),

      /**
       * Force rendering in particular orientation.
       */
      orientation: PropTypes.oneOf(['landscape', 'portrait']),

      /**
       * Make picker read only.
       * @default false
       */
      readOnly: PropTypes.bool,

      /**
       * Disable heavy animations.
       * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)
       */
      reduceAnimations: PropTypes.bool,

      /**
       * Custom renderer for day. Check the [PickersDay](https://mui.com/x/api/date-pickers/pickers-day/) component.
       * @template TDate
       * @param {TDate} day The day to render.
       * @param {Array<TDate | null>} selectedDays The days currently selected.
       * @param {PickersDayProps<TDate>} pickersDayProps The props of the day to render.
       * @returns {JSX.Element} The element representing the day.
       */
      renderDay: PropTypes.func,

      /**
       * The `renderInput` prop allows you to customize the rendered input.
       * The `props` argument of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props) that you need to forward.
       * Pay specific attention to the `ref` and `inputProps` keys.
       * @example ```jsx
       * renderInput={props => <TextField {...props} />}
       * ````
       * @param {MuiTextFieldPropsType} props The props of the input.
       * @returns {React.ReactNode} The node to render as the input.
       */
      renderInput: PropTypes.func.isRequired,

      /**
       * Component displaying when passed `loading` true.
       * @returns {React.ReactNode} The node to render when loading.
       * @default () => <span data-mui-test="loading-progress">...</span>
       */
      renderLoading: PropTypes.func,

      /**
       * Custom formatter to be passed into Rifm component.
       * @param {string} str The un-formatted string.
       * @returns {string} The formatted string.
       */
      rifmFormatter: PropTypes.func,

      /**
       * Right arrow icon aria-label text.
       * @deprecated
       */
      rightArrowButtonText: PropTypes.string,

      /**
       * Disable specific date. @DateIOType
       * @template TDate
       * @param {TDate} day The date to test.
       * @returns {boolean} Returns `true` if the date should be disabled.
       */
      shouldDisableDate: PropTypes.func,

      /**
       * Disable specific months dynamically.
       * Works like `shouldDisableDate` but for month selection view @DateIOType.
       * @template TDate
       * @param {TDate} month The month to check.
       * @returns {boolean} If `true` the month will be disabled.
       */
      shouldDisableMonth: PropTypes.func,

      /**
       * Disable specific years dynamically.
       * Works like `shouldDisableDate` but for year selection view @DateIOType.
       * @template TDate
       * @param {TDate} year The year to test.
       * @returns {boolean} Returns `true` if the year should be disabled.
       */
      shouldDisableYear: PropTypes.func,

      /**
       * If `true`, days that have `outsideCurrentMonth={true}` are displayed.
       * @default false
       */
      showDaysOutsideCurrentMonth: PropTypes.bool,

      /**
       * If `true`, show the toolbar even in desktop mode.
       */
      showToolbar: PropTypes.bool,

      /**
       * Component that will replace default toolbar renderer.
       * @default DatePickerToolbar
       */
      ToolbarComponent: PropTypes.elementType,

      /**
       * Date format, that is displaying in toolbar.
       */
      toolbarFormat: PropTypes.string,

      /**
       * Mobile picker date value placeholder, displaying if `value` === `null`.
       * @default '–'
       */
      toolbarPlaceholder: PropTypes.node,

      /**
       * Mobile picker title, displaying in the toolbar.
       * @default 'Select date'
       */
      toolbarTitle: PropTypes.node,

      /**
       * The value of the picker.
       */
      value: PropTypes.any,

      /**
       * Array of views to show.
       * @default ['year', 'day']
       */
      views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired)
    } ;

    const _excluded$b = ["desktopModeMediaQuery", "DialogProps", "PopperProps", "TransitionComponent"];

    /**
     *
     * Demos:
     *
     * - [Date Picker](https://mui.com/x/react-date-pickers/date-picker/)
     * - [Pickers](https://mui.com/x/react-date-pickers/)
     *
     * API:
     *
     * - [DatePicker API](https://mui.com/x/api/date-pickers/date-picker/)
     */
    const DatePicker = /*#__PURE__*/React__namespace.forwardRef(function DatePicker(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiDatePicker'
      });

      const {
        desktopModeMediaQuery = '@media (pointer: fine)',
        DialogProps,
        PopperProps,
        TransitionComponent
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$b); // defaults to `true` in environments where `window.matchMedia` would not be available (i.e. test/jsdom)


      const isDesktop = useMediaQuery(desktopModeMediaQuery, {
        defaultMatches: true
      });

      if (isDesktop) {
        return /*#__PURE__*/jsxRuntime.exports.jsx(DesktopDatePicker, _extends({
          ref: ref,
          PopperProps: PopperProps,
          TransitionComponent: TransitionComponent
        }, other));
      }

      return /*#__PURE__*/jsxRuntime.exports.jsx(MobileDatePicker, _extends({
        ref: ref,
        DialogProps: DialogProps
      }, other));
    });
    DatePicker.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------

      /**
       * Regular expression to detect "accepted" symbols.
       * @default /\dap/gi
       */
      acceptRegex: PropTypes.instanceOf(RegExp),
      autoFocus: PropTypes.bool,
      children: PropTypes.node,

      /**
       * className applied to the root component.
       */
      className: PropTypes.string,

      /**
       * If `true` the popup or dialog will immediately close after submitting full date.
       * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
       */
      closeOnSelect: PropTypes.bool,

      /**
       * Overrideable components.
       * @default {}
       */
      components: PropTypes.object,

      /**
       * The props used for each component slot.
       * @default {}
       */
      componentsProps: PropTypes.object,

      /**
       * Formats the day of week displayed in the calendar header.
       * @param {string} day The day of week provided by the adapter's method `getWeekdays`.
       * @returns {string} The name to display.
       * @default (day) => day.charAt(0).toUpperCase()
       */
      dayOfWeekFormatter: PropTypes.func,

      /**
       * Default calendar month displayed when `value={null}`.
       */
      defaultCalendarMonth: PropTypes.any,

      /**
       * CSS media query when `Mobile` mode will be changed to `Desktop`.
       * @default '@media (pointer: fine)'
       * @example '@media (min-width: 720px)' or theme.breakpoints.up("sm")
       */
      desktopModeMediaQuery: PropTypes.string,

      /**
       * Props applied to the [`Dialog`](https://mui.com/material-ui/api/dialog/) element.
       */
      DialogProps: PropTypes.object,

      /**
       * If `true`, the picker and text field are disabled.
       * @default false
       */
      disabled: PropTypes.bool,

      /**
       * If `true` future days are disabled.
       * @default false
       */
      disableFuture: PropTypes.bool,

      /**
       * If `true`, today's date is rendering without highlighting with circle.
       * @default false
       */
      disableHighlightToday: PropTypes.bool,

      /**
       * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.
       * @default false
       */
      disableMaskedInput: PropTypes.bool,

      /**
       * Do not render open picker button (renders only text field with validation).
       * @default false
       */
      disableOpenPicker: PropTypes.bool,

      /**
       * If `true` past days are disabled.
       * @default false
       */
      disablePast: PropTypes.bool,

      /**
       * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType
       * @template TInputDate, TDate
       * @param {TInputDate} date The date from which we want to add an aria-text.
       * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.
       * @returns {string} The aria-text to render inside the dialog.
       * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`
       */
      getOpenDialogAriaText: PropTypes.func,

      /**
       * Get aria-label text for switching between views button.
       * @param {CalendarPickerView} currentView The view from which we want to get the button text.
       * @returns {string} The label of the view.
       * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.
       */
      getViewSwitchingButtonText: PropTypes.func,
      ignoreInvalidInputs: PropTypes.bool,

      /**
       * Props to pass to keyboard input adornment.
       */
      InputAdornmentProps: PropTypes.object,

      /**
       * Format string.
       */
      inputFormat: PropTypes.string,
      InputProps: PropTypes.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
        current: PropTypes.object
      })]),
      label: PropTypes.node,

      /**
       * Left arrow icon aria-label text.
       * @deprecated
       */
      leftArrowButtonText: PropTypes.string,

      /**
       * If `true` renders `LoadingComponent` in calendar instead of calendar view.
       * Can be used to preload information and show it in calendar.
       * @default false
       */
      loading: PropTypes.bool,

      /**
       * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).
       */
      mask: PropTypes.string,

      /**
       * Maximal selectable date. @DateIOType
       */
      maxDate: PropTypes.any,

      /**
       * Minimal selectable date. @DateIOType
       */
      minDate: PropTypes.any,

      /**
       * Callback fired when date is accepted @DateIOType.
       * @template TValue
       * @param {TValue} value The value that was just accepted.
       */
      onAccept: PropTypes.func,

      /**
       * Callback fired when the value (the selected date) changes @DateIOType.
       * @template TValue
       * @param {TValue} value The new parsed value.
       * @param {string} keyboardInputValue The current value of the keyboard input.
       */
      onChange: PropTypes.func.isRequired,

      /**
       * Callback fired when the popup requests to be closed.
       * Use in controlled mode (see open).
       */
      onClose: PropTypes.func,

      /**
       * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).
       * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.
       * This can be used to render appropriate form error.
       *
       * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.
       * @DateIOType
       *
       * @template TError, TInputValue
       * @param {TError} reason The reason why the current value is not valid.
       * @param {TInputValue} value The invalid value.
       */
      onError: PropTypes.func,

      /**
       * Callback firing on month change @DateIOType.
       * @template TDate
       * @param {TDate} month The new month.
       * @returns {void|Promise} -
       */
      onMonthChange: PropTypes.func,

      /**
       * Callback fired when the popup requests to be opened.
       * Use in controlled mode (see open).
       */
      onOpen: PropTypes.func,

      /**
       * Callback fired on view change.
       * @param {CalendarPickerView} view The new view.
       */
      onViewChange: PropTypes.func,

      /**
       * Callback firing on year change @DateIOType.
       * @template TDate
       * @param {TDate} year The new year.
       */
      onYearChange: PropTypes.func,

      /**
       * Control the popup or dialog open state.
       */
      open: PropTypes.bool,

      /**
       * Props to pass to keyboard adornment button.
       */
      OpenPickerButtonProps: PropTypes.object,

      /**
       * First view to show.
       * Must be a valid option from `views` list
       * @default 'day'
       */
      openTo: PropTypes.oneOf(['day', 'month', 'year']),

      /**
       * Force rendering in particular orientation.
       */
      orientation: PropTypes.oneOf(['landscape', 'portrait']),

      /**
       * Paper props passed down to [Paper](https://mui.com/material-ui/api/paper/) component.
       */
      PaperProps: PropTypes.object,

      /**
       * Popper props passed down to [Popper](https://mui.com/material-ui/api/popper/) component.
       */
      PopperProps: PropTypes.object,

      /**
       * Make picker read only.
       * @default false
       */
      readOnly: PropTypes.bool,

      /**
       * Disable heavy animations.
       * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)
       */
      reduceAnimations: PropTypes.bool,

      /**
       * Custom renderer for day. Check the [PickersDay](https://mui.com/x/api/date-pickers/pickers-day/) component.
       * @template TDate
       * @param {TDate} day The day to render.
       * @param {Array<TDate | null>} selectedDays The days currently selected.
       * @param {PickersDayProps<TDate>} pickersDayProps The props of the day to render.
       * @returns {JSX.Element} The element representing the day.
       */
      renderDay: PropTypes.func,

      /**
       * The `renderInput` prop allows you to customize the rendered input.
       * The `props` argument of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props) that you need to forward.
       * Pay specific attention to the `ref` and `inputProps` keys.
       * @example ```jsx
       * renderInput={props => <TextField {...props} />}
       * ````
       * @param {MuiTextFieldPropsType} props The props of the input.
       * @returns {React.ReactNode} The node to render as the input.
       */
      renderInput: PropTypes.func.isRequired,

      /**
       * Component displaying when passed `loading` true.
       * @returns {React.ReactNode} The node to render when loading.
       * @default () => <span data-mui-test="loading-progress">...</span>
       */
      renderLoading: PropTypes.func,

      /**
       * Custom formatter to be passed into Rifm component.
       * @param {string} str The un-formatted string.
       * @returns {string} The formatted string.
       */
      rifmFormatter: PropTypes.func,

      /**
       * Right arrow icon aria-label text.
       * @deprecated
       */
      rightArrowButtonText: PropTypes.string,

      /**
       * Disable specific date. @DateIOType
       * @template TDate
       * @param {TDate} day The date to test.
       * @returns {boolean} Returns `true` if the date should be disabled.
       */
      shouldDisableDate: PropTypes.func,

      /**
       * Disable specific months dynamically.
       * Works like `shouldDisableDate` but for month selection view @DateIOType.
       * @template TDate
       * @param {TDate} month The month to check.
       * @returns {boolean} If `true` the month will be disabled.
       */
      shouldDisableMonth: PropTypes.func,

      /**
       * Disable specific years dynamically.
       * Works like `shouldDisableDate` but for year selection view @DateIOType.
       * @template TDate
       * @param {TDate} year The year to test.
       * @returns {boolean} Returns `true` if the year should be disabled.
       */
      shouldDisableYear: PropTypes.func,

      /**
       * If `true`, days that have `outsideCurrentMonth={true}` are displayed.
       * @default false
       */
      showDaysOutsideCurrentMonth: PropTypes.bool,

      /**
       * If `true`, show the toolbar even in desktop mode.
       */
      showToolbar: PropTypes.bool,

      /**
       * Component that will replace default toolbar renderer.
       * @default DatePickerToolbar
       */
      ToolbarComponent: PropTypes.elementType,

      /**
       * Date format, that is displaying in toolbar.
       */
      toolbarFormat: PropTypes.string,

      /**
       * Mobile picker date value placeholder, displaying if `value` === `null`.
       * @default '–'
       */
      toolbarPlaceholder: PropTypes.node,

      /**
       * Mobile picker title, displaying in the toolbar.
       * @default 'Select date'
       */
      toolbarTitle: PropTypes.node,

      /**
       * Custom component for popper [Transition](https://mui.com/material-ui/transitions/#transitioncomponent-prop).
       */
      TransitionComponent: PropTypes.elementType,

      /**
       * The value of the picker.
       */
      value: PropTypes.any,

      /**
       * Array of views to show.
       * @default ['year', 'day']
       */
      views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired)
    } ;

    function useDateTimePickerDefaultizedProps(props, name) {
      var _themeProps$ampm, _themeProps$minDateTi, _themeProps$maxDateTi, _themeProps$minDateTi2, _themeProps$maxDateTi2;

      // This is technically unsound if the type parameters appear in optional props.
      // Optional props can be filled by `useThemeProps` with types that don't match the type parameters.
      const themeProps = useThemeProps({
        props,
        name
      });
      const utils = useUtils();
      const defaultDates = useDefaultDates();
      const ampm = (_themeProps$ampm = themeProps.ampm) != null ? _themeProps$ampm : utils.is12HourCycleInCurrentLocale();

      if (themeProps.orientation != null && themeProps.orientation !== 'portrait') {
        throw new Error('We are not supporting custom orientation for DateTimePicker yet :(');
      }

      return _extends({
        ampm,
        orientation: 'portrait',
        openTo: 'day',
        views: ['year', 'day', 'hours', 'minutes'],
        ampmInClock: true,
        acceptRegex: ampm ? /[\dap]/gi : /\d/gi,
        disableMaskedInput: false,
        inputFormat: ampm ? utils.formats.keyboardDateTime12h : utils.formats.keyboardDateTime24h,
        disableIgnoringDatePartForTimeValidation: Boolean(themeProps.minDateTime || themeProps.maxDateTime),
        disablePast: false,
        disableFuture: false
      }, themeProps, {
        minDate: parseNonNullablePickerDate(utils, (_themeProps$minDateTi = themeProps.minDateTime) != null ? _themeProps$minDateTi : themeProps.minDate, defaultDates.minDate),
        maxDate: parseNonNullablePickerDate(utils, (_themeProps$maxDateTi = themeProps.maxDateTime) != null ? _themeProps$maxDateTi : themeProps.maxDate, defaultDates.maxDate),
        minTime: (_themeProps$minDateTi2 = themeProps.minDateTime) != null ? _themeProps$minDateTi2 : themeProps.minTime,
        maxTime: (_themeProps$maxDateTi2 = themeProps.maxDateTime) != null ? _themeProps$maxDateTi2 : themeProps.maxTime
      });
    }
    const dateTimePickerValueManager = {
      emptyValue: null,
      getTodayValue: utils => utils.date(),
      parseInput: parsePickerInputValue,
      areValuesEqual: (utils, a, b) => utils.isEqual(a, b)
    };

    function getPickersToolbarTextUtilityClass(slot) {
      // TODO v6: Rename 'PrivatePickersToolbarText' to 'MuiPickersToolbarText' to follow convention
      return generateUtilityClass('PrivatePickersToolbarText', slot);
    } // TODO v6: Rename 'PrivatePickersToolbarText' to 'MuiPickersToolbarText' to follow convention

    const pickersToolbarTextClasses = generateUtilityClasses('PrivatePickersToolbarText', ['root', 'selected']);

    const _excluded$a = ["className", "selected", "value"];

    const useUtilityClasses$4 = ownerState => {
      const {
        classes,
        selected
      } = ownerState;
      const slots = {
        root: ['root', selected && 'selected']
      };
      return composeClasses(slots, getPickersToolbarTextUtilityClass, classes);
    };

    const PickersToolbarTextRoot = styled$1(Typography$1, {
      name: 'PrivatePickersToolbarText',
      slot: 'Root',
      overridesResolver: (_, styles) => [styles.root, {
        [`&.${pickersToolbarTextClasses.selected}`]: styles.selected
      }]
    })(({
      theme
    }) => ({
      transition: theme.transitions.create('color'),
      color: theme.palette.text.secondary,
      [`&.${pickersToolbarTextClasses.selected}`]: {
        color: theme.palette.text.primary
      }
    }));
    const PickersToolbarText = /*#__PURE__*/React__namespace.forwardRef(function PickersToolbarText(props, ref) {
      // TODO v6: add 'useThemeProps' once the component class names are aligned
      const {
        className,
        value
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$a);

      const classes = useUtilityClasses$4(props);
      return /*#__PURE__*/jsxRuntime.exports.jsx(PickersToolbarTextRoot, _extends({
        ref: ref,
        className: clsx(className, classes.root),
        component: "span"
      }, other, {
        children: value
      }));
    });

    const _excluded$9 = ["align", "className", "selected", "typographyClassName", "value", "variant"];

    const useUtilityClasses$3 = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root']
      };
      return composeClasses(slots, getPickersToolbarUtilityClass, classes);
    };

    const PickersToolbarButtonRoot = styled$1(Button$1, {
      name: 'MuiPickersToolbarButton',
      slot: 'Root',
      overridesResolver: (_, styles) => styles.root
    })({
      padding: 0,
      minWidth: 16,
      textTransform: 'none'
    });
    const PickersToolbarButton = /*#__PURE__*/React__namespace.forwardRef(function PickersToolbarButton(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiPickersToolbarButton'
      });

      const {
        align,
        className,
        selected,
        typographyClassName,
        value,
        variant
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$9);

      const classes = useUtilityClasses$3(props);
      return /*#__PURE__*/jsxRuntime.exports.jsx(PickersToolbarButtonRoot, _extends({
        variant: "text",
        ref: ref,
        className: clsx(className, classes.root)
      }, other, {
        children: /*#__PURE__*/jsxRuntime.exports.jsx(PickersToolbarText, {
          align: align,
          className: typographyClassName,
          variant: variant,
          value: value,
          selected: selected
        })
      }));
    });

    function getDateTimePickerToolbarUtilityClass(slot) {
      return generateUtilityClass('MuiDateTimePickerToolbar', slot);
    }
    generateUtilityClasses('MuiDateTimePickerToolbar', ['root', 'dateContainer', 'timeContainer', 'separator']);

    const _excluded$8 = ["ampm", "parsedValue", "isMobileKeyboardViewOpen", "onChange", "openView", "setOpenView", "toggleMobileKeyboardView", "toolbarFormat", "toolbarPlaceholder", "toolbarTitle", "views"];

    const useUtilityClasses$2 = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        dateContainer: ['dateContainer'],
        timeContainer: ['timeContainer'],
        separator: ['separator']
      };
      return composeClasses(slots, getDateTimePickerToolbarUtilityClass, classes);
    };

    const DateTimePickerToolbarRoot = styled$1(PickersToolbar, {
      name: 'MuiDateTimePickerToolbar',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })(({
      theme
    }) => ({
      paddingLeft: 16,
      paddingRight: 16,
      justifyContent: 'space-around',
      position: 'relative',
      [`& .${pickersToolbarClasses.penIconButton}`]: _extends({
        position: 'absolute',
        top: 8
      }, theme.direction === 'rtl' ? {
        left: 8
      } : {
        right: 8
      })
    }));
    const DateTimePickerToolbarDateContainer = styled$1('div', {
      name: 'MuiDateTimePickerToolbar',
      slot: 'DateContainer',
      overridesResolver: (props, styles) => styles.dateContainer
    })({
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'flex-start'
    });
    const DateTimePickerToolbarTimeContainer = styled$1('div', {
      name: 'MuiDateTimePickerToolbar',
      slot: 'TimeContainer',
      overridesResolver: (props, styles) => styles.timeContainer
    })({
      display: 'flex'
    });
    const DateTimePickerToolbarSeparator = styled$1(PickersToolbarText, {
      name: 'MuiDateTimePickerToolbar',
      slot: 'Separator',
      overridesResolver: (props, styles) => styles.separator
    })({
      margin: '0 4px 0 2px',
      cursor: 'default'
    });
    /**
     * @ignore - internal component.
     */

    function DateTimePickerToolbar(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiDateTimePickerToolbar'
      });

      const {
        ampm,
        parsedValue,
        isMobileKeyboardViewOpen,
        openView,
        setOpenView,
        toggleMobileKeyboardView,
        toolbarFormat,
        toolbarPlaceholder = '––',
        toolbarTitle: toolbarTitleProp,
        views
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$8);

      const ownerState = props;
      const utils = useUtils();
      const localeText = useLocaleText();
      const classes = useUtilityClasses$2(ownerState);
      const toolbarTitle = toolbarTitleProp != null ? toolbarTitleProp : localeText.dateTimePickerDefaultToolbarTitle;

      const formatHours = time => ampm ? utils.format(time, 'hours12h') : utils.format(time, 'hours24h');

      const dateText = React__namespace.useMemo(() => {
        if (!parsedValue) {
          return toolbarPlaceholder;
        }

        if (toolbarFormat) {
          return utils.formatByString(parsedValue, toolbarFormat);
        }

        return utils.format(parsedValue, 'shortDate');
      }, [parsedValue, toolbarFormat, toolbarPlaceholder, utils]);
      return /*#__PURE__*/jsxRuntime.exports.jsxs(DateTimePickerToolbarRoot, _extends({
        toolbarTitle: toolbarTitle,
        isMobileKeyboardViewOpen: isMobileKeyboardViewOpen,
        toggleMobileKeyboardView: toggleMobileKeyboardView,
        className: classes.root
      }, other, {
        isLandscape: false,
        ownerState: ownerState,
        children: [/*#__PURE__*/jsxRuntime.exports.jsxs(DateTimePickerToolbarDateContainer, {
          className: classes.dateContainer,
          ownerState: ownerState,
          children: [views.includes('year') && /*#__PURE__*/jsxRuntime.exports.jsx(PickersToolbarButton, {
            tabIndex: -1,
            variant: "subtitle1",
            onClick: () => setOpenView('year'),
            selected: openView === 'year',
            value: parsedValue ? utils.format(parsedValue, 'year') : '–'
          }), views.includes('day') && /*#__PURE__*/jsxRuntime.exports.jsx(PickersToolbarButton, {
            tabIndex: -1,
            variant: "h4",
            onClick: () => setOpenView('day'),
            selected: openView === 'day',
            value: dateText
          })]
        }), /*#__PURE__*/jsxRuntime.exports.jsxs(DateTimePickerToolbarTimeContainer, {
          className: classes.timeContainer,
          ownerState: ownerState,
          children: [views.includes('hours') && /*#__PURE__*/jsxRuntime.exports.jsx(PickersToolbarButton, {
            variant: "h3",
            onClick: () => setOpenView('hours'),
            selected: openView === 'hours',
            value: parsedValue ? formatHours(parsedValue) : '--'
          }), views.includes('minutes') && /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
            children: [/*#__PURE__*/jsxRuntime.exports.jsx(DateTimePickerToolbarSeparator, {
              variant: "h3",
              value: ":",
              className: classes.separator,
              ownerState: ownerState
            }), /*#__PURE__*/jsxRuntime.exports.jsx(PickersToolbarButton, {
              variant: "h3",
              onClick: () => setOpenView('minutes'),
              selected: openView === 'minutes',
              value: parsedValue ? utils.format(parsedValue, 'minutes') : '--'
            })]
          }), views.includes('seconds') && /*#__PURE__*/jsxRuntime.exports.jsxs(React__namespace.Fragment, {
            children: [/*#__PURE__*/jsxRuntime.exports.jsx(DateTimePickerToolbarSeparator, {
              variant: "h3",
              value: ":",
              className: classes.separator,
              ownerState: ownerState
            }), /*#__PURE__*/jsxRuntime.exports.jsx(PickersToolbarButton, {
              variant: "h3",
              onClick: () => setOpenView('seconds'),
              selected: openView === 'seconds',
              value: parsedValue ? utils.format(parsedValue, 'seconds') : '--'
            })]
          })]
        })]
      }));
    }

    const validateTime = ({
      adapter,
      value,
      props
    }) => {
      const {
        minTime,
        maxTime,
        minutesStep,
        shouldDisableTime,
        disableIgnoringDatePartForTimeValidation
      } = props;
      const date = adapter.utils.date(value);
      const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, adapter.utils);

      if (value === null) {
        return null;
      }

      switch (true) {
        case !adapter.utils.isValid(value):
          return 'invalidDate';

        case Boolean(minTime && isAfter(minTime, date)):
          return 'minTime';

        case Boolean(maxTime && isAfter(date, maxTime)):
          return 'maxTime';

        case Boolean(shouldDisableTime && shouldDisableTime(adapter.utils.getHours(date), 'hours')):
          return 'shouldDisableTime-hours';

        case Boolean(shouldDisableTime && shouldDisableTime(adapter.utils.getMinutes(date), 'minutes')):
          return 'shouldDisableTime-minutes';

        case Boolean(shouldDisableTime && shouldDisableTime(adapter.utils.getSeconds(date), 'seconds')):
          return 'shouldDisableTime-seconds';

        case Boolean(minutesStep && adapter.utils.getMinutes(date) % minutesStep !== 0):
          return 'minutesStep';

        default:
          return null;
      }
    };

    const isSameTimeError = (a, b) => a === b;

    const useTimeValidation = props => useValidation(props, validateTime, isSameTimeError);

    const _excluded$7 = ["minDate", "maxDate", "disableFuture", "shouldDisableDate", "disablePast"];
    const validateDateTime = ({
      props,
      value,
      adapter
    }) => {
      const {
        minDate,
        maxDate,
        disableFuture,
        shouldDisableDate,
        disablePast
      } = props,
            timeValidationProps = _objectWithoutPropertiesLoose(props, _excluded$7);

      const dateValidationResult = validateDate({
        adapter,
        value,
        props: {
          minDate,
          maxDate,
          disableFuture,
          shouldDisableDate,
          disablePast
        }
      });

      if (dateValidationResult !== null) {
        return dateValidationResult;
      }

      return validateTime({
        adapter,
        value,
        props: timeValidationProps
      });
    };

    const isSameDateTimeError = (a, b) => a === b;

    function useDateTimeValidation(props) {
      return useValidation(props, validateDateTime, isSameDateTimeError);
    }

    function getDateTimePickerTabsUtilityClass(slot) {
      return generateUtilityClass('MuiDateTimePickerTabs', slot);
    }
    generateUtilityClasses('MuiDateTimePickerTabs', ['root']);

    const viewToTab = openView => {
      if (['day', 'month', 'year'].includes(openView)) {
        return 'date';
      }

      return 'time';
    };

    const tabToView = tab => {
      if (tab === 'date') {
        return 'day';
      }

      return 'hours';
    };

    const useUtilityClasses$1 = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root']
      };
      return composeClasses(slots, getDateTimePickerTabsUtilityClass, classes);
    };

    const DateTimePickerTabsRoot = styled$1(Tabs$1, {
      name: 'MuiDateTimePickerTabs',
      slot: 'Root',
      overridesResolver: (_, styles) => styles.root
    })(({
      ownerState,
      theme
    }) => _extends({
      boxShadow: `0 -1px 0 0 inset ${theme.palette.divider}`
    }, ownerState.wrapperVariant === 'desktop' && {
      order: 1,
      boxShadow: `0 1px 0 0 inset ${theme.palette.divider}`,
      [`& .${tabsClasses$1.indicator}`]: {
        bottom: 'auto',
        top: 0
      }
    }));

    const DateTimePickerTabs = function DateTimePickerTabs(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiDateTimePickerTabs'
      });
      const {
        dateRangeIcon = /*#__PURE__*/jsxRuntime.exports.jsx(DateRange, {}),
        onChange,
        timeIcon = /*#__PURE__*/jsxRuntime.exports.jsx(Time, {}),
        view
      } = props;
      const localeText = useLocaleText();
      const wrapperVariant = React__namespace.useContext(WrapperVariantContext);

      const ownerState = _extends({}, props, {
        wrapperVariant
      });

      const classes = useUtilityClasses$1(ownerState);

      const handleChange = (event, value) => {
        onChange(tabToView(value));
      };

      return /*#__PURE__*/jsxRuntime.exports.jsxs(DateTimePickerTabsRoot, {
        ownerState: ownerState,
        variant: "fullWidth",
        value: viewToTab(view),
        onChange: handleChange,
        className: classes.root,
        children: [/*#__PURE__*/jsxRuntime.exports.jsx(Tab$1, {
          value: "date",
          "aria-label": localeText.dateTableLabel,
          icon: /*#__PURE__*/jsxRuntime.exports.jsx(React__namespace.Fragment, {
            children: dateRangeIcon
          })
        }), /*#__PURE__*/jsxRuntime.exports.jsx(Tab$1, {
          value: "time",
          "aria-label": localeText.timeTableLabel,
          icon: /*#__PURE__*/jsxRuntime.exports.jsx(React__namespace.Fragment, {
            children: timeIcon
          })
        })]
      });
    };

    DateTimePickerTabs.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------

      /**
       * Override or extend the styles applied to the component.
       */
      classes: PropTypes.object,

      /**
       * Date tab icon.
       * @default DateRange
       */
      dateRangeIcon: PropTypes.node,

      /**
       * Callback called when tab is clicked
       * @param {CalendarOrClockPickerView} view Picker view that was clicked
       */
      onChange: PropTypes.func.isRequired,

      /**
       * Time tab icon.
       * @default Time
       */
      timeIcon: PropTypes.node,

      /**
       * Open picker view
       */
      view: PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'seconds', 'year']).isRequired
    } ;

    const _excluded$6 = ["onChange", "PaperProps", "PopperProps", "ToolbarComponent", "TransitionComponent", "value", "components", "componentsProps", "hideTabs"];

    /**
     *
     * Demos:
     *
     * - [Date Time Picker](https://mui.com/x/react-date-pickers/date-time-picker/)
     *
     * API:
     *
     * - [DesktopDateTimePicker API](https://mui.com/x/api/date-pickers/desktop-date-time-picker/)
     */
    const DesktopDateTimePicker = /*#__PURE__*/React__namespace.forwardRef(function DesktopDateTimePicker(inProps, ref) {
      const props = useDateTimePickerDefaultizedProps(inProps, 'MuiDesktopDateTimePicker');
      const validationError = useDateTimeValidation(props) !== null;
      const {
        pickerProps,
        inputProps,
        wrapperProps
      } = usePickerState(props, dateTimePickerValueManager);

      const {
        PaperProps,
        PopperProps,
        ToolbarComponent = DateTimePickerToolbar,
        TransitionComponent,
        components: providedComponents,
        componentsProps,
        hideTabs = true
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$6);

      const components = React__namespace.useMemo(() => _extends({
        Tabs: DateTimePickerTabs
      }, providedComponents), [providedComponents]);

      const AllDateInputProps = _extends({}, inputProps, other, {
        components,
        componentsProps,
        ref,
        validationError
      });

      return /*#__PURE__*/jsxRuntime.exports.jsx(DesktopWrapper, _extends({}, wrapperProps, {
        DateInputProps: AllDateInputProps,
        KeyboardDateInputComponent: KeyboardDateInput,
        PopperProps: PopperProps,
        PaperProps: PaperProps,
        TransitionComponent: TransitionComponent,
        components: components,
        componentsProps: componentsProps,
        children: /*#__PURE__*/jsxRuntime.exports.jsx(CalendarOrClockPicker, _extends({}, pickerProps, {
          autoFocus: true,
          toolbarTitle: props.label || props.toolbarTitle,
          ToolbarComponent: ToolbarComponent,
          DateInputProps: AllDateInputProps,
          components: components,
          componentsProps: componentsProps,
          hideTabs: hideTabs
        }, other))
      }));
    });
    DesktopDateTimePicker.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------

      /**
       * Regular expression to detect "accepted" symbols.
       * @default /\dap/gi
       */
      acceptRegex: PropTypes.instanceOf(RegExp),

      /**
       * 12h/24h view for hour selection clock.
       * @default `utils.is12HourCycleInCurrentLocale()`
       */
      ampm: PropTypes.bool,

      /**
       * Display ampm controls under the clock (instead of in the toolbar).
       * @default false
       */
      ampmInClock: PropTypes.bool,
      autoFocus: PropTypes.bool,
      children: PropTypes.node,

      /**
       * className applied to the root component.
       */
      className: PropTypes.string,

      /**
       * If `true` the popup or dialog will immediately close after submitting full date.
       * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
       */
      closeOnSelect: PropTypes.bool,

      /**
       * Overrideable components.
       * @default {}
       */
      components: PropTypes.object,

      /**
       * The props used for each component slot.
       * @default {}
       */
      componentsProps: PropTypes.object,

      /**
       * Date tab icon.
       */
      dateRangeIcon: PropTypes.node,

      /**
       * Formats the day of week displayed in the calendar header.
       * @param {string} day The day of week provided by the adapter's method `getWeekdays`.
       * @returns {string} The name to display.
       * @default (day) => day.charAt(0).toUpperCase()
       */
      dayOfWeekFormatter: PropTypes.func,

      /**
       * Default calendar month displayed when `value={null}`.
       */
      defaultCalendarMonth: PropTypes.any,

      /**
       * If `true`, the picker and text field are disabled.
       * @default false
       */
      disabled: PropTypes.bool,

      /**
       * If `true` future days are disabled.
       * @default false
       */
      disableFuture: PropTypes.bool,

      /**
       * If `true`, today's date is rendering without highlighting with circle.
       * @default false
       */
      disableHighlightToday: PropTypes.bool,

      /**
       * Do not ignore date part when validating min/max time.
       * @default false
       */
      disableIgnoringDatePartForTimeValidation: PropTypes.bool,

      /**
       * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.
       * @default false
       */
      disableMaskedInput: PropTypes.bool,

      /**
       * Do not render open picker button (renders only text field with validation).
       * @default false
       */
      disableOpenPicker: PropTypes.bool,

      /**
       * If `true` past days are disabled.
       * @default false
       */
      disablePast: PropTypes.bool,

      /**
       * Accessible text that helps user to understand which time and view is selected.
       * @template TDate
       * @param {ClockPickerView} view The current view rendered.
       * @param {TDate | null} time The current time.
       * @param {MuiPickersAdapter<TDate>} adapter The current date adapter.
       * @returns {string} The clock label.
       * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.
       * @default <TDate extends any>(
       *   view: ClockView,
       *   time: TDate | null,
       *   adapter: MuiPickersAdapter<TDate>,
       * ) =>
       *   `Select ${view}. ${
       *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`
       *   }`
       */
      getClockLabelText: PropTypes.func,

      /**
       * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType
       * @template TInputDate, TDate
       * @param {TInputDate} date The date from which we want to add an aria-text.
       * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.
       * @returns {string} The aria-text to render inside the dialog.
       * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`
       */
      getOpenDialogAriaText: PropTypes.func,

      /**
       * Get aria-label text for switching between views button.
       * @param {CalendarPickerView} currentView The view from which we want to get the button text.
       * @returns {string} The label of the view.
       * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.
       */
      getViewSwitchingButtonText: PropTypes.func,

      /**
       * Toggles visibility of date time switching tabs
       * @default false for mobile, true for desktop
       */
      hideTabs: PropTypes.bool,
      ignoreInvalidInputs: PropTypes.bool,

      /**
       * Props to pass to keyboard input adornment.
       */
      InputAdornmentProps: PropTypes.object,

      /**
       * Format string.
       */
      inputFormat: PropTypes.string,
      InputProps: PropTypes.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
        current: PropTypes.object
      })]),
      label: PropTypes.node,

      /**
       * Left arrow icon aria-label text.
       * @deprecated
       */
      leftArrowButtonText: PropTypes.string,

      /**
       * If `true` renders `LoadingComponent` in calendar instead of calendar view.
       * Can be used to preload information and show it in calendar.
       * @default false
       */
      loading: PropTypes.bool,

      /**
       * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).
       */
      mask: PropTypes.string,

      /**
       * Maximal selectable date. @DateIOType
       */
      maxDate: PropTypes.any,

      /**
       * Maximal selectable moment of time with binding to date, to set max time in each day use `maxTime`.
       */
      maxDateTime: PropTypes.any,

      /**
       * Max time acceptable time.
       * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.
       */
      maxTime: PropTypes.any,

      /**
       * Minimal selectable date. @DateIOType
       */
      minDate: PropTypes.any,

      /**
       * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.
       */
      minDateTime: PropTypes.any,

      /**
       * Min time acceptable time.
       * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.
       */
      minTime: PropTypes.any,

      /**
       * Step over minutes.
       * @default 1
       */
      minutesStep: PropTypes.number,

      /**
       * Callback fired when date is accepted @DateIOType.
       * @template TValue
       * @param {TValue} value The value that was just accepted.
       */
      onAccept: PropTypes.func,

      /**
       * Callback fired when the value (the selected date) changes @DateIOType.
       * @template TValue
       * @param {TValue} value The new parsed value.
       * @param {string} keyboardInputValue The current value of the keyboard input.
       */
      onChange: PropTypes.func.isRequired,

      /**
       * Callback fired when the popup requests to be closed.
       * Use in controlled mode (see open).
       */
      onClose: PropTypes.func,

      /**
       * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).
       * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.
       * This can be used to render appropriate form error.
       *
       * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.
       * @DateIOType
       *
       * @template TError, TInputValue
       * @param {TError} reason The reason why the current value is not valid.
       * @param {TInputValue} value The invalid value.
       */
      onError: PropTypes.func,

      /**
       * Callback firing on month change @DateIOType.
       * @template TDate
       * @param {TDate} month The new month.
       * @returns {void|Promise} -
       */
      onMonthChange: PropTypes.func,

      /**
       * Callback fired when the popup requests to be opened.
       * Use in controlled mode (see open).
       */
      onOpen: PropTypes.func,

      /**
       * Callback fired on view change.
       * @param {CalendarOrClockPickerView} view The new view.
       */
      onViewChange: PropTypes.func,

      /**
       * Callback firing on year change @DateIOType.
       * @template TDate
       * @param {TDate} year The new year.
       */
      onYearChange: PropTypes.func,

      /**
       * Control the popup or dialog open state.
       */
      open: PropTypes.bool,

      /**
       * Props to pass to keyboard adornment button.
       */
      OpenPickerButtonProps: PropTypes.object,

      /**
       * First view to show.
       * Must be a valid option from `views` list
       * @default 'day'
       */
      openTo: PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'seconds', 'year']),

      /**
       * Force rendering in particular orientation.
       */
      orientation: PropTypes.oneOf(['landscape', 'portrait']),

      /**
       * Paper props passed down to [Paper](https://mui.com/material-ui/api/paper/) component.
       */
      PaperProps: PropTypes.object,

      /**
       * Popper props passed down to [Popper](https://mui.com/material-ui/api/popper/) component.
       */
      PopperProps: PropTypes.object,

      /**
       * Make picker read only.
       * @default false
       */
      readOnly: PropTypes.bool,

      /**
       * Disable heavy animations.
       * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)
       */
      reduceAnimations: PropTypes.bool,

      /**
       * Custom renderer for day. Check the [PickersDay](https://mui.com/x/api/date-pickers/pickers-day/) component.
       * @template TDate
       * @param {TDate} day The day to render.
       * @param {Array<TDate | null>} selectedDays The days currently selected.
       * @param {PickersDayProps<TDate>} pickersDayProps The props of the day to render.
       * @returns {JSX.Element} The element representing the day.
       */
      renderDay: PropTypes.func,

      /**
       * The `renderInput` prop allows you to customize the rendered input.
       * The `props` argument of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props) that you need to forward.
       * Pay specific attention to the `ref` and `inputProps` keys.
       * @example ```jsx
       * renderInput={props => <TextField {...props} />}
       * ````
       * @param {MuiTextFieldPropsType} props The props of the input.
       * @returns {React.ReactNode} The node to render as the input.
       */
      renderInput: PropTypes.func.isRequired,

      /**
       * Component displaying when passed `loading` true.
       * @returns {React.ReactNode} The node to render when loading.
       * @default () => <span data-mui-test="loading-progress">...</span>
       */
      renderLoading: PropTypes.func,

      /**
       * Custom formatter to be passed into Rifm component.
       * @param {string} str The un-formatted string.
       * @returns {string} The formatted string.
       */
      rifmFormatter: PropTypes.func,

      /**
       * Right arrow icon aria-label text.
       * @deprecated
       */
      rightArrowButtonText: PropTypes.string,

      /**
       * Disable specific date. @DateIOType
       * @template TDate
       * @param {TDate} day The date to test.
       * @returns {boolean} Returns `true` if the date should be disabled.
       */
      shouldDisableDate: PropTypes.func,

      /**
       * Disable specific months dynamically.
       * Works like `shouldDisableDate` but for month selection view @DateIOType.
       * @template TDate
       * @param {TDate} month The month to check.
       * @returns {boolean} If `true` the month will be disabled.
       */
      shouldDisableMonth: PropTypes.func,

      /**
       * Dynamically check if time is disabled or not.
       * If returns `false` appropriate time point will ot be acceptable.
       * @param {number} timeValue The value to check.
       * @param {ClockPickerView} clockType The clock type of the timeValue.
       * @returns {boolean} Returns `true` if the time should be disabled
       */
      shouldDisableTime: PropTypes.func,

      /**
       * Disable specific years dynamically.
       * Works like `shouldDisableDate` but for year selection view @DateIOType.
       * @template TDate
       * @param {TDate} year The year to test.
       * @returns {boolean} Returns `true` if the year should be disabled.
       */
      shouldDisableYear: PropTypes.func,

      /**
       * If `true`, days that have `outsideCurrentMonth={true}` are displayed.
       * @default false
       */
      showDaysOutsideCurrentMonth: PropTypes.bool,

      /**
       * If `true`, show the toolbar even in desktop mode.
       */
      showToolbar: PropTypes.bool,

      /**
       * Time tab icon.
       */
      timeIcon: PropTypes.node,

      /**
       * Component that will replace default toolbar renderer.
       * @default DateTimePickerToolbar
       */
      ToolbarComponent: PropTypes.elementType,

      /**
       * Date format, that is displaying in toolbar.
       */
      toolbarFormat: PropTypes.string,

      /**
       * Mobile picker date value placeholder, displaying if `value` === `null`.
       * @default '–'
       */
      toolbarPlaceholder: PropTypes.node,

      /**
       * Mobile picker title, displaying in the toolbar.
       * @default 'Select date & time'
       */
      toolbarTitle: PropTypes.node,

      /**
       * Custom component for popper [Transition](https://mui.com/material-ui/transitions/#transitioncomponent-prop).
       */
      TransitionComponent: PropTypes.elementType,

      /**
       * The value of the picker.
       */
      value: PropTypes.any,

      /**
       * Array of views to show.
       * @default ['year', 'day', 'hours', 'minutes']
       */
      views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'seconds', 'year']).isRequired)
    } ;

    const _excluded$5 = ["ToolbarComponent", "value", "onChange", "components", "componentsProps", "hideTabs"];

    /**
     *
     * Demos:
     *
     * - [Date Time Picker](https://mui.com/x/react-date-pickers/date-time-picker/)
     *
     * API:
     *
     * - [MobileDateTimePicker API](https://mui.com/x/api/date-pickers/mobile-date-time-picker/)
     */
    const MobileDateTimePicker = /*#__PURE__*/React__namespace.forwardRef(function MobileDateTimePicker(inProps, ref) {
      const props = useDateTimePickerDefaultizedProps(inProps, 'MuiMobileDateTimePicker');
      const validationError = useDateTimeValidation(props) !== null;
      const {
        pickerProps,
        inputProps,
        wrapperProps
      } = usePickerState(props, dateTimePickerValueManager); // Note that we are passing down all the value without spread.
      // It saves us >1kb gzip and make any prop available automatically on any level down.

      const {
        ToolbarComponent = DateTimePickerToolbar,
        components: providedComponents,
        componentsProps,
        hideTabs = false
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$5);

      const components = React__namespace.useMemo(() => _extends({
        Tabs: DateTimePickerTabs
      }, providedComponents), [providedComponents]);

      const DateInputProps = _extends({}, inputProps, other, {
        components,
        componentsProps,
        ref,
        validationError
      });

      return /*#__PURE__*/jsxRuntime.exports.jsx(MobileWrapper, _extends({}, other, wrapperProps, {
        DateInputProps: DateInputProps,
        PureDateInputComponent: PureDateInput,
        components: components,
        componentsProps: componentsProps,
        children: /*#__PURE__*/jsxRuntime.exports.jsx(CalendarOrClockPicker, _extends({}, pickerProps, {
          autoFocus: true,
          toolbarTitle: props.label || props.toolbarTitle,
          ToolbarComponent: ToolbarComponent,
          DateInputProps: DateInputProps,
          components: components,
          componentsProps: componentsProps,
          hideTabs: hideTabs
        }, other))
      }));
    });
    MobileDateTimePicker.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------

      /**
       * Regular expression to detect "accepted" symbols.
       * @default /\dap/gi
       */
      acceptRegex: PropTypes.instanceOf(RegExp),

      /**
       * 12h/24h view for hour selection clock.
       * @default `utils.is12HourCycleInCurrentLocale()`
       */
      ampm: PropTypes.bool,

      /**
       * Display ampm controls under the clock (instead of in the toolbar).
       * @default false
       */
      ampmInClock: PropTypes.bool,
      autoFocus: PropTypes.bool,
      children: PropTypes.node,

      /**
       * className applied to the root component.
       */
      className: PropTypes.string,

      /**
       * If `true` the popup or dialog will immediately close after submitting full date.
       * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
       */
      closeOnSelect: PropTypes.bool,

      /**
       * Overrideable components.
       * @default {}
       */
      components: PropTypes.object,

      /**
       * The props used for each component slot.
       * @default {}
       */
      componentsProps: PropTypes.object,

      /**
       * Date tab icon.
       */
      dateRangeIcon: PropTypes.node,

      /**
       * Formats the day of week displayed in the calendar header.
       * @param {string} day The day of week provided by the adapter's method `getWeekdays`.
       * @returns {string} The name to display.
       * @default (day) => day.charAt(0).toUpperCase()
       */
      dayOfWeekFormatter: PropTypes.func,

      /**
       * Default calendar month displayed when `value={null}`.
       */
      defaultCalendarMonth: PropTypes.any,

      /**
       * Props applied to the [`Dialog`](https://mui.com/material-ui/api/dialog/) element.
       */
      DialogProps: PropTypes.object,

      /**
       * If `true`, the picker and text field are disabled.
       * @default false
       */
      disabled: PropTypes.bool,

      /**
       * If `true` future days are disabled.
       * @default false
       */
      disableFuture: PropTypes.bool,

      /**
       * If `true`, today's date is rendering without highlighting with circle.
       * @default false
       */
      disableHighlightToday: PropTypes.bool,

      /**
       * Do not ignore date part when validating min/max time.
       * @default false
       */
      disableIgnoringDatePartForTimeValidation: PropTypes.bool,

      /**
       * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.
       * @default false
       */
      disableMaskedInput: PropTypes.bool,

      /**
       * Do not render open picker button (renders only text field with validation).
       * @default false
       */
      disableOpenPicker: PropTypes.bool,

      /**
       * If `true` past days are disabled.
       * @default false
       */
      disablePast: PropTypes.bool,

      /**
       * Accessible text that helps user to understand which time and view is selected.
       * @template TDate
       * @param {ClockPickerView} view The current view rendered.
       * @param {TDate | null} time The current time.
       * @param {MuiPickersAdapter<TDate>} adapter The current date adapter.
       * @returns {string} The clock label.
       * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.
       * @default <TDate extends any>(
       *   view: ClockView,
       *   time: TDate | null,
       *   adapter: MuiPickersAdapter<TDate>,
       * ) =>
       *   `Select ${view}. ${
       *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`
       *   }`
       */
      getClockLabelText: PropTypes.func,

      /**
       * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType
       * @template TInputDate, TDate
       * @param {TInputDate} date The date from which we want to add an aria-text.
       * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.
       * @returns {string} The aria-text to render inside the dialog.
       * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`
       */
      getOpenDialogAriaText: PropTypes.func,

      /**
       * Get aria-label text for switching between views button.
       * @param {CalendarPickerView} currentView The view from which we want to get the button text.
       * @returns {string} The label of the view.
       * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.
       */
      getViewSwitchingButtonText: PropTypes.func,

      /**
       * Toggles visibility of date time switching tabs
       * @default false for mobile, true for desktop
       */
      hideTabs: PropTypes.bool,
      ignoreInvalidInputs: PropTypes.bool,

      /**
       * Props to pass to keyboard input adornment.
       */
      InputAdornmentProps: PropTypes.object,

      /**
       * Format string.
       */
      inputFormat: PropTypes.string,
      InputProps: PropTypes.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
        current: PropTypes.object
      })]),
      label: PropTypes.node,

      /**
       * Left arrow icon aria-label text.
       * @deprecated
       */
      leftArrowButtonText: PropTypes.string,

      /**
       * If `true` renders `LoadingComponent` in calendar instead of calendar view.
       * Can be used to preload information and show it in calendar.
       * @default false
       */
      loading: PropTypes.bool,

      /**
       * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).
       */
      mask: PropTypes.string,

      /**
       * Maximal selectable date. @DateIOType
       */
      maxDate: PropTypes.any,

      /**
       * Maximal selectable moment of time with binding to date, to set max time in each day use `maxTime`.
       */
      maxDateTime: PropTypes.any,

      /**
       * Max time acceptable time.
       * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.
       */
      maxTime: PropTypes.any,

      /**
       * Minimal selectable date. @DateIOType
       */
      minDate: PropTypes.any,

      /**
       * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.
       */
      minDateTime: PropTypes.any,

      /**
       * Min time acceptable time.
       * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.
       */
      minTime: PropTypes.any,

      /**
       * Step over minutes.
       * @default 1
       */
      minutesStep: PropTypes.number,

      /**
       * Callback fired when date is accepted @DateIOType.
       * @template TValue
       * @param {TValue} value The value that was just accepted.
       */
      onAccept: PropTypes.func,

      /**
       * Callback fired when the value (the selected date) changes @DateIOType.
       * @template TValue
       * @param {TValue} value The new parsed value.
       * @param {string} keyboardInputValue The current value of the keyboard input.
       */
      onChange: PropTypes.func.isRequired,

      /**
       * Callback fired when the popup requests to be closed.
       * Use in controlled mode (see open).
       */
      onClose: PropTypes.func,

      /**
       * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).
       * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.
       * This can be used to render appropriate form error.
       *
       * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.
       * @DateIOType
       *
       * @template TError, TInputValue
       * @param {TError} reason The reason why the current value is not valid.
       * @param {TInputValue} value The invalid value.
       */
      onError: PropTypes.func,

      /**
       * Callback firing on month change @DateIOType.
       * @template TDate
       * @param {TDate} month The new month.
       * @returns {void|Promise} -
       */
      onMonthChange: PropTypes.func,

      /**
       * Callback fired when the popup requests to be opened.
       * Use in controlled mode (see open).
       */
      onOpen: PropTypes.func,

      /**
       * Callback fired on view change.
       * @param {CalendarOrClockPickerView} view The new view.
       */
      onViewChange: PropTypes.func,

      /**
       * Callback firing on year change @DateIOType.
       * @template TDate
       * @param {TDate} year The new year.
       */
      onYearChange: PropTypes.func,

      /**
       * Control the popup or dialog open state.
       */
      open: PropTypes.bool,

      /**
       * Props to pass to keyboard adornment button.
       */
      OpenPickerButtonProps: PropTypes.object,

      /**
       * First view to show.
       * Must be a valid option from `views` list
       * @default 'day'
       */
      openTo: PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'seconds', 'year']),

      /**
       * Force rendering in particular orientation.
       */
      orientation: PropTypes.oneOf(['landscape', 'portrait']),

      /**
       * Make picker read only.
       * @default false
       */
      readOnly: PropTypes.bool,

      /**
       * Disable heavy animations.
       * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)
       */
      reduceAnimations: PropTypes.bool,

      /**
       * Custom renderer for day. Check the [PickersDay](https://mui.com/x/api/date-pickers/pickers-day/) component.
       * @template TDate
       * @param {TDate} day The day to render.
       * @param {Array<TDate | null>} selectedDays The days currently selected.
       * @param {PickersDayProps<TDate>} pickersDayProps The props of the day to render.
       * @returns {JSX.Element} The element representing the day.
       */
      renderDay: PropTypes.func,

      /**
       * The `renderInput` prop allows you to customize the rendered input.
       * The `props` argument of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props) that you need to forward.
       * Pay specific attention to the `ref` and `inputProps` keys.
       * @example ```jsx
       * renderInput={props => <TextField {...props} />}
       * ````
       * @param {MuiTextFieldPropsType} props The props of the input.
       * @returns {React.ReactNode} The node to render as the input.
       */
      renderInput: PropTypes.func.isRequired,

      /**
       * Component displaying when passed `loading` true.
       * @returns {React.ReactNode} The node to render when loading.
       * @default () => <span data-mui-test="loading-progress">...</span>
       */
      renderLoading: PropTypes.func,

      /**
       * Custom formatter to be passed into Rifm component.
       * @param {string} str The un-formatted string.
       * @returns {string} The formatted string.
       */
      rifmFormatter: PropTypes.func,

      /**
       * Right arrow icon aria-label text.
       * @deprecated
       */
      rightArrowButtonText: PropTypes.string,

      /**
       * Disable specific date. @DateIOType
       * @template TDate
       * @param {TDate} day The date to test.
       * @returns {boolean} Returns `true` if the date should be disabled.
       */
      shouldDisableDate: PropTypes.func,

      /**
       * Disable specific months dynamically.
       * Works like `shouldDisableDate` but for month selection view @DateIOType.
       * @template TDate
       * @param {TDate} month The month to check.
       * @returns {boolean} If `true` the month will be disabled.
       */
      shouldDisableMonth: PropTypes.func,

      /**
       * Dynamically check if time is disabled or not.
       * If returns `false` appropriate time point will ot be acceptable.
       * @param {number} timeValue The value to check.
       * @param {ClockPickerView} clockType The clock type of the timeValue.
       * @returns {boolean} Returns `true` if the time should be disabled
       */
      shouldDisableTime: PropTypes.func,

      /**
       * Disable specific years dynamically.
       * Works like `shouldDisableDate` but for year selection view @DateIOType.
       * @template TDate
       * @param {TDate} year The year to test.
       * @returns {boolean} Returns `true` if the year should be disabled.
       */
      shouldDisableYear: PropTypes.func,

      /**
       * If `true`, days that have `outsideCurrentMonth={true}` are displayed.
       * @default false
       */
      showDaysOutsideCurrentMonth: PropTypes.bool,

      /**
       * If `true`, show the toolbar even in desktop mode.
       */
      showToolbar: PropTypes.bool,

      /**
       * Time tab icon.
       */
      timeIcon: PropTypes.node,

      /**
       * Component that will replace default toolbar renderer.
       * @default DateTimePickerToolbar
       */
      ToolbarComponent: PropTypes.elementType,

      /**
       * Date format, that is displaying in toolbar.
       */
      toolbarFormat: PropTypes.string,

      /**
       * Mobile picker date value placeholder, displaying if `value` === `null`.
       * @default '–'
       */
      toolbarPlaceholder: PropTypes.node,

      /**
       * Mobile picker title, displaying in the toolbar.
       * @default 'Select date & time'
       */
      toolbarTitle: PropTypes.node,

      /**
       * The value of the picker.
       */
      value: PropTypes.any,

      /**
       * Array of views to show.
       * @default ['year', 'day', 'hours', 'minutes']
       */
      views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'seconds', 'year']).isRequired)
    } ;

    const _excluded$4 = ["desktopModeMediaQuery", "DialogProps", "PopperProps", "TransitionComponent"];

    /**
     *
     * Demos:
     *
     * - [Date Time Picker](https://mui.com/x/react-date-pickers/date-time-picker/)
     * - [Pickers](https://mui.com/x/react-date-pickers/)
     *
     * API:
     *
     * - [DateTimePicker API](https://mui.com/x/api/date-pickers/date-time-picker/)
     */
    const DateTimePicker = /*#__PURE__*/React__namespace.forwardRef(function DateTimePicker(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiDateTimePicker'
      });

      const {
        desktopModeMediaQuery = '@media (pointer: fine)',
        DialogProps,
        PopperProps,
        TransitionComponent
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$4); // defaults to `true` in environments where `window.matchMedia` would not be available (i.e. test/jsdom)


      const isDesktop = useMediaQuery(desktopModeMediaQuery, {
        defaultMatches: true
      });

      if (isDesktop) {
        return /*#__PURE__*/jsxRuntime.exports.jsx(DesktopDateTimePicker, _extends({
          ref: ref,
          PopperProps: PopperProps,
          TransitionComponent: TransitionComponent
        }, other));
      }

      return /*#__PURE__*/jsxRuntime.exports.jsx(MobileDateTimePicker, _extends({
        ref: ref,
        DialogProps: DialogProps
      }, other));
    });
    DateTimePicker.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------

      /**
       * Regular expression to detect "accepted" symbols.
       * @default /\dap/gi
       */
      acceptRegex: PropTypes.instanceOf(RegExp),

      /**
       * 12h/24h view for hour selection clock.
       * @default `utils.is12HourCycleInCurrentLocale()`
       */
      ampm: PropTypes.bool,

      /**
       * Display ampm controls under the clock (instead of in the toolbar).
       * @default false
       */
      ampmInClock: PropTypes.bool,
      autoFocus: PropTypes.bool,
      children: PropTypes.node,

      /**
       * className applied to the root component.
       */
      className: PropTypes.string,

      /**
       * If `true` the popup or dialog will immediately close after submitting full date.
       * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
       */
      closeOnSelect: PropTypes.bool,

      /**
       * Overrideable components.
       * @default {}
       */
      components: PropTypes.object,

      /**
       * The props used for each component slot.
       * @default {}
       */
      componentsProps: PropTypes.object,

      /**
       * Date tab icon.
       */
      dateRangeIcon: PropTypes.node,

      /**
       * Formats the day of week displayed in the calendar header.
       * @param {string} day The day of week provided by the adapter's method `getWeekdays`.
       * @returns {string} The name to display.
       * @default (day) => day.charAt(0).toUpperCase()
       */
      dayOfWeekFormatter: PropTypes.func,

      /**
       * Default calendar month displayed when `value={null}`.
       */
      defaultCalendarMonth: PropTypes.any,

      /**
       * CSS media query when `Mobile` mode will be changed to `Desktop`.
       * @default '@media (pointer: fine)'
       * @example '@media (min-width: 720px)' or theme.breakpoints.up("sm")
       */
      desktopModeMediaQuery: PropTypes.string,

      /**
       * Props applied to the [`Dialog`](https://mui.com/material-ui/api/dialog/) element.
       */
      DialogProps: PropTypes.object,

      /**
       * If `true`, the picker and text field are disabled.
       * @default false
       */
      disabled: PropTypes.bool,

      /**
       * If `true` future days are disabled.
       * @default false
       */
      disableFuture: PropTypes.bool,

      /**
       * If `true`, today's date is rendering without highlighting with circle.
       * @default false
       */
      disableHighlightToday: PropTypes.bool,

      /**
       * Do not ignore date part when validating min/max time.
       * @default false
       */
      disableIgnoringDatePartForTimeValidation: PropTypes.bool,

      /**
       * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.
       * @default false
       */
      disableMaskedInput: PropTypes.bool,

      /**
       * Do not render open picker button (renders only text field with validation).
       * @default false
       */
      disableOpenPicker: PropTypes.bool,

      /**
       * If `true` past days are disabled.
       * @default false
       */
      disablePast: PropTypes.bool,

      /**
       * Accessible text that helps user to understand which time and view is selected.
       * @template TDate
       * @param {ClockPickerView} view The current view rendered.
       * @param {TDate | null} time The current time.
       * @param {MuiPickersAdapter<TDate>} adapter The current date adapter.
       * @returns {string} The clock label.
       * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.
       * @default <TDate extends any>(
       *   view: ClockView,
       *   time: TDate | null,
       *   adapter: MuiPickersAdapter<TDate>,
       * ) =>
       *   `Select ${view}. ${
       *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`
       *   }`
       */
      getClockLabelText: PropTypes.func,

      /**
       * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType
       * @template TInputDate, TDate
       * @param {TInputDate} date The date from which we want to add an aria-text.
       * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.
       * @returns {string} The aria-text to render inside the dialog.
       * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`
       */
      getOpenDialogAriaText: PropTypes.func,

      /**
       * Get aria-label text for switching between views button.
       * @param {CalendarPickerView} currentView The view from which we want to get the button text.
       * @returns {string} The label of the view.
       * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.
       */
      getViewSwitchingButtonText: PropTypes.func,

      /**
       * Toggles visibility of date time switching tabs
       * @default false for mobile, true for desktop
       */
      hideTabs: PropTypes.bool,
      ignoreInvalidInputs: PropTypes.bool,

      /**
       * Props to pass to keyboard input adornment.
       */
      InputAdornmentProps: PropTypes.object,

      /**
       * Format string.
       */
      inputFormat: PropTypes.string,
      InputProps: PropTypes.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
        current: PropTypes.object
      })]),
      label: PropTypes.node,

      /**
       * Left arrow icon aria-label text.
       * @deprecated
       */
      leftArrowButtonText: PropTypes.string,

      /**
       * If `true` renders `LoadingComponent` in calendar instead of calendar view.
       * Can be used to preload information and show it in calendar.
       * @default false
       */
      loading: PropTypes.bool,

      /**
       * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).
       */
      mask: PropTypes.string,

      /**
       * Maximal selectable date. @DateIOType
       */
      maxDate: PropTypes.any,

      /**
       * Maximal selectable moment of time with binding to date, to set max time in each day use `maxTime`.
       */
      maxDateTime: PropTypes.any,

      /**
       * Max time acceptable time.
       * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.
       */
      maxTime: PropTypes.any,

      /**
       * Minimal selectable date. @DateIOType
       */
      minDate: PropTypes.any,

      /**
       * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.
       */
      minDateTime: PropTypes.any,

      /**
       * Min time acceptable time.
       * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.
       */
      minTime: PropTypes.any,

      /**
       * Step over minutes.
       * @default 1
       */
      minutesStep: PropTypes.number,

      /**
       * Callback fired when date is accepted @DateIOType.
       * @template TValue
       * @param {TValue} value The value that was just accepted.
       */
      onAccept: PropTypes.func,

      /**
       * Callback fired when the value (the selected date) changes @DateIOType.
       * @template TValue
       * @param {TValue} value The new parsed value.
       * @param {string} keyboardInputValue The current value of the keyboard input.
       */
      onChange: PropTypes.func.isRequired,

      /**
       * Callback fired when the popup requests to be closed.
       * Use in controlled mode (see open).
       */
      onClose: PropTypes.func,

      /**
       * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).
       * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.
       * This can be used to render appropriate form error.
       *
       * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.
       * @DateIOType
       *
       * @template TError, TInputValue
       * @param {TError} reason The reason why the current value is not valid.
       * @param {TInputValue} value The invalid value.
       */
      onError: PropTypes.func,

      /**
       * Callback firing on month change @DateIOType.
       * @template TDate
       * @param {TDate} month The new month.
       * @returns {void|Promise} -
       */
      onMonthChange: PropTypes.func,

      /**
       * Callback fired when the popup requests to be opened.
       * Use in controlled mode (see open).
       */
      onOpen: PropTypes.func,

      /**
       * Callback fired on view change.
       * @param {CalendarOrClockPickerView} view The new view.
       */
      onViewChange: PropTypes.func,

      /**
       * Callback firing on year change @DateIOType.
       * @template TDate
       * @param {TDate} year The new year.
       */
      onYearChange: PropTypes.func,

      /**
       * Control the popup or dialog open state.
       */
      open: PropTypes.bool,

      /**
       * Props to pass to keyboard adornment button.
       */
      OpenPickerButtonProps: PropTypes.object,

      /**
       * First view to show.
       * Must be a valid option from `views` list
       * @default 'day'
       */
      openTo: PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'seconds', 'year']),

      /**
       * Force rendering in particular orientation.
       */
      orientation: PropTypes.oneOf(['landscape', 'portrait']),

      /**
       * Paper props passed down to [Paper](https://mui.com/material-ui/api/paper/) component.
       */
      PaperProps: PropTypes.object,

      /**
       * Popper props passed down to [Popper](https://mui.com/material-ui/api/popper/) component.
       */
      PopperProps: PropTypes.object,

      /**
       * Make picker read only.
       * @default false
       */
      readOnly: PropTypes.bool,

      /**
       * Disable heavy animations.
       * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)
       */
      reduceAnimations: PropTypes.bool,

      /**
       * Custom renderer for day. Check the [PickersDay](https://mui.com/x/api/date-pickers/pickers-day/) component.
       * @template TDate
       * @param {TDate} day The day to render.
       * @param {Array<TDate | null>} selectedDays The days currently selected.
       * @param {PickersDayProps<TDate>} pickersDayProps The props of the day to render.
       * @returns {JSX.Element} The element representing the day.
       */
      renderDay: PropTypes.func,

      /**
       * The `renderInput` prop allows you to customize the rendered input.
       * The `props` argument of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props) that you need to forward.
       * Pay specific attention to the `ref` and `inputProps` keys.
       * @example ```jsx
       * renderInput={props => <TextField {...props} />}
       * ````
       * @param {MuiTextFieldPropsType} props The props of the input.
       * @returns {React.ReactNode} The node to render as the input.
       */
      renderInput: PropTypes.func.isRequired,

      /**
       * Component displaying when passed `loading` true.
       * @returns {React.ReactNode} The node to render when loading.
       * @default () => <span data-mui-test="loading-progress">...</span>
       */
      renderLoading: PropTypes.func,

      /**
       * Custom formatter to be passed into Rifm component.
       * @param {string} str The un-formatted string.
       * @returns {string} The formatted string.
       */
      rifmFormatter: PropTypes.func,

      /**
       * Right arrow icon aria-label text.
       * @deprecated
       */
      rightArrowButtonText: PropTypes.string,

      /**
       * Disable specific date. @DateIOType
       * @template TDate
       * @param {TDate} day The date to test.
       * @returns {boolean} Returns `true` if the date should be disabled.
       */
      shouldDisableDate: PropTypes.func,

      /**
       * Disable specific months dynamically.
       * Works like `shouldDisableDate` but for month selection view @DateIOType.
       * @template TDate
       * @param {TDate} month The month to check.
       * @returns {boolean} If `true` the month will be disabled.
       */
      shouldDisableMonth: PropTypes.func,

      /**
       * Dynamically check if time is disabled or not.
       * If returns `false` appropriate time point will ot be acceptable.
       * @param {number} timeValue The value to check.
       * @param {ClockPickerView} clockType The clock type of the timeValue.
       * @returns {boolean} Returns `true` if the time should be disabled
       */
      shouldDisableTime: PropTypes.func,

      /**
       * Disable specific years dynamically.
       * Works like `shouldDisableDate` but for year selection view @DateIOType.
       * @template TDate
       * @param {TDate} year The year to test.
       * @returns {boolean} Returns `true` if the year should be disabled.
       */
      shouldDisableYear: PropTypes.func,

      /**
       * If `true`, days that have `outsideCurrentMonth={true}` are displayed.
       * @default false
       */
      showDaysOutsideCurrentMonth: PropTypes.bool,

      /**
       * If `true`, show the toolbar even in desktop mode.
       */
      showToolbar: PropTypes.bool,

      /**
       * Time tab icon.
       */
      timeIcon: PropTypes.node,

      /**
       * Component that will replace default toolbar renderer.
       * @default DateTimePickerToolbar
       */
      ToolbarComponent: PropTypes.elementType,

      /**
       * Date format, that is displaying in toolbar.
       */
      toolbarFormat: PropTypes.string,

      /**
       * Mobile picker date value placeholder, displaying if `value` === `null`.
       * @default '–'
       */
      toolbarPlaceholder: PropTypes.node,

      /**
       * Mobile picker title, displaying in the toolbar.
       * @default 'Select date & time'
       */
      toolbarTitle: PropTypes.node,

      /**
       * Custom component for popper [Transition](https://mui.com/material-ui/transitions/#transitioncomponent-prop).
       */
      TransitionComponent: PropTypes.elementType,

      /**
       * The value of the picker.
       */
      value: PropTypes.any,

      /**
       * Array of views to show.
       * @default ['year', 'day', 'hours', 'minutes']
       */
      views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'seconds', 'year']).isRequired)
    } ;

    function useTimePickerDefaultizedProps(props, name) {
      var _themeProps$ampm;

      // This is technically unsound if the type parameters appear in optional props.
      // Optional props can be filled by `useThemeProps` with types that don't match the type parameters.
      const themeProps = useThemeProps({
        props,
        name
      });
      const utils = useUtils();
      const ampm = (_themeProps$ampm = themeProps.ampm) != null ? _themeProps$ampm : utils.is12HourCycleInCurrentLocale();
      const localeText = useLocaleText();
      const getOpenDialogAriaText = localeText.openTimePickerDialogue;
      return _extends({
        ampm,
        openTo: 'hours',
        views: ['hours', 'minutes'],
        acceptRegex: ampm ? /[\dapAP]/gi : /\d/gi,
        disableMaskedInput: false,
        getOpenDialogAriaText,
        inputFormat: ampm ? utils.formats.fullTime12h : utils.formats.fullTime24h
      }, themeProps, {
        components: _extends({
          OpenPickerIcon: Clock$1
        }, themeProps.components)
      });
    }
    const timePickerValueManager = {
      emptyValue: null,
      parseInput: parsePickerInputValue,
      getTodayValue: utils => utils.date(),
      areValuesEqual: (utils, a, b) => utils.isEqual(a, b),
      valueReducer: (utils, lastValidValue, newValue) => {
        if (!lastValidValue || !utils.isValid(newValue)) {
          return newValue;
        }

        return utils.mergeDateAndTime(lastValidValue, newValue);
      }
    };

    function getTimePickerToolbarUtilityClass(slot) {
      return generateUtilityClass('MuiTimePickerToolbar', slot);
    }
    const timePickerToolbarClasses = generateUtilityClasses('MuiTimePickerToolbar', ['root', 'separator', 'hourMinuteLabel', 'hourMinuteLabelLandscape', 'hourMinuteLabelReverse', 'ampmSelection', 'ampmLandscape', 'ampmLabel']);

    const _excluded$3 = ["ampm", "ampmInClock", "parsedValue", "isLandscape", "isMobileKeyboardViewOpen", "onChange", "openView", "setOpenView", "toggleMobileKeyboardView", "toolbarTitle", "views", "disabled", "readOnly"];

    const useUtilityClasses = ownerState => {
      const {
        theme,
        isLandscape,
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        separator: ['separator'],
        hourMinuteLabel: ['hourMinuteLabel', isLandscape && 'hourMinuteLabelLandscape', theme.direction === 'rtl' && 'hourMinuteLabelReverse'],
        ampmSelection: ['ampmSelection', isLandscape && 'ampmLandscape'],
        ampmLabel: ['ampmLabel']
      };
      return composeClasses(slots, getTimePickerToolbarUtilityClass, classes);
    };

    const TimePickerToolbarRoot = styled$1(PickersToolbar, {
      name: 'MuiTimePickerToolbar',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({
      [`& .${pickersToolbarClasses.penIconButtonLandscape}`]: {
        marginTop: 'auto'
      }
    });
    const TimePickerToolbarSeparator = styled$1(PickersToolbarText, {
      name: 'MuiTimePickerToolbar',
      slot: 'Separator',
      overridesResolver: (props, styles) => styles.separator
    })({
      outline: 0,
      margin: '0 4px 0 2px',
      cursor: 'default'
    });
    const TimePickerToolbarHourMinuteLabel = styled$1('div', {
      name: 'MuiTimePickerToolbar',
      slot: 'HourMinuteLabel',
      overridesResolver: (props, styles) => [{
        [`&.${timePickerToolbarClasses.hourMinuteLabelLandscape}`]: styles.hourMinuteLabelLandscape,
        [`&.${timePickerToolbarClasses.hourMinuteLabelReverse}`]: styles.hourMinuteLabelReverse
      }, styles.hourMinuteLabel]
    })(({
      theme,
      ownerState
    }) => _extends({
      display: 'flex',
      justifyContent: 'flex-end',
      alignItems: 'flex-end'
    }, ownerState.isLandscape && {
      marginTop: 'auto'
    }, theme.direction === 'rtl' && {
      flexDirection: 'row-reverse'
    }));
    const TimePickerToolbarAmPmSelection = styled$1('div', {
      name: 'MuiTimePickerToolbar',
      slot: 'AmPmSelection',
      overridesResolver: (props, styles) => [{
        [`.${timePickerToolbarClasses.ampmLabel}`]: styles.ampmLabel
      }, {
        [`&.${timePickerToolbarClasses.ampmLandscape}`]: styles.ampmLandscape
      }, styles.ampmSelection]
    })(({
      ownerState
    }) => _extends({
      display: 'flex',
      flexDirection: 'column',
      marginRight: 'auto',
      marginLeft: 12
    }, ownerState.isLandscape && {
      margin: '4px 0 auto',
      flexDirection: 'row',
      justifyContent: 'space-around',
      flexBasis: '100%'
    }, {
      [`& .${timePickerToolbarClasses.ampmLabel}`]: {
        fontSize: 17
      }
    }));
    /**
     * @ignore - internal component.
     */

    function TimePickerToolbar(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiTimePickerToolbar'
      });

      const {
        ampm,
        ampmInClock,
        parsedValue,
        isLandscape,
        isMobileKeyboardViewOpen,
        onChange,
        openView,
        setOpenView,
        toggleMobileKeyboardView,
        toolbarTitle: toolbarTitleProp,
        views,
        disabled,
        readOnly
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$3);

      const utils = useUtils();
      const localeText = useLocaleText();
      const toolbarTitle = toolbarTitleProp != null ? toolbarTitleProp : localeText.timePickerDefaultToolbarTitle;
      const theme = useTheme();
      const showAmPmControl = Boolean(ampm && !ampmInClock);
      const {
        meridiemMode,
        handleMeridiemChange
      } = useMeridiemMode(parsedValue, ampm, onChange);

      const formatHours = time => ampm ? utils.format(time, 'hours12h') : utils.format(time, 'hours24h');

      const ownerState = props;
      const classes = useUtilityClasses(_extends({}, ownerState, {
        theme
      }));

      const separator = /*#__PURE__*/jsxRuntime.exports.jsx(TimePickerToolbarSeparator, {
        tabIndex: -1,
        value: ":",
        variant: "h3",
        selected: false,
        className: classes.separator
      });

      return /*#__PURE__*/jsxRuntime.exports.jsxs(TimePickerToolbarRoot, _extends({
        viewType: "clock",
        landscapeDirection: "row",
        toolbarTitle: toolbarTitle,
        isLandscape: isLandscape,
        isMobileKeyboardViewOpen: isMobileKeyboardViewOpen,
        toggleMobileKeyboardView: toggleMobileKeyboardView,
        ownerState: ownerState,
        className: classes.root
      }, other, {
        children: [/*#__PURE__*/jsxRuntime.exports.jsxs(TimePickerToolbarHourMinuteLabel, {
          className: classes.hourMinuteLabel,
          ownerState: ownerState,
          children: [arrayIncludes(views, 'hours') && /*#__PURE__*/jsxRuntime.exports.jsx(PickersToolbarButton, {
            tabIndex: -1,
            variant: "h3",
            onClick: () => setOpenView('hours'),
            selected: openView === 'hours',
            value: parsedValue ? formatHours(parsedValue) : '--'
          }), arrayIncludes(views, ['hours', 'minutes']) && separator, arrayIncludes(views, 'minutes') && /*#__PURE__*/jsxRuntime.exports.jsx(PickersToolbarButton, {
            tabIndex: -1,
            variant: "h3",
            onClick: () => setOpenView('minutes'),
            selected: openView === 'minutes',
            value: parsedValue ? utils.format(parsedValue, 'minutes') : '--'
          }), arrayIncludes(views, ['minutes', 'seconds']) && separator, arrayIncludes(views, 'seconds') && /*#__PURE__*/jsxRuntime.exports.jsx(PickersToolbarButton, {
            variant: "h3",
            onClick: () => setOpenView('seconds'),
            selected: openView === 'seconds',
            value: parsedValue ? utils.format(parsedValue, 'seconds') : '--'
          })]
        }), showAmPmControl && /*#__PURE__*/jsxRuntime.exports.jsxs(TimePickerToolbarAmPmSelection, {
          className: classes.ampmSelection,
          ownerState: ownerState,
          children: [/*#__PURE__*/jsxRuntime.exports.jsx(PickersToolbarButton, {
            disableRipple: true,
            variant: "subtitle2",
            selected: meridiemMode === 'am',
            typographyClassName: classes.ampmLabel,
            value: utils.getMeridiemText('am'),
            onClick: readOnly ? undefined : () => handleMeridiemChange('am'),
            disabled: disabled
          }), /*#__PURE__*/jsxRuntime.exports.jsx(PickersToolbarButton, {
            disableRipple: true,
            variant: "subtitle2",
            selected: meridiemMode === 'pm',
            typographyClassName: classes.ampmLabel,
            value: utils.getMeridiemText('pm'),
            onClick: readOnly ? undefined : () => handleMeridiemChange('pm'),
            disabled: disabled
          })]
        })]
      }));
    }

    const _excluded$2 = ["onChange", "PaperProps", "PopperProps", "ToolbarComponent", "TransitionComponent", "value", "components", "componentsProps"];

    /**
     *
     * Demos:
     *
     * - [Time Picker](https://mui.com/x/react-date-pickers/time-picker/)
     *
     * API:
     *
     * - [DesktopTimePicker API](https://mui.com/x/api/date-pickers/desktop-time-picker/)
     */
    const DesktopTimePicker = /*#__PURE__*/React__namespace.forwardRef(function DesktopTimePicker(inProps, ref) {
      const props = useTimePickerDefaultizedProps(inProps, 'MuiDesktopTimePicker');
      const validationError = useTimeValidation(props) !== null;
      const {
        pickerProps,
        inputProps,
        wrapperProps
      } = usePickerState(props, timePickerValueManager);

      const {
        PaperProps,
        PopperProps,
        ToolbarComponent = TimePickerToolbar,
        TransitionComponent,
        components,
        componentsProps
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$2);

      const DateInputProps = _extends({}, inputProps, other, {
        components,
        componentsProps,
        ref,
        validationError
      });

      return /*#__PURE__*/jsxRuntime.exports.jsx(DesktopWrapper, _extends({}, wrapperProps, {
        DateInputProps: DateInputProps,
        KeyboardDateInputComponent: KeyboardDateInput,
        PopperProps: PopperProps,
        PaperProps: PaperProps,
        TransitionComponent: TransitionComponent,
        components: components,
        componentsProps: componentsProps,
        children: /*#__PURE__*/jsxRuntime.exports.jsx(CalendarOrClockPicker, _extends({}, pickerProps, {
          autoFocus: true,
          toolbarTitle: props.label || props.toolbarTitle,
          ToolbarComponent: ToolbarComponent,
          DateInputProps: DateInputProps,
          components: components,
          componentsProps: componentsProps
        }, other))
      }));
    });
    DesktopTimePicker.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------

      /**
       * Regular expression to detect "accepted" symbols.
       * @default /\dap/gi
       */
      acceptRegex: PropTypes.instanceOf(RegExp),

      /**
       * 12h/24h view for hour selection clock.
       * @default `utils.is12HourCycleInCurrentLocale()`
       */
      ampm: PropTypes.bool,

      /**
       * Display ampm controls under the clock (instead of in the toolbar).
       * @default false
       */
      ampmInClock: PropTypes.bool,
      children: PropTypes.node,

      /**
       * className applied to the root component.
       */
      className: PropTypes.string,

      /**
       * If `true` the popup or dialog will immediately close after submitting full date.
       * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
       */
      closeOnSelect: PropTypes.bool,

      /**
       * Overrideable components.
       * @default {}
       */
      components: PropTypes.object,

      /**
       * The props used for each component slot.
       * @default {}
       */
      componentsProps: PropTypes.object,

      /**
       * If `true`, the picker and text field are disabled.
       * @default false
       */
      disabled: PropTypes.bool,

      /**
       * Do not ignore date part when validating min/max time.
       * @default false
       */
      disableIgnoringDatePartForTimeValidation: PropTypes.bool,

      /**
       * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.
       * @default false
       */
      disableMaskedInput: PropTypes.bool,

      /**
       * Do not render open picker button (renders only text field with validation).
       * @default false
       */
      disableOpenPicker: PropTypes.bool,

      /**
       * Accessible text that helps user to understand which time and view is selected.
       * @template TDate
       * @param {ClockPickerView} view The current view rendered.
       * @param {TDate | null} time The current time.
       * @param {MuiPickersAdapter<TDate>} adapter The current date adapter.
       * @returns {string} The clock label.
       * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.
       * @default <TDate extends any>(
       *   view: ClockView,
       *   time: TDate | null,
       *   adapter: MuiPickersAdapter<TDate>,
       * ) =>
       *   `Select ${view}. ${
       *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`
       *   }`
       */
      getClockLabelText: PropTypes.func,

      /**
       * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType
       * @template TInputDate, TDate
       * @param {TInputDate} date The date from which we want to add an aria-text.
       * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.
       * @returns {string} The aria-text to render inside the dialog.
       * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`
       */
      getOpenDialogAriaText: PropTypes.func,
      ignoreInvalidInputs: PropTypes.bool,

      /**
       * Props to pass to keyboard input adornment.
       */
      InputAdornmentProps: PropTypes.object,

      /**
       * Format string.
       */
      inputFormat: PropTypes.string,
      InputProps: PropTypes.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
        current: PropTypes.object
      })]),
      label: PropTypes.node,

      /**
       * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).
       */
      mask: PropTypes.string,

      /**
       * Max time acceptable time.
       * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.
       */
      maxTime: PropTypes.any,

      /**
       * Min time acceptable time.
       * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.
       */
      minTime: PropTypes.any,

      /**
       * Step over minutes.
       * @default 1
       */
      minutesStep: PropTypes.number,

      /**
       * Callback fired when date is accepted @DateIOType.
       * @template TValue
       * @param {TValue} value The value that was just accepted.
       */
      onAccept: PropTypes.func,

      /**
       * Callback fired when the value (the selected date) changes @DateIOType.
       * @template TValue
       * @param {TValue} value The new parsed value.
       * @param {string} keyboardInputValue The current value of the keyboard input.
       */
      onChange: PropTypes.func.isRequired,

      /**
       * Callback fired when the popup requests to be closed.
       * Use in controlled mode (see open).
       */
      onClose: PropTypes.func,

      /**
       * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).
       * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.
       * This can be used to render appropriate form error.
       *
       * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.
       * @DateIOType
       *
       * @template TError, TInputValue
       * @param {TError} reason The reason why the current value is not valid.
       * @param {TInputValue} value The invalid value.
       */
      onError: PropTypes.func,

      /**
       * Callback fired when the popup requests to be opened.
       * Use in controlled mode (see open).
       */
      onOpen: PropTypes.func,

      /**
       * Callback fired on view change.
       * @param {ClockPickerView} view The new view.
       */
      onViewChange: PropTypes.func,

      /**
       * Control the popup or dialog open state.
       */
      open: PropTypes.bool,

      /**
       * Props to pass to keyboard adornment button.
       */
      OpenPickerButtonProps: PropTypes.object,

      /**
       * First view to show.
       * Must be a valid option from `views` list
       * @default 'hours'
       */
      openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),

      /**
       * Force rendering in particular orientation.
       */
      orientation: PropTypes.oneOf(['landscape', 'portrait']),

      /**
       * Paper props passed down to [Paper](https://mui.com/material-ui/api/paper/) component.
       */
      PaperProps: PropTypes.object,

      /**
       * Popper props passed down to [Popper](https://mui.com/material-ui/api/popper/) component.
       */
      PopperProps: PropTypes.object,

      /**
       * Make picker read only.
       * @default false
       */
      readOnly: PropTypes.bool,

      /**
       * The `renderInput` prop allows you to customize the rendered input.
       * The `props` argument of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props) that you need to forward.
       * Pay specific attention to the `ref` and `inputProps` keys.
       * @example ```jsx
       * renderInput={props => <TextField {...props} />}
       * ````
       * @param {MuiTextFieldPropsType} props The props of the input.
       * @returns {React.ReactNode} The node to render as the input.
       */
      renderInput: PropTypes.func.isRequired,

      /**
       * Custom formatter to be passed into Rifm component.
       * @param {string} str The un-formatted string.
       * @returns {string} The formatted string.
       */
      rifmFormatter: PropTypes.func,

      /**
       * Dynamically check if time is disabled or not.
       * If returns `false` appropriate time point will ot be acceptable.
       * @param {number} timeValue The value to check.
       * @param {ClockPickerView} clockType The clock type of the timeValue.
       * @returns {boolean} Returns `true` if the time should be disabled
       */
      shouldDisableTime: PropTypes.func,

      /**
       * If `true`, show the toolbar even in desktop mode.
       */
      showToolbar: PropTypes.bool,

      /**
       * Component that will replace default toolbar renderer.
       * @default TimePickerToolbar
       */
      ToolbarComponent: PropTypes.elementType,

      /**
       * Mobile picker title, displaying in the toolbar.
       * @default 'Select time'
       */
      toolbarTitle: PropTypes.node,

      /**
       * Custom component for popper [Transition](https://mui.com/material-ui/transitions/#transitioncomponent-prop).
       */
      TransitionComponent: PropTypes.elementType,

      /**
       * The value of the picker.
       */
      value: PropTypes.any,

      /**
       * Array of views to show.
       * @default ['hours', 'minutes']
       */
      views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)
    } ;

    const _excluded$1 = ["ToolbarComponent", "value", "onChange", "components", "componentsProps"];

    /**
     *
     * Demos:
     *
     * - [Time Picker](https://mui.com/x/react-date-pickers/time-picker/)
     *
     * API:
     *
     * - [MobileTimePicker API](https://mui.com/x/api/date-pickers/mobile-time-picker/)
     */
    const MobileTimePicker = /*#__PURE__*/React__namespace.forwardRef(function MobileTimePicker(inProps, ref) {
      const props = useTimePickerDefaultizedProps(inProps, 'MuiMobileTimePicker');
      const validationError = useTimeValidation(props) !== null;
      const {
        pickerProps,
        inputProps,
        wrapperProps
      } = usePickerState(props, timePickerValueManager); // Note that we are passing down all the value without spread.
      // It saves us >1kb gzip and make any prop available automatically on any level down.

      const {
        ToolbarComponent = TimePickerToolbar,
        components,
        componentsProps
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded$1);

      const DateInputProps = _extends({}, inputProps, other, {
        components,
        componentsProps,
        ref,
        validationError
      });

      return /*#__PURE__*/jsxRuntime.exports.jsx(MobileWrapper, _extends({}, other, wrapperProps, {
        DateInputProps: DateInputProps,
        PureDateInputComponent: PureDateInput,
        components: components,
        componentsProps: componentsProps,
        children: /*#__PURE__*/jsxRuntime.exports.jsx(CalendarOrClockPicker, _extends({}, pickerProps, {
          autoFocus: true,
          toolbarTitle: props.label || props.toolbarTitle,
          ToolbarComponent: ToolbarComponent,
          DateInputProps: DateInputProps,
          components: components,
          componentsProps: componentsProps
        }, other))
      }));
    });
    MobileTimePicker.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------

      /**
       * Regular expression to detect "accepted" symbols.
       * @default /\dap/gi
       */
      acceptRegex: PropTypes.instanceOf(RegExp),

      /**
       * 12h/24h view for hour selection clock.
       * @default `utils.is12HourCycleInCurrentLocale()`
       */
      ampm: PropTypes.bool,

      /**
       * Display ampm controls under the clock (instead of in the toolbar).
       * @default false
       */
      ampmInClock: PropTypes.bool,
      children: PropTypes.node,

      /**
       * className applied to the root component.
       */
      className: PropTypes.string,

      /**
       * If `true` the popup or dialog will immediately close after submitting full date.
       * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
       */
      closeOnSelect: PropTypes.bool,

      /**
       * Overrideable components.
       * @default {}
       */
      components: PropTypes.object,

      /**
       * The props used for each component slot.
       * @default {}
       */
      componentsProps: PropTypes.object,

      /**
       * Props applied to the [`Dialog`](https://mui.com/material-ui/api/dialog/) element.
       */
      DialogProps: PropTypes.object,

      /**
       * If `true`, the picker and text field are disabled.
       * @default false
       */
      disabled: PropTypes.bool,

      /**
       * Do not ignore date part when validating min/max time.
       * @default false
       */
      disableIgnoringDatePartForTimeValidation: PropTypes.bool,

      /**
       * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.
       * @default false
       */
      disableMaskedInput: PropTypes.bool,

      /**
       * Do not render open picker button (renders only text field with validation).
       * @default false
       */
      disableOpenPicker: PropTypes.bool,

      /**
       * Accessible text that helps user to understand which time and view is selected.
       * @template TDate
       * @param {ClockPickerView} view The current view rendered.
       * @param {TDate | null} time The current time.
       * @param {MuiPickersAdapter<TDate>} adapter The current date adapter.
       * @returns {string} The clock label.
       * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.
       * @default <TDate extends any>(
       *   view: ClockView,
       *   time: TDate | null,
       *   adapter: MuiPickersAdapter<TDate>,
       * ) =>
       *   `Select ${view}. ${
       *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`
       *   }`
       */
      getClockLabelText: PropTypes.func,

      /**
       * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType
       * @template TInputDate, TDate
       * @param {TInputDate} date The date from which we want to add an aria-text.
       * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.
       * @returns {string} The aria-text to render inside the dialog.
       * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`
       */
      getOpenDialogAriaText: PropTypes.func,
      ignoreInvalidInputs: PropTypes.bool,

      /**
       * Props to pass to keyboard input adornment.
       */
      InputAdornmentProps: PropTypes.object,

      /**
       * Format string.
       */
      inputFormat: PropTypes.string,
      InputProps: PropTypes.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
        current: PropTypes.object
      })]),
      label: PropTypes.node,

      /**
       * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).
       */
      mask: PropTypes.string,

      /**
       * Max time acceptable time.
       * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.
       */
      maxTime: PropTypes.any,

      /**
       * Min time acceptable time.
       * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.
       */
      minTime: PropTypes.any,

      /**
       * Step over minutes.
       * @default 1
       */
      minutesStep: PropTypes.number,

      /**
       * Callback fired when date is accepted @DateIOType.
       * @template TValue
       * @param {TValue} value The value that was just accepted.
       */
      onAccept: PropTypes.func,

      /**
       * Callback fired when the value (the selected date) changes @DateIOType.
       * @template TValue
       * @param {TValue} value The new parsed value.
       * @param {string} keyboardInputValue The current value of the keyboard input.
       */
      onChange: PropTypes.func.isRequired,

      /**
       * Callback fired when the popup requests to be closed.
       * Use in controlled mode (see open).
       */
      onClose: PropTypes.func,

      /**
       * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).
       * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.
       * This can be used to render appropriate form error.
       *
       * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.
       * @DateIOType
       *
       * @template TError, TInputValue
       * @param {TError} reason The reason why the current value is not valid.
       * @param {TInputValue} value The invalid value.
       */
      onError: PropTypes.func,

      /**
       * Callback fired when the popup requests to be opened.
       * Use in controlled mode (see open).
       */
      onOpen: PropTypes.func,

      /**
       * Callback fired on view change.
       * @param {ClockPickerView} view The new view.
       */
      onViewChange: PropTypes.func,

      /**
       * Control the popup or dialog open state.
       */
      open: PropTypes.bool,

      /**
       * Props to pass to keyboard adornment button.
       */
      OpenPickerButtonProps: PropTypes.object,

      /**
       * First view to show.
       * Must be a valid option from `views` list
       * @default 'hours'
       */
      openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),

      /**
       * Force rendering in particular orientation.
       */
      orientation: PropTypes.oneOf(['landscape', 'portrait']),

      /**
       * Make picker read only.
       * @default false
       */
      readOnly: PropTypes.bool,

      /**
       * The `renderInput` prop allows you to customize the rendered input.
       * The `props` argument of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props) that you need to forward.
       * Pay specific attention to the `ref` and `inputProps` keys.
       * @example ```jsx
       * renderInput={props => <TextField {...props} />}
       * ````
       * @param {MuiTextFieldPropsType} props The props of the input.
       * @returns {React.ReactNode} The node to render as the input.
       */
      renderInput: PropTypes.func.isRequired,

      /**
       * Custom formatter to be passed into Rifm component.
       * @param {string} str The un-formatted string.
       * @returns {string} The formatted string.
       */
      rifmFormatter: PropTypes.func,

      /**
       * Dynamically check if time is disabled or not.
       * If returns `false` appropriate time point will ot be acceptable.
       * @param {number} timeValue The value to check.
       * @param {ClockPickerView} clockType The clock type of the timeValue.
       * @returns {boolean} Returns `true` if the time should be disabled
       */
      shouldDisableTime: PropTypes.func,

      /**
       * If `true`, show the toolbar even in desktop mode.
       */
      showToolbar: PropTypes.bool,

      /**
       * Component that will replace default toolbar renderer.
       * @default TimePickerToolbar
       */
      ToolbarComponent: PropTypes.elementType,

      /**
       * Mobile picker title, displaying in the toolbar.
       * @default 'Select time'
       */
      toolbarTitle: PropTypes.node,

      /**
       * The value of the picker.
       */
      value: PropTypes.any,

      /**
       * Array of views to show.
       * @default ['hours', 'minutes']
       */
      views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)
    } ;

    const _excluded = ["desktopModeMediaQuery", "DialogProps", "PopperProps", "TransitionComponent"];

    /**
     *
     * Demos:
     *
     * - [Pickers](https://mui.com/x/react-date-pickers/)
     * - [Time Picker](https://mui.com/x/react-date-pickers/time-picker/)
     *
     * API:
     *
     * - [TimePicker API](https://mui.com/x/api/date-pickers/time-picker/)
     */
    const TimePicker = /*#__PURE__*/React__namespace.forwardRef(function TimePicker(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiTimePicker'
      });

      const {
        desktopModeMediaQuery = '@media (pointer: fine)',
        DialogProps,
        PopperProps,
        TransitionComponent
      } = props,
            other = _objectWithoutPropertiesLoose(props, _excluded); // defaults to `true` in environments where `window.matchMedia` would not be available (i.e. test/jsdom)


      const isDesktop = useMediaQuery(desktopModeMediaQuery, {
        defaultMatches: true
      });

      if (isDesktop) {
        return /*#__PURE__*/jsxRuntime.exports.jsx(DesktopTimePicker, _extends({
          ref: ref,
          PopperProps: PopperProps,
          TransitionComponent: TransitionComponent
        }, other));
      }

      return /*#__PURE__*/jsxRuntime.exports.jsx(MobileTimePicker, _extends({
        ref: ref,
        DialogProps: DialogProps
      }, other));
    });
    TimePicker.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------

      /**
       * Regular expression to detect "accepted" symbols.
       * @default /\dap/gi
       */
      acceptRegex: PropTypes.instanceOf(RegExp),

      /**
       * 12h/24h view for hour selection clock.
       * @default `utils.is12HourCycleInCurrentLocale()`
       */
      ampm: PropTypes.bool,

      /**
       * Display ampm controls under the clock (instead of in the toolbar).
       * @default false
       */
      ampmInClock: PropTypes.bool,
      children: PropTypes.node,

      /**
       * className applied to the root component.
       */
      className: PropTypes.string,

      /**
       * If `true` the popup or dialog will immediately close after submitting full date.
       * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
       */
      closeOnSelect: PropTypes.bool,

      /**
       * Overrideable components.
       * @default {}
       */
      components: PropTypes.object,

      /**
       * The props used for each component slot.
       * @default {}
       */
      componentsProps: PropTypes.object,

      /**
       * CSS media query when `Mobile` mode will be changed to `Desktop`.
       * @default '@media (pointer: fine)'
       * @example '@media (min-width: 720px)' or theme.breakpoints.up("sm")
       */
      desktopModeMediaQuery: PropTypes.string,

      /**
       * Props applied to the [`Dialog`](https://mui.com/material-ui/api/dialog/) element.
       */
      DialogProps: PropTypes.object,

      /**
       * If `true`, the picker and text field are disabled.
       * @default false
       */
      disabled: PropTypes.bool,

      /**
       * Do not ignore date part when validating min/max time.
       * @default false
       */
      disableIgnoringDatePartForTimeValidation: PropTypes.bool,

      /**
       * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.
       * @default false
       */
      disableMaskedInput: PropTypes.bool,

      /**
       * Do not render open picker button (renders only text field with validation).
       * @default false
       */
      disableOpenPicker: PropTypes.bool,

      /**
       * Accessible text that helps user to understand which time and view is selected.
       * @template TDate
       * @param {ClockPickerView} view The current view rendered.
       * @param {TDate | null} time The current time.
       * @param {MuiPickersAdapter<TDate>} adapter The current date adapter.
       * @returns {string} The clock label.
       * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.
       * @default <TDate extends any>(
       *   view: ClockView,
       *   time: TDate | null,
       *   adapter: MuiPickersAdapter<TDate>,
       * ) =>
       *   `Select ${view}. ${
       *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`
       *   }`
       */
      getClockLabelText: PropTypes.func,

      /**
       * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType
       * @template TInputDate, TDate
       * @param {TInputDate} date The date from which we want to add an aria-text.
       * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.
       * @returns {string} The aria-text to render inside the dialog.
       * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`
       */
      getOpenDialogAriaText: PropTypes.func,
      ignoreInvalidInputs: PropTypes.bool,

      /**
       * Props to pass to keyboard input adornment.
       */
      InputAdornmentProps: PropTypes.object,

      /**
       * Format string.
       */
      inputFormat: PropTypes.string,
      InputProps: PropTypes.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
        current: PropTypes.object
      })]),
      label: PropTypes.node,

      /**
       * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).
       */
      mask: PropTypes.string,

      /**
       * Max time acceptable time.
       * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.
       */
      maxTime: PropTypes.any,

      /**
       * Min time acceptable time.
       * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.
       */
      minTime: PropTypes.any,

      /**
       * Step over minutes.
       * @default 1
       */
      minutesStep: PropTypes.number,

      /**
       * Callback fired when date is accepted @DateIOType.
       * @template TValue
       * @param {TValue} value The value that was just accepted.
       */
      onAccept: PropTypes.func,

      /**
       * Callback fired when the value (the selected date) changes @DateIOType.
       * @template TValue
       * @param {TValue} value The new parsed value.
       * @param {string} keyboardInputValue The current value of the keyboard input.
       */
      onChange: PropTypes.func.isRequired,

      /**
       * Callback fired when the popup requests to be closed.
       * Use in controlled mode (see open).
       */
      onClose: PropTypes.func,

      /**
       * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).
       * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.
       * This can be used to render appropriate form error.
       *
       * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.
       * @DateIOType
       *
       * @template TError, TInputValue
       * @param {TError} reason The reason why the current value is not valid.
       * @param {TInputValue} value The invalid value.
       */
      onError: PropTypes.func,

      /**
       * Callback fired when the popup requests to be opened.
       * Use in controlled mode (see open).
       */
      onOpen: PropTypes.func,

      /**
       * Callback fired on view change.
       * @param {ClockPickerView} view The new view.
       */
      onViewChange: PropTypes.func,

      /**
       * Control the popup or dialog open state.
       */
      open: PropTypes.bool,

      /**
       * Props to pass to keyboard adornment button.
       */
      OpenPickerButtonProps: PropTypes.object,

      /**
       * First view to show.
       * Must be a valid option from `views` list
       * @default 'hours'
       */
      openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),

      /**
       * Force rendering in particular orientation.
       */
      orientation: PropTypes.oneOf(['landscape', 'portrait']),

      /**
       * Paper props passed down to [Paper](https://mui.com/material-ui/api/paper/) component.
       */
      PaperProps: PropTypes.object,

      /**
       * Popper props passed down to [Popper](https://mui.com/material-ui/api/popper/) component.
       */
      PopperProps: PropTypes.object,

      /**
       * Make picker read only.
       * @default false
       */
      readOnly: PropTypes.bool,

      /**
       * The `renderInput` prop allows you to customize the rendered input.
       * The `props` argument of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props) that you need to forward.
       * Pay specific attention to the `ref` and `inputProps` keys.
       * @example ```jsx
       * renderInput={props => <TextField {...props} />}
       * ````
       * @param {MuiTextFieldPropsType} props The props of the input.
       * @returns {React.ReactNode} The node to render as the input.
       */
      renderInput: PropTypes.func.isRequired,

      /**
       * Custom formatter to be passed into Rifm component.
       * @param {string} str The un-formatted string.
       * @returns {string} The formatted string.
       */
      rifmFormatter: PropTypes.func,

      /**
       * Dynamically check if time is disabled or not.
       * If returns `false` appropriate time point will ot be acceptable.
       * @param {number} timeValue The value to check.
       * @param {ClockPickerView} clockType The clock type of the timeValue.
       * @returns {boolean} Returns `true` if the time should be disabled
       */
      shouldDisableTime: PropTypes.func,

      /**
       * If `true`, show the toolbar even in desktop mode.
       */
      showToolbar: PropTypes.bool,

      /**
       * Component that will replace default toolbar renderer.
       * @default TimePickerToolbar
       */
      ToolbarComponent: PropTypes.elementType,

      /**
       * Mobile picker title, displaying in the toolbar.
       * @default 'Select time'
       */
      toolbarTitle: PropTypes.node,

      /**
       * Custom component for popper [Transition](https://mui.com/material-ui/transitions/#transitioncomponent-prop).
       */
      TransitionComponent: PropTypes.elementType,

      /**
       * The value of the picker.
       */
      value: PropTypes.any,

      /**
       * Array of views to show.
       * @default ['hours', 'minutes']
       */
      views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)
    } ;

    var dayjs_min = {exports: {}};

    (function (module, exports) {
    !function(t,e){module.exports=e();}(commonjsGlobal,(function(){var t=1e3,e=6e4,n=36e5,r="millisecond",i="second",s="minute",u="hour",a="day",o="week",f="month",h="quarter",c="year",d="date",l="Invalid Date",$=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,y=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(t){var e=["th","st","nd","rd"],n=t%100;return "["+t+(e[(n-20)%10]||e[n]||e[0])+"]"}},m=function(t,e,n){var r=String(t);return !r||r.length>=e?t:""+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return (e<=0?"+":"-")+m(r,2,"0")+":"+m(i,2,"0")},m:function t(e,n){if(e.date()<n.date())return -t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,f),s=n-i<0,u=e.clone().add(r+(s?-1:1),f);return +(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return {M:f,y:c,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:h}[t]||String(t||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},g="en",D={};D[g]=M;var p=function(t){return t instanceof _},S=function t(e,n,r){var i;if(!e)return g;if("string"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split("-");if(!i&&u.length>1)return t(u[0])}else {var a=e.name;D[a]=e,i=a;}return !r&&i&&(g=i),i||!r&&g},w=function(t,e){if(p(t))return t.clone();var n="object"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},O=v;O.l=S,O.i=p,O.w=function(t,e){return w(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=S(t.locale,null,!0),this.parse(t);}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(O.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init();},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds();},m.$utils=function(){return O},m.isValid=function(){return !(this.$d.toString()===l)},m.isSame=function(t,e){var n=w(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return w(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<w(t)},m.$g=function(t,e,n){return O.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!O.u(e)||e,h=O.p(t),l=function(t,e){var i=O.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return O.w(n.toDate()[t].apply(n.toDate("s"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v="set"+(this.$u?"UTC":"");switch(h){case c:return r?l(1,0):l(31,11);case f:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+"Hours",0);case u:return $(v+"Minutes",1);case s:return $(v+"Seconds",2);case i:return $(v+"Milliseconds",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=O.p(t),h="set"+(this.$u?"UTC":""),l=(n={},n[a]=h+"Date",n[d]=h+"Date",n[f]=h+"Month",n[c]=h+"FullYear",n[u]=h+"Hours",n[s]=h+"Minutes",n[i]=h+"Seconds",n[r]=h+"Milliseconds",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===f||o===c){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d;}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[O.p(t)]()},m.add=function(r,h){var d,l=this;r=Number(r);var $=O.p(h),y=function(t){var e=w(l);return O.w(e.date(e.date()+Math.round(t*r)),l)};if($===f)return this.set(f,this.$M+r);if($===c)return this.set(c,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return O.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||"YYYY-MM-DDTHH:mm:ssZ",i=O.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,f=n.months,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},c=function(t){return O.s(s%12||12,t,"0")},d=n.meridiem||function(t,e,n){var r=t<12?"AM":"PM";return n?r.toLowerCase():r},$={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:O.s(a+1,2,"0"),MMM:h(n.monthsShort,a,f,3),MMMM:h(f,a),D:this.$D,DD:O.s(this.$D,2,"0"),d:String(this.$W),dd:h(n.weekdaysMin,this.$W,o,2),ddd:h(n.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:O.s(s,2,"0"),h:c(1),hh:c(2),a:d(s,u,!0),A:d(s,u,!1),m:String(u),mm:O.s(u,2,"0"),s:String(this.$s),ss:O.s(this.$s,2,"0"),SSS:O.s(this.$ms,3,"0"),Z:i};return r.replace(y,(function(t,e){return e||$[t]||i.replace(":","")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=O.p(d),M=w(r),m=(M.utcOffset()-this.utcOffset())*e,v=this-M,g=O.m(this,M);return g=($={},$[c]=g/12,$[f]=g,$[h]=g/3,$[o]=(v-m)/6048e5,$[a]=(v-m)/864e5,$[u]=v/n,$[s]=v/e,$[i]=v/t,$)[y]||v,l?g:O.a(g)},m.daysInMonth=function(){return this.endOf(f).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=S(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return O.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),T=_.prototype;return w.prototype=T,[["$ms",r],["$s",i],["$m",s],["$H",u],["$W",a],["$M",f],["$y",c],["$D",d]].forEach((function(t){T[t[1]]=function(e){return this.$g(e,t[0],t[1])};})),w.extend=function(t,e){return t.$i||(t(e,_,w),t.$i=!0),w},w.locale=S,w.isDayjs=p,w.unix=function(t){return w(1e3*t)},w.en=D[g],w.Ls=D,w.p={},w}));
    }(dayjs_min));

    var defaultDayjs = dayjs_min.exports;

    var customParseFormat = {exports: {}};

    (function (module, exports) {
    !function(e,t){module.exports=t();}(commonjsGlobal,(function(){var e={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},t=/(\[[^[]*\])|([-_:/.,()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,n=/\d\d/,r=/\d\d?/,i=/\d*[^-_:/,()\s\d]+/,o={},s=function(e){return (e=+e)+(e>68?1900:2e3)};var a=function(e){return function(t){this[e]=+t;}},f=[/[+-]\d\d:?(\d\d)?|Z/,function(e){(this.zone||(this.zone={})).offset=function(e){if(!e)return 0;if("Z"===e)return 0;var t=e.match(/([+-]|\d\d)/g),n=60*t[1]+(+t[2]||0);return 0===n?0:"+"===t[0]?-n:n}(e);}],h=function(e){var t=o[e];return t&&(t.indexOf?t:t.s.concat(t.f))},u=function(e,t){var n,r=o.meridiem;if(r){for(var i=1;i<=24;i+=1)if(e.indexOf(r(i,0,t))>-1){n=i>12;break}}else n=e===(t?"pm":"PM");return n},d={A:[i,function(e){this.afternoon=u(e,!1);}],a:[i,function(e){this.afternoon=u(e,!0);}],S:[/\d/,function(e){this.milliseconds=100*+e;}],SS:[n,function(e){this.milliseconds=10*+e;}],SSS:[/\d{3}/,function(e){this.milliseconds=+e;}],s:[r,a("seconds")],ss:[r,a("seconds")],m:[r,a("minutes")],mm:[r,a("minutes")],H:[r,a("hours")],h:[r,a("hours")],HH:[r,a("hours")],hh:[r,a("hours")],D:[r,a("day")],DD:[n,a("day")],Do:[i,function(e){var t=o.ordinal,n=e.match(/\d+/);if(this.day=n[0],t)for(var r=1;r<=31;r+=1)t(r).replace(/\[|\]/g,"")===e&&(this.day=r);}],M:[r,a("month")],MM:[n,a("month")],MMM:[i,function(e){var t=h("months"),n=(h("monthsShort")||t.map((function(e){return e.slice(0,3)}))).indexOf(e)+1;if(n<1)throw new Error;this.month=n%12||n;}],MMMM:[i,function(e){var t=h("months").indexOf(e)+1;if(t<1)throw new Error;this.month=t%12||t;}],Y:[/[+-]?\d+/,a("year")],YY:[n,function(e){this.year=s(e);}],YYYY:[/\d{4}/,a("year")],Z:f,ZZ:f};function c(n){var r,i;r=n,i=o&&o.formats;for(var s=(n=r.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g,(function(t,n,r){var o=r&&r.toUpperCase();return n||i[r]||e[r]||i[o].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,(function(e,t,n){return t||n.slice(1)}))}))).match(t),a=s.length,f=0;f<a;f+=1){var h=s[f],u=d[h],c=u&&u[0],l=u&&u[1];s[f]=l?{regex:c,parser:l}:h.replace(/^\[|\]$/g,"");}return function(e){for(var t={},n=0,r=0;n<a;n+=1){var i=s[n];if("string"==typeof i)r+=i.length;else {var o=i.regex,f=i.parser,h=e.slice(r),u=o.exec(h)[0];f.call(t,u),e=e.replace(u,"");}}return function(e){var t=e.afternoon;if(void 0!==t){var n=e.hours;t?n<12&&(e.hours+=12):12===n&&(e.hours=0),delete e.afternoon;}}(t),t}}return function(e,t,n){n.p.customParseFormat=!0,e&&e.parseTwoDigitYear&&(s=e.parseTwoDigitYear);var r=t.prototype,i=r.parse;r.parse=function(e){var t=e.date,r=e.utc,s=e.args;this.$u=r;var a=s[1];if("string"==typeof a){var f=!0===s[2],h=!0===s[3],u=f||h,d=s[2];h&&(d=s[2]),o=this.$locale(),!f&&d&&(o=n.Ls[d]),this.$d=function(e,t,n){try{if(["x","X"].indexOf(t)>-1)return new Date(("X"===t?1e3:1)*e);var r=c(t)(e),i=r.year,o=r.month,s=r.day,a=r.hours,f=r.minutes,h=r.seconds,u=r.milliseconds,d=r.zone,l=new Date,m=s||(i||o?1:l.getDate()),M=i||l.getFullYear(),Y=0;i&&!o||(Y=o>0?o-1:l.getMonth());var p=a||0,v=f||0,D=h||0,g=u||0;return d?new Date(Date.UTC(M,Y,m,p,v,D,g+60*d.offset*1e3)):n?new Date(Date.UTC(M,Y,m,p,v,D,g)):new Date(M,Y,m,p,v,D,g)}catch(e){return new Date("")}}(t,a,r),this.init(),d&&!0!==d&&(this.$L=this.locale(d).$L),u&&t!=this.format(a)&&(this.$d=new Date("")),o={};}else if(a instanceof Array)for(var l=a.length,m=1;m<=l;m+=1){s[1]=a[m-1];var M=n.apply(this,s);if(M.isValid()){this.$d=M.$d,this.$L=M.$L,this.init();break}m===l&&(this.$d=new Date(""));}else i.call(this,e);};}}));
    }(customParseFormat));

    var customParseFormatPlugin = customParseFormat.exports;

    var localizedFormat = {exports: {}};

    (function (module, exports) {
    !function(e,t){module.exports=t();}(commonjsGlobal,(function(){var e={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"};return function(t,o,n){var r=o.prototype,i=r.format;n.en.formats=e,r.format=function(t){void 0===t&&(t="YYYY-MM-DDTHH:mm:ssZ");var o=this.$locale().formats,n=function(t,o){return t.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g,(function(t,n,r){var i=r&&r.toUpperCase();return n||o[r]||e[r]||o[i].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,(function(e,t,o){return t||o.slice(1)}))}))}(t,void 0===o?{}:o);return i.call(this,n)};}}));
    }(localizedFormat));

    var localizedFormatPlugin = localizedFormat.exports;

    var isBetween = {exports: {}};

    (function (module, exports) {
    !function(e,i){module.exports=i();}(commonjsGlobal,(function(){return function(e,i,t){i.prototype.isBetween=function(e,i,s,f){var n=t(e),o=t(i),r="("===(f=f||"()")[0],u=")"===f[1];return (r?this.isAfter(n,s):!this.isBefore(n,s))&&(u?this.isBefore(o,s):!this.isAfter(o,s))||(r?this.isBefore(n,s):!this.isAfter(n,s))&&(u?this.isAfter(o,s):!this.isBefore(o,s))};}}));
    }(isBetween));

    var isBetweenPlugin = isBetween.exports;

    defaultDayjs.extend(customParseFormatPlugin);
    defaultDayjs.extend(localizedFormatPlugin);
    defaultDayjs.extend(isBetweenPlugin);
    var withLocale = function (dayjs, locale) { return (!locale ? dayjs : function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return dayjs.apply(void 0, args).locale(locale);
    }); };
    var defaultFormats = {
        normalDateWithWeekday: "ddd, MMM D",
        normalDate: "D MMMM",
        shortDate: "MMM D",
        monthAndDate: "MMMM D",
        dayOfMonth: "D",
        year: "YYYY",
        month: "MMMM",
        monthShort: "MMM",
        monthAndYear: "MMMM YYYY",
        weekday: "dddd",
        weekdayShort: "ddd",
        minutes: "mm",
        hours12h: "hh",
        hours24h: "HH",
        seconds: "ss",
        fullTime: "LT",
        fullTime12h: "hh:mm A",
        fullTime24h: "HH:mm",
        fullDate: "ll",
        fullDateWithWeekday: "dddd, LL",
        fullDateTime: "lll",
        fullDateTime12h: "ll hh:mm A",
        fullDateTime24h: "ll HH:mm",
        keyboardDate: "L",
        keyboardDateTime: "L LT",
        keyboardDateTime12h: "L hh:mm A",
        keyboardDateTime24h: "L HH:mm",
    };
    var DayjsUtils = /** @class */ (function () {
        function DayjsUtils(_a) {
            var _this = this;
            var _b = _a === void 0 ? {} : _a, locale = _b.locale, formats = _b.formats, instance = _b.instance;
            this.lib = "dayjs";
            this.is12HourCycleInCurrentLocale = function () {
                var _a, _b;
                /* istanbul ignore next */
                return /A|a/.test((_b = (_a = _this.rawDayJsInstance.Ls[_this.locale || "en"]) === null || _a === void 0 ? void 0 : _a.formats) === null || _b === void 0 ? void 0 : _b.LT);
            };
            this.getCurrentLocaleCode = function () {
                return _this.locale || "en";
            };
            this.getFormatHelperText = function (format) {
                // @see https://github.com/iamkun/dayjs/blob/dev/src/plugin/localizedFormat/index.js
                var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?)|./g;
                return format
                    .match(localFormattingTokens)
                    .map(function (token) {
                    var _a, _b;
                    var firstCharacter = token[0];
                    if (firstCharacter === "L") {
                        /* istanbul ignore next */
                        return (_b = (_a = _this.rawDayJsInstance.Ls[_this.locale || "en"]) === null || _a === void 0 ? void 0 : _a.formats[token]) !== null && _b !== void 0 ? _b : token;
                    }
                    return token;
                })
                    .join("")
                    .replace(/a/gi, "(a|p)m")
                    .toLocaleLowerCase();
            };
            this.parseISO = function (isoString) {
                return _this.dayjs(isoString);
            };
            this.toISO = function (value) {
                return value.toISOString();
            };
            this.parse = function (value, format) {
                if (value === "") {
                    return null;
                }
                return _this.dayjs(value, format, _this.locale, true);
            };
            this.date = function (value) {
                if (value === null) {
                    return null;
                }
                return _this.dayjs(value);
            };
            this.toJsDate = function (value) {
                return value.toDate();
            };
            this.isValid = function (value) {
                return _this.dayjs(value).isValid();
            };
            this.isNull = function (date) {
                return date === null;
            };
            this.getDiff = function (date, comparing, units) {
                return date.diff(comparing, units);
            };
            this.isAfter = function (date, value) {
                return date.isAfter(value);
            };
            this.isBefore = function (date, value) {
                return date.isBefore(value);
            };
            this.isAfterDay = function (date, value) {
                return date.isAfter(value, "day");
            };
            this.isBeforeDay = function (date, value) {
                return date.isBefore(value, "day");
            };
            this.isBeforeYear = function (date, value) {
                return date.isBefore(value, "year");
            };
            this.isAfterYear = function (date, value) {
                return date.isAfter(value, "year");
            };
            this.startOfDay = function (date) {
                return date.startOf("day");
            };
            this.endOfDay = function (date) {
                return date.endOf("day");
            };
            this.format = function (date, formatKey) {
                return _this.formatByString(date, _this.formats[formatKey]);
            };
            this.formatByString = function (date, formatString) {
                return _this.dayjs(date).format(formatString);
            };
            this.formatNumber = function (numberToFormat) {
                return numberToFormat;
            };
            this.getHours = function (date) {
                return date.hour();
            };
            this.addSeconds = function (date, count) {
                return count < 0
                    ? date.subtract(Math.abs(count), "second")
                    : date.add(count, "second");
            };
            this.addMinutes = function (date, count) {
                return count < 0
                    ? date.subtract(Math.abs(count), "minute")
                    : date.add(count, "minute");
            };
            this.addHours = function (date, count) {
                return count < 0
                    ? date.subtract(Math.abs(count), "hour")
                    : date.add(count, "hour");
            };
            this.addDays = function (date, count) {
                return count < 0
                    ? date.subtract(Math.abs(count), "day")
                    : date.add(count, "day");
            };
            this.addWeeks = function (date, count) {
                return count < 0
                    ? date.subtract(Math.abs(count), "week")
                    : date.add(count, "week");
            };
            this.addMonths = function (date, count) {
                return count < 0
                    ? date.subtract(Math.abs(count), "month")
                    : date.add(count, "month");
            };
            this.addYears = function (date, count) {
                return count < 0
                    ? date.subtract(Math.abs(count), "year")
                    : date.add(count, "year");
            };
            this.setMonth = function (date, count) {
                return date.set("month", count);
            };
            this.setHours = function (date, count) {
                return date.set("hour", count);
            };
            this.getMinutes = function (date) {
                return date.minute();
            };
            this.setMinutes = function (date, count) {
                return date.set("minute", count);
            };
            this.getSeconds = function (date) {
                return date.second();
            };
            this.setSeconds = function (date, count) {
                return date.set("second", count);
            };
            this.getMonth = function (date) {
                return date.month();
            };
            this.getDate = function (date) {
                return date.date();
            };
            this.setDate = function (date, count) {
                return date.set("date", count);
            };
            this.getDaysInMonth = function (date) {
                return date.daysInMonth();
            };
            this.isSameDay = function (date, comparing) {
                return date.isSame(comparing, "day");
            };
            this.isSameMonth = function (date, comparing) {
                return date.isSame(comparing, "month");
            };
            this.isSameYear = function (date, comparing) {
                return date.isSame(comparing, "year");
            };
            this.isSameHour = function (date, comparing) {
                return date.isSame(comparing, "hour");
            };
            this.getMeridiemText = function (ampm) {
                return ampm === "am" ? "AM" : "PM";
            };
            this.startOfYear = function (date) {
                return date.startOf("year");
            };
            this.endOfYear = function (date) {
                return date.endOf("year");
            };
            this.startOfMonth = function (date) {
                return date.startOf("month");
            };
            this.endOfMonth = function (date) {
                return date.endOf("month");
            };
            this.startOfWeek = function (date) {
                return date.startOf("week");
            };
            this.endOfWeek = function (date) {
                return date.endOf("week");
            };
            this.getNextMonth = function (date) {
                return date.add(1, "month");
            };
            this.getPreviousMonth = function (date) {
                return date.subtract(1, "month");
            };
            this.getMonthArray = function (date) {
                var firstMonth = date.startOf("year");
                var monthArray = [firstMonth];
                while (monthArray.length < 12) {
                    var prevMonth = monthArray[monthArray.length - 1];
                    monthArray.push(_this.getNextMonth(prevMonth));
                }
                return monthArray;
            };
            this.getYear = function (date) {
                return date.year();
            };
            this.setYear = function (date, year) {
                return date.set("year", year);
            };
            this.mergeDateAndTime = function (date, time) {
                return date.hour(time.hour()).minute(time.minute()).second(time.second());
            };
            this.getWeekdays = function () {
                var start = _this.dayjs().startOf("week");
                return [0, 1, 2, 3, 4, 5, 6].map(function (diff) {
                    return _this.formatByString(start.add(diff, "day"), "dd");
                });
            };
            this.isEqual = function (value, comparing) {
                if (value === null && comparing === null) {
                    return true;
                }
                return _this.dayjs(value).isSame(comparing);
            };
            this.getWeekArray = function (date) {
                var start = _this.dayjs(date).startOf("month").startOf("week");
                var end = _this.dayjs(date).endOf("month").endOf("week");
                var count = 0;
                var current = start;
                var nestedWeeks = [];
                while (current.isBefore(end)) {
                    var weekNumber = Math.floor(count / 7);
                    nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];
                    nestedWeeks[weekNumber].push(current);
                    current = current.add(1, "day");
                    count += 1;
                }
                return nestedWeeks;
            };
            this.getYearRange = function (start, end) {
                var startDate = _this.dayjs(start).startOf("year");
                var endDate = _this.dayjs(end).endOf("year");
                var years = [];
                var current = startDate;
                while (current.isBefore(endDate)) {
                    years.push(current);
                    current = current.add(1, "year");
                }
                return years;
            };
            this.isWithinRange = function (date, _a) {
                var start = _a[0], end = _a[1];
                return date.isBetween(start, end, null, "[]");
            };
            this.rawDayJsInstance = instance || defaultDayjs;
            this.dayjs = withLocale(this.rawDayJsInstance, locale);
            this.locale = locale;
            this.formats = Object.assign({}, defaultFormats, formats);
        }
        return DayjsUtils;
    }());

    const formatTokenMap = {
      YY: 'year',
      YYYY: 'year',
      M: 'month',
      MM: 'month',
      MMM: 'month',
      MMMM: 'month',
      D: 'day',
      DD: 'day',
      H: 'hour',
      HH: 'hour',
      h: 'hour',
      hh: 'hour',
      m: 'minute',
      mm: 'minute',
      s: 'second',
      ss: 'second',
      A: 'am-pm',
      a: 'am-pm'
    };
    class AdapterDayjs extends DayjsUtils {
      constructor(...args) {
        super(...args);
        this.formatTokenMap = formatTokenMap;

        this.expandFormat = format => {
          var _this$rawDayJsInstanc;

          const localeFormats = (_this$rawDayJsInstanc = this.rawDayJsInstance.Ls[this.locale || 'en']) == null ? void 0 : _this$rawDayJsInstanc.formats; // @see https://github.com/iamkun/dayjs/blob/dev/src/plugin/localizedFormat/index.js

          const t = formatBis => formatBis.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, (_, a, b) => a || b.slice(1));

          return format.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, (_, a, b) => {
            const B = b && b.toUpperCase();
            return a || localeFormats[b] || t(localeFormats[B]);
          });
        };

        this.getFormatHelperText = format => {
          return this.expandFormat(format).replace(/a/gi, '(a|p)m').toLocaleLowerCase();
        };
      }

    }

    var ExpandMore = {};

    var _interopRequireDefault$9 = interopRequireDefault.exports;
    Object.defineProperty(ExpandMore, "__esModule", {
      value: true
    });
    var default_1$9 = ExpandMore.default = void 0;
    var _createSvgIcon$9 = _interopRequireDefault$9(createSvgIcon);
    var _jsxRuntime$9 = jsxRuntime.exports;
    var _default$9 = (0, _createSvgIcon$9.default)( /*#__PURE__*/(0, _jsxRuntime$9.jsx)("path", {
      d: "M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z"
    }), 'ExpandMore');
    default_1$9 = ExpandMore.default = _default$9;

    const StyledTableCell = styled$1(TableCell$1)({
        borderBottom: 'none'
    });
    const NoBorderTableCell = ({ children, ...otherProps }) => (React__default["default"].createElement(StyledTableCell, Object.assign({}, otherProps), children));

    const StyledBadge$1 = styled$1(Badge$1)(({ theme }) => ({
        color: theme.palette.error.main
    }));
    const ValidationIcon$1 = ({ errorMessages, id }) => {
        return (React__default["default"].createElement(Tooltip$1, { id: id, title: errorMessages },
            React__default["default"].createElement(StyledBadge$1, { badgeContent: errorMessages.split('\n').length },
                React__default["default"].createElement(default_1$b, { color: 'inherit' }))));
    };

    const fixedCellSmall = {
        paddingLeft: 0,
        paddingRight: 0,
    };
    const TableToolbar = React__default["default"].memo(({ numColumns, errors, label, path, addItem, schema, enabled }) => (React__default["default"].createElement(TableRow$1, null,
        React__default["default"].createElement(NoBorderTableCell, { colSpan: numColumns },
            React__default["default"].createElement(Grid$1, { container: true, justifyContent: 'flex-start', alignItems: 'center', spacing: 2 },
                React__default["default"].createElement(Grid$1, { item: true },
                    React__default["default"].createElement(Typography$1, { variant: 'h6' }, label)),
                React__default["default"].createElement(Grid$1, { item: true },
                    React__default["default"].createElement(Hidden, { smUp: errors.length === 0 },
                        React__default["default"].createElement(Grid$1, { item: true },
                            React__default["default"].createElement(ValidationIcon$1, { id: 'tooltip-validation', errorMessages: errors })))))),
        enabled ? (React__default["default"].createElement(NoBorderTableCell, { align: 'right', style: fixedCellSmall },
            React__default["default"].createElement(Tooltip$1, { id: 'tooltip-add', title: `Add to ${label}`, placement: 'bottom' },
                React__default["default"].createElement(IconButton$1, { "aria-label": `Add to ${label}`, onClick: addItem(path, createDefaultValue(schema)), size: 'large' },
                    React__default["default"].createElement(default_1$c, null))))) : null)));

    const styles = {
        fixedCell: {
            width: '150px',
            height: '50px',
            paddingLeft: 0,
            paddingRight: 0,
            textAlign: 'center'
        },
        fixedCellSmall: {
            width: '50px',
            height: '50px',
            paddingLeft: 0,
            paddingRight: 0,
            textAlign: 'center'
        }
    };
    const generateCells = (Cell, schema, rowPath, enabled, cells) => {
        if (schema.type === 'object') {
            return getValidColumnProps(schema).map(prop => {
                const cellPath = Paths.compose(rowPath, prop);
                const props = {
                    propName: prop,
                    schema,
                    title: schema.properties?.[prop]?.title ?? startCase_1(prop),
                    rowPath,
                    cellPath,
                    enabled,
                    cells
                };
                return React__default["default"].createElement(Cell, Object.assign({ key: cellPath }, props));
            });
        }
        else {
            const props = {
                schema,
                rowPath,
                cellPath: rowPath,
                enabled
            };
            return React__default["default"].createElement(Cell, Object.assign({ key: rowPath }, props));
        }
    };
    const getValidColumnProps = (scopedSchema) => {
        if (scopedSchema.type === 'object' && typeof scopedSchema.properties === 'object') {
            return Object.keys(scopedSchema.properties).filter(prop => scopedSchema.properties[prop].type !== 'array');
        }
        return [''];
    };
    const EmptyTable = ({ numColumns }) => (React__default["default"].createElement(TableRow$1, null,
        React__default["default"].createElement(NoBorderTableCell, { colSpan: numColumns },
            React__default["default"].createElement(Typography$1, { align: 'center' }, "No data"))));
    const TableHeaderCell = React__default["default"].memo(({ title }) => (React__default["default"].createElement(TableCell$1, null, title)));
    const ctxToNonEmptyCellProps = (ctx, ownProps) => {
        const path = ownProps.rowPath +
            (ownProps.schema.type === 'object' ? '.' + ownProps.propName : '');
        const errors = formatErrorMessage(union_1(errorsAt(path, ownProps.schema, p => p === path)(ctx.core.errors).map((error) => error.message)));
        return {
            rowPath: ownProps.rowPath,
            propName: ownProps.propName,
            schema: ownProps.schema,
            rootSchema: ctx.core.schema,
            errors,
            path,
            enabled: ownProps.enabled,
            cells: ownProps.cells || ctx.cells,
            renderers: ownProps.renderers || ctx.renderers
        };
    };
    const controlWithoutLabel = (scope) => ({
        type: 'Control',
        scope: scope,
        label: false
    });
    const NonEmptyCellComponent = React__default["default"].memo(({ path, propName, schema, rootSchema, errors, enabled, renderers, cells, isValid }) => {
        return (React__default["default"].createElement(NoBorderTableCell, null,
            schema.properties ? (React__default["default"].createElement(DispatchCell, { schema: Resolve.schema(schema, `#/properties/${encode(propName)}`, rootSchema), uischema: controlWithoutLabel(`#/properties/${encode(propName)}`), path: path, enabled: enabled, renderers: renderers, cells: cells })) : (React__default["default"].createElement(DispatchCell, { schema: schema, uischema: controlWithoutLabel('#'), path: path, enabled: enabled, renderers: renderers, cells: cells })),
            React__default["default"].createElement(FormHelperText$1, { error: !isValid }, !isValid && errors)));
    });
    const NonEmptyCell = (ownProps) => {
        const ctx = useJsonForms();
        const emptyCellProps = ctxToNonEmptyCellProps(ctx, ownProps);
        const isValid = isEmpty_1(emptyCellProps.errors);
        return React__default["default"].createElement(NonEmptyCellComponent, Object.assign({}, emptyCellProps, { isValid: isValid }));
    };
    const NonEmptyRowComponent = ({ childPath, schema, rowIndex, openDeleteDialog, moveUpCreator, moveDownCreator, enableUp, enableDown, showSortButtons, enabled, cells, path }) => {
        const moveUp = React.useMemo(() => moveUpCreator(path, rowIndex), [moveUpCreator, path, rowIndex]);
        const moveDown = React.useMemo(() => moveDownCreator(path, rowIndex), [moveDownCreator, path, rowIndex]);
        return (React__default["default"].createElement(TableRow$1, { key: childPath, hover: true },
            generateCells(NonEmptyCell, schema, childPath, enabled, cells),
            enabled ? (React__default["default"].createElement(NoBorderTableCell, { style: showSortButtons ? styles.fixedCell : styles.fixedCellSmall },
                React__default["default"].createElement(Grid$1, { container: true, direction: 'row', justifyContent: 'flex-end', alignItems: 'center' },
                    showSortButtons ? (React__default["default"].createElement(React.Fragment, null,
                        React__default["default"].createElement(Grid$1, { item: true },
                            React__default["default"].createElement(IconButton$1, { "aria-label": `Move up`, onClick: moveUp, disabled: !enableUp, size: 'large' },
                                React__default["default"].createElement(default_1$d, null))),
                        React__default["default"].createElement(Grid$1, { item: true },
                            React__default["default"].createElement(IconButton$1, { "aria-label": `Move down`, onClick: moveDown, disabled: !enableDown, size: 'large' },
                                React__default["default"].createElement(default_1$e, null))))) : null,
                    React__default["default"].createElement(Grid$1, { item: true },
                        React__default["default"].createElement(IconButton$1, { "aria-label": `Delete`, onClick: () => openDeleteDialog(childPath, rowIndex), size: 'large' },
                            React__default["default"].createElement(default_1$f, null)))))) : null));
    };
    const NonEmptyRow = React__default["default"].memo(NonEmptyRowComponent);
    const TableRows = ({ data, path, schema, openDeleteDialog, moveUp, moveDown, uischema, config, enabled, cells }) => {
        const isEmptyTable = data === 0;
        if (isEmptyTable) {
            return React__default["default"].createElement(EmptyTable, { numColumns: getValidColumnProps(schema).length + 1 });
        }
        const appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        return (React__default["default"].createElement(React__default["default"].Fragment, null, range_1(data).map((index) => {
            const childPath = Paths.compose(path, `${index}`);
            return (React__default["default"].createElement(NonEmptyRow, { key: childPath, childPath: childPath, rowIndex: index, schema: schema, openDeleteDialog: openDeleteDialog, moveUpCreator: moveUp, moveDownCreator: moveDown, enableUp: index !== 0, enableDown: index !== data - 1, showSortButtons: appliedUiSchemaOptions.showSortButtons || appliedUiSchemaOptions.showArrayTableSortButtons, enabled: enabled, cells: cells, path: path }));
        })));
    };
    class MaterialTableControl extends React__default["default"].Component {
        constructor() {
            super(...arguments);
            this.addItem = (path, value) => this.props.addItem(path, value);
        }
        render() {
            const { label, path, schema, rootSchema, uischema, errors, openDeleteDialog, visible, enabled, cells } = this.props;
            const controlElement = uischema;
            const isObjectSchema = schema.type === 'object';
            const headerCells = isObjectSchema
                ? generateCells(TableHeaderCell, schema, path, enabled, cells)
                : undefined;
            return (React__default["default"].createElement(Hidden, { xsUp: !visible },
                React__default["default"].createElement(Table$1, null,
                    React__default["default"].createElement(TableHead$1, null,
                        React__default["default"].createElement(TableToolbar, { errors: errors, label: label, addItem: this.addItem, numColumns: isObjectSchema ? headerCells.length : 1, path: path, uischema: controlElement, schema: schema, rootSchema: rootSchema, enabled: enabled }),
                        isObjectSchema && (React__default["default"].createElement(TableRow$1, null,
                            headerCells,
                            enabled ? React__default["default"].createElement(TableCell$1, null) : null))),
                    React__default["default"].createElement(TableBody$1, null,
                        React__default["default"].createElement(TableRows, Object.assign({ openDeleteDialog: openDeleteDialog }, this.props))))));
        }
    }

    const DeleteDialog = React__default["default"].memo(({ open, onClose, onConfirm, onCancel }) => {
        return (React__default["default"].createElement(Dialog$1, { open: open, keepMounted: true, onClose: onClose, "aria-labelledby": 'alert-dialog-confirmdelete-title', "aria-describedby": 'alert-dialog-confirmdelete-description' },
            React__default["default"].createElement(DialogTitle$1, { id: 'alert-dialog-confirmdelete-title' }, 'Confirm Deletion'),
            React__default["default"].createElement(DialogContent$1, null,
                React__default["default"].createElement(DialogContentText$1, { id: 'alert-dialog-confirmdelete-description' }, "Are you sure you want to delete the selected entry?")),
            React__default["default"].createElement(DialogActions$1, null,
                React__default["default"].createElement(Button$1, { onClick: onCancel, color: 'primary' }, "No"),
                React__default["default"].createElement(Button$1, { onClick: onConfirm, color: 'primary' }, "Yes"))));
    });

    const MaterialArrayControlRenderer = (props) => {
        const [open, setOpen] = React.useState(false);
        const [path, setPath] = React.useState(undefined);
        const [rowData, setRowData] = React.useState(undefined);
        const { removeItems, visible } = props;
        const openDeleteDialog = React.useCallback((p, rowIndex) => {
            setOpen(true);
            setPath(p);
            setRowData(rowIndex);
        }, [setOpen, setPath, setRowData]);
        const deleteCancel = React.useCallback(() => setOpen(false), [setOpen]);
        const deleteConfirm = React.useCallback(() => {
            const p = path.substring(0, path.lastIndexOf(('.')));
            removeItems(p, [rowData])();
            setOpen(false);
        }, [setOpen, path, rowData]);
        const deleteClose = React.useCallback(() => setOpen(false), [setOpen]);
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(MaterialTableControl, Object.assign({}, props, { openDeleteDialog: openDeleteDialog })),
            React__default["default"].createElement(DeleteDialog, { open: open, onCancel: deleteCancel, onConfirm: deleteConfirm, onClose: deleteClose })));
    };
    var MaterialArrayControlRenderer$1 = withJsonFormsArrayLayoutProps(MaterialArrayControlRenderer);

    const MaterialObjectRenderer = ({ renderers, cells, uischemas, schema, label, path, visible, enabled, uischema, rootSchema }) => {
        const detailUiSchema = React.useMemo(() => findUISchema(uischemas, schema, uischema.scope, path, () => isEmpty_1(path) ? Generate.uiSchema(schema, 'VerticalLayout') : { ...Generate.uiSchema(schema, 'Group'), label }, uischema, rootSchema), [uischemas, schema, uischema.scope, path, label, uischema, rootSchema]);
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(JsonFormsDispatch, { visible: visible, enabled: enabled, schema: schema, uischema: detailUiSchema, path: path, renderers: renderers, cells: cells })));
    };
    const materialObjectControlTester = rankWith(2, isObjectControl);
    var MaterialObjectRenderer$1 = withJsonFormsDetailProps(MaterialObjectRenderer);

    const MaterialAllOfRenderer = ({ schema, rootSchema, visible, renderers, cells, path, uischemas, uischema }) => {
        const delegateUISchema = findMatchingUISchema(uischemas)(schema, uischema.scope, path);
        if (delegateUISchema) {
            return (React__default["default"].createElement(Hidden, { xsUp: !visible },
                React__default["default"].createElement(JsonFormsDispatch, { schema: schema, uischema: delegateUISchema, path: path, renderers: renderers, cells: cells })));
        }
        const allOfRenderInfos = createCombinatorRenderInfos$1(schema.allOf, rootSchema, 'allOf', uischema, path, uischemas);
        return (React__default["default"].createElement(Hidden, { xsUp: !visible }, allOfRenderInfos.map((allOfRenderInfo, allOfIndex) => (React__default["default"].createElement(JsonFormsDispatch, { key: allOfIndex, schema: allOfRenderInfo.schema, uischema: allOfRenderInfo.uischema, path: path, renderers: renderers, cells: cells })))));
    };
    const materialAllOfControlTester = rankWith(3, isAllOfControl);
    var MaterialAllOfRenderer$1 = withJsonFormsAllOfProps(MaterialAllOfRenderer);

    const isLayout$1 = (uischema) => uischema.hasOwnProperty('elements');
    class CombinatorProperties$1 extends React__default["default"].Component {
        render() {
            const { schema, combinatorKeyword, path } = this.props;
            const otherProps = omit_1(schema, combinatorKeyword);
            const foundUISchema = Generate.uiSchema(otherProps, 'VerticalLayout');
            let isLayoutWithElements = false;
            if (foundUISchema !== null && isLayout$1(foundUISchema)) {
                isLayoutWithElements = foundUISchema.elements.length > 0;
            }
            if (isLayoutWithElements) {
                return (React__default["default"].createElement(JsonFormsDispatch, { schema: otherProps, path: path, uischema: foundUISchema }));
            }
            return null;
        }
    }

    const MaterialAnyOfRenderer = ({ schema, rootSchema, indexOfFittingSchema, visible, path, renderers, cells, uischema, uischemas }) => {
        const [selectedAnyOf, setSelectedAnyOf] = React.useState(indexOfFittingSchema || 0);
        const handleChange = React.useCallback((_ev, value) => setSelectedAnyOf(value), [setSelectedAnyOf]);
        const anyOf = 'anyOf';
        const anyOfRenderInfos = createCombinatorRenderInfos$1(schema.anyOf, rootSchema, anyOf, uischema, path, uischemas);
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(CombinatorProperties$1, { schema: schema, combinatorKeyword: anyOf, path: path }),
            React__default["default"].createElement(Tabs$1, { value: selectedAnyOf, onChange: handleChange }, anyOfRenderInfos.map(anyOfRenderInfo => (React__default["default"].createElement(Tab$1, { key: anyOfRenderInfo.label, label: anyOfRenderInfo.label })))),
            anyOfRenderInfos.map((anyOfRenderInfo, anyOfIndex) => selectedAnyOf === anyOfIndex && (React__default["default"].createElement(JsonFormsDispatch, { key: anyOfIndex, schema: anyOfRenderInfo.schema, uischema: anyOfRenderInfo.uischema, path: path, renderers: renderers, cells: cells })))));
    };
    const materialAnyOfControlTester = rankWith(3, isAnyOfControl);
    var MaterialAnyOfRenderer$1 = withJsonFormsAnyOfProps(MaterialAnyOfRenderer);

    const MaterialOneOfRenderer$2 = ({ handleChange, schema, path, renderers, cells, rootSchema, id, visible, indexOfFittingSchema, uischema, uischemas, data }) => {
        const [open, setOpen] = React.useState(false);
        const [selectedIndex, setSelectedIndex] = React.useState(indexOfFittingSchema || 0);
        const [newSelectedIndex, setNewSelectedIndex] = React.useState(0);
        const handleClose = React.useCallback(() => setOpen(false), [setOpen]);
        const cancel = React.useCallback(() => {
            setOpen(false);
        }, [setOpen]);
        const oneOfRenderInfos = createCombinatorRenderInfos$1(schema.oneOf, rootSchema, 'oneOf', uischema, path, uischemas);
        const openNewTab = (newIndex) => {
            handleChange(path, createDefaultValue(oneOfRenderInfos[newIndex].schema));
            setSelectedIndex(newIndex);
        };
        const confirm = React.useCallback(() => {
            openNewTab(newSelectedIndex);
            setOpen(false);
        }, [handleChange, createDefaultValue, newSelectedIndex]);
        const handleTabChange = React.useCallback((_event, newOneOfIndex) => {
            setNewSelectedIndex(newOneOfIndex);
            if (isEmpty_1(data)) {
                openNewTab(newOneOfIndex);
            }
            else {
                setOpen(true);
            }
        }, [setOpen, setSelectedIndex, data]);
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(CombinatorProperties$1, { schema: schema, combinatorKeyword: 'oneOf', path: path }),
            React__default["default"].createElement(Tabs$1, { value: selectedIndex, onChange: handleTabChange }, oneOfRenderInfos.map(oneOfRenderInfo => React__default["default"].createElement(Tab$1, { key: oneOfRenderInfo.label, label: oneOfRenderInfo.label }))),
            oneOfRenderInfos.map((oneOfRenderInfo, oneOfIndex) => (selectedIndex === oneOfIndex && (React__default["default"].createElement(JsonFormsDispatch, { key: oneOfIndex, schema: oneOfRenderInfo.schema, uischema: oneOfRenderInfo.uischema, path: path, renderers: renderers, cells: cells })))),
            React__default["default"].createElement(Dialog$1, { open: open, onClose: handleClose, "aria-labelledby": 'alert-dialog-title', "aria-describedby": 'alert-dialog-description' },
                React__default["default"].createElement(DialogTitle$1, { id: 'alert-dialog-title' }, 'Clear form?'),
                React__default["default"].createElement(DialogContent$1, null,
                    React__default["default"].createElement(DialogContentText$1, { id: 'alert-dialog-description' }, "Your data will be cleared if you navigate away from this tab. Do you want to proceed?")),
                React__default["default"].createElement(DialogActions$1, null,
                    React__default["default"].createElement(Button$1, { onClick: cancel, color: 'primary' }, "No"),
                    React__default["default"].createElement(Button$1, { onClick: confirm, color: 'primary', autoFocus: true, id: `oneOf-${id}-confirm-yes` }, "Yes")))));
    };
    const materialOneOfControlTester$1 = rankWith(3, isOneOfControl);
    var MaterialOneOfRenderer$1$1 = withJsonFormsOneOfProps(MaterialOneOfRenderer$2);

    const MuiCheckbox = React__default["default"].memo((props) => {
        const { data, className, id, enabled, uischema, path, handleChange, config } = props;
        const appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        const inputProps = { autoFocus: !!appliedUiSchemaOptions.focus };
        const checked = !!data;
        return (React__default["default"].createElement(Checkbox$1, { checked: checked, onChange: (_ev, isChecked) => handleChange(path, isChecked), className: className, id: id, disabled: !enabled, inputProps: inputProps }));
    });

    dayjs.extend(customParsing);
    const createOnChangeHandler = (path, handleChange, saveFormat) => (time, textInputValue) => {
        if (!time) {
            handleChange(path, undefined);
            return;
        }
        const result = dayjs(time).format(saveFormat);
        handleChange(path, result === 'Invalid Date' ? textInputValue : result);
    };
    const getData = (data, saveFormat) => {
        if (!data) {
            return null;
        }
        const dayjsData = dayjs(data, saveFormat);
        if (dayjsData.toString() === 'Invalid Date') {
            return null;
        }
        return dayjsData;
    };
    const ResettableTextField = ({ rawValue, dayjsValueIsValid, valueInInputFormat, focused, inputProps, ...props }) => {
        const value = React.useRef({ lastInput: inputProps?.value, toShow: inputProps?.value });
        if (!focused) {
            if (!dayjsValueIsValid) {
                value.current.toShow = typeof rawValue === 'string' || rawValue === null || rawValue === undefined ? rawValue : JSON.stringify(rawValue);
            }
            else {
                value.current.toShow = valueInInputFormat;
            }
        }
        if (focused && inputProps?.value !== value.current.lastInput) {
            value.current.lastInput = inputProps?.value;
            value.current.toShow = inputProps?.value;
        }
        return React__default["default"].createElement(TextField$1, Object.assign({}, props, { inputProps: { ...inputProps, value: value.current.toShow || '' } }));
    };

    const renderLayoutElements = (elements, schema, path, enabled, renderers, cells) => {
        return elements.map((child, index) => (React__default["default"].createElement(Grid$1, { item: true, key: `${path}-${index}`, xs: true },
            React__default["default"].createElement(JsonFormsDispatch, { uischema: child, schema: schema, path: path, enabled: enabled, renderers: renderers, cells: cells }))));
    };
    const MaterialLayoutRendererComponent = ({ visible, elements, schema, path, enabled, direction, renderers, cells }) => {
        if (isEmpty_1(elements)) {
            return null;
        }
        else {
            return (React__default["default"].createElement(Hidden, { xsUp: !visible },
                React__default["default"].createElement(Grid$1, { container: true, direction: direction, spacing: direction === 'row' ? 2 : 0 }, renderLayoutElements(elements, schema, path, enabled, renderers, cells))));
        }
    };
    const MaterialLayoutRenderer = React__default["default"].memo(MaterialLayoutRendererComponent);
    const withAjvProps = (Component) => (props) => {
        const ctx = useJsonForms();
        const ajv = getAjv({ jsonforms: { ...ctx } });
        return (React__default["default"].createElement(Component, Object.assign({}, props, { ajv: ajv })));
    };

    const eventToValue$3 = (ev) => ev.target.value;
    const useDebouncedChange = (handleChange, defaultValue, data, path, eventToValueFunction = eventToValue$3, timeout = 300) => {
        const [input, setInput] = React.useState(data ?? defaultValue);
        React.useEffect(() => {
            setInput(data ?? defaultValue);
        }, [data]);
        const debouncedUpdate = React.useCallback(debounce_1((newValue) => handleChange(path, newValue), timeout), [handleChange, path, timeout]);
        const onChange = React.useCallback((ev) => {
            const newValue = eventToValueFunction(ev);
            setInput(newValue ?? defaultValue);
            debouncedUpdate(newValue);
        }, [debouncedUpdate, eventToValueFunction]);
        const onClear = React.useCallback(() => { setInput(defaultValue); handleChange(path, undefined); }, [defaultValue, handleChange, path]);
        return [input, onChange, onClear];
    };

    const useFocus = () => {
        const [focused, setFocused] = React.useState(false);
        const onFocus = React.useCallback(() => setFocused(true), []);
        const onBlur = React.useCallback(() => setFocused(false), []);
        return [focused, onFocus, onBlur];
    };

    const i18nDefaults = {
        'enum.none': 'None'
    };

    const MuiSelect = React__default["default"].memo((props) => {
        const { data, className, id, enabled, schema, uischema, path, handleChange, options, config, t } = props;
        const appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        const noneOptionLabel = React.useMemo(() => t('enum.none', i18nDefaults['enum.none'], { schema, uischema, path }), [t, schema, uischema, path]);
        return (React__default["default"].createElement(Select$1, { className: className, id: id, disabled: !enabled, autoFocus: appliedUiSchemaOptions.focus, value: data !== undefined ? data : '', onChange: ev => handleChange(path, ev.target.value || undefined), fullWidth: true, variant: 'standard' }, [React__default["default"].createElement(MenuItem$1, { value: '', key: 'jsonforms.enum.none' },
                React__default["default"].createElement("em", null, noneOptionLabel))].concat(options.map(optionValue => (React__default["default"].createElement(MenuItem$1, { value: optionValue.value, key: optionValue.value }, optionValue.label))))));
    });

    const toNumber$1 = (value) => value === '' ? undefined : parseInt(value, 10);
    const eventToValue$2 = (ev) => toNumber$1(ev.target.value);
    const MuiInputInteger = React__default["default"].memo((props) => {
        const { data, className, id, enabled, uischema, path, handleChange, config } = props;
        const inputProps = { step: '1' };
        const appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        const [inputValue, onChange] = useDebouncedChange(handleChange, '', data, path, eventToValue$2);
        return (React__default["default"].createElement(Input$1, { type: 'number', value: inputValue, onChange: onChange, className: className, id: id, disabled: !enabled, autoFocus: appliedUiSchemaOptions.focus, inputProps: inputProps, fullWidth: true }));
    });

    const toNumber = (value) => value === '' ? undefined : parseFloat(value);
    const eventToValue$1 = (ev) => toNumber(ev.target.value);
    const MuiInputNumber = React__default["default"].memo((props) => {
        const { data, className, id, enabled, uischema, path, handleChange, config } = props;
        const inputProps = { step: '0.1' };
        const appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        const [inputValue, onChange] = useDebouncedChange(handleChange, '', data, path, eventToValue$1);
        return (React__default["default"].createElement(Input$1, { type: 'number', value: inputValue, onChange: onChange, className: className, id: id, disabled: !enabled, autoFocus: appliedUiSchemaOptions.focus, inputProps: inputProps, fullWidth: true }));
    });

    const MuiInputNumberFormat = React__default["default"].memo((props) => {
        const { className, id, enabled, uischema, isValid, path, handleChange, schema, config } = props;
        const maxLength = schema.maxLength;
        const appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        let inputProps;
        if (appliedUiSchemaOptions.restrict) {
            inputProps = { maxLength: maxLength };
        }
        else {
            inputProps = {};
        }
        const formattedNumber = props.toFormatted(props.data);
        const validStringNumber = React.useCallback((ev) => props.fromFormatted(ev.currentTarget.value), [props.fromFormatted]);
        const [inputValue, onChange] = useDebouncedChange(handleChange, '', formattedNumber, path, validStringNumber);
        return (React__default["default"].createElement(Input$1, { type: 'text', value: inputValue, onChange: onChange, className: className, id: id, disabled: !enabled, autoFocus: appliedUiSchemaOptions.focus, multiline: appliedUiSchemaOptions.multi, fullWidth: !appliedUiSchemaOptions.trim || maxLength === undefined, inputProps: inputProps, error: !isValid }));
    });

    const eventToValue = (ev) => ev.target.value === '' ? undefined : ev.target.value;
    const MuiInputText = React__default["default"].memo((props) => {
        const [showAdornment, setShowAdornment] = React.useState(false);
        const { data, config, className, id, enabled, uischema, isValid, path, handleChange, schema, muiInputProps, inputComponent } = props;
        const maxLength = schema.maxLength;
        const appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        let inputProps;
        if (appliedUiSchemaOptions.restrict) {
            inputProps = { maxLength: maxLength };
        }
        else {
            inputProps = {};
        }
        inputProps = merge_1(inputProps, muiInputProps);
        if (appliedUiSchemaOptions.trim && maxLength !== undefined) {
            inputProps.size = maxLength;
        }
        const [inputText, onChange, onClear] = useDebouncedChange(handleChange, '', data, path, eventToValue);
        const onPointerEnter = () => setShowAdornment(true);
        const onPointerLeave = () => setShowAdornment(false);
        const theme = useTheme();
        const closeStyle = {
            background: theme.jsonforms?.input?.delete?.background || theme.palette.background.default,
            borderRadius: '50%'
        };
        return (React__default["default"].createElement(Input$1, { type: appliedUiSchemaOptions.format === 'password' ? 'password' : 'text', value: inputText, onChange: onChange, className: className, id: id, disabled: !enabled, autoFocus: appliedUiSchemaOptions.focus, multiline: appliedUiSchemaOptions.multi, fullWidth: !appliedUiSchemaOptions.trim || maxLength === undefined, inputProps: inputProps, error: !isValid, onPointerEnter: onPointerEnter, onPointerLeave: onPointerLeave, endAdornment: React__default["default"].createElement(InputAdornment$1, { position: 'end', style: {
                    display: !showAdornment || !enabled || data === undefined ? 'none' : 'flex',
                    position: 'absolute',
                    right: 0
                } },
                React__default["default"].createElement(IconButton$1, { "aria-label": 'Clear input field', onClick: onClear, size: 'large' },
                    React__default["default"].createElement(default_1$a, { style: closeStyle }))), inputComponent: inputComponent }));
    });

    const MuiInputTime = React__default["default"].memo((props) => {
        const { data, className, id, enabled, uischema, path, handleChange, config } = props;
        const appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        const [inputValue, onChange] = useDebouncedChange(handleChange, '', data, path);
        return (React__default["default"].createElement(Input$1, { type: 'time', value: inputValue, onChange: onChange, className: className, id: id, disabled: !enabled, autoFocus: appliedUiSchemaOptions.focus, fullWidth: true }));
    });

    const MaterialEnumArrayRenderer = ({ schema, visible, errors, path, options, data, addItem, removeItem, handleChange, ...otherProps }) => {
        return (React__default["default"].createElement(Hidden, { xlUp: !visible },
            React__default["default"].createElement(FormControl$1, { component: 'fieldset' },
                React__default["default"].createElement(FormGroup$1, { row: true }, options.map((option, index) => {
                    const optionPath = Paths.compose(path, `${index}`);
                    const checkboxValue = data?.includes(option.value)
                        ? option.value
                        : undefined;
                    return (React__default["default"].createElement(FormControlLabel$1, { id: option.value, key: option.value, control: React__default["default"].createElement(MuiCheckbox, Object.assign({ key: 'checkbox-' + option.value, isValid: isEmpty_1(errors), path: optionPath, handleChange: (_childPath, newValue) => newValue
                                ? addItem(path, option.value)
                                : removeItem(path, option.value), data: checkboxValue, errors: errors, schema: schema, visible: visible }, otherProps)), label: option.label }));
                })),
                React__default["default"].createElement(FormHelperText$1, { error: true }, errors))));
    };
    const hasOneOfItems = (schema) => schema.oneOf !== undefined &&
        schema.oneOf.length > 0 &&
        schema.oneOf.every((entry) => {
            return entry.const !== undefined;
        });
    const hasEnumItems = (schema) => schema.type === 'string' && schema.enum !== undefined;
    const materialEnumArrayRendererTester = rankWith(5, and(uiTypeIs('Control'), and(schemaMatches(schema => hasType(schema, 'array') &&
        !Array.isArray(schema.items) &&
        schema.uniqueItems === true), schemaSubPathMatches('items', schema => {
        return hasOneOfItems(schema) || hasEnumItems(schema);
    }))));
    var MaterialEnumArrayRenderer$1 = withJsonFormsMultiEnumProps(MaterialEnumArrayRenderer);

    const materialArrayControlTester = rankWith(3, or(isObjectArrayControl, isPrimitiveArrayControl));

    const materialLabelRendererTester = rankWith(1, uiTypeIs('Label'));
    const MaterialLabelRenderer = ({ text, visible }) => {
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(Typography$1, { variant: 'h6' }, text)));
    };
    var MaterialLabelRenderer$1 = withJsonFormsLabelProps(MaterialLabelRenderer);

    const ArrayLayoutToolbar$1 = React__default["default"].memo(({ label, errors, addItem, path, createDefault }) => {
        return (React__default["default"].createElement(Toolbar$1, { disableGutters: true },
            React__default["default"].createElement(Grid$1, { container: true, alignItems: 'center', justifyContent: 'space-between' },
                React__default["default"].createElement(Grid$1, { item: true },
                    React__default["default"].createElement(Typography$1, { variant: 'h6' }, label)),
                React__default["default"].createElement(Hidden, { smUp: errors.length === 0 },
                    React__default["default"].createElement(Grid$1, { item: true },
                        React__default["default"].createElement(ValidationIcon$1, { id: 'tooltip-validation', errorMessages: errors }))),
                React__default["default"].createElement(Grid$1, { item: true },
                    React__default["default"].createElement(Grid$1, { container: true },
                        React__default["default"].createElement(Grid$1, { item: true },
                            React__default["default"].createElement(Tooltip$1, { id: 'tooltip-add', title: `Add to ${label}`, placement: 'bottom' },
                                React__default["default"].createElement(IconButton$1, { "aria-label": `Add to ${label}`, onClick: addItem(path, createDefault()), size: 'large' },
                                    React__default["default"].createElement(default_1$c, null)))))))));
    });

    const ListWithDetailMasterItem = ({ index, childLabel, selected, handleSelect, removeItem, path }) => {
        return (React__default["default"].createElement(ListItem$1, { button: true, selected: selected, onClick: handleSelect(index) },
            React__default["default"].createElement(ListItemAvatar$1, null,
                React__default["default"].createElement(Avatar$1, { "aria-label": 'Index' }, index + 1)),
            React__default["default"].createElement(ListItemText$1, { primary: childLabel }),
            React__default["default"].createElement(ListItemSecondaryAction$1, null,
                React__default["default"].createElement(IconButton$1, { "aria-label": 'Delete', onClick: removeItem(path, index), size: 'large' },
                    React__default["default"].createElement(default_1$f, null)))));
    };
    var ListWithDetailMasterItem$1 = withJsonFormsMasterListItemProps(ListWithDetailMasterItem);

    const MaterialListWithDetailRenderer = ({ uischemas, schema, uischema, path, errors, visible, label, required, removeItems, addItem, data, renderers, cells, config, rootSchema }) => {
        const [selectedIndex, setSelectedIndex] = React.useState(undefined);
        const handleRemoveItem = React.useCallback((p, value) => () => {
            removeItems(p, [value])();
            if (selectedIndex === value) {
                setSelectedIndex(undefined);
            }
            else if (selectedIndex > value) {
                setSelectedIndex(selectedIndex - 1);
            }
        }, [removeItems, setSelectedIndex]);
        const handleListItemClick = React.useCallback((index) => () => setSelectedIndex(index), [setSelectedIndex]);
        const handleCreateDefaultValue = React.useCallback(() => createDefaultValue(schema), [createDefaultValue]);
        const foundUISchema = React.useMemo(() => findUISchema(uischemas, schema, uischema.scope, path, undefined, uischema, rootSchema), [uischemas, schema, uischema.scope, path, uischema, rootSchema]);
        const appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        React__default["default"].useEffect(() => {
            setSelectedIndex(undefined);
        }, [schema]);
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(ArrayLayoutToolbar$1, { label: computeLabel(label, required, appliedUiSchemaOptions.hideRequiredAsterisk), errors: errors, path: path, addItem: addItem, createDefault: handleCreateDefaultValue }),
            React__default["default"].createElement(Grid$1, { container: true, direction: 'row', spacing: 2 },
                React__default["default"].createElement(Grid$1, { item: true, xs: 3 },
                    React__default["default"].createElement(List$1, null, data > 0 ? (map_1(range_1(data), index => (React__default["default"].createElement(ListWithDetailMasterItem$1, { index: index, path: path, schema: schema, handleSelect: handleListItemClick, removeItem: handleRemoveItem, selected: selectedIndex === index, key: index })))) : (React__default["default"].createElement("p", null, "No data")))),
                React__default["default"].createElement(Grid$1, { item: true, xs: true }, selectedIndex !== undefined ? (React__default["default"].createElement(JsonFormsDispatch, { renderers: renderers, cells: cells, visible: visible, schema: schema, uischema: foundUISchema, path: compose$1(path, `${selectedIndex}`) })) : (React__default["default"].createElement(Typography$1, { variant: 'h6' }, "No Selection"))))));
    };
    const materialListWithDetailTester = rankWith(4, and(uiTypeIs('ListWithDetail'), isObjectArray));
    var MaterialListWithDetailRenderer$1 = withJsonFormsArrayLayoutProps(MaterialListWithDetailRenderer);

    const MaterialBooleanControl = ({ data, visible, label, id, enabled, uischema, schema, rootSchema, handleChange, errors, path, config }) => {
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(FormControlLabel$1, { label: label, id: id, control: React__default["default"].createElement(MuiCheckbox, { id: `${id}-input`, isValid: isEmpty_1(errors), data: data, enabled: enabled, visible: visible, path: path, uischema: uischema, schema: schema, rootSchema: rootSchema, handleChange: handleChange, errors: errors, config: config }) })));
    };
    const materialBooleanControlTester = rankWith(2, isBooleanControl);
    var MaterialBooleanControl$1 = withJsonFormsControlProps(MaterialBooleanControl);

    const MuiToggle = React__default["default"].memo((props) => {
        const { data, className, id, enabled, uischema, path, handleChange, config } = props;
        const appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        const inputProps = { autoFocus: !!appliedUiSchemaOptions.focus };
        const checked = !!data;
        return (React__default["default"].createElement(Switch$1, { checked: checked, onChange: (_ev, isChecked) => handleChange(path, isChecked), className: className, id: id, disabled: !enabled, inputProps: inputProps }));
    });

    const MaterialBooleanToggleControl = ({ data, visible, label, id, enabled, uischema, schema, rootSchema, handleChange, errors, path, config }) => {
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(FormControlLabel$1, { label: label, id: id, control: React__default["default"].createElement(MuiToggle, { id: `${id}-input`, isValid: isEmpty_1(errors), data: data, enabled: enabled, visible: visible, path: path, uischema: uischema, schema: schema, rootSchema: rootSchema, handleChange: handleChange, errors: errors, config: config }) })));
    };
    const materialBooleanToggleControlTester = rankWith(3, and(isBooleanControl, optionIs('toggle', true)));
    var MaterialBooleanToggleControl$1 = withJsonFormsControlProps(MaterialBooleanToggleControl);

    const MaterialInputControl = (props) => {
        const [focused, onFocus, onBlur] = useFocus();
        const { id, description, errors, label, uischema, visible, required, config, input } = props;
        const isValid = errors.length === 0;
        const appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        const showDescription = !isDescriptionHidden(visible, description, focused, appliedUiSchemaOptions.showUnfocusedDescription);
        const firstFormHelperText = showDescription
            ? description
            : !isValid
                ? errors
                : null;
        const secondFormHelperText = showDescription && !isValid ? errors : null;
        const InnerComponent = input;
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(FormControl$1, { fullWidth: !appliedUiSchemaOptions.trim, onFocus: onFocus, onBlur: onBlur, id: id, variant: 'standard' },
                React__default["default"].createElement(InputLabel$1, { htmlFor: id + '-input', error: !isValid, required: showAsRequired(required, appliedUiSchemaOptions.hideRequiredAsterisk) }, label),
                React__default["default"].createElement(InnerComponent, Object.assign({}, props, { id: id + '-input', isValid: isValid, visible: visible })),
                React__default["default"].createElement(FormHelperText$1, { error: !isValid && !showDescription }, firstFormHelperText),
                React__default["default"].createElement(FormHelperText$1, { error: !isValid }, secondFormHelperText))));
    };

    const MuiAutocomplete$1 = (props) => {
        const { description, errors, visible, required, label, data, className, id, enabled, uischema, path, handleChange, options, config, getOptionLabel, renderOption, filterOptions, isValid } = props;
        const appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        const [inputValue, setInputValue] = React__default["default"].useState(data ?? '');
        const [focused, onFocus, onBlur] = useFocus();
        const findOption = options.find(o => o.value === data) ?? null;
        const showDescription = !isDescriptionHidden(visible, description, focused, appliedUiSchemaOptions.showUnfocusedDescription);
        const firstFormHelperText = showDescription
            ? description
            : !isValid
                ? errors
                : null;
        const secondFormHelperText = showDescription && !isValid ? errors : null;
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(Autocomplete$1, { className: className, id: id, disabled: !enabled, value: findOption, onChange: (_event, newValue) => {
                    handleChange(path, newValue?.value);
                }, inputValue: inputValue, onInputChange: (_event, newInputValue) => {
                    setInputValue(newInputValue);
                }, autoHighlight: true, autoSelect: true, autoComplete: true, fullWidth: true, options: options, getOptionLabel: getOptionLabel || (option => option?.label), freeSolo: false, renderInput: params => {
                    return (React__default["default"].createElement(TextField$1, Object.assign({ label: label, variant: 'standard', type: 'text', inputProps: params.inputProps, inputRef: params.InputProps.ref, autoFocus: appliedUiSchemaOptions.focus, disabled: !enabled }, params, { id: id + '-input', required: required && !appliedUiSchemaOptions.hideRequiredAsterisk, error: !isValid, fullWidth: !appliedUiSchemaOptions.trim, InputLabelProps: data ? { shrink: true } : undefined, onFocus: onFocus, onBlur: onBlur, focused: focused })));
                }, renderOption: renderOption, filterOptions: filterOptions }),
            React__default["default"].createElement(FormHelperText$1, { error: !isValid && !showDescription }, firstFormHelperText),
            React__default["default"].createElement(FormHelperText$1, { error: !isValid }, secondFormHelperText)));
    };

    const MaterialEnumControl$2 = (props) => {
        const { config, uischema, errors } = props;
        const appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        const isValid = errors.length === 0;
        return (appliedUiSchemaOptions.autocomplete === false ?
            React__default["default"].createElement(MaterialInputControl, Object.assign({}, props, { input: MuiSelect })) :
            React__default["default"].createElement(MuiAutocomplete$1, Object.assign({}, props, { isValid: isValid })));
    };
    const materialEnumControlTester$1 = rankWith(2, isEnumControl);
    var MaterialEnumControl$1$1 = withJsonFormsEnumProps(withTranslateProps(React__default["default"].memo(MaterialEnumControl$2)), false);

    const MaterialNativeControl = (props) => {
        const [focused, onFocus, onBlur] = useFocus();
        const { id, errors, label, schema, description, enabled, visible, required, path, handleChange, data, config } = props;
        const isValid = errors.length === 0;
        const appliedUiSchemaOptions = merge_1({}, config, props.uischema.options);
        const [inputValue, onChange] = useDebouncedChange(handleChange, '', data, path);
        const fieldType = appliedUiSchemaOptions.format ?? schema.format;
        const showDescription = !isDescriptionHidden(visible, description, focused, appliedUiSchemaOptions.showUnfocusedDescription);
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(TextField$1, { required: showAsRequired(required, appliedUiSchemaOptions.hideRequiredAsterisk), id: id + '-input', label: label, type: fieldType, error: !isValid, disabled: !enabled, fullWidth: !appliedUiSchemaOptions.trim, onFocus: onFocus, onBlur: onBlur, helperText: !isValid ? errors : showDescription ? description : null, InputLabelProps: { shrink: true }, value: inputValue, onChange: onChange })));
    };
    const materialNativeControlTester = rankWith(2, or(isDateControl, isTimeControl));
    var MaterialNativeControl$1 = withJsonFormsControlProps(MaterialNativeControl);

    const MaterialDateControl = (props) => {
        const [focused, onFocus, onBlur] = useFocus();
        const { description, id, errors, label, uischema, visible, enabled, required, path, handleChange, data, config } = props;
        const isValid = errors.length === 0;
        const appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        const showDescription = !isDescriptionHidden(visible, description, focused, appliedUiSchemaOptions.showUnfocusedDescription);
        const format = appliedUiSchemaOptions.dateFormat ?? 'YYYY-MM-DD';
        const saveFormat = appliedUiSchemaOptions.dateSaveFormat ?? 'YYYY-MM-DD';
        const views = appliedUiSchemaOptions.views ?? ['year', 'day'];
        const firstFormHelperText = showDescription
            ? description
            : !isValid
                ? errors
                : null;
        const secondFormHelperText = showDescription && !isValid ? errors : null;
        const onChange = React.useMemo(() => createOnChangeHandler(path, handleChange, saveFormat), [path, handleChange, saveFormat]);
        const value = getData(data, saveFormat);
        const valueInInputFormat = value ? value.format(format) : '';
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(LocalizationProvider, { dateAdapter: AdapterDayjs },
                React__default["default"].createElement(DatePicker, { label: label, value: value, onChange: onChange, inputFormat: format, disableMaskedInput: true, views: views, disabled: !enabled, componentsProps: {
                        actionBar: {
                            actions: (variant) => (variant === 'desktop' ? [] : ['clear', 'cancel', 'accept'])
                        }
                    }, renderInput: params => (React__default["default"].createElement(ResettableTextField, Object.assign({}, params, { rawValue: data, dayjsValueIsValid: value !== null, valueInInputFormat: valueInInputFormat, focused: focused, id: id + '-input', required: required && !appliedUiSchemaOptions.hideRequiredAsterisk, autoFocus: appliedUiSchemaOptions.focus, error: !isValid, fullWidth: !appliedUiSchemaOptions.trim, inputProps: {
                            ...params.inputProps,
                            type: 'text',
                        }, InputLabelProps: data ? { shrink: true } : undefined, onFocus: onFocus, onBlur: onBlur, variant: 'standard' }))) }),
                React__default["default"].createElement(FormHelperText$1, { error: !isValid && !showDescription }, firstFormHelperText),
                React__default["default"].createElement(FormHelperText$1, { error: !isValid }, secondFormHelperText))));
    };
    const materialDateControlTester = rankWith(4, isDateControl);
    var MaterialDateControl$1 = withJsonFormsControlProps(MaterialDateControl);

    const MaterialDateTimeControl = (props) => {
        const [focused, onFocus, onBlur] = useFocus();
        const { id, description, errors, label, uischema, visible, enabled, required, path, handleChange, data, config } = props;
        const appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        const isValid = errors.length === 0;
        const showDescription = !isDescriptionHidden(visible, description, focused, appliedUiSchemaOptions.showUnfocusedDescription);
        const format = appliedUiSchemaOptions.dateTimeFormat ?? 'YYYY-MM-DD HH:mm';
        const saveFormat = appliedUiSchemaOptions.dateTimeSaveFormat ?? undefined;
        const views = appliedUiSchemaOptions.views ?? ['year', 'day', 'hours', 'minutes'];
        const firstFormHelperText = showDescription
            ? description
            : !isValid
                ? errors
                : null;
        const secondFormHelperText = showDescription && !isValid ? errors : null;
        const onChange = React.useMemo(() => createOnChangeHandler(path, handleChange, saveFormat), [path, handleChange, saveFormat]);
        const value = getData(data, saveFormat);
        const valueInInputFormat = value ? value.format(format) : '';
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(LocalizationProvider, { dateAdapter: AdapterDayjs },
                React__default["default"].createElement(DateTimePicker, { label: label, value: value, onChange: onChange, inputFormat: format, disableMaskedInput: true, ampm: !!appliedUiSchemaOptions.ampm, views: views, disabled: !enabled, componentsProps: {
                        actionBar: {
                            actions: (variant) => (variant === 'desktop' ? [] : ['clear', 'cancel', 'accept'])
                        }
                    }, renderInput: params => (React__default["default"].createElement(ResettableTextField, Object.assign({}, params, { rawValue: data, dayjsValueIsValid: value !== null, valueInInputFormat: valueInInputFormat, focused: focused, id: id + '-input', required: required && !appliedUiSchemaOptions.hideRequiredAsterisk, autoFocus: appliedUiSchemaOptions.focus, error: !isValid, fullWidth: !appliedUiSchemaOptions.trim, inputProps: {
                            ...params.inputProps,
                            type: 'text',
                        }, InputLabelProps: data ? { shrink: true } : undefined, onFocus: onFocus, onBlur: onBlur, variant: 'standard' }))) }),
                React__default["default"].createElement(FormHelperText$1, { error: !isValid && !showDescription }, firstFormHelperText),
                React__default["default"].createElement(FormHelperText$1, { error: !isValid }, secondFormHelperText))));
    };
    const materialDateTimeControlTester = rankWith(2, isDateTimeControl);
    var MaterialDateTimeControl$1 = withJsonFormsControlProps(MaterialDateTimeControl);

    const MaterialTimeControl = (props) => {
        const [focused, onFocus, onBlur] = useFocus();
        const { id, description, errors, label, uischema, visible, enabled, required, path, handleChange, data, config } = props;
        const appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        const isValid = errors.length === 0;
        const showDescription = !isDescriptionHidden(visible, description, focused, appliedUiSchemaOptions.showUnfocusedDescription);
        const format = appliedUiSchemaOptions.timeFormat ?? 'HH:mm';
        const saveFormat = appliedUiSchemaOptions.timeSaveFormat ?? 'HH:mm:ss';
        const views = appliedUiSchemaOptions.views ?? ['hours', 'minutes'];
        const firstFormHelperText = showDescription
            ? description
            : !isValid
                ? errors
                : null;
        const secondFormHelperText = showDescription && !isValid ? errors : null;
        const onChange = React.useMemo(() => createOnChangeHandler(path, handleChange, saveFormat), [path, handleChange, saveFormat]);
        const value = getData(data, saveFormat);
        const valueInInputFormat = value ? value.format(format) : '';
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(LocalizationProvider, { dateAdapter: AdapterDayjs },
                React__default["default"].createElement(TimePicker, { label: label, value: value, onChange: onChange, inputFormat: format, disableMaskedInput: true, ampm: !!appliedUiSchemaOptions.ampm, views: views, disabled: !enabled, componentsProps: {
                        actionBar: {
                            actions: (variant) => (variant === 'desktop' ? [] : ['clear', 'cancel', 'accept'])
                        }
                    }, renderInput: params => (React__default["default"].createElement(ResettableTextField, Object.assign({}, params, { rawValue: data, dayjsValueIsValid: value !== null, valueInInputFormat: valueInInputFormat, focused: focused, id: id + '-input', required: required && !appliedUiSchemaOptions.hideRequiredAsterisk, autoFocus: appliedUiSchemaOptions.focus, error: !isValid, fullWidth: !appliedUiSchemaOptions.trim, inputProps: {
                            ...params.inputProps,
                            type: 'text'
                        }, InputLabelProps: data ? { shrink: true } : undefined, onFocus: onFocus, onBlur: onBlur, variant: 'standard' }))) }),
                React__default["default"].createElement(FormHelperText$1, { error: !isValid && !showDescription }, firstFormHelperText),
                React__default["default"].createElement(FormHelperText$1, { error: !isValid }, secondFormHelperText))));
    };
    const materialTimeControlTester = rankWith(4, isTimeControl);
    var MaterialTimeControl$1 = withJsonFormsControlProps(MaterialTimeControl);

    const MaterialSliderControl = (props) => {
        const [focused, onFocus, onBlur] = useFocus();
        const { id, data, description, enabled, errors, label, schema, handleChange, visible, path, required, config } = props;
        const isValid = errors.length === 0;
        const appliedUiSchemaOptions = merge_1({}, config, props.uischema.options);
        const labelStyle = {
            whiteSpace: 'nowrap',
            overflow: 'hidden',
            textOverflow: 'ellipsis',
            width: '100%'
        };
        const rangeContainerStyle = {
            display: 'flex'
        };
        const rangeItemStyle = {
            flexGrow: '1'
        };
        const sliderStyle = {
            marginTop: '7px'
        };
        const showDescription = !isDescriptionHidden(visible, description, focused, appliedUiSchemaOptions.showUnfocusedDescription);
        const onChange = React.useCallback((_ev, value) => handleChange(path, Number(value)), [path, handleChange]);
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(FormControl$1, { fullWidth: !appliedUiSchemaOptions.trim, onFocus: onFocus, onBlur: onBlur, id: id },
                React__default["default"].createElement(FormLabel$1, { htmlFor: id, error: !isValid, component: 'legend', required: showAsRequired(required, appliedUiSchemaOptions.hideRequiredAsterisk) },
                    React__default["default"].createElement(Typography$1, { id: id + '-typo', style: labelStyle, variant: 'caption' }, label)),
                React__default["default"].createElement("div", { style: rangeContainerStyle },
                    React__default["default"].createElement(Typography$1, { style: rangeItemStyle, variant: 'caption', align: 'left' }, schema.minimum),
                    React__default["default"].createElement(Typography$1, { style: rangeItemStyle, variant: 'caption', align: 'right' }, schema.maximum)),
                React__default["default"].createElement(Slider$1, { style: sliderStyle, min: schema.minimum, max: schema.maximum, value: Number(data || schema.default), onChange: onChange, id: id + '-input', disabled: !enabled, step: schema.multipleOf || 1 }),
                React__default["default"].createElement(FormHelperText$1, { error: !isValid }, !isValid ? errors : showDescription ? description : null))));
    };
    const materialSliderControlTester = rankWith(4, isRangeControl);
    var MaterialSliderControl$1 = withJsonFormsControlProps(MaterialSliderControl);

    const MaterialRadioGroup = (props) => {
        const [focused, onFocus, onBlur] = useFocus();
        const { config, id, label, required, description, errors, data, visible, options, handleChange, path, enabled } = props;
        const isValid = errors.length === 0;
        const appliedUiSchemaOptions = merge_1({}, config, props.uischema.options);
        const showDescription = !isDescriptionHidden(visible, description, focused, appliedUiSchemaOptions.showUnfocusedDescription);
        const onChange = (_ev, value) => handleChange(path, value);
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(FormControl$1, { component: 'fieldset', fullWidth: !appliedUiSchemaOptions.trim, onFocus: onFocus, onBlur: onBlur },
                React__default["default"].createElement(FormLabel$1, { htmlFor: id, error: !isValid, component: 'legend', required: showAsRequired(required, appliedUiSchemaOptions.hideRequiredAsterisk) }, label),
                React__default["default"].createElement(RadioGroup$1, { value: props.data ?? '', onChange: onChange, row: true }, options.map(option => (React__default["default"].createElement(FormControlLabel$1, { value: option.value, key: option.label, control: React__default["default"].createElement(Radio$1, { checked: data === option.value }), label: option.label, disabled: !enabled })))),
                React__default["default"].createElement(FormHelperText$1, { error: !isValid }, !isValid ? errors : showDescription ? description : null))));
    };

    const MaterialRadioGroupControl = (props) => {
        return React__default["default"].createElement(MaterialRadioGroup, Object.assign({}, props));
    };
    const materialRadioGroupControlTester = rankWith(20, and(isEnumControl, optionIs('format', 'radio')));
    var MaterialRadioGroupControl$1 = withJsonFormsEnumProps(MaterialRadioGroupControl);

    const MaterialIntegerControl = (props) => (React__default["default"].createElement(MaterialInputControl, Object.assign({}, props, { input: MuiInputInteger })));
    const materialIntegerControlTester = rankWith(2, isIntegerControl);
    var MaterialIntegerControl$1 = withJsonFormsControlProps(MaterialIntegerControl);

    const MaterialNumberControl = (props) => (React__default["default"].createElement(MaterialInputControl, Object.assign({}, props, { input: MuiInputNumber })));
    const materialNumberControlTester = rankWith(2, isNumberControl);
    var MaterialNumberControl$1 = withJsonFormsControlProps(MaterialNumberControl);

    const MaterialTextControl = (props) => (React__default["default"].createElement(MaterialInputControl, Object.assign({}, props, { input: MuiInputText })));
    const materialTextControlTester = rankWith(1, isStringControl);
    var MaterialTextControl$1 = withJsonFormsControlProps(MaterialTextControl);

    const findEnumSchema = (schemas) => schemas.find(s => s.enum !== undefined && (s.type === 'string' || s.type === undefined));
    const findTextSchema = (schemas) => schemas.find(s => s.type === 'string' && s.enum === undefined);
    const MuiAutocompleteInputText = (props) => {
        const { data, config, className, id, enabled, uischema, isValid, path, handleChange, schema } = props;
        const enumSchema = findEnumSchema(schema.anyOf);
        const stringSchema = findTextSchema(schema.anyOf);
        const maxLength = stringSchema.maxLength;
        const appliedUiSchemaOptions = React.useMemo(() => merge_1({}, config, uischema.options), [config, uischema.options]);
        const inputProps = React.useMemo(() => {
            let propMemo = {};
            if (appliedUiSchemaOptions.restrict) {
                propMemo = { maxLength: maxLength };
            }
            if (appliedUiSchemaOptions.trim && maxLength !== undefined) {
                propMemo.size = maxLength;
            }
            propMemo.list = props.id + 'datalist';
            return propMemo;
        }, [appliedUiSchemaOptions, props.id]);
        const [inputText, onChange] = useDebouncedChange(handleChange, '', data, path);
        const dataList = (React__default["default"].createElement("datalist", { id: props.id + 'datalist' }, enumSchema.enum.map(optionValue => (React__default["default"].createElement("option", { value: optionValue, key: optionValue })))));
        return (React__default["default"].createElement(Input$1, { type: 'text', value: inputText, onChange: onChange, className: className, id: id, disabled: !enabled, autoFocus: appliedUiSchemaOptions.focus, fullWidth: !appliedUiSchemaOptions.trim || maxLength === undefined, inputProps: inputProps, error: !isValid, endAdornment: dataList }));
    };
    class MaterialAnyOfStringOrEnumControl extends Control {
        render() {
            return (React__default["default"].createElement(MaterialInputControl, Object.assign({}, this.props, { input: MuiAutocompleteInputText })));
        }
    }
    const hasEnumAndText = (schemas) => {
        const enumSchema = findEnumSchema(schemas);
        const stringSchema = findTextSchema(schemas);
        const remainingSchemas = schemas.filter(s => s !== enumSchema || s !== stringSchema);
        const wrongType = remainingSchemas.find(s => s.type && s.type !== 'string');
        return enumSchema && stringSchema && !wrongType;
    };
    const simpleAnyOf = and(uiTypeIs('Control'), schemaMatches(schema => schema.hasOwnProperty('anyOf') && hasEnumAndText(schema.anyOf)));
    const materialAnyOfStringOrEnumControlTester = rankWith(5, simpleAnyOf);
    var MaterialAnyOfStringOrEnumControl$1 = withJsonFormsControlProps(MaterialAnyOfStringOrEnumControl);

    const MaterialOneOfEnumControl = (props) => {
        const { config, uischema, errors } = props;
        const appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        const isValid = errors.length === 0;
        return (appliedUiSchemaOptions.autocomplete === false ?
            React__default["default"].createElement(MaterialInputControl, Object.assign({}, props, { input: MuiSelect })) :
            React__default["default"].createElement(MuiAutocomplete$1, Object.assign({}, props, { isValid: isValid })));
    };
    const materialOneOfEnumControlTester = rankWith(5, isOneOfEnumControl);
    var MaterialOneOfEnumControl$1 = withJsonFormsOneOfEnumProps(withTranslateProps(React__default["default"].memo(MaterialOneOfEnumControl)), false);

    const MaterialOneOfRadioGroupControl = (props) => {
        return React__default["default"].createElement(MaterialRadioGroup, Object.assign({}, props));
    };
    const materialOneOfRadioGroupControlTester = rankWith(20, and(isOneOfEnumControl, optionIs('format', 'radio')));
    var MaterialOneOfRadioGroupControl$1 = withJsonFormsOneOfEnumProps(MaterialOneOfRadioGroupControl);

    const groupTester$1 = rankWith(1, uiTypeIs('Group'));
    const style$1 = { marginBottom: '10px' };
    const GroupComponent$1 = React__default["default"].memo(({ visible, enabled, uischema, label, ...props }) => {
        const groupLayout = uischema;
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(Card$1, { style: style$1 },
                !isEmpty_1(label) && (React__default["default"].createElement(CardHeader$1, { title: label })),
                React__default["default"].createElement(CardContent$1, null,
                    React__default["default"].createElement(MaterialLayoutRenderer, Object.assign({}, props, { visible: visible, enabled: enabled, elements: groupLayout.elements }))))));
    });
    const MaterializedGroupLayoutRenderer$2 = ({ uischema, schema, path, visible, enabled, renderers, cells, direction, label }) => {
        const groupLayout = uischema;
        return (React__default["default"].createElement(GroupComponent$1, { elements: groupLayout.elements, schema: schema, path: path, direction: direction, visible: visible, enabled: enabled, uischema: uischema, renderers: renderers, cells: cells, label: label }));
    };
    var MaterialGroupLayout = withJsonFormsLayoutProps(MaterializedGroupLayoutRenderer$2);
    const materialGroupTester$1 = withIncreasedRank(1, groupTester$1);

    const materialHorizontalLayoutTester = rankWith(2, uiTypeIs('HorizontalLayout'));
    const MaterialHorizontalLayoutRenderer = ({ uischema, renderers, cells, schema, path, enabled, visible }) => {
        const layout = uischema;
        const childProps = {
            elements: layout.elements,
            schema,
            path,
            enabled,
            direction: 'row',
            visible
        };
        return React__default["default"].createElement(MaterialLayoutRenderer, Object.assign({}, childProps, { renderers: renderers, cells: cells }));
    };
    var MaterialHorizontalLayout = withJsonFormsLayoutProps(MaterialHorizontalLayoutRenderer);

    const materialVerticalLayoutTester = rankWith(1, uiTypeIs('VerticalLayout'));
    const MaterialVerticalLayoutRenderer = ({ uischema, schema, path, enabled, visible, renderers, cells }) => {
        const verticalLayout = uischema;
        const childProps = {
            elements: verticalLayout.elements,
            schema,
            path,
            enabled,
            direction: 'column',
            visible
        };
        return React__default["default"].createElement(MaterialLayoutRenderer, Object.assign({}, childProps, { renderers: renderers, cells: cells }));
    };
    var MaterialVerticalLayout = withJsonFormsLayoutProps(MaterialVerticalLayoutRenderer);

    const isSingleLevelCategorization = and(uiTypeIs('Categorization'), (uischema) => {
        const categorization = uischema;
        return (categorization.elements &&
            categorization.elements.reduce((acc, e) => acc && e.type === 'Category', true));
    });
    const materialCategorizationTester = rankWith(1, isSingleLevelCategorization);
    const MaterialCategorizationLayoutRenderer = (props) => {
        const { data, path, renderers, cells, schema, uischema, visible, enabled, selected, onChange, ajv, t } = props;
        const categorization = uischema;
        const [activeCategory, setActiveCategory] = React.useState(selected ?? 0);
        const categories = React.useMemo(() => categorization.elements.filter((category) => isVisible(category, data, undefined, ajv)), [categorization, data, ajv]);
        const childProps = {
            elements: categories[activeCategory].elements,
            schema,
            path,
            direction: 'column',
            enabled,
            visible,
            renderers,
            cells
        };
        const onTabChange = (_event, value) => {
            if (onChange) {
                onChange(value, activeCategory);
            }
            setActiveCategory(value);
        };
        const tabLabels = React.useMemo(() => {
            return categories.map((e) => deriveLabelForUISchemaElement(e, t));
        }, [categories, t]);
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(AppBar$1, { position: 'static' },
                React__default["default"].createElement(Tabs$1, { value: activeCategory, onChange: onTabChange, textColor: 'inherit', indicatorColor: 'secondary', variant: 'scrollable' }, categories.map((_, idx) => (React__default["default"].createElement(Tab$1, { key: idx, label: tabLabels[idx] }))))),
            React__default["default"].createElement("div", { style: { marginTop: '0.5em' } },
                React__default["default"].createElement(MaterialLayoutRenderer, Object.assign({}, childProps)))));
    };
    var MaterialCategorizationLayout = withAjvProps(withTranslateProps(withJsonFormsLayoutProps(MaterialCategorizationLayoutRenderer)));

    const iconStyle$1 = { float: 'right' };
    const ExpandPanelRendererComponent$1 = (props) => {
        const [labelHtmlId] = React.useState(createId('expand-panel'));
        React.useEffect(() => {
            return () => {
                removeId(labelHtmlId);
            };
        }, [labelHtmlId]);
        const { enabled, childLabel, childPath, index, expanded, moveDown, moveUp, enableMoveDown, enableMoveUp, handleExpansion, removeItems, path, rootSchema, schema, uischema, uischemas, renderers, cells, config } = props;
        const foundUISchema = React.useMemo(() => findUISchema(uischemas, schema, uischema.scope, path, undefined, uischema, rootSchema), [uischemas, schema, uischema.scope, path, uischema, rootSchema]);
        const appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        const showSortButtons = appliedUiSchemaOptions.showSortButtons || appliedUiSchemaOptions.showArrayLayoutSortButtons;
        return (React__default["default"].createElement(Accordion$1, { "aria-labelledby": labelHtmlId, expanded: expanded, onChange: handleExpansion(childPath) },
            React__default["default"].createElement(AccordionSummary$1, { expandIcon: React__default["default"].createElement(default_1$9, null) },
                React__default["default"].createElement(Grid$1, { container: true, alignItems: 'center' },
                    React__default["default"].createElement(Grid$1, { item: true, xs: 7, md: 9 },
                        React__default["default"].createElement(Grid$1, { container: true, alignItems: 'center' },
                            React__default["default"].createElement(Grid$1, { item: true, xs: 2, md: 1 },
                                React__default["default"].createElement(Avatar$1, { "aria-label": 'Index' }, index + 1)),
                            React__default["default"].createElement(Grid$1, { item: true, xs: 10, md: 11 },
                                React__default["default"].createElement("span", { id: labelHtmlId }, childLabel)))),
                    React__default["default"].createElement(Grid$1, { item: true, xs: 5, md: 3 },
                        React__default["default"].createElement(Grid$1, { container: true, justifyContent: 'flex-end' },
                            React__default["default"].createElement(Grid$1, { item: true },
                                React__default["default"].createElement(Grid$1, { container: true, direction: 'row', justifyContent: 'center', alignItems: 'center' },
                                    showSortButtons ? (React__default["default"].createElement(React.Fragment, null,
                                        React__default["default"].createElement(Grid$1, { item: true },
                                            React__default["default"].createElement(IconButton$1, { onClick: moveUp(path, index), style: iconStyle$1, disabled: !enableMoveUp, "aria-label": `Move up`, size: 'large' },
                                                React__default["default"].createElement(default_1$d, null))),
                                        React__default["default"].createElement(Grid$1, { item: true },
                                            React__default["default"].createElement(IconButton$1, { onClick: moveDown(path, index), style: iconStyle$1, disabled: !enableMoveDown, "aria-label": `Move down`, size: 'large' },
                                                React__default["default"].createElement(default_1$e, null))))) : (''),
                                    React__default["default"].createElement(Grid$1, { item: true },
                                        React__default["default"].createElement(IconButton$1, { onClick: removeItems(path, [index]), style: iconStyle$1, "aria-label": `Delete`, size: 'large' },
                                            React__default["default"].createElement(default_1$f, null))))))))),
            React__default["default"].createElement(AccordionDetails$1, null,
                React__default["default"].createElement(JsonFormsDispatch, { enabled: enabled, schema: schema, uischema: foundUISchema, path: childPath, key: childPath, renderers: renderers, cells: cells }))));
    };
    const ExpandPanelRenderer$2 = React__default["default"].memo(ExpandPanelRendererComponent$1);
    const ctxDispatchToExpandPanelProps$1 = dispatch => ({
        removeItems: React.useCallback((path, toDelete) => (event) => {
            event.stopPropagation();
            dispatch(update(path, array => {
                toDelete
                    .sort()
                    .reverse()
                    .forEach(s => array.splice(s, 1));
                return array;
            }));
        }, [dispatch]),
        moveUp: React.useCallback((path, toMove) => (event) => {
            event.stopPropagation();
            dispatch(update(path, array => {
                moveUp(array, toMove);
                return array;
            }));
        }, [dispatch]),
        moveDown: React.useCallback((path, toMove) => (event) => {
            event.stopPropagation();
            dispatch(update(path, array => {
                moveDown(array, toMove);
                return array;
            }));
        }, [dispatch])
    });
    const withContextToExpandPanelProps$1 = (Component) => ({ ctx, props }) => {
        const dispatchProps = ctxDispatchToExpandPanelProps$1(ctx.dispatch);
        const { childLabelProp, schema, path, index, uischemas } = props;
        const childPath = compose$1(path, `${index}`);
        const childData = Resolve.data(ctx.core.data, childPath);
        const childLabel = childLabelProp
            ? get_1(childData, childLabelProp, '')
            : get_1(childData, getFirstPrimitiveProp(schema), '');
        return (React__default["default"].createElement(Component, Object.assign({}, props, dispatchProps, { childLabel: childLabel, childPath: childPath, uischemas: uischemas })));
    };
    const withJsonFormsExpandPanelProps$1 = (Component) => withJsonFormsContext(withContextToExpandPanelProps$1(Component));
    var ExpandPanelRenderer$1$1 = withJsonFormsExpandPanelProps$1(ExpandPanelRenderer$2);

    const MaterialArrayLayoutComponent$1 = (props) => {
        const [expanded, setExpanded] = React.useState(false);
        const innerCreateDefaultValue = React.useCallback(() => createDefaultValue(props.schema), [props.schema]);
        const handleChange = React.useCallback((panel) => (_event, expandedPanel) => {
            setExpanded(expandedPanel ? panel : false);
        }, []);
        const isExpanded = (index) => expanded === compose$1(props.path, `${index}`);
        const { enabled, data, path, schema, uischema, errors, addItem, renderers, cells, label, required, rootSchema, config, uischemas } = props;
        const appliedUiSchemaOptions = merge_1({}, config, props.uischema.options);
        return (React__default["default"].createElement("div", null,
            React__default["default"].createElement(ArrayLayoutToolbar$1, { label: computeLabel(label, required, appliedUiSchemaOptions.hideRequiredAsterisk), errors: errors, path: path, addItem: addItem, createDefault: innerCreateDefaultValue }),
            React__default["default"].createElement("div", null, data > 0 ? (map_1(range_1(data), index => {
                return (React__default["default"].createElement(ExpandPanelRenderer$1$1, { enabled: enabled, index: index, expanded: isExpanded(index), schema: schema, path: path, handleExpansion: handleChange, uischema: uischema, renderers: renderers, cells: cells, key: index, rootSchema: rootSchema, enableMoveUp: index != 0, enableMoveDown: index < data - 1, config: config, childLabelProp: appliedUiSchemaOptions.elementLabelProp, uischemas: uischemas }));
            })) : (React__default["default"].createElement("p", null, "No data")))));
    };
    const MaterialArrayLayout$1 = React__default["default"].memo(MaterialArrayLayoutComponent$1);

    const MaterialArrayLayoutRenderer$2 = ({ visible, addItem, ...props }) => {
        const addItemCb = React.useCallback((p, value) => addItem(p, value), [
            addItem
        ]);
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(MaterialArrayLayout$1, Object.assign({ visible: visible, addItem: addItemCb }, props))));
    };
    const materialArrayLayoutTester$1 = rankWith(4, isObjectArrayWithNesting);
    var MaterialArrayLayout$2 = withJsonFormsArrayLayoutProps(MaterialArrayLayoutRenderer$2);

    const MaterialBooleanCell = (props) => {
        return React__default["default"].createElement(MuiCheckbox, Object.assign({}, props));
    };
    const materialBooleanCellTester = rankWith(2, isBooleanControl);
    var MaterialBooleanCell$1 = withJsonFormsCellProps(MaterialBooleanCell);

    const MaterialBooleanToggleCell = (props) => {
        return React__default["default"].createElement(MuiToggle, Object.assign({}, props));
    };
    const materialBooleanToggleCellTester = rankWith(3, and(isBooleanControl, optionIs('toggle', true)));
    var MaterialBooleanToggleCell$1 = withJsonFormsCellProps(MaterialBooleanToggleCell);

    const MaterialDateCell = (props) => {
        const { data, className, id, enabled, uischema, path, handleChange, config } = props;
        const appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        return (React__default["default"].createElement(Input$1, { type: 'date', value: data || '', onChange: ev => handleChange(path, ev.target.value), className: className, id: id, disabled: !enabled, autoFocus: appliedUiSchemaOptions.focus, fullWidth: true }));
    };
    const materialDateCellTester = rankWith(2, isDateControl);
    var MaterialDateCell$1 = withJsonFormsCellProps(MaterialDateCell);

    const MaterialEnumCell = (props) => (React__default["default"].createElement(MuiSelect, Object.assign({}, props)));
    const materialEnumCellTester = rankWith(2, isEnumControl);
    var MaterialEnumCell$1 = withJsonFormsEnumCellProps(withTranslateProps(React__default["default"].memo(MaterialEnumCell)), false);

    const MaterialIntegerCell = (props) => (React__default["default"].createElement(MuiInputInteger, Object.assign({}, props)));
    const materialIntegerCellTester = rankWith(2, isIntegerControl);
    var MaterialIntegerCell$1 = withJsonFormsCellProps(MaterialIntegerCell);

    const MaterialNumberCell = (props) => (React__default["default"].createElement(MuiInputNumber, Object.assign({}, props)));
    const materialNumberCellTester = rankWith(2, isNumberControl);
    var MaterialNumberCell$1 = withJsonFormsCellProps(MaterialNumberCell);

    const MaterialNumberFormatCell = (props) => React__default["default"].createElement(MuiInputNumberFormat, Object.assign({}, props));
    const materialNumberFormatCellTester = rankWith(4, isNumberFormatControl);
    var MaterialNumberFormatCell$1 = withJsonFormsCellProps(MaterialNumberFormatCell);

    const MaterialOneOfEnumCell = (props) => (React__default["default"].createElement(MuiSelect, Object.assign({}, props)));
    const materialOneOfEnumCellTester = rankWith(2, isOneOfEnumControl);
    var MaterialOneOfEnumCell$1 = withJsonFormsOneOfEnumCellProps(withTranslateProps(React__default["default"].memo(MaterialOneOfEnumCell)), false);

    const MaterialTextCell = (props) => (React__default["default"].createElement(MuiInputText, Object.assign({}, props)));
    const materialTextCellTester = rankWith(1, isStringControl);
    var MaterialTextCell$1 = withJsonFormsCellProps(MaterialTextCell);

    const MaterialTimeCell = (props) => (React__default["default"].createElement(MuiInputTime, Object.assign({}, props)));
    const materialTimeCellTester = rankWith(2, isTimeControl);
    var MaterialTimeCell$1 = withJsonFormsCellProps(MaterialTimeCell);

    const materialCategorizationStepperTester = rankWith(2, and(uiTypeIs('Categorization'), categorizationHasCategory, optionIs('variant', 'stepper')));
    const MaterialCategorizationStepperLayoutRenderer = (props) => {
        const [activeCategory, setActiveCategory] = React.useState(0);
        const handleStep = (step) => {
            setActiveCategory(step);
        };
        const { data, path, renderers, schema, uischema, visible, cells, config, ajv, t } = props;
        const categorization = uischema;
        const appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        const buttonWrapperStyle = {
            textAlign: 'right',
            width: '100%',
            margin: '1em auto'
        };
        const buttonNextStyle = {
            float: 'right'
        };
        const buttonStyle = {
            marginRight: '1em'
        };
        const categories = React.useMemo(() => categorization.elements.filter((category) => isVisible(category, data, undefined, ajv)), [categorization, data, ajv]);
        const childProps = {
            elements: categories[activeCategory].elements,
            schema,
            path,
            direction: 'column',
            visible,
            renderers,
            cells
        };
        const tabLabels = React.useMemo(() => {
            return categories.map((e) => deriveLabelForUISchemaElement(e, t));
        }, [categories, t]);
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(Stepper$1, { activeStep: activeCategory, nonLinear: true }, categories.map((_, idx) => (React__default["default"].createElement(Step$1, { key: tabLabels[idx] },
                React__default["default"].createElement(StepButton$1, { onClick: () => handleStep(idx) }, tabLabels[idx]))))),
            React__default["default"].createElement("div", null,
                React__default["default"].createElement(MaterialLayoutRenderer, Object.assign({}, childProps))),
            !!appliedUiSchemaOptions.showNavButtons ? (React__default["default"].createElement("div", { style: buttonWrapperStyle },
                React__default["default"].createElement(Button$1, { style: buttonNextStyle, variant: "contained", color: "primary", disabled: activeCategory >= categories.length - 1, onClick: () => handleStep(activeCategory + 1) }, "Next"),
                React__default["default"].createElement(Button$1, { style: buttonStyle, color: "secondary", variant: "contained", disabled: activeCategory <= 0, onClick: () => handleStep(activeCategory - 1) }, "Previous"))) : (React__default["default"].createElement(React__default["default"].Fragment, null))));
    };
    var MaterialCategorizationStepperLayout = withAjvProps(withTranslateProps(withJsonFormsLayoutProps(MaterialCategorizationStepperLayoutRenderer)));

    const materialRenderers = [
        {
            tester: materialArrayControlTester,
            renderer: MaterialArrayControlRenderer$1
        },
        { tester: materialBooleanControlTester, renderer: MaterialBooleanControl$1 },
        { tester: materialBooleanToggleControlTester, renderer: MaterialBooleanToggleControl$1 },
        { tester: materialNativeControlTester, renderer: MaterialNativeControl$1 },
        { tester: materialEnumControlTester$1, renderer: MaterialEnumControl$1$1 },
        { tester: materialIntegerControlTester, renderer: MaterialIntegerControl$1 },
        { tester: materialNumberControlTester, renderer: MaterialNumberControl$1 },
        { tester: materialTextControlTester, renderer: MaterialTextControl$1 },
        { tester: materialDateTimeControlTester, renderer: MaterialDateTimeControl$1 },
        { tester: materialDateControlTester, renderer: MaterialDateControl$1 },
        { tester: materialTimeControlTester, renderer: MaterialTimeControl$1 },
        { tester: materialSliderControlTester, renderer: MaterialSliderControl$1 },
        { tester: materialObjectControlTester, renderer: MaterialObjectRenderer$1 },
        { tester: materialAllOfControlTester, renderer: MaterialAllOfRenderer$1 },
        { tester: materialAnyOfControlTester, renderer: MaterialAnyOfRenderer$1 },
        { tester: materialOneOfControlTester$1, renderer: MaterialOneOfRenderer$1$1 },
        {
            tester: materialRadioGroupControlTester,
            renderer: MaterialRadioGroupControl$1
        },
        {
            tester: materialOneOfRadioGroupControlTester,
            renderer: MaterialOneOfRadioGroupControl$1
        },
        { tester: materialOneOfEnumControlTester, renderer: MaterialOneOfEnumControl$1 },
        { tester: materialGroupTester$1, renderer: MaterialGroupLayout },
        {
            tester: materialHorizontalLayoutTester,
            renderer: MaterialHorizontalLayout
        },
        { tester: materialVerticalLayoutTester, renderer: MaterialVerticalLayout },
        {
            tester: materialCategorizationTester,
            renderer: MaterialCategorizationLayout
        },
        {
            tester: materialCategorizationStepperTester,
            renderer: MaterialCategorizationStepperLayout
        },
        { tester: materialArrayLayoutTester$1, renderer: MaterialArrayLayout$2 },
        { tester: materialLabelRendererTester, renderer: MaterialLabelRenderer$1 },
        {
            tester: materialListWithDetailTester,
            renderer: MaterialListWithDetailRenderer$1
        },
        {
            tester: materialAnyOfStringOrEnumControlTester,
            renderer: MaterialAnyOfStringOrEnumControl$1
        },
        {
            tester: materialEnumArrayRendererTester,
            renderer: MaterialEnumArrayRenderer$1
        }
    ];
    const materialCells = [
        { tester: materialBooleanCellTester, cell: MaterialBooleanCell$1 },
        { tester: materialBooleanToggleCellTester, cell: MaterialBooleanToggleCell$1 },
        { tester: materialDateCellTester, cell: MaterialDateCell$1 },
        { tester: materialEnumCellTester, cell: MaterialEnumCell$1 },
        { tester: materialIntegerCellTester, cell: MaterialIntegerCell$1 },
        { tester: materialNumberCellTester, cell: MaterialNumberCell$1 },
        { tester: materialNumberFormatCellTester, cell: MaterialNumberFormatCell$1 },
        { tester: materialOneOfEnumCellTester, cell: MaterialOneOfEnumCell$1 },
        { tester: materialTextCellTester, cell: MaterialTextCell$1 },
        { tester: materialTimeCellTester, cell: MaterialTimeCell$1 }
    ];

    const BYTE_UNITS = [
    	'B',
    	'kB',
    	'MB',
    	'GB',
    	'TB',
    	'PB',
    	'EB',
    	'ZB',
    	'YB',
    ];

    const BIBYTE_UNITS = [
    	'B',
    	'kiB',
    	'MiB',
    	'GiB',
    	'TiB',
    	'PiB',
    	'EiB',
    	'ZiB',
    	'YiB',
    ];

    const BIT_UNITS = [
    	'b',
    	'kbit',
    	'Mbit',
    	'Gbit',
    	'Tbit',
    	'Pbit',
    	'Ebit',
    	'Zbit',
    	'Ybit',
    ];

    const BIBIT_UNITS = [
    	'b',
    	'kibit',
    	'Mibit',
    	'Gibit',
    	'Tibit',
    	'Pibit',
    	'Eibit',
    	'Zibit',
    	'Yibit',
    ];

    /*
    Formats the given number using `Number#toLocaleString`.
    - If locale is a string, the value is expected to be a locale-key (for example: `de`).
    - If locale is true, the system default locale is used for translation.
    - If no value for locale is specified, the number is returned unmodified.
    */
    const toLocaleString = (number, locale, options) => {
    	let result = number;
    	if (typeof locale === 'string' || Array.isArray(locale)) {
    		result = number.toLocaleString(locale, options);
    	} else if (locale === true || options !== undefined) {
    		result = number.toLocaleString(undefined, options);
    	}

    	return result;
    };

    function prettyBytes(number, options) {
    	if (!Number.isFinite(number)) {
    		throw new TypeError(`Expected a finite number, got ${typeof number}: ${number}`);
    	}

    	options = {
    		bits: false,
    		binary: false,
    		space: true,
    		...options,
    	};

    	const UNITS = options.bits
    		? (options.binary ? BIBIT_UNITS : BIT_UNITS)
    		: (options.binary ? BIBYTE_UNITS : BYTE_UNITS);

    	const separator = options.space ? ' ' : '';

    	if (options.signed && number === 0) {
    		return ` 0${separator}${UNITS[0]}`;
    	}

    	const isNegative = number < 0;
    	const prefix = isNegative ? '-' : (options.signed ? '+' : '');

    	if (isNegative) {
    		number = -number;
    	}

    	let localeOptions;

    	if (options.minimumFractionDigits !== undefined) {
    		localeOptions = {minimumFractionDigits: options.minimumFractionDigits};
    	}

    	if (options.maximumFractionDigits !== undefined) {
    		localeOptions = {maximumFractionDigits: options.maximumFractionDigits, ...localeOptions};
    	}

    	if (number < 1) {
    		const numberString = toLocaleString(number, options.locale, localeOptions);
    		return prefix + numberString + separator + UNITS[0];
    	}

    	const exponent = Math.min(Math.floor(options.binary ? Math.log(number) / Math.log(1024) : Math.log10(number) / 3), UNITS.length - 1);
    	number /= (options.binary ? 1024 : 1000) ** exponent;

    	if (!localeOptions) {
    		number = number.toPrecision(3);
    	}

    	const numberString = toLocaleString(Number(number), options.locale, localeOptions);

    	const unit = UNITS[exponent];

    	return prefix + numberString + separator + unit;
    }

    var MuiS3FileSelect = React__default["default"].memo(function (props) {
        var data = props.data, className = props.className, id = props.id, enabled = props.enabled, schema = props.schema, uischema = props.uischema, path = props.path, handleChange = props.handleChange, options = props.options, config = props.config, t = props.t;
        var appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        var noneOptionLabel = React.useMemo(function () { return t('enum.none', i18nDefaults['enum.none'], { schema: schema, uischema: uischema, path: path }); }, [t, schema, uischema, path]);
        return (React__default["default"].createElement(Select$1, { className: className, id: id, disabled: !enabled, autoFocus: appliedUiSchemaOptions.focus, value: data !== undefined ? data : '', onChange: function (ev) { return handleChange(path, ev.target.value || undefined); }, fullWidth: true, variant: 'standard', renderValue: function (value) {
                var _a, _b;
                return React__default["default"].createElement(Box$1, { sx: { display: 'flex', gap: 1, alignItems: 'center' } },
                    React__default["default"].createElement(Avatar$1, { variant: "rounded", alt: "S3", sx: { bgcolor: '#000' }, src: (_a = options.find(function (o) { return o.value.key == value; })) === null || _a === void 0 ? void 0 : _a.value.file }), (_b = options.find(function (o) { return o.value.key == value; })) === null || _b === void 0 ? void 0 :
                    _b.label);
            } }, [React__default["default"].createElement(MenuItem$1, { value: '', key: 'jsonforms.enum.none' },
                React__default["default"].createElement("em", null, noneOptionLabel))].concat(options.map(function (optionValue) { return (React__default["default"].createElement(MenuItem$1, { sx: { gap: '15px' }, value: optionValue.value.key, key: optionValue.value.key },
            React__default["default"].createElement(Avatar$1, { variant: "rounded", alt: "S3", sx: { bgcolor: '#000' }, src: optionValue.value.file }),
            " ",
            optionValue.label)); }))));
    });

    var parentSchemaMatches = function (predicate) { return function (uischema, schema, context) {
        if (isEmpty_1(uischema) || !isControl(uischema)) {
            return false;
        }
        if (isEmpty_1(schema)) {
            return false;
        }
        var schemaPath = uischema.scope;
        if (isEmpty_1(schemaPath)) {
            return false;
        }
        var currentDataSchema = schema;
        if (hasType(schema, 'object')) {
            currentDataSchema = resolveSchema(schema, schemaPath, context === null || context === void 0 ? void 0 : context.rootSchema);
        }
        if (currentDataSchema === undefined) {
            return false;
        }
        return predicate(schema, currentDataSchema);
    }; };

    // Copyright Joyent, Inc. and other Node contributors.

    // Split a filename into [root, dir, basename, ext], unix version
    // 'root' is just a slash, or nothing.
    var splitPathRe =
        /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
    var splitPath = function(filename) {
      return splitPathRe.exec(filename).slice(1);
    };

    function basename(path, ext) {
      var f = splitPath(path)[2];
      // TODO: make this comparison case-insensitive on windows?
      if (ext && f.substr(-1 * ext.length) === ext) {
        f = f.substr(0, f.length - ext.length);
      }
      return f;
    }

    var SelectS3FileControl = function (props) {
        var _a;
        var props_new = __assign({ options: (_a = props.config.s3Files) === null || _a === void 0 ? void 0 : _a.Contents.map(function (file) { return ({
                label: "".concat(basename(file.Key), " (").concat(prettyBytes(file.Size), ")"),
                value: {
                    key: file.Key,
                    file: "https://".concat(props.config.s3Files.Name, ".s3.eu-central-1.amazonaws.com/").concat(file.Key)
                }
            }); }) }, props);
        return React__default["default"].createElement(MaterialInputControl, __assign({}, props_new, { input: MuiS3FileSelect }));
    };
    var SelectS3FileControlTester = rankWith(20, parentSchemaMatches(function (schema, currentDataSchema) {
        return (schema.title == "CustomerSpecificIcon" && currentDataSchema.title == "Url")
            || (schema.title == "AceReportIntro" && currentDataSchema.title == "Additionallogourl");
    }));
    var SelectS3FileControl$1 = withJsonFormsControlProps(withTranslateProps(SelectS3FileControl));

    var DynamicForm = {};

    var _interopRequireDefault$8 = interopRequireDefault.exports;
    Object.defineProperty(DynamicForm, "__esModule", {
      value: true
    });
    var default_1$8 = DynamicForm.default = void 0;
    var _createSvgIcon$8 = _interopRequireDefault$8(createSvgIcon);
    var _jsxRuntime$8 = jsxRuntime.exports;
    var _default$8 = (0, _createSvgIcon$8.default)( /*#__PURE__*/(0, _jsxRuntime$8.jsx)("path", {
      d: "M17 20v-9h-2V4h7l-2 5h2l-5 11zm-2-7v7H4c-1.1 0-2-.9-2-2v-3c0-1.1.9-2 2-2h11zm-8.75 2.75h-1.5v1.5h1.5v-1.5zM13 4v7H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2h9zM6.25 6.75h-1.5v1.5h1.5v-1.5z"
    }), 'DynamicForm');
    default_1$8 = DynamicForm.default = _default$8;

    var Assessment = {};

    var _interopRequireDefault$7 = interopRequireDefault.exports;
    Object.defineProperty(Assessment, "__esModule", {
      value: true
    });
    var default_1$7 = Assessment.default = void 0;
    var _createSvgIcon$7 = _interopRequireDefault$7(createSvgIcon);
    var _jsxRuntime$7 = jsxRuntime.exports;
    var _default$7 = (0, _createSvgIcon$7.default)( /*#__PURE__*/(0, _jsxRuntime$7.jsx)("path", {
      d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"
    }), 'Assessment');
    default_1$7 = Assessment.default = _default$7;

    var Category = {};

    var _interopRequireDefault$6 = interopRequireDefault.exports;
    Object.defineProperty(Category, "__esModule", {
      value: true
    });
    var default_1$6 = Category.default = void 0;
    var _createSvgIcon$6 = _interopRequireDefault$6(createSvgIcon);
    var _jsxRuntime$6 = jsxRuntime.exports;
    var _default$6 = (0, _createSvgIcon$6.default)([/*#__PURE__*/(0, _jsxRuntime$6.jsx)("path", {
      d: "m12 2-5.5 9h11z"
    }, "0"), /*#__PURE__*/(0, _jsxRuntime$6.jsx)("circle", {
      cx: "17.5",
      cy: "17.5",
      r: "4.5"
    }, "1"), /*#__PURE__*/(0, _jsxRuntime$6.jsx)("path", {
      d: "M3 13.5h8v8H3z"
    }, "2")], 'Category');
    default_1$6 = Category.default = _default$6;

    var Score = {};

    var _interopRequireDefault$5 = interopRequireDefault.exports;
    Object.defineProperty(Score, "__esModule", {
      value: true
    });
    var default_1$5 = Score.default = void 0;
    var _createSvgIcon$5 = _interopRequireDefault$5(createSvgIcon);
    var _jsxRuntime$5 = jsxRuntime.exports;
    var _default$5 = (0, _createSvgIcon$5.default)( /*#__PURE__*/(0, _jsxRuntime$5.jsx)("path", {
      d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 2h1.5v3l2-3h1.7l-2 3 2 3h-1.7l-2-3v3H12V5zM7 7.25h2.5V6.5H7V5h4v3.75H8.5v.75H11V11H7V7.25zM19 13l-6 6-4-4-4 4v-2.5l4-4 4 4 6-6V13z"
    }), 'Score');
    default_1$5 = Score.default = _default$5;

    var Insights = {};

    var _interopRequireDefault$4 = interopRequireDefault.exports;
    Object.defineProperty(Insights, "__esModule", {
      value: true
    });
    var default_1$4 = Insights.default = void 0;
    var _createSvgIcon$4 = _interopRequireDefault$4(createSvgIcon);
    var _jsxRuntime$4 = jsxRuntime.exports;
    var _default$4 = (0, _createSvgIcon$4.default)([/*#__PURE__*/(0, _jsxRuntime$4.jsx)("path", {
      d: "M21 8c-1.45 0-2.26 1.44-1.93 2.51l-3.55 3.56c-.3-.09-.74-.09-1.04 0l-2.55-2.55C12.27 10.45 11.46 9 10 9c-1.45 0-2.27 1.44-1.93 2.52l-4.56 4.55C2.44 15.74 1 16.55 1 18c0 1.1.9 2 2 2 1.45 0 2.26-1.44 1.93-2.51l4.55-4.56c.3.09.74.09 1.04 0l2.55 2.55C12.73 16.55 13.54 18 15 18c1.45 0 2.27-1.44 1.93-2.52l3.56-3.55c1.07.33 2.51-.48 2.51-1.93 0-1.1-.9-2-2-2z"
    }, "0"), /*#__PURE__*/(0, _jsxRuntime$4.jsx)("path", {
      d: "m15 9 .94-2.07L18 6l-2.06-.93L15 3l-.92 2.07L12 6l2.08.93zM3.5 11 4 9l2-.5L4 8l-.5-2L3 8l-2 .5L3 9z"
    }, "1")], 'Insights');
    default_1$4 = Insights.default = _default$4;

    var ViewCarousel = {};

    var _interopRequireDefault$3 = interopRequireDefault.exports;
    Object.defineProperty(ViewCarousel, "__esModule", {
      value: true
    });
    var default_1$3 = ViewCarousel.default = void 0;
    var _createSvgIcon$3 = _interopRequireDefault$3(createSvgIcon);
    var _jsxRuntime$3 = jsxRuntime.exports;
    var _default$3 = (0, _createSvgIcon$3.default)( /*#__PURE__*/(0, _jsxRuntime$3.jsx)("path", {
      d: "M2 7h4v10H2V7zm5 12h10V5H7v14zM18 7h4v10h-4V7z"
    }), 'ViewCarousel');
    default_1$3 = ViewCarousel.default = _default$3;

    var Settings = {};

    var _interopRequireDefault$2 = interopRequireDefault.exports;
    Object.defineProperty(Settings, "__esModule", {
      value: true
    });
    var default_1$2 = Settings.default = void 0;
    var _createSvgIcon$2 = _interopRequireDefault$2(createSvgIcon);
    var _jsxRuntime$2 = jsxRuntime.exports;
    var _default$2 = (0, _createSvgIcon$2.default)( /*#__PURE__*/(0, _jsxRuntime$2.jsx)("path", {
      d: "M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z"
    }), 'Settings');
    default_1$2 = Settings.default = _default$2;

    var AspectRatio = {};

    var _interopRequireDefault$1 = interopRequireDefault.exports;
    Object.defineProperty(AspectRatio, "__esModule", {
      value: true
    });
    var default_1$1 = AspectRatio.default = void 0;
    var _createSvgIcon$1 = _interopRequireDefault$1(createSvgIcon);
    var _jsxRuntime$1 = jsxRuntime.exports;
    var _default$1 = (0, _createSvgIcon$1.default)( /*#__PURE__*/(0, _jsxRuntime$1.jsx)("path", {
      d: "M19 12h-2v3h-3v2h5v-5zM7 9h3V7H5v5h2V9zm14-6H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16.01H3V4.99h18v14.02z"
    }), 'AspectRatio');
    default_1$1 = AspectRatio.default = _default$1;

    var AccountTree = {};

    var _interopRequireDefault = interopRequireDefault.exports;
    Object.defineProperty(AccountTree, "__esModule", {
      value: true
    });
    var default_1 = AccountTree.default = void 0;
    var _createSvgIcon = _interopRequireDefault(createSvgIcon);
    var _jsxRuntime = jsxRuntime.exports;
    var _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
      d: "M22 11V3h-7v3H9V3H2v8h7V8h2v10h4v3h7v-8h-7v3h-2V8h2v3z"
    }), 'AccountTree');
    default_1 = AccountTree.default = _default;

    /*
     this is needed to avoid bix bundle size and slow startup with
     'import * as Muicon from "@mui/icons-material"'
     */
    function getIcon(name) {
        switch (name) {
            case 'DynamicForm':
                return React__default["default"].createElement(default_1$8, null);
            case 'Assessment':
                return React__default["default"].createElement(default_1$7, null);
            case 'Category':
                return React__default["default"].createElement(default_1$6, null);
            case 'Score':
                return React__default["default"].createElement(default_1$5, null);
            case 'Insights':
                return React__default["default"].createElement(default_1$4, null);
            case 'ViewCarousel':
                return React__default["default"].createElement(default_1$3, null);
            case 'AspectRatio':
                return React__default["default"].createElement(default_1$1, null);
            case 'AccountTree':
                return React__default["default"].createElement(default_1, null);
            default:
                return React__default["default"].createElement(default_1$2, null);
        }
    }
    function TabPanel(props) {
        var children = props.children, value = props.value, index = props.index, other = __rest(props, ["children", "value", "index"]);
        return (React__default["default"].createElement("div", __assign({ role: "tabpanel", hidden: value !== index, id: "simple-tabpanel-".concat(index), "aria-labelledby": "simple-tab-".concat(index) }, other), value === index && children));
    }
    function a11yProps(index) {
        return {
            id: "simple-tab-".concat(index),
            'aria-controls': "simple-tabpanel-".concat(index),
        };
    }
    var createCombinatorRenderInfos = function (combinatorSubSchemas, rootSchema, uiSchema) {
        var sortTemplate = uiSchema.elements.map(function (element) { return element.scope.replace('#/properties/', ''); });
        combinatorSubSchemas.sort(function (a, b) {
            return sortTemplate.indexOf(a[0]) - sortTemplate.indexOf(b[0]);
        });
        return combinatorSubSchemas.map(function (subSchema) {
            var schema = subSchema[1].$ref ? Resolve.schema(rootSchema, subSchema[1].$ref, rootSchema) : subSchema[1];
            return {
                schema: schema,
                label: schema.title,
                propertyKey: subSchema[0],
                uiSchema: uiSchema.elements.find(function (element) { return element.scope == "#/properties/" + subSchema[0]; })
            };
        });
    };
    var TabsLayoutRenderer = function (props) {
        var rootSchema = props.rootSchema, schema = props.schema; props.path; var visible = props.visible, uischema = props.uischema;
        var renderInfos = createCombinatorRenderInfos(Object.entries(schema.properties), rootSchema, uischema);
        var _a = React__default["default"].useState(0), value = _a[0], setValue = _a[1];
        var handleChange = function (event, newValue) {
            setValue(newValue);
        };
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            React__default["default"].createElement(Tabs$1, { value: value, onChange: handleChange, "aria-label": "Root configuration", variant: "scrollable", scrollButtons: "auto" }, renderInfos.map(function (oneOfRenderInfo, index) {
                var _a;
                return React__default["default"].createElement(Tab$1, __assign({ key: oneOfRenderInfo.label, label: oneOfRenderInfo.label }, a11yProps(index), { icon: getIcon((_a = oneOfRenderInfo.uiSchema) === null || _a === void 0 ? void 0 : _a.icon), iconPosition: 'top', title: oneOfRenderInfo.schema.description }));
            })),
            renderInfos.map(function (renderInfo, index) {
                var _a;
                return React__default["default"].createElement(TabPanel, { key: index, index: index, value: value },
                    React__default["default"].createElement(Typography$1, { style: { marginBottom: 0 }, variant: "h4", gutterBottom: true }, renderInfo.label),
                    React__default["default"].createElement(Typography$1, { style: { marginBottom: '1em' }, variant: "subtitle1", gutterBottom: true }, renderInfo.schema.description),
                    React__default["default"].createElement(MaterialLayoutRenderer, __assign({}, props, { visible: visible, elements: [
                            __assign(__assign({}, (_a = renderInfo.uiSchema) !== null && _a !== void 0 ? _a : {}), { "type": "Control", "scope": "#/properties/" + renderInfo.propertyKey })
                        ] })));
            })));
    };
    var TabsLayoutTester = rankWith(1000, uiTypeIs('TabsLayout'));
    var TabsLayoutRenderer$1 = withJsonFormsControlProps(withJsonFormsLayoutProps(TabsLayoutRenderer));

    var isLayout = function (uischema) {
        return uischema.hasOwnProperty('elements');
    };
    var CombinatorProperties = /** @class */ (function (_super) {
        __extends(CombinatorProperties, _super);
        function CombinatorProperties() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CombinatorProperties.prototype.render = function () {
            var _a = this.props, schema = _a.schema, combinatorKeyword = _a.combinatorKeyword, path = _a.path;
            var otherProps = omit_1(schema, combinatorKeyword);
            var foundUISchema = Generate.uiSchema(otherProps, 'VerticalLayout');
            var isLayoutWithElements = false;
            if (foundUISchema !== null && isLayout(foundUISchema)) {
                isLayoutWithElements = foundUISchema.elements.length > 0;
            }
            if (isLayoutWithElements) {
                return (React__default["default"].createElement(JsonFormsDispatch, { schema: otherProps, path: path, uischema: foundUISchema }));
            }
            return null;
        };
        return CombinatorProperties;
    }(React__default["default"].Component));

    /*
      The MIT License
      
      Copyright (c) 2017-2019 EclipseSource Munich
      https://github.com/eclipsesource/jsonforms
      
      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:
      
      The above copyright notice and this permission notice shall be included in
      all copies or substantial portions of the Software.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
      THE SOFTWARE.
    */
    var MaterialOneOfRenderer = function (_a) {
        var handleChange = _a.handleChange, schema = _a.schema, path = _a.path, renderers = _a.renderers, cells = _a.cells, rootSchema = _a.rootSchema, id = _a.id, visible = _a.visible, indexOfFittingSchema = _a.indexOfFittingSchema, uischema = _a.uischema, uischemas = _a.uischemas, data = _a.data;
        var _b = React.useState(false), open = _b[0], setOpen = _b[1];
        var _c = React.useState(indexOfFittingSchema || 0), selectedIndex = _c[0], setSelectedIndex = _c[1];
        React.useEffect(function () {
            if (!indexOfFittingSchema) {
                return;
            }
            setSelectedIndex(indexOfFittingSchema);
        });
        var _d = React.useState(0), newSelectedIndex = _d[0], setNewSelectedIndex = _d[1];
        var handleClose = React.useCallback(function () { return setOpen(false); }, [setOpen]);
        var cancel = React.useCallback(function () {
            setOpen(false);
        }, [setOpen]);
        var oneOfRenderInfos = createCombinatorRenderInfos$1(schema.oneOf, rootSchema, 'oneOf', uischema, path, uischemas);
        var openNewTab = function (newIndex) {
            var localSchema = oneOfRenderInfos[newIndex].schema;
            var value = {};
            if (localSchema.type == 'object') {
                value = Object.fromEntries(Object.entries(localSchema.properties)
                    .map(function (_a) {
                    var key = _a[0], property = _a[1];
                    return [key, property.default];
                })
                    .filter(function (property) { return property[1]; }));
            }
            else {
                value = createDefaultValue(localSchema);
            }
            handleChange(path, value);
            setSelectedIndex(newIndex);
        };
        var confirm = React.useCallback(function () {
            openNewTab(newSelectedIndex);
            setOpen(false);
        }, [handleChange, createDefaultValue, newSelectedIndex]);
        var handleTabChange = React.useCallback(function (_event, newOneOfIndex) {
            setNewSelectedIndex(newOneOfIndex);
            if (isEmpty_1(data)) {
                openNewTab(newOneOfIndex);
            }
            else {
                setOpen(true);
            }
        }, [setOpen, setSelectedIndex, data]);
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(CombinatorProperties, { schema: schema, combinatorKeyword: 'oneOf', path: path }),
            React__default["default"].createElement(Tabs$1, { value: selectedIndex, onChange: handleTabChange }, oneOfRenderInfos.map(function (oneOfRenderInfo) { return React__default["default"].createElement(Tab$1, { key: oneOfRenderInfo.label, label: oneOfRenderInfo.label }); })),
            oneOfRenderInfos.map(function (oneOfRenderInfo, oneOfIndex) {
                return (selectedIndex === oneOfIndex && (React__default["default"].createElement(JsonFormsDispatch, { key: oneOfIndex, schema: oneOfRenderInfo.schema, uischema: oneOfRenderInfo.uischema, path: path, renderers: renderers, cells: cells })));
            }),
            React__default["default"].createElement(Dialog$1, { open: open, onClose: handleClose, "aria-labelledby": 'alert-dialog-title', "aria-describedby": 'alert-dialog-description' },
                React__default["default"].createElement(DialogTitle$1, { id: 'alert-dialog-title' }, 'Clear form?'),
                React__default["default"].createElement(DialogContent$1, null,
                    React__default["default"].createElement(DialogContentText$1, { id: 'alert-dialog-description' }, "Your data will be cleared if you navigate away from this tab. Do you want to proceed?")),
                React__default["default"].createElement(DialogActions$1, null,
                    React__default["default"].createElement(Button$1, { onClick: cancel, color: 'primary' }, "No"),
                    React__default["default"].createElement(Button$1, { onClick: confirm, color: 'primary', autoFocus: true, id: "oneOf-".concat(id, "-confirm-yes") }, "Yes")))));
    };
    var materialOneOfControlTester = rankWith(30, isOneOfControl);
    var MaterialOneOfRenderer$1 = withJsonFormsOneOfProps(MaterialOneOfRenderer);

    /*
      The MIT License

      Copyright (c) 2017-2019 EclipseSource Munich
      https://github.com/eclipsesource/jsonforms

      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:

      The above copyright notice and this permission notice shall be included in
      all copies or substantial portions of the Software.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
      THE SOFTWARE.
    */
    var StyledBadge = styled$1(Badge$1)(function (_a) {
        var theme = _a.theme;
        return ({
            color: theme.palette.error.main
        });
    });
    var ValidationIcon = function (_a) {
        var errorMessages = _a.errorMessages, id = _a.id;
        return (React__default["default"].createElement(Tooltip$1, { id: id, title: errorMessages },
            React__default["default"].createElement(StyledBadge, { badgeContent: errorMessages.split('\n').length },
                React__default["default"].createElement(default_1$b, { color: 'inherit' }))));
    };

    var ArrayLayoutToolbar = React__default["default"].memo(function (_a) {
        var label = _a.label, errors = _a.errors, addItem = _a.addItem, path = _a.path, createDefault = _a.createDefault;
        return (React__default["default"].createElement(Toolbar$1, { disableGutters: true },
            React__default["default"].createElement(Grid$1, { container: true, alignItems: 'center', justifyContent: 'space-between' },
                React__default["default"].createElement(Grid$1, { item: true },
                    React__default["default"].createElement(Typography$1, { variant: 'h6' }, label)),
                errors.length !== 0 &&
                    React__default["default"].createElement(Grid$1, { item: true },
                        React__default["default"].createElement(ValidationIcon, { id: 'tooltip-validation', errorMessages: errors })),
                React__default["default"].createElement(Grid$1, { item: true },
                    React__default["default"].createElement(Grid$1, { container: true },
                        React__default["default"].createElement(Grid$1, { item: true },
                            React__default["default"].createElement(Tooltip$1, { id: 'tooltip-add', title: "Add to ".concat(label), placement: 'bottom' },
                                React__default["default"].createElement(IconButton$1, { "aria-label": "Add to ".concat(label), onClick: addItem(path, createDefault()), size: 'large' },
                                    React__default["default"].createElement(default_1$c, null)))))))));
    });

    var iconStyle = { float: 'right' };
    var ExpandPanelRendererComponent = function (props) {
        var labelHtmlId = React.useState(createId('expand-panel'))[0];
        React.useEffect(function () {
            return function () {
                removeId(labelHtmlId);
            };
        }, [labelHtmlId]);
        var enabled = props.enabled, childLabel = props.childLabel, childPath = props.childPath, index = props.index, expanded = props.expanded, moveDown = props.moveDown, moveUp = props.moveUp, enableMoveDown = props.enableMoveDown, enableMoveUp = props.enableMoveUp, handleExpansion = props.handleExpansion, removeItems = props.removeItems, path = props.path, rootSchema = props.rootSchema, schema = props.schema, uischema = props.uischema, uischemas = props.uischemas, renderers = props.renderers, cells = props.cells, config = props.config;
        var foundUISchema = React.useMemo(function () {
            return findUISchema(uischemas, schema, uischema.scope, path, undefined, uischema, rootSchema);
        }, [uischemas, schema, uischema.scope, path, uischema, rootSchema]);
        var appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        var showSortButtons = appliedUiSchemaOptions.showSortButtons || appliedUiSchemaOptions.showArrayLayoutSortButtons;
        return (React__default["default"].createElement(Accordion$1, { "aria-labelledby": labelHtmlId, expanded: expanded, onChange: handleExpansion(childPath) },
            React__default["default"].createElement(AccordionSummary$1, { expandIcon: React__default["default"].createElement(default_1$9, null) },
                React__default["default"].createElement(Grid$1, { container: true, alignItems: 'center' },
                    React__default["default"].createElement(Grid$1, { item: true, xs: 7, md: 9 },
                        React__default["default"].createElement(Grid$1, { container: true, alignItems: 'center' },
                            React__default["default"].createElement(Grid$1, { item: true, xs: 2, md: 1 },
                                React__default["default"].createElement(Avatar$1, { "aria-label": 'Index' }, index + 1)),
                            React__default["default"].createElement(Grid$1, { item: true, xs: 10, md: 11 },
                                React__default["default"].createElement("span", { id: labelHtmlId }, childLabel)))),
                    React__default["default"].createElement(Grid$1, { item: true, xs: 5, md: 3 },
                        React__default["default"].createElement(Grid$1, { container: true, justifyContent: 'flex-end' },
                            React__default["default"].createElement(Grid$1, { item: true },
                                React__default["default"].createElement(Grid$1, { container: true, direction: 'row', justifyContent: 'center', alignItems: 'center', wrap: "nowrap" },
                                    showSortButtons ? (React__default["default"].createElement(React.Fragment, null,
                                        React__default["default"].createElement(Grid$1, { item: true },
                                            React__default["default"].createElement(IconButton$1, { onClick: moveUp(path, index), style: iconStyle, disabled: !enableMoveUp, "aria-label": "Move up", size: 'large' },
                                                React__default["default"].createElement(default_1$d, null))),
                                        React__default["default"].createElement(Grid$1, { item: true },
                                            React__default["default"].createElement(IconButton$1, { onClick: moveDown(path, index), style: iconStyle, disabled: !enableMoveDown, "aria-label": "Move down", size: 'large' },
                                                React__default["default"].createElement(default_1$e, null))))) : (''),
                                    React__default["default"].createElement(Grid$1, { item: true },
                                        React__default["default"].createElement(IconButton$1, { onClick: removeItems(path, [index]), style: iconStyle, "aria-label": "Delete", size: 'large' },
                                            React__default["default"].createElement(default_1$f, null))))))))),
            React__default["default"].createElement(AccordionDetails$1, null,
                React__default["default"].createElement(JsonFormsDispatch, { enabled: enabled, schema: schema, uischema: foundUISchema, path: childPath, key: childPath, renderers: renderers, cells: cells }))));
    };
    var ExpandPanelRenderer = React__default["default"].memo(ExpandPanelRendererComponent);
    /**
     * Maps state to dispatch properties of an expand pandel control.
     *
     * @param dispatch the store's dispatch method
     * @returns {DispatchPropsOfArrayControl} dispatch props of an expand panel control
     */
    var ctxDispatchToExpandPanelProps = function (dispatch) { return ({
        removeItems: React.useCallback(function (path, toDelete) { return function (event) {
            event.stopPropagation();
            dispatch(update(path, function (array) {
                toDelete
                    .sort()
                    .reverse()
                    .forEach(function (s) { return array.splice(s, 1); });
                return array;
            }));
        }; }, [dispatch]),
        moveUp: React.useCallback(function (path, toMove) { return function (event) {
            event.stopPropagation();
            dispatch(update(path, function (array) {
                moveUp(array, toMove);
                return array;
            }));
        }; }, [dispatch]),
        moveDown: React.useCallback(function (path, toMove) { return function (event) {
            event.stopPropagation();
            dispatch(update(path, function (array) {
                moveDown(array, toMove);
                return array;
            }));
        }; }, [dispatch])
    }); };
    /**
     * Map state to control props.
     * @param state the JSON Forms state
     * @param ownProps any own props
     * @returns {StatePropsOfControl} state props for a control
     */
    var withContextToExpandPanelProps = function (Component) { return function (_a) {
        var ctx = _a.ctx, props = _a.props;
        var dispatchProps = ctxDispatchToExpandPanelProps(ctx.dispatch);
        var childLabelProp = props.childLabelProp, schema = props.schema, path = props.path, index = props.index, uischemas = props.uischemas, uischema = props.uischema;
        var childPath = compose$1(path, "".concat(index));
        var childData = Resolve.data(ctx.core.data, childPath);
        var getTitle = function (properties, childData) {
            var title;
            switch (true) {
                case (properties.categoryName !== undefined && properties.categoryName.type == 'string'):
                    title = childData.categoryName;
                    break;
                case (properties.headline !== undefined && properties.headline.type == 'string'):
                    title = childData.headline;
                    break;
                case (properties.title !== undefined && properties.title.type == 'string'):
                    title = childData.title;
                    break;
                case (properties.label !== undefined && properties.label.type == 'string'):
                    title = childData.label;
                    break;
                case (properties.name !== undefined && properties.name.type == 'string'):
                    title = childData.name;
                    break;
                case (properties.id !== undefined && properties.id.type == 'string'):
                    title = childData.id;
                    break;
            }
            return title !== null && title !== void 0 ? title : ' No title';
        };
        // console.group();
        // console.log('childData', childData);
        // console.log('schema', schema);
        // console.log('uischema', uischema);
        // console.groupEnd();
        var getDynamicChildLabel = function (schema, childData) {
            var _a;
            var label = '';
            if (schema.oneOf) {
                var subSchema = schema.oneOf.find(function (oneOf) { var _a; return (_a = oneOf.properties.type) === null || _a === void 0 ? void 0 : _a.enum.includes(childData.type); });
                if ((_a = uischema.oneOfLabels) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(childData.type)) {
                    label = "[".concat(uischema.oneOfLabels[childData.type], "] - ");
                }
                else {
                    label = "[".concat(subSchema.title, "] - ");
                }
                var properties = subSchema === null || subSchema === void 0 ? void 0 : subSchema.properties;
                if (properties == undefined) {
                    properties = schema.oneOf[0];
                }
                label += getTitle(properties, childData);
            }
            else if (schema.anyOf) {
                label += getTitle(schema.anyOf[0].properties, childData);
            }
            else {
                label += getTitle(schema.properties, childData);
            }
            return label;
        };
        var childLabel = '';
        try {
            childLabel = childLabelProp
                ? get_1(childData, childLabelProp, '')
                : getDynamicChildLabel(schema, childData);
        }
        catch (e) {
            console.log('error getChildLabel', e);
        }
        // console.log('childLabel', childLabel);
        return (React__default["default"].createElement(Component, __assign({}, props, dispatchProps, { childLabel: childLabel, childPath: childPath, uischemas: uischemas })));
    }; };
    var withJsonFormsExpandPanelProps = function (Component) {
        return withJsonFormsContext(withContextToExpandPanelProps(Component));
    };
    var ExpandPanelRenderer$1 = withJsonFormsExpandPanelProps(ExpandPanelRenderer);

    /*
      The MIT License

      Copyright (c) 2017-2019 EclipseSource Munich
      https://github.com/eclipsesource/jsonforms

      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:

      The above copyright notice and this permission notice shall be included in
      all copies or substantial portions of the Software.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
      THE SOFTWARE.
    */
    var MaterialArrayLayoutComponent = function (props) {
        var _a = React.useState(false), expanded = _a[0], setExpanded = _a[1];
        var innerCreateDefaultValue = React.useCallback(function () { return createDefaultValue(props.schema); }, [props.schema]);
        var handleChange = React.useCallback(function (panel) { return function (_event, expandedPanel) {
            setExpanded(expandedPanel ? panel : false);
        }; }, []);
        var isExpanded = function (index) {
            return expanded === compose$1(props.path, "".concat(index));
        };
        var enabled = props.enabled, data = props.data, path = props.path, schema = props.schema, uischema = props.uischema, errors = props.errors, addItem = props.addItem, renderers = props.renderers, cells = props.cells, label = props.label, required = props.required, rootSchema = props.rootSchema, config = props.config, uischemas = props.uischemas;
        var appliedUiSchemaOptions = merge_1({}, config, props.uischema.options);
        return (React__default["default"].createElement("div", null,
            React__default["default"].createElement(ArrayLayoutToolbar, { label: computeLabel(label, required, appliedUiSchemaOptions.hideRequiredAsterisk), errors: errors, path: path, addItem: addItem, createDefault: innerCreateDefaultValue }),
            React__default["default"].createElement("div", null, data > 0 ? (map_1(range_1(data), function (index) {
                return (React__default["default"].createElement(ExpandPanelRenderer$1, { enabled: enabled, index: index, expanded: isExpanded(index), schema: schema, path: path, handleExpansion: handleChange, uischema: uischema, renderers: renderers, cells: cells, key: index, rootSchema: rootSchema, enableMoveUp: index != 0, enableMoveDown: index < data - 1, config: config, childLabelProp: appliedUiSchemaOptions.elementLabelProp, uischemas: uischemas }));
            })) : (React__default["default"].createElement("p", null, "No data")))));
    };
    var MaterialArrayLayout = React__default["default"].memo(MaterialArrayLayoutComponent);

    //import { MaterialArrayLayout } from "@jsonforms/material-renderers";
    //import { MaterialArrayLayout } from '@jsonforms/material-renderers/src/layouts/MaterialArrayLayout';
    var MaterialArrayLayoutRenderer = function (_a) {
        var visible = _a.visible, addItem = _a.addItem, props = __rest(_a, ["visible", "addItem"]);
        var addItemCb = React.useCallback(function (p, value) { return addItem(p, value); }, [
            addItem
        ]);
        // console.log('props', props.uischema);
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(MaterialArrayLayout, __assign({ visible: visible, addItem: addItemCb }, props))));
    };
    var materialArrayLayoutTester = rankWith(40, isObjectArrayWithNesting);
    var MaterialArrayLayoutRenderer$1 = withJsonFormsArrayLayoutProps(MaterialArrayLayoutRenderer);

    var groupTester = rankWith(10, uiTypeIs('Group'));
    var style = { marginBottom: '10px' };
    var GroupComponent = React__default["default"].memo(function (_a) {
        var _b, _c;
        var visible = _a.visible, enabled = _a.enabled, uischema = _a.uischema, label = _a.label, props = __rest(_a, ["visible", "enabled", "uischema", "label"]);
        var groupLayout = uischema;
        // console.group('Group');
        // console.log('schema', props.schema);
        // console.log('uischema', uischema);
        //
        // console.log('description', groupLayout.description);
        // console.groupEnd();
        var description;
        if (groupLayout.label == undefined)
            label = (_b = props.schema.title) !== null && _b !== void 0 ? _b : '';
        if (groupLayout.description == undefined)
            description = (_c = props.schema.description) !== null && _c !== void 0 ? _c : '';
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(Card$1, { style: style },
                !isEmpty_1(label) && (React__default["default"].createElement(CardHeader$1, { title: label, subheader: description })),
                React__default["default"].createElement(CardContent$1, null,
                    React__default["default"].createElement(MaterialLayoutRenderer, __assign({}, props, { visible: visible, enabled: enabled, elements: groupLayout.elements }))))));
    });
    var MaterializedGroupLayoutRenderer = function (_a) {
        var uischema = _a.uischema, schema = _a.schema, path = _a.path, visible = _a.visible, enabled = _a.enabled, renderers = _a.renderers, cells = _a.cells, direction = _a.direction, label = _a.label;
        var groupLayout = uischema;
        return (React__default["default"].createElement(GroupComponent, { elements: groupLayout.elements, schema: schema, path: path, direction: direction, visible: visible, enabled: enabled, uischema: uischema, renderers: renderers, cells: cells, label: label }));
    };
    var MaterializedGroupLayoutRenderer$1 = withJsonFormsLayoutProps(MaterializedGroupLayoutRenderer);
    var materialGroupTester = withIncreasedRank(1, groupTester);

    var MuiAutocomplete = function (props) {
        var _a;
        var description = props.description, errors = props.errors, visible = props.visible, required = props.required, label = props.label, data = props.data, className = props.className, id = props.id, enabled = props.enabled, uischema = props.uischema, path = props.path, handleChange = props.handleChange, options = props.options, config = props.config, getOptionLabel = props.getOptionLabel, renderOption = props.renderOption, filterOptions = props.filterOptions, isValid = props.isValid;
        var appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        var _b = React__default["default"].useState(data !== null && data !== void 0 ? data : ''), inputValue = _b[0], setInputValue = _b[1];
        var _c = useFocus(), focused = _c[0], onFocus = _c[1], onBlur = _c[2];
        var findOption = (_a = options.find(function (o) { return o.value === data; })) !== null && _a !== void 0 ? _a : null;
        var showDescription = !isDescriptionHidden(visible, description, focused, appliedUiSchemaOptions.showUnfocusedDescription);
        var firstFormHelperText = showDescription
            ? description
            : !isValid
                ? errors
                : null;
        var secondFormHelperText = showDescription && !isValid ? errors : null;
        // todo: remove ts-ignore / resolve types
        return (React__default["default"].createElement(Hidden, { xsUp: !visible },
            React__default["default"].createElement(Autocomplete$1, { className: className, id: id, disabled: !enabled, 
                // @ts-ignore
                value: findOption, 
                // @ts-ignore
                onChange: function (_event, newValue) {
                    handleChange(path, newValue === null || newValue === void 0 ? void 0 : newValue.value);
                }, inputValue: inputValue, onInputChange: function (_event, newInputValue) {
                    setInputValue(newInputValue);
                }, autoHighlight: true, autoSelect: true, autoComplete: true, fullWidth: true, options: options, getOptionLabel: getOptionLabel || (function (option) { return option === null || option === void 0 ? void 0 : option.label; }), freeSolo: false, renderInput: function (params) {
                    return (React__default["default"].createElement(TextField$1, __assign({ label: label, variant: 'standard', type: 'text', inputProps: params.inputProps, inputRef: params.InputProps.ref, autoFocus: appliedUiSchemaOptions.focus, disabled: !enabled }, params, { id: id + '-input', required: required && !appliedUiSchemaOptions.hideRequiredAsterisk, error: !isValid, fullWidth: !appliedUiSchemaOptions.trim, InputLabelProps: data ? { shrink: true } : undefined, onFocus: onFocus, onBlur: onBlur, focused: focused })));
                }, renderOption: renderOption, filterOptions: filterOptions }),
            React__default["default"].createElement(FormHelperText$1, { error: !isValid && !showDescription }, firstFormHelperText),
            React__default["default"].createElement(FormHelperText$1, { error: !isValid }, secondFormHelperText)));
    };

    var MaterialEnumControl = function (props) {
        var config = props.config, uischema = props.uischema, errors = props.errors;
        merge_1({}, config, uischema.options);
        var isValid = errors.length === 0;
        // console.log('props', props);
        React.useEffect(function () {
            props.handleChange(props.path, props.options[0].value);
        }, []);
        if (props.options.length == 1) {
            return React__default["default"].createElement(React__default["default"].Fragment, null);
        }
        return (React__default["default"].createElement(MuiAutocomplete, __assign({}, props, { isValid: isValid })));
    };
    var materialEnumControlTester = rankWith(20, isEnumControl);
    // HOC order can be reversed with https://github.com/eclipsesource/jsonforms/issues/1987
    var MaterialEnumControl$1 = withJsonFormsEnumProps(withTranslateProps(React__default["default"].memo(MaterialEnumControl)), false);

    /*
      The MIT License

      Copyright (c) 2017-2019 EclipseSource Munich
      https://github.com/eclipsesource/jsonforms

      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:

      The above copyright notice and this permission notice shall be included in
      all copies or substantial portions of the Software.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
      THE SOFTWARE.
    */
    var MuiMultiSelect = React__default["default"].memo(function (props) {
        var data = props.data, className = props.className, id = props.id, enabled = props.enabled, schema = props.schema, uischema = props.uischema, path = props.path, handleChange = props.handleChange, options = props.options, config = props.config, t = props.t;
        var appliedUiSchemaOptions = merge_1({}, config, uischema.options);
        React.useMemo(function () { return t('enum.none', i18nDefaults['enum.none'], {
            schema: schema,
            uischema: uischema,
            path: path
        }); }, [t, schema, uischema, path]);
        return (React__default["default"].createElement(Select$1, { className: className, id: id, disabled: !enabled, multiple: true, autoFocus: appliedUiSchemaOptions.focus, value: data !== undefined ? data : [], onChange: function (ev) { return handleChange(path, ev.target.value || []); }, fullWidth: true, variant: 'standard' }, options.map(function (optionValue) { return (React__default["default"].createElement(MenuItem$1, { value: optionValue.value, key: optionValue.value }, optionValue.label)); })));
    });

    var MultiSelectControl = function (props) {
        var props_new = __assign({ options: props.schema.items.anyOf.map(function (value) { return ({
                label: value.enum.at(0),
                value: value.enum.at(0)
            }); }) }, props);
        return React__default["default"].createElement(MaterialInputControl, __assign({}, props_new, { input: MuiMultiSelect }));
    };
    var MultiSelectControlTester = rankWith(100, optionIs('multiSelect', true));
    var MultiSelectControl$1 = withJsonFormsControlProps(withTranslateProps(MultiSelectControl));

    var SelectControl = function (props) {
        var _a, _b;
        var props_new = __assign({ options: (_b = (_a = props.schema.anyOf) === null || _a === void 0 ? void 0 : _a.map(function (value) { return ({
                label: value.enum.at(0),
                value: value.enum.at(0)
            }); })) !== null && _b !== void 0 ? _b : [] }, props);
        return React__default["default"].createElement(MaterialInputControl, __assign({}, props_new, { input: MuiSelect }));
    };
    var SelectControlTester = rankWith(100, optionIs('select', true));
    var SelectControl$1 = withJsonFormsControlProps(withTranslateProps(SelectControl));

    var renderers = __spreadArray(__spreadArray([], materialRenderers, true), [
        // register custom renderers
        {
            tester: SelectS3FileControlTester,
            renderer: SelectS3FileControl$1,
        },
        {
            tester: TabsLayoutTester,
            renderer: TabsLayoutRenderer$1,
        },
        // {
        //     tester: SelectLinearIconsControlTester,
        //     renderer: SelectLinearIconsControl,
        // },
        {
            tester: materialArrayLayoutTester,
            renderer: MaterialArrayLayoutRenderer$1,
        },
        {
            tester: materialGroupTester,
            renderer: MaterializedGroupLayoutRenderer$1,
        },
        {
            tester: materialOneOfControlTester,
            renderer: MaterialOneOfRenderer$1,
        },
        {
            tester: materialEnumControlTester,
            renderer: MaterialEnumControl$1,
        },
        {
            tester: MultiSelectControlTester,
            renderer: MultiSelectControl$1,
        },
        {
            tester: SelectControlTester,
            renderer: SelectControl$1,
        },
    ], false);
    var theme = createTheme({
        components: {
            MuiTab: {
                styleOverrides: {
                    root: {
                        textTransform: 'initial',
                        flexShrink: 1,
                        // wordBreak: "break-word"
                    }
                }
            },
            MuiTabs: {
                styleOverrides: {
                    root: {
                        marginBottom: '0.8em',
                        '.MuiAppBar-root > &': {
                            marginBottom: '0',
                        }
                    },
                    indicator: {
                        '.MuiAppBar-root &': {
                            backgroundColor: "#666"
                        }
                    }
                }
            },
            MuiAppBar: {
                styleOverrides: {
                    root: {
                        backgroundColor: '#dfdfdf',
                        marginBottom: '-7px',
                        color: '#666',
                        boxShadow: 'none'
                    },
                },
            },
            MuiFormControl: {
                styleOverrides: {
                    root: {
                        margin: '0.8em 0',
                    },
                }
            },
            MuiCard: {
                styleOverrides: {
                    root: {
                        margin: '1.8em 0',
                        '.MuiGrid-root &': {
                            margin: "0"
                        }
                    },
                }
            },
            MuiCardHeader: {
                styleOverrides: {
                    root: {
                    // backgroundColor: '#283273'
                    }
                }
            },
            MuiTableCell: {
                styleOverrides: {
                    root: {
                        wordBreak: 'break-word',
                        minWidth: '65px'
                    }
                }
            },
            MuiInput: {
                styleOverrides: {
                    root: {
                        maxWidth: '400px',
                        '&.MuiInputBase-multiline': {
                            maxWidth: '100%',
                        }
                    }
                }
            },
            MuiInputLabel: {
                defaultProps: {
                    shrink: true,
                    // variant: 'filled'
                }
            },
            MuiPaper: {
                defaultProps: {
                    elevation: 2
                }
            },
            MuiAccordion: {
                defaultProps: {
                    disableGutters: true
                },
            },
            MuiAccordionSummary: {
                defaultProps: {
                    sx: {
                        backgroundColor: '#f5f5f5'
                    }
                },
                // styleOverrides: {
                //     root: {
                //         "&.Mui-expanded": {
                //             backgroundColor: "#ddd"
                //         }
                //     }
                // }
            }
        },
    });
    var JsonForm = function (props) {
        var handleDefaultsAjv = createAjv({ useDefaults: true, verbose: true, });
        return React__default["default"].createElement(ThemeProvider, { theme: theme },
            React__default["default"].createElement(CssBaseline, null),
            React__default["default"].createElement(JsonForms, { config: props.config, schema: props.schema, uischema: props.uischema, data: props.data, renderers: renderers, cells: materialCells, onChange: props.onChange, ajv: handleDefaultsAjv }));
    };

    exports.JsonForm = JsonForm;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

})({}, React, ReactDOM);
//# sourceMappingURL=lib.js.map
